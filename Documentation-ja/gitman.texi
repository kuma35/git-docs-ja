\input texinfo
@setfilename gitman.info
@documentencoding UTF-8
@dircategory Development
@direntry
* Git Man Pages: (gitman).  Manual pages for Git revision control system
@end direntry
@node Top,,, (dir)
@top Git Manual Pages
@documentlanguage en
@menu
* git-add::
* git-am::
* git-annotate::
* git-apply::
* git-archimport::
* git-archive::
* git-bisect::
* git-blame::
* git-branch::
* git-bugreport::
* git-bundle::
* git-cat-file::
* git-check-attr::
* git-check-ignore::
* git-check-mailmap::
* git-check-ref-format::
* git-checkout-index::
* git-checkout::
* git-cherry-pick::
* git-cherry::
* git-citool::
* git-clean::
* git-clone::
* git-column::
* git-commit-graph::
* git-commit-tree::
* git-commit::
* git-config::
* git-count-objects::
* git-credential-cache--daemon::
* git-credential-cache::
* git-credential-store::
* git-credential::
* git-cvsexportcommit::
* git-cvsimport::
* git-cvsserver::
* git-daemon::
* git-describe::
* git-diff-files::
* git-diff-index::
* git-diff-tree::
* git-diff::
* git-difftool::
* git-fast-export::
* git-fast-import::
* git-fetch-pack::
* git-fetch::
* git-filter-branch::
* git-fmt-merge-msg::
* git-for-each-ref::
* git-for-each-repo::
* git-format-patch::
* git-fsck-objects::
* git-fsck::
* git-gc::
* git-get-tar-commit-id::
* git-grep::
* git-gui::
* git-hash-object::
* git-help::
* git-http-backend::
* git-http-fetch::
* git-http-push::
* git-imap-send::
* git-index-pack::
* git-init-db::
* git-init::
* git-instaweb::
* git-interpret-trailers::
* git-log::
* git-ls-files::
* git-ls-remote::
* git-ls-tree::
* git-mailinfo::
* git-mailsplit::
* git-maintenance::
* git-merge-base::
* git-merge-file::
* git-merge-index::
* git-merge-one-file::
* git-merge-tree::
* git-merge::
* git-mergetool--lib::
* git-mergetool::
* git-mktag::
* git-mktree::
* git-multi-pack-index::
* git-mv::
* git-name-rev::
* git-notes::
* git-p4::
* git-pack-objects::
* git-pack-redundant::
* git-pack-refs::
* git-patch-id::
* git-prune-packed::
* git-prune::
* git-pull::
* git-push::
* git-quiltimport::
* git-range-diff::
* git-read-tree::
* git-rebase::
* git-receive-pack::
* git-reflog::
* git-remote-ext::
* git-remote-fd::
* git-remote::
* git-repack::
* git-replace::
* git-request-pull::
* git-rerere::
* git-reset::
* git-restore::
* git-rev-list::
* git-rev-parse::
* git-revert::
* git-rm::
* git-send-email::
* git-send-pack::
* git-sh-i18n--envsubst::
* git-sh-i18n::
* git-sh-setup::
* git-shell::
* git-shortlog::
* git-show-branch::
* git-show-index::
* git-show-ref::
* git-show::
* git-sparse-checkout::
* git-stage::
* git-stash::
* git-status::
* git-stripspace::
* git-submodule::
* git-svn::
* git-switch::
* git-symbolic-ref::
* git-tag::
* git-unpack-file::
* git-unpack-objects::
* git-update-index::
* git-update-ref::
* git-update-server-info::
* git-upload-archive::
* git-upload-pack::
* git-var::
* git-verify-commit::
* git-verify-pack::
* git-verify-tag::
* git-version::
* git-web--browse::
* git-whatchanged::
* git-worktree::
* git-write-tree::
* git::
* gitattributes::
* gitcli::
* gitcore-tutorial::
* gitcredentials::
* gitcvs-migration::
* gitdiffcore::
* giteveryday::
* gitfaq::
* gitglossary::
* githooks::
* gitignore::
* gitk::
* gitmailmap::
* gitmodules::
* gitnamespaces::
* gitremote-helpers::
* gitrepository-layout::
* gitrevisions::
* gitsubmodules::
* gittutorial-2::
* gittutorial::
* gitweb.conf::
* gitweb::
* gitworkflows::
@end menu
@node git-add,,,Top
@chapheading Name

git-add — Add file contents to the index

@noindent

@chapheading Synopsis

@display
git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]
          [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]
          [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing] [--renormalize]
          [--chmod=(+|-)x] [--pathspec-from-file=<file> [--pathspec-file-nul]]
          [--] [<pathspec>…]
@end display


@noindent

@chapheading DESCRIPTION

This command updates the index using the current content found in the
working tree, to prepare the content staged for the next commit.  It
typically adds the current content of existing paths as a whole, but with
some options it can also be used to add content with only part of the
changes made to the working tree files applied, or remove paths that do not
exist in the working tree anymore.

The "index" holds a snapshot of the content of the working tree, and it is
this snapshot that is taken as the contents of the next commit.  Thus after
making any changes to the working tree, and before running the commit
command, you must use the @samp{add} command to add any new or modified files to
the index.

This command can be performed multiple times before a commit.  It only adds
the content of the specified file(s) at the time the add command is run; if
you want subsequent changes included in the next commit, then you must run
@samp{git add} again to add the new content to the index.

The @samp{git status} command can be used to obtain a summary of which files have
changes that are staged for the next commit.

The @samp{git add} command will not add ignored files by default.  If any ignored
files were explicitly specified on the command line, @samp{git add} will fail
with a list of ignored files.  Ignored files reached by directory recursion
or filename globbing performed by Git (quote your globs before the shell)
will be silently ignored.  The @emph{git add} command can be used to add ignored
files with the @samp{-f} (force) option.

Please see git-commit(1) for alternative ways to add content to a
commit.

@noindent

@chapheading OPTIONS

@table @asis

@item  <pathspec>… 
Files to add content from.  Fileglobs (e.g. @samp{*.c}) can be given to add all
matching files.  Also a leading directory name (e.g. @samp{dir} to add
@samp{dir/file1} and @samp{dir/file2}) can be given to update the index to match the
current state of the directory as a whole (e.g.  specifying @samp{dir} will
record not just a file @samp{dir/file1} modified in the working tree, a file
@samp{dir/file2} added to the working tree, but also a file @samp{dir/file3} removed
from the working tree). Note that older versions of Git used to ignore
removed files; use @samp{--no-all} option if you want to add modified or new
files but ignore removed ones.

For more details about the <pathspec> syntax, see the @emph{pathspec} entry in
gitglossary(7).

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
Don’t actually add the file(s), just show if they exist and/or will be
ignored.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Be verbose.

@item  @samp{-f} 
@itemx  @samp{--force} 
Allow adding otherwise ignored files.

@item  @samp{-i} 
@itemx  @samp{--interactive} 
Add modified contents in the working tree interactively to the
index. Optional path arguments may be supplied to limit operation to a
subset of the working tree. See “Interactive mode” for details.

@item  @samp{-p} 
@itemx  @samp{--patch} 
Interactively choose hunks of patch between the index and the work tree and
add them to the index. This gives the user a chance to review the difference
before adding modified contents to the index.

This effectively runs @samp{add --interactive}, but bypasses the initial command
menu and directly jumps to the @samp{patch} subcommand.  See “Interactive mode”
for details.

@item  @samp{-e} 
@itemx  @samp{--edit} 
Open the diff vs. the index in an editor and let the user edit it.  After
the editor was closed, adjust the hunk headers and apply the patch to the
index.

The intent of this option is to pick and choose lines of the patch to apply,
or even to modify the contents of lines to be staged. This can be quicker
and more flexible than using the interactive hunk selector.  However, it is
easy to confuse oneself and create a patch that does not apply to the
index. See EDITING PATCHES below.

@item  @samp{-u} 
@itemx  @samp{--update} 
Update the index just where it already has an entry matching <pathspec>.
This removes as well as modifies index entries to match the working tree,
but adds no new files.

If no <pathspec> is given when @samp{-u} option is used, all tracked files in the
entire working tree are updated (old versions of Git used to limit the
update to the current directory and its subdirectories).

@item  @samp{-A} 
@itemx  @samp{--all} 
@itemx  @samp{--no-ignore-removal} 
Update the index not only where the working tree has a file matching
<pathspec> but also where the index already has an entry. This adds,
modifies, and removes index entries to match the working tree.

If no <pathspec> is given when @samp{-A} option is used, all files in the entire
working tree are updated (old versions of Git used to limit the update to
the current directory and its subdirectories).

@item  @samp{--no-all} 
@itemx  @samp{--ignore-removal} 
Update the index by adding new files that are unknown to the index and files
modified in the working tree, but ignore files that have been removed from
the working tree.  This option is a no-op when no <pathspec> is used.

This option is primarily to help users who are used to older versions of
Git, whose "git add <pathspec>…" was a synonym for "git add --no-all
<pathspec>…", i.e. ignored removed files.

@item  @samp{-N} 
@itemx  @samp{--intent-to-add} 
Record only the fact that the path will be added later. An entry for the
path is placed in the index with no content. This is useful for, among other
things, showing the unstaged content of such files with @samp{git diff} and
committing them with @samp{git commit -a}.

@item  @samp{--refresh} 
Don’t add the file(s), but only refresh their stat()  information in the
index.

@item  @samp{--ignore-errors} 
If some files could not be added because of errors indexing them, do not
abort the operation, but continue adding the others. The command shall still
exit with non-zero status.  The configuration variable @samp{add.ignoreErrors}
can be set to true to make this the default behaviour.

@item  @samp{--ignore-missing} 
This option can only be used together with --dry-run. By using this option
the user can check if any of the given files would be ignored, no matter if
they are already present in the work tree or not.

@item  @samp{--no-warn-embedded-repo} 
By default, @samp{git add} will warn when adding an embedded repository to the
index without using @samp{git submodule add} to create an entry in
@samp{.gitmodules}. This option will suppress the warning (e.g., if you are
manually performing operations on submodules).

@item  @samp{--renormalize} 
Apply the "clean" process freshly to all tracked files to forcibly add them
again to the index.  This is useful after changing @samp{core.autocrlf}
configuration or the @samp{text} attribute in order to correct files added with
wrong CRLF/LF line endings.  This option implies @samp{-u}.

@item  @samp{--chmod=(+|-)x} 
Override the executable bit of the added files.  The executable bit is only
changed in the index, the files on disk are left unchanged.

@item  @samp{--pathspec-from-file=<file>} 
Pathspec is passed in @samp{<file>} instead of commandline args. If @samp{<file>} is
exactly @samp{-} then standard input is used. Pathspec elements are separated by
LF or CR/LF. Pathspec elements can be quoted as explained for the
configuration variable @samp{core.quotePath} (see git-config(1)). See
also @samp{--pathspec-file-nul} and global @samp{--literal-pathspecs}.

@item  @samp{--pathspec-file-nul} 
Only meaningful with @samp{--pathspec-from-file}. Pathspec elements are separated
with NUL character and all other characters are taken literally (including
newlines and quotes).

@item  -- 
This option can be used to separate command-line options from the list of
files, (useful when filenames might be mistaken for command-line options).
@end table

@noindent

@chapheading EXAMPLES

@itemize 

@item
Adds content from all @samp{*.txt} files under @samp{Documentation} directory and its
subdirectories:

@example
$ git add Documentation/\*.txt
@end example


Note that the asterisk @samp{*} is quoted from the shell in this example; this
lets the command include the files from subdirectories of @samp{Documentation/}
directory.

@item
Considers adding content from all git-*.sh scripts:

@example
$ git add git-*.sh
@end example


Because this example lets the shell expand the asterisk (i.e. you are
listing the files explicitly), it does not consider @samp{subdir/git-foo.sh}.
@end itemize

@noindent

@chapheading INTERACTIVE MODE

When the command enters the interactive mode, it shows the output of the
@emph{status} subcommand, and then goes into its interactive command loop.

The command loop shows the list of subcommands available, and gives a prompt
"What now> ".  In general, when the prompt ends with a single @emph{>}, you can
pick only one of the choices given and type return, like this:

@example
    *** Commands ***
      1: status       2: update       3: revert       4: add untracked
      5: patch        6: diff         7: quit         8: help
    What now> 1
@end example


You also could say @samp{s} or @samp{sta} or @samp{status} above as long as the choice is
unique.

The main command loop has 6 subcommands (plus help and quit).

@table @asis

@item  status 
This shows the change between HEAD and index (i.e. what will be committed if
you say @samp{git commit}), and between index and working tree files (i.e. what
you could stage further before @samp{git commit} using @samp{git add}) for each path.
A sample output looks like this:

@example
              staged     unstaged path
     1:       binary      nothing foo.png
     2:     +403/-35        +1/-1 git-add--interactive.perl
@end example


It shows that foo.png has differences from HEAD (but that is binary so line
count cannot be shown) and there is no difference between indexed copy and
the working tree version (if the working tree version were also different,
@emph{binary} would have been shown in place of @emph{nothing}).  The other file,
git-add--interactive.perl, has 403 lines added and 35 lines deleted if
you commit what is in the index, but working tree file has further
modifications (one addition and one deletion).

@item  update 
This shows the status information and issues an "Update>>" prompt.  When the
prompt ends with double @emph{>>}, you can make more than one selection,
concatenated with whitespace or comma.  Also you can say ranges.  E.g. "2-5
7,9" to choose 2,3,4,5,7,9 from the list.  If the second number in a range
is omitted, all remaining patches are taken.  E.g. "7-" to choose 7,8,9 from
the list.  You can say @emph{*} to choose everything.

What you chose are then highlighted with @emph{*}, like this:

@example
           staged     unstaged path
  1:       binary      nothing foo.png
* 2:     +403/-35        +1/-1 git-add--interactive.perl
@end example


To remove selection, prefix the input with @samp{-} like this:

@example
Update>> -2
@end example


After making the selection, answer with an empty line to stage the contents
of working tree files for selected paths in the index.

@item  revert 
This has a very similar UI to @emph{update}, and the staged information for
selected paths are reverted to that of the HEAD version.  Reverting new
paths makes them untracked.

@item  add untracked 
This has a very similar UI to @emph{update} and @emph{revert}, and lets you add
untracked paths to the index.

@item  patch 
This lets you choose one path out of a @emph{status} like selection.  After
choosing the path, it presents the diff between the index and the working
tree file and asks you if you want to stage the change of each hunk.  You
can select one of the following options and type return:

@example
y - stage this hunk
n - do not stage this hunk
q - quit; do not stage this hunk or any of the remaining ones
a - stage this hunk and all later hunks in the file
d - do not stage this hunk or any of the later hunks in the file
g - select a hunk to go to
/ - search for a hunk matching the given regex
j - leave this hunk undecided, see next undecided hunk
J - leave this hunk undecided, see next hunk
k - leave this hunk undecided, see previous undecided hunk
K - leave this hunk undecided, see previous hunk
s - split the current hunk into smaller hunks
e - manually edit the current hunk
? - print help
@end example

After deciding the fate for all hunks, if there is any hunk that was chosen,
the index is updated with the selected hunks.

You can omit having to type return here, by setting the configuration
variable @samp{interactive.singleKey} to @samp{true}.

@item  diff 
This lets you review what will be committed (i.e. between HEAD and index).
@end table

@noindent

@chapheading EDITING PATCHES

Invoking @samp{git add -e} or selecting @samp{e} from the interactive hunk selector
will open a patch in your editor; after the editor exits, the result is
applied to the index. You are free to make arbitrary changes to the patch,
but note that some changes may have confusing results, or even result in a
patch that cannot be applied.  If you want to abort the operation entirely
(i.e., stage nothing new in the index), simply delete all lines of the
patch. The list below describes some common things you may see in a patch,
and which editing operations make sense on them.

@table @asis

@item  added content 
Added content is represented by lines beginning with "+". You can
prevent staging any addition lines by deleting them.

@item  removed content 
Removed content is represented by lines beginning with "-". You can prevent
staging their removal by converting the "-" to a " " (space).

@item  modified content 
Modified content is represented by "-" lines (removing the old content)
followed by "+" lines (adding the replacement content). You can prevent
staging the modification by converting "-" lines to " ", and removing
"+" lines. Beware that modifying only half of the pair is likely to
introduce confusing changes to the index.
@end table

There are also more complex operations that can be performed. But beware
that because the patch is applied only to the index and not the working
tree, the working tree will appear to "undo" the change in the index.  For
example, introducing a new line into the index that is in neither the HEAD
nor the working tree will stage the new line for commit, but the line will
appear to be reverted in the working tree.

Avoid using these constructs, or do so with extreme caution.

@table @asis

@item  removing untouched content 
Content which does not differ between the index and working tree may be
shown on context lines, beginning with a " " (space).  You can stage context
lines for removal by converting the space to a "-". The resulting working
tree file will appear to re-add the content.

@item  modifying existing content 
One can also modify context lines by staging them for removal (by converting
" " to "-") and adding a "+" line with the new content.  Similarly, one
can modify "+" lines for existing additions or modifications. In all
cases, the new modification will appear reverted in the working tree.

@item  new content 
You may also add new content that does not exist in the patch; simply add
new lines, each starting with "+". The addition will appear reverted in
the working tree.
@end table

There are also several operations which should be avoided entirely, as they
will make the patch impossible to apply:

@itemize 

@item
adding context (" ") or removal ("-") lines

@item
deleting context or removal lines

@item
modifying the contents of context or removal lines
@end itemize

@noindent

@chapheading SEE ALSO

git-status(1) git-rm(1) git-reset(1)
git-mv(1) git-commit(1) git-update-index(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-am,,,Top
@chapheading Name

git-am — Apply a series of patches from a mailbox

@noindent

@chapheading Synopsis

@display
git am [--signoff] [--keep] [--[no-]keep-cr] [--[no-]utf8]
         [--[no-]3way] [--interactive] [--committer-date-is-author-date]
         [--ignore-date] [--ignore-space-change | --ignore-whitespace]
         [--whitespace=<option>] [-C<n>] [-p<n>] [--directory=<dir>]
         [--exclude=<path>] [--include=<path>] [--reject] [-q | --quiet]
         [--[no-]scissors] [-S[<keyid>]] [--patch-format=<format>]
         [--quoted-cr=<action>]
         [(<mbox> | <Maildir>)…]
git am (--continue | --skip | --abort | --quit | --show-current-patch[=(diff|raw)])
@end display


@noindent

@chapheading DESCRIPTION

Splits mail messages in a mailbox into commit log message, authorship
information and patches, and applies them to the current branch.

@noindent

@chapheading OPTIONS

@table @asis

@item  (<mbox>|<Maildir>)… 
The list of mailbox files to read patches from. If you do not supply this
argument, the command reads from the standard input.  If you supply
directories, they will be treated as Maildirs.

@item  @samp{-s} 
@itemx  @samp{--signoff} 
Add a @samp{Signed-off-by} trailer to the commit message, using the committer
identity of yourself.  See the signoff option in git-commit(1) for
more information.

@item  @samp{-k} 
@itemx  @samp{--keep} 
Pass @samp{-k} flag to @emph{git mailinfo} (see git-mailinfo(1)).

@item  @samp{--keep-non-patch} 
Pass @samp{-b} flag to @emph{git mailinfo} (see git-mailinfo(1)).

@item  @samp{--[no-]keep-cr} 
With @samp{--keep-cr}, call @emph{git mailsplit} (see git-mailsplit(1))  with
the same option, to prevent it from stripping CR at the end of
lines. @samp{am.keepcr} configuration variable can be used to specify the default
behaviour.  @samp{--no-keep-cr} is useful to override @samp{am.keepcr}.

@item  @samp{-c} 
@itemx  @samp{--scissors} 
Remove everything in body before a scissors line (see
git-mailinfo(1)). Can be activated by default using the
@samp{mailinfo.scissors} configuration variable.

@item  @samp{--no-scissors} 
Ignore scissors lines (see git-mailinfo(1)).

@item  @samp{--quoted-cr=<action>} 
This flag will be passed down to @emph{git mailinfo} (see
git-mailinfo(1)).

@item  @samp{-m} 
@itemx  @samp{--message-id} 
Pass the @samp{-m} flag to @emph{git mailinfo} (see git-mailinfo(1)), so that
the Message-ID header is added to the commit message.  The @samp{am.messageid}
configuration variable can be used to specify the default behaviour.

@item  @samp{--no-message-id} 
Do not add the Message-ID header to the commit message.  @samp{no-message-id} is
useful to override @samp{am.messageid}.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Be quiet. Only print error messages.

@item  @samp{-u} 
@itemx  @samp{--utf8} 
Pass @samp{-u} flag to @emph{git mailinfo} (see git-mailinfo(1)).  The
proposed commit log message taken from the e-mail is re-coded into UTF-8
encoding (configuration variable @samp{i18n.commitEncoding} can be used to
specify project’s preferred encoding if it is not UTF-8).

This was optional in prior versions of git, but now it is the
default.   You can use @samp{--no-utf8} to override this.

@item  @samp{--no-utf8} 
Pass @samp{-n} flag to @emph{git mailinfo} (see git-mailinfo(1)).

@item  @samp{-3} 
@itemx  @samp{--3way} 
@itemx  @samp{--no-3way} 
When the patch does not apply cleanly, fall back on 3-way merge if the patch
records the identity of blobs it is supposed to apply to and we have those
blobs available locally. @samp{--no-3way} can be used to override am.threeWay
configuration variable. For more information, see am.threeWay in
git-config(1).

@item  @samp{--rerere-autoupdate} 
@itemx  @samp{--no-rerere-autoupdate} 
Allow the rerere mechanism to update the index with the result of
auto-conflict resolution if possible.

@item  @samp{--ignore-space-change} 
@itemx  @samp{--ignore-whitespace} 
@itemx  @samp{--whitespace=<option>} 
@itemx  @samp{-C<n>} 
@itemx  @samp{-p<n>} 
@itemx  @samp{--directory=<dir>} 
@itemx  @samp{--exclude=<path>} 
@itemx  @samp{--include=<path>} 
@itemx  @samp{--reject} 
These flags are passed to the @emph{git apply} (see git-apply(1))
program that applies the patch.

@item  @samp{--patch-format} 
By default the command will try to detect the patch format
automatically. This option allows the user to bypass the automatic detection
and specify the patch format that the patch(es) should be interpreted
as. Valid formats are mbox, mboxrd, stgit, stgit-series and hg.

@item  @samp{-i} 
@itemx  @samp{--interactive} 
Run interactively.

@item  @samp{--committer-date-is-author-date} 
By default the command records the date from the e-mail message as the
commit author date, and uses the time of commit creation as the committer
date. This allows the user to lie about the committer date by using the same
value as the author date.

@item  @samp{--ignore-date} 
By default the command records the date from the e-mail message as the
commit author date, and uses the time of commit creation as the committer
date. This allows the user to lie about the author date by using the same
value as the committer date.

@item  @samp{--skip} 
Skip the current patch.  This is only meaningful when restarting an aborted
patch.

@item  @samp{-S[<keyid>]} 
@itemx  @samp{--gpg-sign[=<keyid>]} 
@itemx  @samp{--no-gpg-sign} 
GPG-sign commits. The @samp{keyid} argument is optional and defaults to the
committer identity; if specified, it must be stuck to the option without a
space. @samp{--no-gpg-sign} is useful to countermand both @samp{commit.gpgSign}
configuration variable, and earlier @samp{--gpg-sign}.

@item  @samp{--continue} 
@itemx  @samp{-r} 
@itemx  @samp{--resolved} 
After a patch failure (e.g. attempting to apply conflicting patch), the user
has applied it by hand and the index file stores the result of the
application.  Make a commit using the authorship and commit log extracted
from the e-mail message and the current index file, and continue.

@item  @samp{--resolvemsg=<msg>} 
When a patch failure occurs, <msg> will be printed to the screen before
exiting.  This overrides the standard message informing you to use
@samp{--continue} or @samp{--skip} to handle the failure.  This is solely for internal
use between @emph{git rebase} and @emph{git am}.

@item  @samp{--abort} 
Restore the original branch and abort the patching operation.  Revert
contents of files involved in the am operation to their pre-am state.

@item  @samp{--quit} 
Abort the patching operation but keep HEAD and the index untouched.

@item  @samp{--show-current-patch[=(diff|raw)]} 
Show the message at which @samp{git am} has stopped due to conflicts.  If @samp{raw}
is specified, show the raw contents of the e-mail message; if @samp{diff}, show
the diff portion only.  Defaults to @samp{raw}.
@end table

@noindent

@chapheading DISCUSSION

The commit author name is taken from the "From: " line of the message, and
commit author date is taken from the "Date: " line of the message.  The
"Subject: " line is used as the title of the commit, after stripping common
prefix "[PATCH <anything>]".  The "Subject: " line is supposed to concisely
describe what the commit is about in one line of text.

"From: ", "Date: ", and "Subject: " lines starting the body override the
respective commit author name and title values taken from the headers.

The commit message is formed by the title taken from the "Subject: ", a
blank line and the body of the message up to where the patch begins.  Excess
whitespace at the end of each line is automatically stripped.

The patch is expected to be inline, directly following the message.  Any
line that is of the form:

@itemize 

@item
three-dashes and end-of-line, or

@item
a line that begins with "diff -", or

@item
a line that begins with "Index: "
@end itemize

is taken as the beginning of a patch, and the commit log message is
terminated before the first occurrence of such a line.

When initially invoking @samp{git am}, you give it the names of the mailboxes to
process.  Upon seeing the first patch that does not apply, it aborts in the
middle.  You can recover from this in one of two ways:

@enumerate 

@item
skip the current patch by re-running the command with the @samp{--skip} option.

@item
hand resolve the conflict in the working directory, and update the index
file to bring it into a state that the patch should have produced.  Then run
the command with the @samp{--continue} option.
@end enumerate

The command refuses to process new mailboxes until the current operation is
finished, so if you decide to start over from scratch, run @samp{git am --abort}
before running the command with mailbox names.

Before any patches are applied, ORIG_HEAD is set to the tip of the current
branch.  This is useful if you have problems with multiple commits, like
running @emph{git am} on the wrong branch or an error in the commits that is more
easily fixed by changing the mailbox (e.g.  errors in the "From:" lines).

@noindent

@chapheading HOOKS

This command can run @samp{applypatch-msg}, @samp{pre-applypatch}, and
@samp{post-applypatch} hooks.  See githooks(5) for more information.

@noindent

@chapheading SEE ALSO

git-apply(1).

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-annotate,,,Top
@chapheading Name

git-annotate — 指定ファイルの各行のコミット情報を表示

@noindent

@chapheading Synopsis

@display
git annotate [<options>] <file> [<revision>]
@end display


@noindent

@chapheading DESCRIPTION

指定されたファイルの各行に、その行を導入したコミットからの情報で注釈を付けます。オプションで、特定のリビジョンから注釈を付けます。

このコマンドと git-blame(1)
の唯一の違いは、わずかに異なる出力形式を使用することです。このコマンドは、既存のスクリプトをサポートするための下位互換性のためにのみ存在し、他のSCMシステムから来た人々により馴染みのあるコマンド名を提供します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-b} 
境界コミットでは空白のSHA-1を表示します。これは、 @samp{blame.blankBoundary} 構成オプションを介して制御することもできます。

@item  @samp{--root} 
ルートコミットを境界として扱わないでください。 これは、 @samp{blame.showRoot} 構成オプションを介して制御することもできます。

@item  @samp{--show-stats} 
blameの出力の最後に追加の統計を含めます。

@item  @samp{-L <start>,<end>} 
@itemx  @samp{-L :<funcname>} 
@emph{<start>,<end>} で指定の行範囲のみ、または正規表現関数名 @emph{<funcname>}
で指定の行範囲のみに注釈を付けます。複数回指定できます。範囲が重複するのは許されます。

@emph{<start>} と @emph{<end>} はオプションです。 @samp{-L <start>} または @samp{-L <start>,} は @emph{<start>}
からファイルの終わりまでの範囲です。 @samp{-L ,<end>} は、ファイルの先頭から @emph{<end>} までの範囲です。

@emph{<start>} と @emph{<end>} は、以下のいずれかの形式です:

@itemize 

@item
number

@emph{<start>} または @emph{<end>} が数値の場合、絶対行番号を指定します(行は1から数えます)。

@item
@samp{/regex/}

この形式は、指定されたPOSIX正規表現に一致する最初の行を使用します。 @emph{<start>} が正規表現の場合、前の @samp{-L}
範囲の末尾から検索します。それ以外の場合は、ファイルの先頭から検索します。 @emph{<start>} が @samp{^/regex/}
の場合、ファイルの先頭から検索します。 @emph{<end>} が正規表現の場合、 @emph{<start>} で指定された行から検索開始します。

@item
+offset or -offset

これは <end> に対してのみ有効であり、 <start> で指定された行の前後の行数を指定します。
@end itemize

@emph{<start>} および @emph{<end>} の代わりに @samp{:<funcname>} が指定されている場合、これは @emph{<funcname>}
に一致する最初の関数名行から次の関数名行までの範囲を示す正規表現です。 @samp{:<funcname>} は、前の @samp{-L}
範囲の末尾から検索します。それ以外の場合は、ファイルの先頭から検索します。 @samp{^:<funcname>} はファイルの先頭から検索します。関数名は、
@samp{git diff} がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の
@emph{Defining a custom hunk-header} 参照)。

@item  @samp{-l} 
長いレビジョンを表示します(デフォルト: off)。

@item  @samp{-t} 
生のタイムスタンプを表示します(デフフォルト: off)。

@item  @samp{-S <revs-file>} 
git-rev-list(1) を呼び出す代わりに、revs-fileのリビジョンを使用します。

@item  @samp{--reverse <rev>..<rev>} 
履歴を後方へではなく前方へウォークします。行があらわれたされたリビジョンを表示する代わりに、行が存在した最後のリビジョンを表示します。これには、START..END
のように、STARTにblameのパスが存在するレビジョン範囲が必要です。 便宜上、 @samp{git blame --reverse START} は
@samp{git blame --reverse START..HEAD} と見なされます。

@item  @samp{--first-parent} 
マージコミットを確認したら、最初の親コミットのみを追跡します。
このオプションは、履歴全体にいつ導入されたかではなく、特定の統合ブランチにいつ導入されたかを判別するために使用できます。

@item  @samp{-p} 
@itemx  @samp{--porcelain} 
ソフトウェア等で使用するのに適した形式で表示します。

@item  @samp{--line-porcelain} 
磁器形式で表示しますが、コミットが最初に参照されたときだけでなく、各行のコミット情報を出力します。 --porcelain の機能を含んでいます。

@item  @samp{--incremental} 
ソフトウェア等で使用するのに適した形式で結果を段階的(incrementally)に表示します。

@item  @samp{--encoding=<encoding>} 
作者名(author names)の出力と要約のコミットに使用されるエンコーディングを指定します。 これを @samp{none}
に設定すると、blame出力は変換されていないデータになります。詳細については、 git-log(1) のマニュアルページにある
discussion の encoding に関する説明を参照してください。

@item  @samp{--contents <file>} 
<rev>
が指定されていない場合、コマンドは作業ツリーのコピーから逆方向に開始して変更に注釈を付けます。このフラグにより、コマンドは、作業ツリーのコピーに、指定されたファイルの内容が含まれているように見せかけます(コマンドを標準入力から読み取るには、
@samp{-} を指定します)。

@item  @samp{--date <format>} 
日付の出力に使用される形式を指定します。 --date が指定されていない場合、blame.date 構成変数の値が使用されます。 blame.date
構成変数も設定されていない場合は、 iso形式が使用されます。サポートされている値については、 git-log(1) の --date
オプションの説明を参照してください。

@item  @samp{--[no-]progress} 
進行状況は、端末に接続されている場合、デフォルトで標準エラーストリームに報告されます。このフラグは、端末に接続されていない場合でも進行状況のレポートを有効にします。
@samp{--progress} を @samp{--porcelain} または @samp{--incremental} と一緒に使用することはできません。

@item  @samp{-M[<num>]} 
ファイル内の移動またはコピーされた行を検出します。コミットが行のブロックを移動またはコピーすると(たとえば、元のファイルにA、次にBがあり、コミットによってB、次にAに変更される)、従来の「blame」アルゴリズムは移動の半分だけに気づき、通常は行をblameします
それは親に上に移動され(つまりB)、子のコミットに下に移動された(つまりA)行にblameを割り当てます。このオプションを使用すると、追加の検査パスを実行することにより、両方のグループの行が親のせいになります。

<num> はオプションですが、Gitがそれらの行を親コミットに関連付けるためにファイル内で移動/コピーとして検出する必要がある英数字の数(number
of alphanumeric characters)の下限です。デフォルト値は20です。

@item  @samp{-C[<num>]} 
@samp{-M}
に加えて、同じコミットで変更された他のファイルから移動またはコピーされた行を検出します。これは、プログラムを再編成し、ファイル間でコードを移動するときに役立ちます。このオプションを2回指定すると、コマンドは、ファイルを作成するコミットで他のファイルからのコピーを追加で検索します。このオプションを3回指定すると、コマンドはコミットで他のファイルからのコピーを追加で検索します。

<num> はオプションですが、Gitがそれらの行を親コミットに関連付けるためにファイル間の移動/コピーとして検出する必要がある英数字の数(number
of alphanumeric characters)の下限です。また、デフォルト値は40です。複数の @samp{-C} オプションが指定されている場合、最後の
@samp{-C} の <num> 引数が有効になります。

@item  @samp{--ignore-rev <rev>} 
変更が発生しなかったかのように、blameを割り当てるときにリビジョンによって行われた変更を無視します。無視されたコミットによって変更または追加された行は、その行または近くの行を変更した前のコミットのせいになります。このオプションは、複数のリビジョンを無視するために複数回指定できます。
@samp{blame.markIgnoredLines}
構成オプションが設定されている場合、無視されたコミットによって変更され、別のコミットに起因する行は、blame出力で @samp{?} でマークされます。
@samp{blame.markUnblamableLines}
構成オプションが設定されている場合、別のリビジョンに帰することができなかった無視されたコミットによって触れられた行は、 @emph{*} でマークされます。

@item  @samp{--ignore-revs-file <file>} 
@samp{file} にリストされているリビジョンを無視します。これは @samp{fsck.skipList}
と同じ形式である必要があります。このオプションは繰り返すことができ、これらのファイルは、 @samp{blame.ignoreRevsFile}
構成オプションで指定されたファイルの後に処理されます。空のファイル名 @samp{""} は、以前に処理されたファイルからrevsのリストをクリアします。

@item  @samp{-h} 
ヘルプメッセージを表示する。
@end table

@noindent

@chapheading SEE ALSO

git-blame(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-apply,,,Top
@chapheading Name

git-apply — Apply a patch to files and/or to the index

@noindent

@chapheading Synopsis

@display
git apply [--stat] [--numstat] [--summary] [--check] [--index | --intent-to-add] [--3way]
          [--apply] [--no-add] [--build-fake-ancestor=<file>] [-R | --reverse]
          [--allow-binary-replacement | --binary] [--reject] [-z]
          [-p<n>] [-C<n>] [--inaccurate-eof] [--recount] [--cached]
          [--ignore-space-change | --ignore-whitespace]
          [--whitespace=(nowarn|warn|fix|error|error-all)]
          [--exclude=<path>] [--include=<path>] [--directory=<root>]
          [--verbose] [--unsafe-paths] [<patch>…]
@end display


@noindent

@chapheading DESCRIPTION

Reads the supplied diff output (i.e. "a patch") and applies it to files.
When running from a subdirectory in a repository, patched paths outside the
directory are ignored.  With the @samp{--index} option the patch is also applied
to the index, and with the @samp{--cached} option the patch is only applied to
the index.  Without these options, the command applies the patch only to
files, and does not require them to be in a Git repository.

This command applies the patch but does not create a commit.  Use
git-am(1) to create commits from patches generated by
git-format-patch(1) and/or received by email.

@noindent

@chapheading OPTIONS

@table @asis

@item  <patch>… 
The files to read the patch from.  @emph{-} can be used to read from the standard
input.

@item  @samp{--stat} 
Instead of applying the patch, output diffstat for the input.  Turns off
"apply".

@item  @samp{--numstat} 
Similar to @samp{--stat}, but shows the number of added and deleted lines in
decimal notation and the pathname without abbreviation, to make it more
machine friendly.  For binary files, outputs two @samp{-} instead of saying @samp{0
0}.  Turns off "apply".

@item  @samp{--summary} 
Instead of applying the patch, output a condensed summary of information
obtained from git diff extended headers, such as creations, renames and mode
changes.  Turns off "apply".

@item  @samp{--check} 
Instead of applying the patch, see if the patch is applicable to the current
working tree and/or the index file and detects errors.  Turns off "apply".

@item  @samp{--index} 
Apply the patch to both the index and the working tree (or merely check that
it would apply cleanly to both if @samp{--check} is in effect). Note that
@samp{--index} expects index entries and working tree copies for relevant paths
to be identical (their contents and metadata such as file mode must match),
and will raise an error if they are not, even if the patch would apply
cleanly to both the index and the working tree in isolation.

@item  @samp{--cached} 
Apply the patch to just the index, without touching the working tree. If
@samp{--check} is in effect, merely check that it would apply cleanly to the
index entry.

@item  @samp{--intent-to-add} 
When applying the patch only to the working tree, mark new files to be added
to the index later (see @samp{--intent-to-add} option in
git-add(1)). This option is ignored unless running in a Git
repository and @samp{--index} is not specified.  Note that @samp{--index} could be
implied by other options such as @samp{--cached} or @samp{--3way}.

@item  @samp{-3} 
@itemx  @samp{--3way} 
Attempt 3-way merge if the patch records the identity of blobs it is
supposed to apply to and we have those blobs available locally, possibly
leaving the conflict markers in the files in the working tree for the user
to resolve.  This option implies the @samp{--index} option unless the @samp{--cached}
option is used, and is incompatible with the @samp{--reject} option.  When used
with the @samp{--cached} option, any conflicts are left at higher stages in the
cache.

@item  @samp{--build-fake-ancestor=<file>} 
Newer @emph{git diff} output has embedded @emph{index information} for each blob to
help identify the original version that the patch applies to.  When this
flag is given, and if the original versions of the blobs are available
locally, builds a temporary index containing those blobs.

When a pure mode change is encountered (which has no index information), the
information is read from the current index instead.

@item  @samp{-R} 
@itemx  @samp{--reverse} 
Apply the patch in reverse.

@item  @samp{--reject} 
For atomicity, @emph{git apply} by default fails the whole patch and does not
touch the working tree when some of the hunks do not apply.  This option
makes it apply the parts of the patch that are applicable, and leave the
rejected hunks in corresponding *.rej files.

@item  @samp{-z} 
When @samp{--numstat} has been given, do not munge pathnames, but use a
NUL-terminated machine-readable format.

Without this option, pathnames with "unusual" characters are quoted as
explained for the configuration variable @samp{core.quotePath} (see
git-config(1)).

@item  @samp{-p<n>} 
Remove <n> leading path components (separated by slashes) from traditional
diff paths. E.g., with @samp{-p2}, a patch against @samp{a/dir/file} will be applied
directly to @samp{file}. The default is 1.

@item  @samp{-C<n>} 
Ensure at least <n> lines of surrounding context match before and after each
change.  When fewer lines of surrounding context exist they all must match.
By default no context is ever ignored.

@item  @samp{--unidiff-zero} 
By default, @emph{git apply} expects that the patch being applied is a unified
diff with at least one line of context.  This provides good safety measures,
but breaks down when applying a diff generated with @samp{--unified=0}. To bypass
these checks use @samp{--unidiff-zero}.

Note, for the reasons stated above usage of context-free patches is
discouraged.

@item  @samp{--apply} 
If you use any of the options marked "Turns off @emph{apply}" above, @emph{git apply}
reads and outputs the requested information without actually applying the
patch.  Give this flag after those flags to also apply the patch.

@item  @samp{--no-add} 
When applying a patch, ignore additions made by the patch.  This can be used
to extract the common part between two files by first running @emph{diff} on them
and applying the result with this option, which would apply the deletion
part but not the addition part.

@item  @samp{--allow-binary-replacement} 
@itemx  @samp{--binary} 
Historically we did not allow binary patch applied without an explicit
permission from the user, and this flag was the way to do so.  Currently we
always allow binary patch application, so this is a no-op.

@item  @samp{--exclude=<path-pattern>} 
Don’t apply changes to files matching the given path pattern. This can be
useful when importing patchsets, where you want to exclude certain files or
directories.

@item  @samp{--include=<path-pattern>} 
Apply changes to files matching the given path pattern. This can be useful
when importing patchsets, where you want to include certain files or
directories.

When @samp{--exclude} and @samp{--include} patterns are used, they are examined in the
order they appear on the command line, and the first match determines if a
patch to each path is used.  A patch to a path that does not match any
include/exclude pattern is used by default if there is no include pattern on
the command line, and ignored if there is any include pattern.

@item  @samp{--ignore-space-change} 
@itemx  @samp{--ignore-whitespace} 
When applying a patch, ignore changes in whitespace in context lines if
necessary.  Context lines will preserve their whitespace, and they will not
undergo whitespace fixing regardless of the value of the @samp{--whitespace}
option. New lines will still be fixed, though.

@item  @samp{--whitespace=<action>} 
When applying a patch, detect a new or modified line that has whitespace
errors.  What are considered whitespace errors is controlled by
@samp{core.whitespace} configuration.  By default, trailing whitespaces
(including lines that solely consist of whitespaces) and a space character
that is immediately followed by a tab character inside the initial indent of
the line are considered whitespace errors.

By default, the command outputs warning messages but applies the patch.
When @samp{git-apply} is used for statistics and not applying a patch, it
defaults to @samp{nowarn}.

You can use different @samp{<action>} values to control this behavior:

@itemize 

@item
@samp{nowarn} turns off the trailing whitespace warning.

@item
@samp{warn} outputs warnings for a few such errors, but applies the patch as-is
(default).

@item
@samp{fix} outputs warnings for a few such errors, and applies the patch after
fixing them (@samp{strip} is a synonym --- the tool used to consider only
trailing whitespace characters as errors, and the fix involved @emph{stripping}
them, but modern Gits do more).

@item
@samp{error} outputs warnings for a few such errors, and refuses to apply the
patch.

@item
@samp{error-all} is similar to @samp{error} but shows all errors.
@end itemize

@item  @samp{--inaccurate-eof} 
Under certain circumstances, some versions of @emph{diff} do not correctly detect
a missing new-line at the end of the file. As a result, patches created by
such @emph{diff} programs do not record incomplete lines correctly. This option
adds support for applying such patches by working around this bug.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Report progress to stderr. By default, only a message about the current
patch being applied will be printed. This option will cause additional
information to be reported.

@item  @samp{--recount} 
Do not trust the line counts in the hunk headers, but infer them by
inspecting the patch (e.g. after editing the patch without adjusting the
hunk headers appropriately).

@item  @samp{--directory=<root>} 
Prepend <root> to all filenames.  If a "-p" argument was also passed, it is
applied before prepending the new root.

For example, a patch that talks about updating @samp{a/git-gui.sh} to
@samp{b/git-gui.sh} can be applied to the file in the working tree
@samp{modules/git-gui/git-gui.sh} by running @samp{git apply
--directory=modules/git-gui}.

@item  @samp{--unsafe-paths} 
By default, a patch that affects outside the working area (either a Git
controlled working tree, or the current working directory when "git apply"
is used as a replacement of GNU patch) is rejected as a mistake (or a
mischief).

When @samp{git apply} is used as a "better GNU patch", the user can pass the
@samp{--unsafe-paths} option to override this safety check.  This option has no
effect when @samp{--index} or @samp{--cached} is in use.
@end table

@noindent

@chapheading CONFIGURATION

@table @asis

@item  apply.ignoreWhitespace 
Set to @emph{change} if you want changes in whitespace to be ignored by default.
Set to one of: no, none, never, false if you want changes in whitespace to
be significant.

@item  apply.whitespace 
When no @samp{--whitespace} flag is given from the command line, this
configuration item is used as the default.
@end table

@noindent

@chapheading SUBMODULES

If the patch contains any changes to submodules then @emph{git apply} treats
these changes as follows.

If @samp{--index} is specified (explicitly or implicitly), then the submodule
commits must match the index exactly for the patch to apply.  If any of the
submodules are checked-out, then these check-outs are completely ignored,
i.e., they are not required to be up to date or clean and they are not
updated.

If @samp{--index} is not specified, then the submodule commits in the patch are
ignored and only the absence or presence of the corresponding subdirectory
is checked and (if possible) updated.

@noindent

@chapheading SEE ALSO

git-am(1).

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-archimport,,,Top
@chapheading Name

git-archimport — Import a GNU Arch repository into Git

@noindent

@chapheading Synopsis

@display
git archimport [-h] [-v] [-o] [-a] [-f] [-T] [-D depth] [-t tempdir]
               <archive/branch>[:<git-branch>] …
@end display


@noindent

@chapheading DESCRIPTION

Imports a project from one or more GNU Arch repositories.  It will follow
branches and repositories within the namespaces defined by the
<archive/branch> parameters supplied. If it cannot find the remote branch a
merge comes from it will just import it as a regular commit. If it can find
it, it will mark it as a merge whenever possible (see discussion below).

The script expects you to provide the key roots where it can start the
import from an @emph{initial import} or @emph{tag} type of Arch commit. It will follow
and import new branches within the provided roots.

It expects to be dealing with one project only. If it sees branches that
have different roots, it will refuse to run. In that case, edit your
<archive/branch> parameters to define clearly the scope of the import.

@emph{git archimport} uses @samp{tla} extensively in the background to access the Arch
repository.  Make sure you have a recent version of @samp{tla} available in the
path. @samp{tla} must know about the repositories you pass to @emph{git archimport}.

For the initial import, @emph{git archimport} expects to find itself in an empty
directory. To follow the development of a project that uses Arch, rerun @emph{git
archimport} with the same parameters as the initial import to perform
incremental imports.

While @emph{git archimport} will try to create sensible branch names for the
archives that it imports, it is also possible to specify Git branch names
manually.  To do so, write a Git branch name after each <archive/branch>
parameter, separated by a colon.  This way, you can shorten the Arch branch
names and convert Arch jargon to Git jargon, for example mapping a
"PROJECT--devo--VERSION" branch to "master".

Associating multiple Arch branches to one Git branch is possible; the result
will make the most sense only if no commits are made to the first branch,
after the second branch is created.  Still, this is useful to convert Arch
repositories that had been rotated periodically.

@noindent

@chapheading MERGES

Patch merge data from Arch is used to mark merges in Git as well. Git does
not care much about tracking patches, and only considers a merge when a
branch incorporates all the commits since the point they forked. The end
result is that Git will have a good idea of how far branches have
diverged. So the import process does lose some patch-trading metadata.

Fortunately, when you try and merge branches imported from Arch, Git will
find a good merge base, and it has a good chance of identifying patches that
have been traded out-of-sequence between the branches.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-h} 
Display usage.

@item  @samp{-v} 
Verbose output.

@item  @samp{-T} 
Many tags. Will create a tag for every commit, reflecting the commit name in
the Arch repository.

@item  @samp{-f} 
Use the fast patchset import strategy.  This can be significantly faster for
large trees, but cannot handle directory renames or permissions changes.
The default strategy is slow and safe.

@item  @samp{-o} 
Use this for compatibility with old-style branch names used by earlier
versions of @emph{git archimport}.  Old-style branch names were
category--branch, whereas new-style branch names are
archive,category--branch--version.  In both cases, names given on
the command-line will override the automatically-generated ones.

@item  @samp{-D <depth>} 
Follow merge ancestry and attempt to import trees that have been merged
from.  Specify a depth greater than 1 if patch logs have been pruned.

@item  @samp{-a} 
Attempt to auto-register archives at @samp{http://mirrors.sourcecontrol.net} This
is particularly useful with the -D option.

@item  @samp{-t <tmpdir>} 
Override the default tempdir.

@item  <archive/branch> 
Archive/branch identifier in a format that @samp{tla log} understands.
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-archive,,,Top
@chapheading Name

git-archive — Create an archive of files from a named tree

@noindent

@chapheading Synopsis

@display
git archive [--format=<fmt>] [--list] [--prefix=<prefix>/] [<extra>]
              [-o <file> | --output=<file>] [--worktree-attributes]
              [--remote=<repo> [--exec=<git-upload-archive>]] <tree-ish>
              [<path>…]
@end display


@noindent

@chapheading DESCRIPTION

Creates an archive of the specified format containing the tree structure for
the named tree, and writes it out to the standard output.  If <prefix> is
specified it is prepended to the filenames in the archive.

@emph{git archive} behaves differently when given a tree ID versus when given a
commit ID or tag ID.  In the first case the current time is used as the
modification time of each file in the archive.  In the latter case the
commit time as recorded in the referenced commit object is used instead.
Additionally the commit ID is stored in a global extended pax header if the
tar format is used; it can be extracted using @emph{git get-tar-commit-id}. In
ZIP files it is stored as a file comment.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--format=<fmt>} 
Format of the resulting archive: @emph{tar} or @emph{zip}. If this option is not
given, and the output file is specified, the format is inferred from the
filename if possible (e.g. writing to "foo.zip" makes the output to be in
the zip format). Otherwise the output format is @samp{tar}.

@item  @samp{-l} 
@itemx  @samp{--list} 
Show all available formats.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Report progress to stderr.

@item  @samp{--prefix=<prefix>/} 
Prepend <prefix>/ to each filename in the archive.

@item  @samp{-o <file>} 
@itemx  @samp{--output=<file>} 
Write the archive to <file> instead of stdout.

@item  @samp{--add-file=<file>} 
Add a non-tracked file to the archive.  Can be repeated to add multiple
files.  The path of the file in the archive is built by concatenating the
value for @samp{--prefix} (if any) and the basename of <file>.

@item  @samp{--worktree-attributes} 
Look for attributes in .gitattributes files in the working tree as well (see
@ref{ATTRIBUTES}).

@item  <extra> 
This can be any options that the archiver backend understands.  See next
section.

@item  @samp{--remote=<repo>} 
Instead of making a tar archive from the local repository, retrieve a tar
archive from a remote repository. Note that the remote repository may place
restrictions on which sha1 expressions may be allowed in @samp{<tree-ish>}. See
git-upload-archive(1) for details.

@item  @samp{--exec=<git-upload-archive>} 
Used with --remote to specify the path to the @emph{git-upload-archive} on the
remote side.

@item  <tree-ish> 
The tree or commit to produce an archive for.

@item  <path> 
Without an optional path parameter, all files and subdirectories of the
current working directory are included in the archive.  If one or more paths
are specified, only these are included.
@end table

@noindent

@chapheading BACKEND EXTRA OPTIONS

@noindent

@heading zip

@table @asis

@item  @samp{-0} 
Store the files instead of deflating them.

@item  @samp{-9} 
Highest and slowest compression level.  You can specify any number from 1 to
9 to adjust compression speed and ratio.
@end table

@noindent

@chapheading CONFIGURATION

@table @asis

@item  tar.umask 
This variable can be used to restrict the permission bits of tar archive
entries.  The default is 0002, which turns off the world write bit.  The
special value "user" indicates that the archiving user’s umask will be used
instead.  See umask(2) for details.  If @samp{--remote} is used then only the
configuration of the remote repository takes effect.

@item  tar.<format>.command 
This variable specifies a shell command through which the tar output
generated by @samp{git archive} should be piped. The command is executed using
the shell with the generated tar file on its standard input, and should
produce the final output on its standard output. Any compression-level
options will be passed to the command (e.g., "-9"). An output file with the
same extension as @samp{<format>} will be use this format if no other format is
given.

The "tar.gz" and "tgz" formats are defined automatically and default to
@samp{gzip -cn}. You may override them with custom commands.

@item  tar.<format>.remote 
If true, enable @samp{<format>} for use by remote clients via
git-upload-archive(1). Defaults to false for user-defined formats,
but true for the "tar.gz" and "tgz" formats.
@end table

@noindent

@chapheading ATTRIBUTES

@table @asis

@item  export-ignore 
Files and directories with the attribute export-ignore won’t be added to
archive files.  See gitattributes(5) for details.

@item  export-subst 
If the attribute export-subst is set for a file then Git will expand several
placeholders when adding this file to an archive.  See
gitattributes(5) for details.
@end table

Note that attributes are by default taken from the @samp{.gitattributes} files in
the tree that is being archived.  If you want to tweak the way the output is
generated after the fact (e.g. you committed without adding an appropriate
export-ignore in its @samp{.gitattributes}), adjust the checked out
@samp{.gitattributes} file as necessary and use @samp{--worktree-attributes} option.
Alternatively you can keep necessary attributes that should apply while
archiving any tree in your @samp{$GIT_DIR/info/attributes} file.

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git archive --format=tar --prefix=junk/ HEAD | (cd /var/tmp/ && tar xf -)} 
Create a tar archive that contains the contents of the latest commit on the
current branch, and extract it in the @samp{/var/tmp/junk} directory.

@item  @samp{git archive --format=tar --prefix=git-1.4.0/ v1.4.0 | gzip >git-1.4.0.tar.gz} 
Create a compressed tarball for v1.4.0 release.

@item  @samp{git archive --format=tar.gz --prefix=git-1.4.0/ v1.4.0 >git-1.4.0.tar.gz} 
Same as above, but using the builtin tar.gz handling.

@item  @samp{git archive --prefix=git-1.4.0/ -o git-1.4.0.tar.gz v1.4.0} 
Same as above, but the format is inferred from the output file.

@item  @samp{git archive --format=tar --prefix=git-1.4.0/ v1.4.0^@{tree@} | gzip >git-1.4.0.tar.gz} 
Create a compressed tarball for v1.4.0 release, but without a global
extended pax header.

@item  @samp{git archive --format=zip --prefix=git-docs/ HEAD:Documentation/ > git-1.4.0-docs.zip} 
Put everything in the current head’s Documentation/ directory into
@emph{git-1.4.0-docs.zip}, with the prefix @emph{git-docs/}.

@item  @samp{git archive -o latest.zip HEAD} 
Create a Zip archive that contains the contents of the latest commit on the
current branch. Note that the output format is inferred by the extension of
the output file.

@item  @samp{git config tar.tar.xz.command "xz -c"} 
Configure a "tar.xz" format for making LZMA-compressed tarfiles.  You can
use it specifying @samp{--format=tar.xz}, or by creating an output file like @samp{-o
foo.tar.xz}.
@end table

@noindent

@chapheading SEE ALSO

gitattributes(5)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-bisect,,,Top
@chapheading Name

git-bisect — Use binary search to find the commit that introduced a bug

@noindent

@chapheading Synopsis

@display
git bisect <subcommand> <options>
@end display


@noindent

@chapheading DESCRIPTION

The command takes various subcommands, and different options depending on
the subcommand:

@example
git bisect start [--term-@{new,bad@}=<term> --term-@{old,good@}=<term>]
                 [--no-checkout] [--first-parent] [<bad> [<good>...]] [--] [<paths>...]
git bisect (bad|new|<term-new>) [<rev>]
git bisect (good|old|<term-old>) [<rev>...]
git bisect terms [--term-good | --term-bad]
git bisect skip [(<rev>|<range>)...]
git bisect reset [<commit>]
git bisect (visualize|view)
git bisect replay <logfile>
git bisect log
git bisect run <cmd>...
git bisect help
@end example

This command uses a binary search algorithm to find which commit in your
project’s history introduced a bug. You use it by first telling it a "bad"
commit that is known to contain the bug, and a "good" commit that is known
to be before the bug was introduced. Then @samp{git bisect} picks a commit
between those two endpoints and asks you whether the selected commit is
"good" or "bad". It continues narrowing down the range until it finds the
exact commit that introduced the change.

In fact, @samp{git bisect} can be used to find the commit that changed @strong{any}
property of your project; e.g., the commit that fixed a bug, or the commit
that caused a benchmark’s performance to improve. To support this more
general usage, the terms "old" and "new" can be used in place of "good" and
"bad", or you can choose your own terms. See section "Alternate terms" below
for more information.

@noindent

@heading Basic bisect commands: start, bad, good

As an example, suppose you are trying to find the commit that broke a
feature that was known to work in version @samp{v2.6.13-rc2} of your project. You
start a bisect session as follows:

@example
$ git bisect start
$ git bisect bad                 # Current version is bad
$ git bisect good v2.6.13-rc2    # v2.6.13-rc2 is known to be good
@end example


Once you have specified at least one bad and one good commit, @samp{git bisect}
selects a commit in the middle of that range of history, checks it out, and
outputs something similar to the following:

@example
Bisecting: 675 revisions left to test after this (roughly 10 steps)
@end example


You should now compile the checked-out version and test it. If that version
works correctly, type

@example
$ git bisect good
@end example


If that version is broken, type

@example
$ git bisect bad
@end example


Then @samp{git bisect} will respond with something like

@example
Bisecting: 337 revisions left to test after this (roughly 9 steps)
@end example


Keep repeating the process: compile the tree, test it, and depending on
whether it is good or bad run @samp{git bisect good} or @samp{git bisect bad} to ask
for the next commit that needs testing.

Eventually there will be no more revisions left to inspect, and the command
will print out a description of the first bad commit. The reference
@samp{refs/bisect/bad} will be left pointing at that commit.

@noindent

@heading Bisect reset

After a bisect session, to clean up the bisection state and return to the
original HEAD, issue the following command:

@example
$ git bisect reset
@end example


By default, this will return your tree to the commit that was checked out
before @samp{git bisect start}.  (A new @samp{git bisect start} will also do that, as
it cleans up the old bisection state.)

With an optional argument, you can return to a different commit instead:

@example
$ git bisect reset <commit>
@end example


For example, @samp{git bisect reset bisect/bad} will check out the first bad
revision, while @samp{git bisect reset HEAD} will leave you on the current
bisection commit and avoid switching commits at all.

@noindent

@heading Alternate terms

Sometimes you are not looking for the commit that introduced a breakage, but
rather for a commit that caused a change between some other "old" state and
"new" state. For example, you might be looking for the commit that
introduced a particular fix. Or you might be looking for the first commit in
which the source-code filenames were finally all converted to your company’s
naming standard. Or whatever.

In such cases it can be very confusing to use the terms "good" and "bad" to
refer to "the state before the change" and "the state after the change". So
instead, you can use the terms "old" and "new", respectively, in place of
"good" and "bad". (But note that you cannot mix "good" and "bad" with "old"
and "new" in a single session.)

In this more general usage, you provide @samp{git bisect} with a "new" commit
that has some property and an "old" commit that doesn’t have that
property. Each time @samp{git bisect} checks out a commit, you test if that
commit has the property. If it does, mark the commit as "new"; otherwise,
mark it as "old". When the bisection is done, @samp{git bisect} will report which
commit introduced the property.

To use "old" and "new" instead of "good" and bad, you must run @samp{git bisect
start} without commits as argument and then run the following commands to
add the commits:

@example
git bisect old [<rev>]
@end example


to indicate that a commit was before the sought change, or

@example
git bisect new [<rev>...]
@end example


to indicate that it was after.

To get a reminder of the currently used terms, use

@example
git bisect terms
@end example


You can get just the old (respectively new) term with @samp{git bisect terms
--term-old} or @samp{git bisect terms --term-good}.

If you would like to use your own terms instead of "bad"/"good" or
"new"/"old", you can choose any names you like (except existing bisect
subcommands like @samp{reset}, @samp{start}, …) by starting the bisection using

@example
git bisect start --term-old <term-old> --term-new <term-new>
@end example


For example, if you are looking for a commit that introduced a performance
regression, you might use

@example
git bisect start --term-old fast --term-new slow
@end example


Or if you are looking for the commit that fixed a bug, you might use

@example
git bisect start --term-new fixed --term-old broken
@end example


Then, use @samp{git bisect <term-old>} and @samp{git bisect <term-new>} instead of
@samp{git bisect good} and @samp{git bisect bad} to mark commits.

@noindent

@heading Bisect visualize/view

To see the currently remaining suspects in @emph{gitk}, issue the following
command during the bisection process (the subcommand @samp{view} can be used as
an alternative to @samp{visualize}):

@example
$ git bisect visualize
@end example


If the @samp{DISPLAY} environment variable is not set, @emph{git log} is used
instead.  You can also give command-line options such as @samp{-p} and @samp{--stat}.

@example
$ git bisect visualize --stat
@end example


@noindent

@heading Bisect log and bisect replay

After having marked revisions as good or bad, issue the following command to
show what has been done so far:

@example
$ git bisect log
@end example


If you discover that you made a mistake in specifying the status of a
revision, you can save the output of this command to a file, edit it to
remove the incorrect entries, and then issue the following commands to
return to a corrected state:

@example
$ git bisect reset
$ git bisect replay that-file
@end example


@noindent

@heading Avoiding testing a commit

If, in the middle of a bisect session, you know that the suggested revision
is not a good one to test (e.g. it fails to build and you know that the
failure does not have anything to do with the bug you are chasing), you can
manually select a nearby commit and test that one instead.

For example:

@example
$ git bisect good/bad                   # previous round was good or bad.
Bisecting: 337 revisions left to test after this (roughly 9 steps)
$ git bisect visualize                  # oops, that is uninteresting.
$ git reset --hard HEAD~3               # try 3 revisions before what
                                        # was suggested
@end example


Then compile and test the chosen revision, and afterwards mark the revision
as good or bad in the usual manner.

@noindent

@heading Bisect skip

Instead of choosing a nearby commit by yourself, you can ask Git to do it
for you by issuing the command:

@example
$ git bisect skip                 # Current version cannot be tested
@end example


However, if you skip a commit adjacent to the one you are looking for, Git
will be unable to tell exactly which of those commits was the first bad one.

You can also skip a range of commits, instead of just one commit, using
range notation. For example:

@example
$ git bisect skip v2.5..v2.6
@end example


This tells the bisect process that no commit after @samp{v2.5}, up to and
including @samp{v2.6}, should be tested.

Note that if you also want to skip the first commit of the range you would
issue the command:

@example
$ git bisect skip v2.5 v2.5..v2.6
@end example


This tells the bisect process that the commits between @samp{v2.5} and @samp{v2.6}
(inclusive) should be skipped.

@noindent

@heading Cutting down bisection by giving more parameters to bisect start

You can further cut down the number of trials, if you know what part of the
tree is involved in the problem you are tracking down, by specifying path
parameters when issuing the @samp{bisect start} command:

@example
$ git bisect start -- arch/i386 include/asm-i386
@end example


If you know beforehand more than one good commit, you can narrow the bisect
space down by specifying all of the good commits immediately after the bad
commit when issuing the @samp{bisect start} command:

@example
$ git bisect start v2.6.20-rc6 v2.6.20-rc4 v2.6.20-rc1 --
                   # v2.6.20-rc6 is bad
                   # v2.6.20-rc4 and v2.6.20-rc1 are good
@end example


@noindent

@heading Bisect run

If you have a script that can tell if the current source code is good or
bad, you can bisect by issuing the command:

@example
$ git bisect run my_script arguments
@end example


Note that the script (@samp{my_script} in the above example) should exit with
code 0 if the current source code is good/old, and exit with a code between
1 and 127 (inclusive), except 125, if the current source code is bad/new.

Any other exit code will abort the bisect process. It should be noted that a
program that terminates via @samp{exit(-1)} leaves $? = 255, (see the exit(3)
manual page), as the value is chopped with @samp{& 0377}.

The special exit code 125 should be used when the current source code cannot
be tested. If the script exits with this code, the current revision will be
skipped (see @samp{git bisect skip} above). 125 was chosen as the highest
sensible value to use for this purpose, because 126 and 127 are used by
POSIX shells to signal specific error status (127 is for command not found,
126 is for command found but not executable—these details do not matter, as
they are normal errors in the script, as far as @samp{bisect run} is concerned).

You may often find that during a bisect session you want to have temporary
modifications (e.g. s/#define DEBUG 0/#define DEBUG 1/ in a header file, or
"revision that does not have this commit needs this patch applied to work
around another problem this bisection is not interested in") applied to the
revision being tested.

To cope with such a situation, after the inner @emph{git bisect} finds the next
revision to test, the script can apply the patch before compiling, run the
real test, and afterwards decide if the revision (possibly with the needed
patch) passed the test and then rewind the tree to the pristine state.
Finally the script should exit with the status of the real test to let the
@samp{git bisect run} command loop determine the eventual outcome of the bisect
session.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--no-checkout} 
Do not checkout the new working tree at each iteration of the bisection
process. Instead just update a special reference named @samp{BISECT_HEAD} to make
it point to the commit that should be tested.

This option may be useful when the test you would perform in each step does
not require a checked out tree.

If the repository is bare, @samp{--no-checkout} is assumed.

@item  @samp{--first-parent} 
Follow only the first parent commit upon seeing a merge commit.

In detecting regressions introduced through the merging of a branch, the
merge commit will be identified as introduction of the bug and its ancestors
will be ignored.

This option is particularly useful in avoiding false positives when a merged
branch contained broken or non-buildable commits, but the merge itself was
OK.
@end table

@noindent

@chapheading EXAMPLES

@itemize 

@item
Automatically bisect a broken build between v1.2 and HEAD:

@example
$ git bisect start HEAD v1.2 --      # HEAD is bad, v1.2 is good
$ git bisect run make                # "make" builds the app
$ git bisect reset                   # quit the bisect session
@end example


@item
Automatically bisect a test failure between origin and HEAD:

@example
$ git bisect start HEAD origin --    # HEAD is bad, origin is good
$ git bisect run make test           # "make test" builds and tests
$ git bisect reset                   # quit the bisect session
@end example


@item
Automatically bisect a broken test case:

@example
$ cat ~/test.sh
#!/bin/sh
make || exit 125                     # this skips broken builds
~/check_test_case.sh                 # does the test case pass?
$ git bisect start HEAD HEAD~10 --   # culprit is among the last 10
$ git bisect run ~/test.sh
$ git bisect reset                   # quit the bisect session
@end example


Here we use a @samp{test.sh} custom script. In this script, if @samp{make} fails, we
skip the current commit.  @samp{check_test_case.sh} should @samp{exit 0} if the test
case passes, and @samp{exit 1} otherwise.

It is safer if both @samp{test.sh} and @samp{check_test_case.sh} are outside the
repository to prevent interactions between the bisect, make and test
processes and the scripts.

@item
Automatically bisect with temporary modifications (hot-fix):

@example
$ cat ~/test.sh
#!/bin/sh

# tweak the working tree by merging the hot-fix branch
# and then attempt a build
if      git merge --no-commit --no-ff hot-fix &&
        make
then
        # run project specific test and report its status
        ~/check_test_case.sh
        status=$?
else
        # tell the caller this is untestable
        status=125
fi

# undo the tweak to allow clean flipping to the next commit
git reset --hard

# return control
exit $status
@end example


This applies modifications from a hot-fix branch before each test run,
e.g. in case your build or test environment changed so that older revisions
may need a fix which newer ones have already. (Make sure the hot-fix branch
is based off a commit which is contained in all revisions which you are
bisecting, so that the merge does not pull in too much, or use @samp{git
cherry-pick} instead of @samp{git merge}.)

@item
Automatically bisect a broken test case:

@example
$ git bisect start HEAD HEAD~10 --   # culprit is among the last 10
$ git bisect run sh -c "make || exit 125; ~/check_test_case.sh"
$ git bisect reset                   # quit the bisect session
@end example


This shows that you can do without a run script if you write the test on a
single line.

@item
Locate a good region of the object graph in a damaged repository

@example
$ git bisect start HEAD <known-good-commit> [ <boundary-commit> ... ] --no-checkout
$ git bisect run sh -c '
        GOOD=$(git for-each-ref "--format=%(objectname)" refs/bisect/good-*) &&
        git rev-list --objects BISECT_HEAD --not $GOOD >tmp.$$ &&
        git pack-objects --stdout >/dev/null <tmp.$$
        rc=$?
        rm -f tmp.$$
        test $rc = 0'

$ git bisect reset                   # quit the bisect session
@end example


In this case, when @emph{git bisect run} finishes, bisect/bad will refer to a
commit that has at least one parent whose reachable graph is fully
traversable in the sense required by @emph{git pack objects}.

@item
Look for a fix instead of a regression in the code

@example
$ git bisect start
$ git bisect new HEAD    # current commit is marked as new
$ git bisect old HEAD~10 # the tenth commit from now is marked as old
@end example


or:
@end itemize

@example
$ git bisect start --term-old broken --term-new fixed
$ git bisect fixed
$ git bisect broken HEAD~10
@end example


@noindent

@heading Getting help

Use @samp{git bisect} to get a short usage description, and @samp{git bisect help} or
@samp{git bisect -h} to get a long usage description.

@noindent

@chapheading SEE ALSO

@uref{git-bisect-lk2009.html,Fighting regressions with git bisect},
git-blame(1).

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-blame,,,Top
@chapheading Name

git-blame — Show what revision and author last modified each line of a file

@noindent

@chapheading Synopsis

@display
git blame [-c] [-b] [-l] [--root] [-t] [-f] [-n] [-s] [-e] [-p] [-w] [--incremental]
            [-L <range>] [-S <revs-file>] [-M] [-C] [-C] [-C] [--since=<date>]
            [--ignore-rev <rev>] [--ignore-revs-file <file>]
            [--progress] [--abbrev=<n>] [<rev> | --contents <file> | --reverse <rev>..<rev>]
            [--] <file>
@end display


@noindent

@chapheading DESCRIPTION

Annotates each line in the given file with information from the revision
which last modified the line. Optionally, start annotating from the given
revision.

When specified one or more times, @samp{-L} restricts annotation to the requested
lines.

The origin of lines is automatically followed across whole-file renames
(currently there is no option to turn the rename-following off). To follow
lines moved from one file to another, or to follow lines that were copied
and pasted from another file, etc., see the @samp{-C} and @samp{-M} options.

The report does not tell you anything about lines which have been deleted or
replaced; you need to use a tool such as @emph{git diff} or the "pickaxe"
interface briefly mentioned in the following paragraph.

Apart from supporting file annotation, Git also supports searching the
development history for when a code snippet occurred in a change. This makes
it possible to track when a code snippet was added to a file, moved or
copied between files, and eventually deleted or replaced. It works by
searching for a text string in the diff. A small example of the pickaxe
interface that searches for @samp{blame_usage}:

@example
$ git log --pretty=oneline -S'blame_usage'
5040f17eba15504bad66b14a645bddd9b015ebb7 blame -S <ancestry-file>
ea4c7f9bf69e781dd0cd88d2bccb2bf5cc15c9a7 git-blame: Make the output
@end example


@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-b} 
境界コミットでは空白のSHA-1を表示します。これは、 @samp{blame.blankBoundary} 構成オプションを介して制御することもできます。

@item  @samp{--root} 
ルートコミットを境界として扱わないでください。 これは、 @samp{blame.showRoot} 構成オプションを介して制御することもできます。

@item  @samp{--show-stats} 
blameの出力の最後に追加の統計を含めます。

@item  @samp{-L <start>,<end>} 
@itemx  @samp{-L :<funcname>} 
@emph{<start>,<end>} で指定の行範囲のみ、または正規表現関数名 @emph{<funcname>}
で指定の行範囲のみに注釈を付けます。複数回指定できます。範囲が重複するのは許されます。

@emph{<start>} と @emph{<end>} はオプションです。 @samp{-L <start>} または @samp{-L <start>,} は @emph{<start>}
からファイルの終わりまでの範囲です。 @samp{-L ,<end>} は、ファイルの先頭から @emph{<end>} までの範囲です。

@emph{<start>} と @emph{<end>} は、以下のいずれかの形式です:

@itemize 

@item
number

@emph{<start>} または @emph{<end>} が数値の場合、絶対行番号を指定します(行は1から数えます)。

@item
@samp{/regex/}

この形式は、指定されたPOSIX正規表現に一致する最初の行を使用します。 @emph{<start>} が正規表現の場合、前の @samp{-L}
範囲の末尾から検索します。それ以外の場合は、ファイルの先頭から検索します。 @emph{<start>} が @samp{^/regex/}
の場合、ファイルの先頭から検索します。 @emph{<end>} が正規表現の場合、 @emph{<start>} で指定された行から検索開始します。

@item
+offset or -offset

これは <end> に対してのみ有効であり、 <start> で指定された行の前後の行数を指定します。
@end itemize

@emph{<start>} および @emph{<end>} の代わりに @samp{:<funcname>} が指定されている場合、これは @emph{<funcname>}
に一致する最初の関数名行から次の関数名行までの範囲を示す正規表現です。 @samp{:<funcname>} は、前の @samp{-L}
範囲の末尾から検索します。それ以外の場合は、ファイルの先頭から検索します。 @samp{^:<funcname>} はファイルの先頭から検索します。関数名は、
@samp{git diff} がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の
@emph{Defining a custom hunk-header} 参照)。

@item  @samp{-l} 
長いレビジョンを表示します(デフォルト: off)。

@item  @samp{-t} 
生のタイムスタンプを表示します(デフフォルト: off)。

@item  @samp{-S <revs-file>} 
git-rev-list(1) を呼び出す代わりに、revs-fileのリビジョンを使用します。

@item  @samp{--reverse <rev>..<rev>} 
履歴を後方へではなく前方へウォークします。行があらわれたされたリビジョンを表示する代わりに、行が存在した最後のリビジョンを表示します。これには、START..END
のように、STARTにblameのパスが存在するレビジョン範囲が必要です。 便宜上、 @samp{git blame --reverse START} は
@samp{git blame --reverse START..HEAD} と見なされます。

@item  @samp{--first-parent} 
マージコミットを確認したら、最初の親コミットのみを追跡します。
このオプションは、履歴全体にいつ導入されたかではなく、特定の統合ブランチにいつ導入されたかを判別するために使用できます。

@item  @samp{-p} 
@itemx  @samp{--porcelain} 
ソフトウェア等で使用するのに適した形式で表示します。

@item  @samp{--line-porcelain} 
磁器形式で表示しますが、コミットが最初に参照されたときだけでなく、各行のコミット情報を出力します。 --porcelain の機能を含んでいます。

@item  @samp{--incremental} 
ソフトウェア等で使用するのに適した形式で結果を段階的(incrementally)に表示します。

@item  @samp{--encoding=<encoding>} 
作者名(author names)の出力と要約のコミットに使用されるエンコーディングを指定します。 これを @samp{none}
に設定すると、blame出力は変換されていないデータになります。詳細については、 git-log(1) のマニュアルページにある
discussion の encoding に関する説明を参照してください。

@item  @samp{--contents <file>} 
<rev>
が指定されていない場合、コマンドは作業ツリーのコピーから逆方向に開始して変更に注釈を付けます。このフラグにより、コマンドは、作業ツリーのコピーに、指定されたファイルの内容が含まれているように見せかけます(コマンドを標準入力から読み取るには、
@samp{-} を指定します)。

@item  @samp{--date <format>} 
日付の出力に使用される形式を指定します。 --date が指定されていない場合、blame.date 構成変数の値が使用されます。 blame.date
構成変数も設定されていない場合は、 iso形式が使用されます。サポートされている値については、 git-log(1) の --date
オプションの説明を参照してください。

@item  @samp{--[no-]progress} 
進行状況は、端末に接続されている場合、デフォルトで標準エラーストリームに報告されます。このフラグは、端末に接続されていない場合でも進行状況のレポートを有効にします。
@samp{--progress} を @samp{--porcelain} または @samp{--incremental} と一緒に使用することはできません。

@item  @samp{-M[<num>]} 
ファイル内の移動またはコピーされた行を検出します。コミットが行のブロックを移動またはコピーすると(たとえば、元のファイルにA、次にBがあり、コミットによってB、次にAに変更される)、従来の「blame」アルゴリズムは移動の半分だけに気づき、通常は行をblameします
それは親に上に移動され(つまりB)、子のコミットに下に移動された(つまりA)行にblameを割り当てます。このオプションを使用すると、追加の検査パスを実行することにより、両方のグループの行が親のせいになります。

<num> はオプションですが、Gitがそれらの行を親コミットに関連付けるためにファイル内で移動/コピーとして検出する必要がある英数字の数(number
of alphanumeric characters)の下限です。デフォルト値は20です。

@item  @samp{-C[<num>]} 
@samp{-M}
に加えて、同じコミットで変更された他のファイルから移動またはコピーされた行を検出します。これは、プログラムを再編成し、ファイル間でコードを移動するときに役立ちます。このオプションを2回指定すると、コマンドは、ファイルを作成するコミットで他のファイルからのコピーを追加で検索します。このオプションを3回指定すると、コマンドはコミットで他のファイルからのコピーを追加で検索します。

<num> はオプションですが、Gitがそれらの行を親コミットに関連付けるためにファイル間の移動/コピーとして検出する必要がある英数字の数(number
of alphanumeric characters)の下限です。また、デフォルト値は40です。複数の @samp{-C} オプションが指定されている場合、最後の
@samp{-C} の <num> 引数が有効になります。

@item  @samp{--ignore-rev <rev>} 
変更が発生しなかったかのように、blameを割り当てるときにリビジョンによって行われた変更を無視します。無視されたコミットによって変更または追加された行は、その行または近くの行を変更した前のコミットのせいになります。このオプションは、複数のリビジョンを無視するために複数回指定できます。
@samp{blame.markIgnoredLines}
構成オプションが設定されている場合、無視されたコミットによって変更され、別のコミットに起因する行は、blame出力で @samp{?} でマークされます。
@samp{blame.markUnblamableLines}
構成オプションが設定されている場合、別のリビジョンに帰することができなかった無視されたコミットによって触れられた行は、 @emph{*} でマークされます。

@item  @samp{--ignore-revs-file <file>} 
@samp{file} にリストされているリビジョンを無視します。これは @samp{fsck.skipList}
と同じ形式である必要があります。このオプションは繰り返すことができ、これらのファイルは、 @samp{blame.ignoreRevsFile}
構成オプションで指定されたファイルの後に処理されます。空のファイル名 @samp{""} は、以前に処理されたファイルからrevsのリストをクリアします。

@item  @samp{-h} 
ヘルプメッセージを表示する。

@item  @samp{-c} 
Use the same output mode as git-annotate(1) (Default: off).

@item  @samp{--score-debug} 
Include debugging information related to the movement of lines between files
(see @samp{-C}) and lines moved within a file (see @samp{-M}).  The first number
listed is the score.  This is the number of alphanumeric characters detected
as having been moved between or within files.  This must be above a certain
threshold for @emph{git blame} to consider those lines of code to have been
moved.

@item  @samp{-f} 
@itemx  @samp{--show-name} 
Show the filename in the original commit.  By default the filename is shown
if there is any line that came from a file with a different name, due to
rename detection.

@item  @samp{-n} 
@itemx  @samp{--show-number} 
Show the line number in the original commit (Default: off).

@item  @samp{-s} 
Suppress the author name and timestamp from the output.

@item  @samp{-e} 
@itemx  @samp{--show-email} 
Show the author email instead of author name (Default: off).  This can also
be controlled via the @samp{blame.showEmail} config option.

@item  @samp{-w} 
Ignore whitespace when comparing the parent’s version and the child’s to
find where the lines came from.

@item  @samp{--abbrev=<n>} 
Instead of using the default 7+1 hexadecimal digits as the abbreviated
object name, use <m>+1 digits, where <m> is at least <n> but ensures the
commit object names are unique.  Note that 1 column is used for a caret to
mark the boundary commit.
@end table

@noindent

@chapheading THE PORCELAIN FORMAT

In this format, each line is output after a header; the header at the
minimum has the first line which has:

@itemize 

@item
40-byte SHA-1 of the commit the line is attributed to;

@item
the line number of the line in the original file;

@item
the line number of the line in the final file;

@item
on a line that starts a group of lines from a different commit than the
previous one, the number of lines in this group.  On subsequent lines this
field is absent.
@end itemize

This header line is followed by the following information at least once for
each commit:

@itemize 

@item
the author name ("author"), email ("author-mail"), time ("author-time"), and
time zone ("author-tz"); similarly for committer.

@item
the filename in the commit that the line is attributed to.

@item
the first line of the commit log message ("summary").
@end itemize

The contents of the actual line is output after the above header, prefixed
by a TAB. This is to allow adding more header elements later.

The porcelain format generally suppresses commit information that has
already been seen. For example, two lines that are blamed to the same commit
will both be shown, but the details for that commit will be shown only
once. This is more efficient, but may require more state be kept by the
reader. The @samp{--line-porcelain} option can be used to output full commit
information for each line, allowing simpler (but less efficient)  usage
like:

@example
# count the number of lines attributed to each author
git blame --line-porcelain file |
sed -n 's/^author //p' |
sort | uniq -c | sort -rn
@end example

@noindent

@chapheading SPECIFYING RANGES

Unlike @emph{git blame} and @emph{git annotate} in older versions of git, the extent
of the annotation can be limited to both line ranges and revision
ranges. The @samp{-L} option, which limits annotation to a range of lines, may be
specified multiple times.

When you are interested in finding the origin for lines 40-60 for file
@samp{foo}, you can use the @samp{-L} option like so (they mean the same thing — both
ask for 21 lines starting at line 40):

@example
git blame -L 40,60 foo
git blame -L 40,+21 foo
@end example

Also you can use a regular expression to specify the line range:

@example
git blame -L '/^sub hello @{/,/^@}$/' foo
@end example

which limits the annotation to the body of the @samp{hello} subroutine.

When you are not interested in changes older than version v2.6.18, or
changes older than 3 weeks, you can use revision range specifiers similar to
@emph{git rev-list}:

@example
git blame v2.6.18.. -- foo
git blame --since=3.weeks -- foo
@end example

When revision range specifiers are used to limit the annotation, lines that
have not changed since the range boundary (either the commit v2.6.18 or the
most recent commit that is more than 3 weeks old in the above example) are
blamed for that range boundary commit.

A particularly useful way is to see if an added file has lines created by
copy-and-paste from existing files.  Sometimes this indicates that the
developer was being sloppy and did not refactor the code properly.  You can
first find the commit that introduced the file with:

@example
git log --diff-filter=A --pretty=short -- foo
@end example

and then annotate the change between the commit and its parents, using
@samp{commit^!} notation:

@example
git blame -C -C -f $commit^! -- foo
@end example

@noindent

@chapheading INCREMENTAL OUTPUT

When called with @samp{--incremental} option, the command outputs the result as
it is built.  The output generally will talk about lines touched by more
recent commits first (i.e. the lines will be annotated out of order) and is
meant to be used by interactive viewers.

The output format is similar to the Porcelain format, but it does not
contain the actual lines from the file that is being annotated.

@enumerate 

@item
Each blame entry always starts with a line of:

@example
<40-byte hex sha1> <sourceline> <resultline> <num_lines>
@end example

Line numbers count from 1.

@item
The first time that a commit shows up in the stream, it has various other
information about it printed out with a one-word tag at the beginning of
each line describing the extra commit information (author, email, committer,
dates, summary, etc.).

@item
Unlike the Porcelain format, the filename information is always given and
terminates the entry:

@example
"filename" <whitespace-quoted-filename-goes-here>
@end example

and thus it is really quite easy to parse for some line- and word-oriented
parser (which should be quite natural for most scripting languages).

@quotation

@strong{Note}

For people who do parsing: to make it more robust, just ignore any lines
between the first and last one ("<sha1>" and "filename" lines)  where you do
not recognize the tag words (or care about that particular one) at the
beginning of the "extended information" lines. That way, if there is ever
added information (like the commit encoding or extended commit commentary),
a blame viewer will not care.
@end quotation
@end enumerate

@noindent

@chapheading MAPPING AUTHORS

See gitmailmap(5).

@noindent

@chapheading SEE ALSO

git-annotate(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-branch,,,Top
@chapheading Name

git-branch — List, create, or delete branches

@noindent

@chapheading Synopsis

@display
git branch [--color[=<when>] | --no-color] [--show-current]
        [-v [--abbrev=<n> | --no-abbrev]]
        [--column[=<options>] | --no-column] [--sort=<key>]
        [--merged [<commit>]] [--no-merged [<commit>]]
        [--contains [<commit>]] [--no-contains [<commit>]]
        [--points-at <object>] [--format=<format>]
        [(-r | --remotes) | (-a | --all)]
        [--list] [<pattern>…]
git branch [--track | --no-track] [-f] <branchname> [<start-point>]
git branch (--set-upstream-to=<upstream> | -u <upstream>) [<branchname>]
git branch --unset-upstream [<branchname>]
git branch (-m | -M) [<oldbranch>] <newbranch>
git branch (-c | -C) [<oldbranch>] <newbranch>
git branch (-d | -D) [-r] <branchname>…
git branch --edit-description [<branchname>]
@end display


@noindent

@chapheading DESCRIPTION

If @samp{--list} is given, or if there are no non-option arguments, existing
branches are listed; the current branch will be highlighted in green and
marked with an asterisk.  Any branches checked out in linked worktrees will
be highlighted in cyan and marked with a plus sign. Option @samp{-r} causes the
remote-tracking branches to be listed, and option @samp{-a} shows both local and
remote branches.

If a @samp{<pattern>} is given, it is used as a shell wildcard to restrict the
output to matching branches. If multiple patterns are given, a branch is
shown if it matches any of the patterns.

Note that when providing a @samp{<pattern>}, you must use @samp{--list}; otherwise the
command may be interpreted as branch creation.

With @samp{--contains}, shows only the branches that contain the named commit (in
other words, the branches whose tip commits are descendants of the named
commit), @samp{--no-contains} inverts it. With @samp{--merged}, only branches merged
into the named commit (i.e. the branches whose tip commits are reachable
from the named commit) will be listed.  With @samp{--no-merged} only branches not
merged into the named commit will be listed.  If the <commit> argument is
missing it defaults to @samp{HEAD} (i.e. the tip of the current branch).

The command’s second form creates a new branch head named <branchname> which
points to the current @samp{HEAD}, or <start-point> if given. As a special case,
for <start-point>, you may use @samp{"A...B"} as a shortcut for the merge base of
@samp{A} and @samp{B} if there is exactly one merge base. You can leave out at most
one of @samp{A} and @samp{B}, in which case it defaults to @samp{HEAD}.

Note that this will create the new branch, but it will not switch the
working tree to it; use "git switch <newbranch>" to switch to the new
branch.

When a local branch is started off a remote-tracking branch, Git sets up the
branch (specifically the @samp{branch.<name>.remote} and @samp{branch.<name>.merge}
configuration entries) so that @emph{git pull} will appropriately merge from the
remote-tracking branch. This behavior may be changed via the global
@samp{branch.autoSetupMerge} configuration flag. That setting can be overridden
by using the @samp{--track} and @samp{--no-track} options, and changed later using
@samp{git branch --set-upstream-to}.

With a @samp{-m} or @samp{-M} option, <oldbranch> will be renamed to <newbranch>.  If
<oldbranch> had a corresponding reflog, it is renamed to match <newbranch>,
and a reflog entry is created to remember the branch renaming. If
<newbranch> exists, -M must be used to force the rename to happen.

The @samp{-c} and @samp{-C} options have the exact same semantics as @samp{-m} and @samp{-M},
except instead of the branch being renamed, it will be copied to a new name,
along with its config and reflog.

With a @samp{-d} or @samp{-D} option, @samp{<branchname>} will be deleted.  You may specify
more than one branch for deletion.  If the branch currently has a reflog
then the reflog will also be deleted.

Use @samp{-r} together with @samp{-d} to delete remote-tracking branches. Note, that
it only makes sense to delete remote-tracking branches if they no longer
exist in the remote repository or if @emph{git fetch} was configured not to fetch
them again. See also the @emph{prune} subcommand of git-remote(1) for a
way to clean up all obsolete remote-tracking branches.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-d} 
@itemx  @samp{--delete} 
Delete a branch. The branch must be fully merged in its upstream branch, or
in @samp{HEAD} if no upstream was set with @samp{--track} or @samp{--set-upstream-to}.

@item  @samp{-D} 
Shortcut for @samp{--delete --force}.

@item  @samp{--create-reflog} 
Create the branch’s reflog.  This activates recording of all changes made to
the branch ref, enabling use of date based sha1 expressions such as
"<branchname>@@@{yesterday@}".  Note that in non-bare repositories, reflogs
are usually enabled by default by the @samp{core.logAllRefUpdates} config
option.  The negated form @samp{--no-create-reflog} only overrides an earlier
@samp{--create-reflog}, but currently does not negate the setting of
@samp{core.logAllRefUpdates}.

@item  @samp{-f} 
@itemx  @samp{--force} 
Reset <branchname> to <startpoint>, even if <branchname> exists
already. Without @samp{-f}, @emph{git branch} refuses to change an existing branch.
In combination with @samp{-d} (or @samp{--delete}), allow deleting the branch
irrespective of its merged status, or whether it even points to a valid
commit. In combination with @samp{-m} (or @samp{--move}), allow renaming the branch
even if the new branch name already exists, the same applies for @samp{-c} (or
@samp{--copy}).

@item  @samp{-m} 
@itemx  @samp{--move} 
Move/rename a branch and the corresponding reflog.

@item  @samp{-M} 
Shortcut for @samp{--move --force}.

@item  @samp{-c} 
@itemx  @samp{--copy} 
Copy a branch and the corresponding reflog.

@item  @samp{-C} 
Shortcut for @samp{--copy --force}.

@item  @samp{--color[=<when>]} 
Color branches to highlight current, local, and remote-tracking branches.
The value must be always (the default), never, or auto.

@item  @samp{--no-color} 
Turn off branch colors, even when the configuration file gives the default
to color output.  Same as @samp{--color=never}.

@item  @samp{-i} 
@itemx  @samp{--ignore-case} 
Sorting and filtering branches are case insensitive.

@item  @samp{--column[=<options>]} 
@itemx  @samp{--no-column} 
Display branch listing in columns. See configuration variable
@samp{column.branch} for option syntax. @samp{--column} and @samp{--no-column} without
options are equivalent to @emph{always} and @emph{never} respectively.

This option is only applicable in non-verbose mode.

@item  @samp{-r} 
@itemx  @samp{--remotes} 
List or delete (if used with -d) the remote-tracking branches.  Combine with
@samp{--list} to match the optional pattern(s).

@item  @samp{-a} 
@itemx  @samp{--all} 
List both remote-tracking branches and local branches.  Combine with
@samp{--list} to match optional pattern(s).

@item  @samp{-l} 
@itemx  @samp{--list} 
List branches.  With optional @samp{<pattern>...}, e.g. @samp{git branch --list
'maint-*'}, list only the branches that match the pattern(s).

@item  @samp{--show-current} 
Print the name of the current branch. In detached HEAD state, nothing is
printed.

@item  @samp{-v} 
@itemx  @samp{-vv} 
@itemx  @samp{--verbose} 
When in list mode, show sha1 and commit subject line for each head, along
with relationship to upstream branch (if any). If given twice, print the
path of the linked worktree (if any) and the name of the upstream branch, as
well (see also @samp{git remote show <remote>}).  Note that the current
worktree’s HEAD will not have its path printed (it will always be your
current directory).

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Be more quiet when creating or deleting a branch, suppressing non-error
messages.

@item  @samp{--abbrev=<n>} 
In the verbose listing that show the commit object name, show the shortest
prefix that is at least @emph{<n>} hexdigits long that uniquely refers the
object.  The default value is 7 and can be overridden by the @samp{core.abbrev}
config option.

@item  @samp{--no-abbrev} 
Display the full sha1s in the output listing rather than abbreviating them.

@item  @samp{-t} 
@itemx  @samp{--track} 
When creating a new branch, set up @samp{branch.<name>.remote} and
@samp{branch.<name>.merge} configuration entries to mark the start-point branch
as "upstream" from the new branch. This configuration will tell git to show
the relationship between the two branches in @samp{git status} and @samp{git branch
-v}. Furthermore, it directs @samp{git pull} without arguments to pull from the
upstream when the new branch is checked out.

This behavior is the default when the start point is a remote-tracking
branch.  Set the branch.autoSetupMerge configuration variable to @samp{false} if
you want @samp{git switch}, @samp{git checkout} and @samp{git branch} to always behave as
if @samp{--no-track} were given. Set it to @samp{always} if you want this behavior
when the start-point is either a local or remote-tracking branch.

@item  @samp{--no-track} 
Do not set up "upstream" configuration, even if the branch.autoSetupMerge
configuration variable is true.

@item  @samp{--set-upstream} 
As this option had confusing syntax, it is no longer supported.  Please use
@samp{--track} or @samp{--set-upstream-to} instead.

@item  @samp{-u <upstream>} 
@itemx  @samp{--set-upstream-to=<upstream>} 
Set up <branchname>'s tracking information so <upstream> is considered
<branchname>'s upstream branch. If no <branchname> is specified, then it
defaults to the current branch.

@item  @samp{--unset-upstream} 
Remove the upstream information for <branchname>. If no branch is specified
it defaults to the current branch.

@item  @samp{--edit-description} 
Open an editor and edit the text to explain what the branch is for, to be
used by various other commands (e.g. @samp{format-patch}, @samp{request-pull}, and
@samp{merge} (if enabled)). Multi-line explanations may be used.

@item  @samp{--contains [<commit>]} 
Only list branches which contain the specified commit (HEAD if not
specified). Implies @samp{--list}.

@item  @samp{--no-contains [<commit>]} 
Only list branches which don’t contain the specified commit (HEAD if not
specified). Implies @samp{--list}.

@item  @samp{--merged [<commit>]} 
Only list branches whose tips are reachable from the specified commit (HEAD
if not specified). Implies @samp{--list}.

@item  @samp{--no-merged [<commit>]} 
Only list branches whose tips are not reachable from the specified commit
(HEAD if not specified). Implies @samp{--list}.

@item  <branchname> 
The name of the branch to create or delete.  The new branch name must pass
all checks defined by git-check-ref-format(1).  Some of these checks
may restrict the characters allowed in a branch name.

@item  <start-point> 
The new branch head will point to this commit.  It may be given as a branch
name, a commit-id, or a tag.  If this option is omitted, the current HEAD
will be used instead.

@item  <oldbranch> 
The name of an existing branch to rename.

@item  <newbranch> 
The new name for an existing branch. The same restrictions as for
<branchname> apply.

@item  @samp{--sort=<key>} 
Sort based on the key given. Prefix @samp{-} to sort in descending order of the
value. You may use the --sort=<key> option multiple times, in which case the
last key becomes the primary key. The keys supported are the same as those
in @samp{git for-each-ref}. Sort order defaults to the value configured for the
@samp{branch.sort} variable if exists, or to sorting based on the full refname
(including @samp{refs/...} prefix). This lists detached HEAD (if present) first,
then local branches and finally remote-tracking branches. See
git-config(1).

@item  @samp{--points-at <object>} 
Only list branches of the given object.

@item  @samp{--format <format>} 
A string that interpolates @samp{%(fieldname)} from a branch ref being shown and
the object it points at.  The format is the same as that of
git-for-each-ref(1).
@end table

@noindent

@chapheading CONFIGURATION

@samp{pager.branch} is only respected when listing branches, i.e., when @samp{--list}
is used or implied. The default is to use a pager.  See
git-config(1).

@noindent

@chapheading EXAMPLES

@table @asis

@item  Start development from a known tag 
@example
$ git clone git://git.kernel.org/pub/scm/.../linux-2.6 my2.6
$ cd my2.6
$ git branch my2.6.14 v2.6.14   (1)
$ git switch my2.6.14
@end example


@table @asis

@item @pxref{CO1-1,,(1)}
This step and the next one could be combined into a single step with
"checkout -b my2.6.14 v2.6.14".
@end table

@item  Delete an unneeded branch 
@example
$ git clone git://git.kernel.org/.../git.git my.git
$ cd my.git
$ git branch -d -r origin/todo origin/html origin/man   (1)
$ git branch -D test                                    (2)
@end example


@table @asis

@item @pxref{CO2-1,,(1)}
Delete the remote-tracking branches "todo", "html" and "man". The next
@emph{fetch} or @emph{pull} will create them again unless you configure them not to.
See git-fetch(1).

@item @pxref{CO2-2,,(2)}
Delete the "test" branch even if the "master" branch (or whichever branch is
currently checked out) does not have all commits from the test branch.
@end table

@item  Listing branches from a specific remote 
@example
$ git branch -r -l '<remote>/<pattern>'                 (1)
$ git for-each-ref 'refs/remotes/<remote>/<pattern>'    (2)
@end example


@table @asis

@item @pxref{CO3-1,,(1)}
Using @samp{-a} would conflate <remote> with any local branches you happen to
have been prefixed with the same <remote> pattern.

@item @pxref{CO3-2,,(2)}
@samp{for-each-ref} can take a wide range of options. See
git-for-each-ref(1)
@end table
@end table

Patterns will normally need quoting.

@noindent

@chapheading NOTES

If you are creating a branch that you want to switch to immediately, it is
easier to use the "git switch" command with its @samp{-c} option to do the same
thing with a single command.

The options @samp{--contains}, @samp{--no-contains}, @samp{--merged} and @samp{--no-merged}
serve four related but different purposes:

@itemize 

@item
@samp{--contains <commit>} is used to find all branches which will need special
attention if <commit> were to be rebased or amended, since those branches
contain the specified <commit>.

@item
@samp{--no-contains <commit>} is the inverse of that, i.e. branches that don’t
contain the specified <commit>.

@item
@samp{--merged} is used to find all branches which can be safely deleted, since
those branches are fully contained by HEAD.

@item
@samp{--no-merged} is used to find branches which are candidates for merging into
HEAD, since those branches are not fully contained by HEAD.
@end itemize

複数の @samp{--contains} フィルターと @samp{--no-contains} フィルターを組み合わせる場合、少なくとも1つの @samp{--contains}
コミットを含み、 @samp{--no-contains} コミットを含まない参照のみが表示されます。

複数の @samp{--merged} フィルターと @samp{--no-merged} フィルターを組み合わせると、少なくとも1つの @samp{--merged}
コミットから到達可能で、 @samp{--no-merged} コミットのいずれからも到達できない参照のみが表示されます。

@noindent

@chapheading SEE ALSO

git-check-ref-format(1), git-fetch(1),
git-remote(1),
@uref{user-manual.html#what-is-a-branch,“Understanding history: What is a branch?”} in the Git User’s Manual.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-bugreport,,,Top
@chapheading Name

git-bugreport — ユーザーがバグ報告を提出するための情報を収集する

@noindent

@chapheading Synopsis

@display
git bugreport [(-o | --output-directory) <path>] [(-s | --suffix) <format>]
@end display


@noindent

@chapheading DESCRIPTION

ユーザーのマシン、Gitクライアント、リポジトリの状態に関する情報、およびユーザーが観察した動作に関する情報の入力書式を(例えば、Gitメーリングリストに観察されたバグを報告するために)、ユーザーが共有できる単一のテキストファイルとして獲得します。

以下の情報がユーザーに要求されます:

@itemize 

@item
再現手順

@item
期待する動作

@item
実際の動作
@end itemize

以下の情報が自動的に収集されます:

@itemize 

@item
@emph{git version --build-options}

@item
uname sysname と release と version と machine strings

@item
コンパイラ指定情報文字列

@item
有効なフックのリスト

@item
$SHELL
@end itemize

このツールは、通常のGitセットアッププロセスを介して呼び出されます。つまり、関連する構成ファイルが読み取れない場合など、起動できない場合があります。
この種のシナリオでは、手動で助けを求めるときに、上記の種類の情報を手動で収集すると役立つ場合があります。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-o <path>} 
@itemx  @samp{--output-directory <path>} 
結果のバグレポートファイルを現在のディレクトリではなく @samp{<path>} に配置します。

@item  @samp{-s <format>} 
@itemx  @samp{--suffix <format>} 
バグレポート名の代替サフィックスを指定して、 @emph{git-bugreport-<formatted suffix>} という名前のファイルを作成します。
これは、 strftime(3) 形式の文字列の形式をとる必要があります。現在の現地時間が使用されます。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-bundle,,,Top
@chapheading Name

git-bundle — Move objects and refs by archive

@noindent

@chapheading Synopsis

@display
git bundle create [-q | --quiet | --progress | --all-progress] [--all-progress-implied]
                    [--version=<version>] <file> <git-rev-list-args>
git bundle verify [-q | --quiet] <file>
git bundle list-heads <file> [<refname>…]
git bundle unbundle [--progress] <file> [<refname>…]
@end display


@noindent

@chapheading DESCRIPTION

Create, unpack, and manipulate "bundle" files. Bundles are used for the
"offline" transfer of Git objects without an active "server" sitting on the
other side of the network connection.

They can be used to create both incremental and full backups of a
repository, and to relay the state of the references in one repository to
another.

Git commands that fetch or otherwise "read" via protocols such as @samp{ssh://}
and @samp{https://} can also operate on bundle files. It is possible
git-clone(1) a new repository from a bundle, to use
git-fetch(1) to fetch from one, and to list the references contained
within it with git-ls-remote(1). There’s no corresponding "write"
support, i.e.a @emph{git push} into a bundle is not supported.

See the "EXAMPLES" section below for examples of how to use bundles.

@noindent

@chapheading BUNDLE FORMAT

Bundles are @samp{.pack} files (see git-pack-objects(1)) with a header
indicating what references are contained within the bundle.

Like the the packed archive format itself bundles can either be
self-contained, or be created using exclusions.  See the "OBJECT
PREREQUISITES" section below.

Bundles created using revision exclusions are "thin packs" created using the
@samp{--thin} option to git-pack-objects(1), and unbundled using the
@samp{--fix-thin} option to git-index-pack(1).

There is no option to create a "thick pack" when using revision exclusions,
users should not be concerned about the difference. By using "thin packs"
bundles created using exclusions are smaller in size. That they’re "thin"
under the hood is merely noted here as a curiosity, and as a reference to
other documentation

See @uref{technical/bundle-format.html,the @samp{bundle-format} documentation} for
more details and the discussion of "thin pack" in
@uref{technical/pack-format.html,the pack format documentation} for further
details.

@noindent

@chapheading OPTIONS

@table @asis

@item  create [options] <file> <git-rev-list-args> 
Used to create a bundle named @emph{file}.  This requires the
@emph{<git-rev-list-args>} arguments to define the bundle contents.  @emph{options}
contains the options specific to the @emph{git bundle create} subcommand.

@item  verify <file> 
Used to check that a bundle file is valid and will apply cleanly to the
current repository.  This includes checks on the bundle format itself as
well as checking that the prerequisite commits exist and are fully linked in
the current repository.  @emph{git bundle} prints a list of missing commits, if
any, and exits with a non-zero status.

@item  list-heads <file> 
Lists the references defined in the bundle.  If followed by a list of
references, only references matching those given are printed out.

@item  unbundle <file> 
Passes the objects in the bundle to @emph{git index-pack} for storage in the
repository, then prints the names of all defined references. If a list of
references is given, only references matching those in the list are
printed. This command is really plumbing, intended to be called only by @emph{git
fetch}.

@item  <git-rev-list-args> 
A list of arguments, acceptable to @emph{git rev-parse} and @emph{git rev-list} (and
containing a named ref, see SPECIFYING REFERENCES below), that specifies the
specific objects and references to transport.  For example,
@samp{master~10..master} causes the current master reference to be packaged along
with all objects added since its 10th ancestor commit.  There is no explicit
limit to the number of references and objects that may be packaged.

@item  [<refname>…] 
A list of references used to limit the references reported as
available. This is principally of use to @emph{git fetch}, which expects to
receive only those references asked for and not necessarily everything in
the pack (in this case, @emph{git bundle} acts like @emph{git fetch-pack}).

@item  @samp{--progress} 
Progress status is reported on the standard error stream by default when it
is attached to a terminal, unless -q is specified. This flag forces progress
status even if the standard error stream is not directed to a terminal.

@item  @samp{--all-progress} 
When --stdout is specified then progress report is displayed during the
object count and compression phases but inhibited during the write-out
phase. The reason is that in some cases the output stream is directly linked
to another command which may wish to display progress status of its own as
it processes incoming pack data.  This flag is like --progress except that
it forces progress report for the write-out phase as well even if --stdout
is used.

@item  @samp{--all-progress-implied} 
This is used to imply --all-progress whenever progress display is
activated.  Unlike --all-progress this flag doesn’t actually force any
progress display by itself.

@item  @samp{--version=<version>} 
Specify the bundle version.  Version 2 is the older format and can only be
used with SHA-1 repositories; the newer version 3 contains capabilities that
permit extensions. The default is the oldest supported format, based on the
hash algorithm in use.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
This flag makes the command not to report its progress on the standard error
stream.
@end table

@noindent

@chapheading SPECIFYING REFERENCES

Revisions must accompanied by reference names to be packaged in a bundle.

More than one reference may be packaged, and more than one set of
prerequisite objects can be specified.  The objects packaged are those not
contained in the union of the prerequisites.

The @emph{git bundle create} command resolves the reference names for you using
the same rules as @samp{git rev-parse --abbrev-ref=loose}. Each prerequisite can
be specified explicitly (e.g. @samp{^master~10}), or implicitly
(e.g. @samp{master~10..master}, @samp{--since=10.days.ago master}).

All of these simple cases are OK (assuming we have a "master" and "next"
branch):

@example
$ git bundle create master.bundle master
$ echo master | git bundle create master.bundle --stdin
$ git bundle create master-and-next.bundle master next
$ (echo master; echo next) | git bundle create master-and-next.bundle --stdin
@end example


And so are these (and the same but omitted @samp{--stdin} examples):

@example
$ git bundle create recent-master.bundle master~10..master
$ git bundle create recent-updates.bundle master~10..master next~5..next
@end example


A revision name or a range whose right-hand-side cannot be resolved to a
reference is not accepted:

@example
$ git bundle create HEAD.bundle $(git rev-parse HEAD)
fatal: Refusing to create empty bundle.
$ git bundle create master-yesterday.bundle master~10..master~5
fatal: Refusing to create empty bundle.
@end example


@noindent

@chapheading OBJECT PREREQUISITES

When creating bundles it is possible to create a self-contained bundle that
can be unbundled in a repository with no common history, as well as
providing negative revisions to exclude objects needed in the earlier parts
of the history.

Feeding a revision such as @samp{new} to @samp{git bundle create} will create a bundle
file that contains all the objects reachable from the revision @samp{new}. That
bundle can be unbundled in any repository to obtain a full history that
leads to the revision @samp{new}:

@example
$ git bundle create full.bundle new
@end example


A revision range such as @samp{old..new} will produce a bundle file that will
require the revision @samp{old} (and any objects reachable from it)  to exist for
the bundle to be "unbundle"-able:

@example
$ git bundle create full.bundle old..new
@end example


A self-contained bundle without any prerequisites can be extracted into
anywhere, even into an empty repository, or be cloned from (i.e., @samp{new}, but
not @samp{old..new}).

It is okay to err on the side of caution, causing the bundle file to contain
objects already in the destination, as these are ignored when unpacking at
the destination.

If you want to match @samp{git clone --mirror}, which would include your refs
such as @samp{refs/remotes/*}, use @samp{--all}.  If you want to provide the same set
of refs that a clone directly from the source repository would get, use
@samp{--branches --tags} for the @samp{<git-rev-list-args>}.

The @emph{git bundle verify} command can be used to check whether your recipient
repository has the required prerequisite commits for a bundle.

@noindent

@chapheading EXAMPLES

Assume you want to transfer the history from a repository R1 on machine A to
another repository R2 on machine B.  For whatever reason, direct connection
between A and B is not allowed, but we can move data from A to B via some
mechanism (CD, email, etc.).  We want to update R2 with development made on
the branch master in R1.

To bootstrap the process, you can first create a bundle that does not have
any prerequisites. You can use a tag to remember up to what commit you last
processed, in order to make it easy to later update the other repository
with an incremental bundle:

@example
machineA$ cd R1
machineA$ git bundle create file.bundle master
machineA$ git tag -f lastR2bundle master
@end example


Then you transfer file.bundle to the target machine B. Because this bundle
does not require any existing object to be extracted, you can create a new
repository on machine B by cloning from it:

@example
machineB$ git clone -b master /home/me/tmp/file.bundle R2
@end example


This will define a remote called "origin" in the resulting repository that
lets you fetch and pull from the bundle. The $GIT_DIR/config file in R2 will
have an entry like this:

@example
[remote "origin"]
    url = /home/me/tmp/file.bundle
    fetch = refs/heads/*:refs/remotes/origin/*
@end example


To update the resulting mine.git repository, you can fetch or pull after
replacing the bundle stored at /home/me/tmp/file.bundle with incremental
updates.

After working some more in the original repository, you can create an
incremental bundle to update the other repository:

@example
machineA$ cd R1
machineA$ git bundle create file.bundle lastR2bundle..master
machineA$ git tag -f lastR2bundle master
@end example


You then transfer the bundle to the other machine to replace
/home/me/tmp/file.bundle, and pull from it.

@example
machineB$ cd R2
machineB$ git pull
@end example


If you know up to what commit the intended recipient repository should have
the necessary objects, you can use that knowledge to specify the
prerequisites, giving a cut-off point to limit the revisions and objects
that go in the resulting bundle. The previous example used the lastR2bundle
tag for this purpose, but you can use any other options that you would give
to the git-log(1) command. Here are more examples:

You can use a tag that is present in both:

@example
$ git bundle create mybundle v1.0.0..master
@end example


You can use a prerequisite based on time:

@example
$ git bundle create mybundle --since=10.days master
@end example


You can use the number of commits:

@example
$ git bundle create mybundle -10 master
@end example


You can run @samp{git-bundle verify} to see if you can extract from a bundle that
was created with a prerequisite:

@example
$ git bundle verify mybundle
@end example


This will list what commits you must have in order to extract from the
bundle and will error out if you do not have them.

A bundle from a recipient repository’s point of view is just like a regular
repository which it fetches or pulls from. You can, for example, map
references when fetching:

@example
$ git fetch mybundle master:localRef
@end example


You can also see what references it offers:

@example
$ git ls-remote mybundle
@end example


@noindent

@chapheading GIT

Part of the git(1) suite

@node git-cat-file,,,Top
@chapheading Name

git-cat-file — Provide content or type and size information for repository objects

@noindent

@chapheading Synopsis

@display
git cat-file (-t [--allow-unknown-type]| -s [--allow-unknown-type]| -e | -p | <type> | --textconv | --filters ) [--path=<path>] <object>
git cat-file (--batch[=<format>] | --batch-check[=<format>]) [ --textconv | --filters ] [--follow-symlinks]
@end display


@noindent

@chapheading DESCRIPTION

In its first form, the command provides the content or the type of an object
in the repository. The type is required unless @samp{-t} or @samp{-p} is used to find
the object type, or @samp{-s} is used to find the object size, or @samp{--textconv} or
@samp{--filters} is used (which imply type "blob").

In the second form, a list of objects (separated by linefeeds) is provided
on stdin, and the SHA-1, type, and size of each object is printed on
stdout. The output format can be overridden using the optional @samp{<format>}
argument. If either @samp{--textconv} or @samp{--filters} was specified, the input is
expected to list the object names followed by the path name, separated by a
single whitespace, so that the appropriate drivers can be determined.

@noindent

@chapheading OPTIONS

@table @asis

@item  <object> 
The name of the object to show.  For a more complete list of ways to spell
object names, see the "SPECIFYING REVISIONS" section in
gitrevisions(7).

@item  @samp{-t} 
Instead of the content, show the object type identified by @samp{<object>}.

@item  @samp{-s} 
Instead of the content, show the object size identified by @samp{<object>}.

@item  @samp{-e} 
Exit with zero status if @samp{<object>} exists and is a valid object. If
@samp{<object>} is of an invalid format exit with non-zero and emits an error on
stderr.

@item  @samp{-p} 
Pretty-print the contents of @samp{<object>} based on its type.

@item  <type> 
Typically this matches the real type of @samp{<object>} but asking for a type
that can trivially be dereferenced from the given @samp{<object>} is also
permitted.  An example is to ask for a "tree" with @samp{<object>} being a commit
object that contains it, or to ask for a "blob" with @samp{<object>} being a tag
object that points at it.

@item  @samp{--textconv} 
Show the content as transformed by a textconv filter. In this case,
@samp{<object>} has to be of the form @samp{<tree-ish>:<path>}, or @samp{:<path>} in order
to apply the filter to the content recorded in the index at @samp{<path>}.

@item  @samp{--filters} 
Show the content as converted by the filters configured in the current
working tree for the given @samp{<path>} (i.e. smudge filters, end-of-line
conversion, etc). In this case, @samp{<object>} has to be of the form
@samp{<tree-ish>:<path>}, or @samp{:<path>}.

@item  @samp{--path=<path>} 
For use with @samp{--textconv} or @samp{--filters}, to allow specifying an object name
and a path separately, e.g. when it is difficult to figure out the revision
from which the blob came.

@item  @samp{--batch} 
@itemx  @samp{--batch=<format>} 
Print object information and contents for each object provided on stdin.
May not be combined with any other options or arguments except @samp{--textconv}
or @samp{--filters}, in which case the input lines also need to specify the path,
separated by whitespace.  See the section @samp{BATCH OUTPUT} below for details.

@item  @samp{--batch-check} 
@itemx  @samp{--batch-check=<format>} 
Print object information for each object provided on stdin.  May not be
combined with any other options or arguments except @samp{--textconv} or
@samp{--filters}, in which case the input lines also need to specify the path,
separated by whitespace.  See the section @samp{BATCH OUTPUT} below for details.

@item  @samp{--batch-all-objects} 
Instead of reading a list of objects on stdin, perform the requested batch
operation on all objects in the repository and any alternate object stores
(not just reachable objects).  Requires @samp{--batch} or @samp{--batch-check} be
specified. Note that the objects are visited in order sorted by their
hashes.

@item  @samp{--buffer} 
Normally batch output is flushed after each object is output, so that a
process can interactively read and write from @samp{cat-file}. With this option,
the output uses normal stdio buffering; this is much more efficient when
invoking @samp{--batch-check} on a large number of objects.

@item  @samp{--unordered} 
When @samp{--batch-all-objects} is in use, visit objects in an order which may be
more efficient for accessing the object contents than hash order. The exact
details of the order are unspecified, but if you do not require a specific
order, this should generally result in faster output, especially with
@samp{--batch}.  Note that @samp{cat-file} will still show each object only once, even
if it is stored multiple times in the repository.

@item  @samp{--allow-unknown-type} 
Allow @samp{-s} or @samp{-t} to query broken/corrupt objects of unknown type.

@item  @samp{--follow-symlinks} 
With @samp{--batch} or @samp{--batch-check}, follow symlinks inside the repository
when requesting objects with extended SHA-1 expressions of the form
tree-ish:path-in-tree.  Instead of providing output about the link itself,
provide output about the linked-to object.  If a symlink points outside the
tree-ish (e.g. a link to @samp{/foo} or a root-level link to @samp{../foo}), the
portion of the link which is outside the tree will be printed.

This option does not (currently) work correctly when an object in the index
is specified (e.g. @samp{:link} instead of @samp{HEAD:link}) rather than one in the
tree.

This option cannot (currently) be used unless @samp{--batch} or @samp{--batch-check}
is used.

For example, consider a git repository containing:

@example
f: a file containing "hello\n"
link: a symlink to f
dir/link: a symlink to ../f
plink: a symlink to ../f
alink: a symlink to /etc/passwd
@end example

For a regular file @samp{f}, @samp{echo HEAD:f | git cat-file --batch} would print

@example
ce013625030ba8dba906f756967f9e9ca394464a blob 6
@end example

And @samp{echo HEAD:link | git cat-file --batch --follow-symlinks} would print
the same thing, as would @samp{HEAD:dir/link}, as they both point at @samp{HEAD:f}.

Without @samp{--follow-symlinks}, these would print data about the symlink
itself.  In the case of @samp{HEAD:link}, you would see

@example
4d1ae35ba2c8ec712fa2a379db44ad639ca277bd blob 1
@end example

Both @samp{plink} and @samp{alink} point outside the tree, so they would respectively
print:

@example
symlink 4
../f
@end example

@example
symlink 11
/etc/passwd
@end example
@end table

@noindent

@chapheading OUTPUT

If @samp{-t} is specified, one of the @samp{<type>}.

If @samp{-s} is specified, the size of the @samp{<object>} in bytes.

If @samp{-e} is specified, no output, unless the @samp{<object>} is malformed.

If @samp{-p} is specified, the contents of @samp{<object>} are pretty-printed.

If @samp{<type>} is specified, the raw (though uncompressed) contents of the
@samp{<object>} will be returned.

@noindent

@chapheading BATCH OUTPUT

If @samp{--batch} or @samp{--batch-check} is given, @samp{cat-file} will read objects from
stdin, one per line, and print information about them. By default, the whole
line is considered as an object, as if it were fed to
git-rev-parse(1).

You can specify the information shown for each object by using a custom
@samp{<format>}. The @samp{<format>} is copied literally to stdout for each object,
with placeholders of the form @samp{%(atom)} expanded, followed by a newline. The
available atoms are:

@table @asis

@item  @samp{objectname} 
The full hex representation of the object name.

@item  @samp{objecttype} 
The type of the object (the same as @samp{cat-file -t} reports).

@item  @samp{objectsize} 
The size, in bytes, of the object (the same as @samp{cat-file -s} reports).

@item  @samp{objectsize:disk} 
The size, in bytes, that the object takes up on disk. See the note about
on-disk sizes in the @samp{CAVEATS} section below.

@item  @samp{deltabase} 
If the object is stored as a delta on-disk, this expands to the full hex
representation of the delta base object name.  Otherwise, expands to the
null OID (all zeroes). See @samp{CAVEATS} below.

@item  @samp{rest} 
If this atom is used in the output string, input lines are split at the
first whitespace boundary. All characters before that whitespace are
considered to be the object name; characters after that first run of
whitespace (i.e., the "rest" of the line) are output in place of the
@samp{%(rest)} atom.
@end table

If no format is specified, the default format is @samp{%(objectname)
%(objecttype) %(objectsize)}.

If @samp{--batch} is specified, the object information is followed by the object
contents (consisting of @samp{%(objectsize)} bytes), followed by a newline.

For example, @samp{--batch} without a custom format would produce:

@example
<oid> SP <type> SP <size> LF
<contents> LF
@end example


Whereas @samp{--batch-check='%(objectname) %(objecttype)'} would produce:

@example
<oid> SP <type> LF
@end example


If a name is specified on stdin that cannot be resolved to an object in the
repository, then @samp{cat-file} will ignore any custom format and print:

@example
<object> SP missing LF
@end example


If a name is specified that might refer to more than one object (an
ambiguous short sha), then @samp{cat-file} will ignore any custom format and
print:

@example
<object> SP ambiguous LF
@end example


If @samp{--follow-symlinks} is used, and a symlink in the repository points
outside the repository, then @samp{cat-file} will ignore any custom format and
print:

@example
symlink SP <size> LF
<symlink> LF
@end example


The symlink will either be absolute (beginning with a @samp{/}), or relative to
the tree root.  For instance, if dir/link points to @samp{../../foo}, then
@samp{<symlink>} will be @samp{../foo}.  @samp{<size>} is the size of the symlink in bytes.

If @samp{--follow-symlinks} is used, the following error messages will be
displayed:

@example
<object> SP missing LF
@end example


is printed when the initial symlink requested does not exist.

@example
dangling SP <size> LF
<object> LF
@end example


is printed when the initial symlink exists, but something that it
(transitive-of) points to does not.

@example
loop SP <size> LF
<object> LF
@end example


is printed for symlink loops (or any symlinks that require more than 40 link
resolutions to resolve).

@example
notdir SP <size> LF
<object> LF
@end example


is printed when, during symlink resolution, a file is used as a directory
name.

@noindent

@chapheading CAVEATS

Note that the sizes of objects on disk are reported accurately, but care
should be taken in drawing conclusions about which refs or objects are
responsible for disk usage. The size of a packed non-delta object may be
much larger than the size of objects which delta against it, but the choice
of which object is the base and which is the delta is arbitrary and is
subject to change during a repack.

Note also that multiple copies of an object may be present in the object
database; in this case, it is undefined which copy’s size or delta base will
be reported.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-check-attr,,,Top
@chapheading Name

git-check-attr — Display gitattributes information

@noindent

@chapheading Synopsis

@display
git check-attr [-a | --all | <attr>…] [--] <pathname>…
git check-attr --stdin [-z] [-a | --all | <attr>…]
@end display


@noindent

@chapheading DESCRIPTION

For every pathname, this command will list if each attribute is
@emph{unspecified}, @emph{set}, or @emph{unset} as a gitattribute on that pathname.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-a, --all} 
List all attributes that are associated with the specified paths.  If this
option is used, then @emph{unspecified} attributes will not be included in the
output.

@item  @samp{--cached} 
Consider @samp{.gitattributes} in the index only, ignoring the working tree.

@item  @samp{--stdin} 
Read pathnames from the standard input, one per line, instead of from the
command-line.

@item  @samp{-z} 
The output format is modified to be machine-parsable.  If @samp{--stdin} is also
given, input paths are separated with a NUL character instead of a linefeed
character.

@item  -- 
Interpret all preceding arguments as attributes and all following arguments
as path names.
@end table

If none of @samp{--stdin}, @samp{--all}, or @samp{--} is used, the first argument will be
treated as an attribute and the rest of the arguments as pathnames.

@noindent

@chapheading OUTPUT

The output is of the form: <path> COLON SP <attribute> COLON SP <info> LF

unless @samp{-z} is in effect, in which case NUL is used as delimiter: <path> NUL
<attribute> NUL <info> NUL

<path> is the path of a file being queried, <attribute> is an attribute
being queried and <info> can be either:

@table @asis

@item  @emph{unspecified} 
when the attribute is not defined for the path.

@item  @emph{unset} 
when the attribute is defined as false.

@item  @emph{set} 
when the attribute is defined as true.

@item  <value> 
when a value has been assigned to the attribute.
@end table

Buffering happens as documented under the @samp{GIT_FLUSH} option in
git(1).  The caller is responsible for avoiding deadlocks caused by
overfilling an input buffer or reading from an empty output buffer.

@noindent

@chapheading EXAMPLES

In the examples, the following @emph{.gitattributes} file is used:

@example
*.java diff=java -crlf myAttr
NoMyAttr.java !myAttr
README caveat=unspecified
@end example


@itemize 

@item
Listing a single attribute:
@end itemize

@example
$ git check-attr diff org/example/MyClass.java
org/example/MyClass.java: diff: java
@end example


@itemize 

@item
Listing multiple attributes for a file:
@end itemize

@example
$ git check-attr crlf diff myAttr -- org/example/MyClass.java
org/example/MyClass.java: crlf: unset
org/example/MyClass.java: diff: java
org/example/MyClass.java: myAttr: set
@end example


@itemize 

@item
Listing all attributes for a file:
@end itemize

@example
$ git check-attr --all -- org/example/MyClass.java
org/example/MyClass.java: diff: java
org/example/MyClass.java: myAttr: set
@end example


@itemize 

@item
Listing an attribute for multiple files:
@end itemize

@example
$ git check-attr myAttr -- org/example/MyClass.java org/example/NoMyAttr.java
org/example/MyClass.java: myAttr: set
org/example/NoMyAttr.java: myAttr: unspecified
@end example


@itemize 

@item
Not all values are equally unambiguous:
@end itemize

@example
$ git check-attr caveat README
README: caveat: unspecified
@end example


@noindent

@chapheading SEE ALSO

gitattributes(5).

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-check-ignore,,,Top
@chapheading Name

git-check-ignore — Debug gitignore / exclude files

@noindent

@chapheading Synopsis

@display
git check-ignore [<options>] <pathname>…
git check-ignore [<options>] --stdin
@end display


@noindent

@chapheading DESCRIPTION

For each pathname given via the command-line or from a file via @samp{--stdin},
check whether the file is excluded by .gitignore (or other input files to
the exclude mechanism) and output the path if it is excluded.

By default, tracked files are not shown at all since they are not subject to
exclude rules; but see ‘--no-index’.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-q, --quiet} 
Don’t output anything, just set exit status.  This is only valid with a
single pathname.

@item  @samp{-v, --verbose} 
Instead of printing the paths that are excluded, for each path that matches
an exclude pattern, print the exclude pattern together with the path.
(Matching an exclude pattern usually means the path is excluded, but if the
pattern begins with @emph{!} then it is a negated pattern and matching it means
the path is NOT excluded.)

For precedence rules within and between exclude sources, see
gitignore(5).

@item  @samp{--stdin} 
Read pathnames from the standard input, one per line, instead of from the
command-line.

@item  @samp{-z} 
The output format is modified to be machine-parsable (see below).  If
@samp{--stdin} is also given, input paths are separated with a NUL character
instead of a linefeed character.

@item  @samp{-n, --non-matching} 
Show given paths which don’t match any pattern.  This only makes sense when
@samp{--verbose} is enabled, otherwise it would not be possible to distinguish
between paths which match a pattern and those which don’t.

@item  @samp{--no-index} 
Don’t look in the index when undertaking the checks. This can be used to
debug why a path became tracked by e.g. @samp{git add .} and was not ignored by
the rules as expected by the user or when developing patterns including
negation to match a path previously added with @samp{git add -f}.
@end table

@noindent

@chapheading OUTPUT

By default, any of the given pathnames which match an ignore pattern will be
output, one per line.  If no pattern matches a given path, nothing will be
output for that path; this means that path will not be ignored.

If @samp{--verbose} is specified, the output is a series of lines of the form:

<source> <COLON> <linenum> <COLON> <pattern> <HT> <pathname>

<pathname> is the path of a file being queried, <pattern> is the matching
pattern, <source> is the pattern’s source file, and <linenum> is the line
number of the pattern within that source.  If the pattern contained a @samp{!}
prefix or @samp{/} suffix, it will be preserved in the output.  <source> will be
an absolute path when referring to the file configured by
@samp{core.excludesFile}, or relative to the repository root when referring to
@samp{.git/info/exclude} or a per-directory exclude file.

If @samp{-z} is specified, the pathnames in the output are delimited by the null
character; if @samp{--verbose} is also specified then null characters are also
used instead of colons and hard tabs:

<source> <NULL> <linenum> <NULL> <pattern> <NULL> <pathname> <NULL>

If @samp{-n} or @samp{--non-matching} are specified, non-matching pathnames will also
be output, in which case all fields in each output record except for
<pathname> will be empty.  This can be useful when running
non-interactively, so that files can be incrementally streamed to STDIN of a
long-running check-ignore process, and for each of these files, STDOUT will
indicate whether that file matched a pattern or not.  (Without this option,
it would be impossible to tell whether the absence of output for a given
file meant that it didn’t match any pattern, or that the output hadn’t been
generated yet.)

Buffering happens as documented under the @samp{GIT_FLUSH} option in
git(1).  The caller is responsible for avoiding deadlocks caused by
overfilling an input buffer or reading from an empty output buffer.

@noindent

@chapheading EXIT STATUS

@table @asis

@item  0 
One or more of the provided paths is ignored.

@item  1 
None of the provided paths are ignored.

@item  128 
A fatal error was encountered.
@end table

@noindent

@chapheading SEE ALSO

gitignore(5) git-config(1) git-ls-files(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-check-mailmap,,,Top
@chapheading Name

git-check-mailmap — 連絡先(contacts)の、正式な名前と電子メールアドレスを表示

@noindent

@chapheading Synopsis

@display
git check-mailmap [<options>] <contact>…
@end display


@noindent

@chapheading DESCRIPTION

コマンドライン指定または、(@samp{--stdin} を使用する場合)標準入力からの各 “Name <user@@host>” または
“<user@@host>” について、その人の正規名と電子メールアドレス(以下 "Mapping Authors"
参照)を検索します。見つかった場合は、それらを印刷します。それ以外の場合は、入力をそのまま出力します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--stdin} 
コマンドラインで指定された連絡先(contacts)を消費後、標準入力から連絡先(contacts)を1行に1つずつ読み取ります。
@end table

@noindent

@chapheading OUTPUT

各連絡先(contact)ごとに、改行で終了する1行が出力されます。 名前が @emph{mailmap} に提供または認識されている場合、 “Name
<user@@host>” が出力されます。それ以外の場合は、 “<user@@host>” のみが出力されます。

@noindent

@chapheading CONFIGURATION

カスタムの @samp{.mailmap} ターゲットファイルまたはオブジェクトを指定する方法については、 git-config(1) の
@samp{mailmap.file} と @samp{mailmap.blob} を参照してください。

@noindent

@chapheading MAPPING AUTHORS

gitmailmap(5) 参照。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-check-ref-format,,,Top
@chapheading Name

git-check-ref-format — Ensures that a reference name is well formed

@noindent

@chapheading Synopsis

@display
git check-ref-format [--normalize]
       [--[no-]allow-onelevel] [--refspec-pattern]
       <refname>
git check-ref-format --branch <branchname-shorthand>
@end display


@noindent

@chapheading DESCRIPTION

Checks if a given @emph{refname} is acceptable, and exits with a non-zero status
if it is not.

A reference is used in Git to specify branches and tags.  A branch head is
stored in the @samp{refs/heads} hierarchy, while a tag is stored in the
@samp{refs/tags} hierarchy of the ref namespace (typically in
@samp{$GIT_DIR/refs/heads} and @samp{$GIT_DIR/refs/tags} directories or, as entries in
file @samp{$GIT_DIR/packed-refs} if refs are packed by @samp{git gc}).

Git imposes the following rules on how references are named:

@enumerate 

@item
They can include slash @samp{/} for hierarchical (directory)  grouping, but no
slash-separated component can begin with a dot @samp{.} or end with the sequence
@samp{.lock}.

@item
They must contain at least one @samp{/}. This enforces the presence of a category
like @samp{heads/}, @samp{tags/} etc. but the actual names are not restricted.  If the
@samp{--allow-onelevel} option is used, this rule is waived.

@item
They cannot have two consecutive dots @samp{..} anywhere.

@item
They cannot have ASCII control characters (i.e. bytes whose values are lower
than \040, or \177 @samp{DEL}), space, tilde @samp{~}, caret @samp{^}, or colon @samp{:}
anywhere.

@item
They cannot have question-mark @samp{?}, asterisk @samp{*}, or open bracket @samp{[}
anywhere.  See the @samp{--refspec-pattern} option below for an exception to this
rule.

@item
They cannot begin or end with a slash @samp{/} or contain multiple consecutive
slashes (see the @samp{--normalize} option below for an exception to this rule)

@item
They cannot end with a dot @samp{.}.

@item
They cannot contain a sequence @samp{@@@{}.

@item
They cannot be the single character @samp{@@}.

@item
They cannot contain a @samp{\}.
@end enumerate

These rules make it easy for shell script based tools to parse reference
names, pathname expansion by the shell when a reference name is used
unquoted (by mistake), and also avoid ambiguities in certain reference name
expressions (see gitrevisions(7)):

@enumerate 

@item
A double-dot @samp{..} is often used as in @samp{ref1..ref2}, and in some contexts
this notation means @samp{^ref1 ref2} (i.e. not in @samp{ref1} and in @samp{ref2}).

@item
A tilde @samp{~} and caret @samp{^} are used to introduce the postfix @emph{nth parent} and
@emph{peel onion} operation.

@item
A colon @samp{:} is used as in @samp{srcref:dstref} to mean "use srcref’s value and
store it in dstref" in fetch and push operations.  It may also be used to
select a specific object such as with @emph{git cat-file}: "git cat-file blob
v1.3.3:refs.c".

@item
at-open-brace @samp{@@@{} is used as a notation to access a reflog entry.
@end enumerate

With the @samp{--branch} option, the command takes a name and checks if it can be
used as a valid branch name (e.g. when creating a new branch). But be
cautious when using the previous checkout syntax that may refer to a
detached HEAD state.  The rule @samp{git check-ref-format --branch $name}
implements may be stricter than what @samp{git check-ref-format refs/heads/$name}
says (e.g. a dash may appear at the beginning of a ref component, but it is
explicitly forbidden at the beginning of a branch name).  When run with
@samp{--branch} option in a repository, the input is first expanded for the
“previous checkout syntax” @samp{@@@{-n@}}.  For example, @samp{@@@{-1@}} is a way to
refer the last thing that was checked out using "git switch" or "git
checkout" operation.  This option should be used by porcelains to accept
this syntax anywhere a branch name is expected, so they can act as if you
typed the branch name. As an exception note that, the “previous checkout
operation” might result in a commit object name when the N-th last thing
checked out was not a branch.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--[no-]allow-onelevel} 
Controls whether one-level refnames are accepted (i.e., refnames that do not
contain multiple @samp{/}-separated components).  The default is
@samp{--no-allow-onelevel}.

@item  @samp{--refspec-pattern} 
Interpret <refname> as a reference name pattern for a refspec (as used with
remote repositories).  If this option is enabled, <refname> is allowed to
contain a single @samp{*} in the refspec (e.g., @samp{foo/bar*/baz} or @samp{foo/bar*baz/}
but not @samp{foo/bar*/baz*}).

@item  @samp{--normalize} 
Normalize @emph{refname} by removing any leading slash (@samp{/})  characters and
collapsing runs of adjacent slashes between name components into a single
slash.  If the normalized refname is valid then print it to standard output
and exit with a status of 0, otherwise exit with a non-zero status.
(@samp{--print} is a deprecated way to spell @samp{--normalize}.)
@end table

@noindent

@chapheading EXAMPLES

@itemize 

@item
Print the name of the previous thing checked out:

@example
$ git check-ref-format --branch @@@{-1@}
@end example


@item
Determine the reference name to use for a new branch:

@example
$ ref=$(git check-ref-format --normalize "refs/heads/$newbranch")||
@{ echo "we do not like '$newbranch' as a branch name." >&2 ; exit 1 ; @}
@end example

@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-checkout-index,,,Top
@chapheading Name

git-checkout-index — Copy files from the index to the working tree

@noindent

@chapheading Synopsis

@display
git checkout-index [-u] [-q] [-a] [-f] [-n] [--prefix=<string>]
                   [--stage=<number>|all]
                   [--temp]
                   [-z] [--stdin]
                   [--] [<file>…]
@end display


@noindent

@chapheading DESCRIPTION

Will copy all files listed from the index to the working directory (not
overwriting existing files).

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-u} 
@itemx  @samp{--index} 
update stat information for the checked out entries in the index file.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
be quiet if files exist or are not in the index

@item  @samp{-f} 
@itemx  @samp{--force} 
forces overwrite of existing files

@item  @samp{-a} 
@itemx  @samp{--all} 
checks out all files in the index.  Cannot be used together with explicit
filenames.

@item  @samp{-n} 
@itemx  @samp{--no-create} 
Don’t checkout new files, only refresh files already checked out.

@item  @samp{--prefix=<string>} 
When creating files, prepend <string> (usually a directory including a
trailing /)

@item  @samp{--stage=<number>|all} 
Instead of checking out unmerged entries, copy out the files from named
stage.  <number> must be between 1 and 3.  Note: --stage=all automatically
implies --temp.

@item  @samp{--temp} 
Instead of copying the files to the working directory write the content to
temporary files.  The temporary name associations will be written to stdout.

@item  @samp{--stdin} 
Instead of taking list of paths from the command line, read list of paths
from the standard input.  Paths are separated by LF (i.e. one path per line)
by default.

@item  @samp{-z} 
Only meaningful with @samp{--stdin}; paths are separated with NUL character
instead of LF.

@item  -- 
Do not interpret any more arguments as options.
@end table

The order of the flags used to matter, but not anymore.

Just doing @samp{git checkout-index} does nothing. You probably meant @samp{git
checkout-index -a}. And if you want to force it, you want @samp{git
checkout-index -f -a}.

Intuitiveness is not the goal here. Repeatability is. The reason for the "no
arguments means no work" behavior is that from scripts you are supposed to
be able to do:

@example
$ find . -name '*.h' -print0 | xargs -0 git checkout-index -f --
@end example


which will force all existing @samp{*.h} files to be replaced with their cached
copies. If an empty command line implied "all", then this would
force-refresh everything in the index, which was not the point.  But since
@emph{git checkout-index} accepts --stdin it would be faster to use:

@example
$ find . -name '*.h' -print0 | git checkout-index -f -z --stdin
@end example


The @samp{--} is just a good idea when you know the rest will be filenames; it
will prevent problems with a filename of, for example, @samp{-a}.  Using @samp{--} is
probably a good policy in scripts.

@noindent

@chapheading Using --temp or --stage=all

When @samp{--temp} is used (or implied by @samp{--stage=all})  @emph{git checkout-index}
will create a temporary file for each index entry being checked out.  The
index will not be updated with stat information.  These options can be
useful if the caller needs all stages of all unmerged entries so that the
unmerged files can be processed by an external merge tool.

A listing will be written to stdout providing the association of temporary
file names to tracked path names.  The listing format has two variations:

@enumerate 

@item
tempname TAB path RS

The first format is what gets used when @samp{--stage} is omitted or is not
@samp{--stage=all}. The field tempname is the temporary file name holding the
file content and path is the tracked path name in the index.  Only the
requested entries are output.

@item
stage1temp SP stage2temp SP stage3tmp TAB path RS

The second format is what gets used when @samp{--stage=all}.  The three stage
temporary fields (stage1temp, stage2temp, stage3temp) list the name of the
temporary file if there is a stage entry in the index or @samp{.} if there is no
stage entry.  Paths which only have a stage 0 entry will always be omitted
from the output.
@end enumerate

In both formats RS (the record separator) is newline by default but will be
the null byte if -z was passed on the command line.  The temporary file
names are always safe strings; they will never contain directory separators
or whitespace characters.  The path field is always relative to the current
directory and the temporary file names are always relative to the top level
directory.

If the object being copied out to a temporary file is a symbolic link the
content of the link will be written to a normal file.  It is up to the
end-user or the Porcelain to make use of this information.

@noindent

@chapheading EXAMPLES

@table @asis

@item  To update and refresh only the files already checked out 
@example
$ git checkout-index -n -f -a && git update-index --ignore-missing --refresh
@end example


@item  Using @emph{git checkout-index} to "export an entire tree" 
The prefix ability basically makes it trivial to use @emph{git checkout-index} as
an "export as tree" function.  Just read the desired tree into the index,
and do:

@example
$ git checkout-index --prefix=git-export-dir/ -a
@end example


@samp{git checkout-index} will "export" the index into the specified directory.

The final "/" is important. The exported name is literally just prefixed
with the specified string.  Contrast this with the following example.

@item  Export files with a prefix 
@example
$ git checkout-index --prefix=.merged- Makefile
@end example


This will check out the currently cached copy of @samp{Makefile} into the file
@samp{.merged-Makefile}.
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-checkout,,,Top
@chapheading Name

git-checkout — ブランチの切り替え、または作業ツリーファイルの復元を行います。

@noindent

@chapheading Synopsis

@display
git checkout [-q] [-f] [-m] [<branch>]
git checkout [-q] [-f] [-m] --detach [<branch>]
git checkout [-q] [-f] [-m] [--detach] <commit>
git checkout [-q] [-f] [-m] [[-b|-B|--orphan] <new_branch>] [<start_point>]
git checkout [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <pathspec>…
git checkout [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] --pathspec-from-file=<file> [--pathspec-file-nul]
git checkout (-p|--patch) [<tree-ish>] [--] [<pathspec>…]
@end display


@noindent

@chapheading DESCRIPTION

Updates files in the working tree to match the version in the index or the
specified tree.  If no pathspec was given, @emph{git checkout} will also update
@samp{HEAD} to set the specified branch as the current branch.

@table @asis

@item  @emph{git checkout} [<branch>] 
To prepare for working on @samp{<branch>}, switch to it by updating the index and
the files in the working tree, and by pointing @samp{HEAD} at the branch. Local
modifications to the files in the working tree are kept, so that they can be
committed to the @samp{<branch>}.

If @samp{<branch>} is not found but there does exist a tracking branch in exactly
one remote (call it @samp{<remote>}) with a matching name and @samp{--no-guess} is not
specified, treat as equivalent to

@example
$ git checkout -b <branch> --track <remote>/<branch>
@end example


You could omit @samp{<branch>}, in which case the command degenerates to "check
out the current branch", which is a glorified no-op with rather expensive
side-effects to show only the tracking information, if exists, for the
current branch.

@item  @emph{git checkout} -b|-B <new_branch> [<start point>] 
Specifying @samp{-b} causes a new branch to be created as if
git-branch(1) were called and then checked out.  In this case you
can use the @samp{--track} or @samp{--no-track} options, which will be passed to @emph{git
branch}.  As a convenience, @samp{--track} without @samp{-b} implies branch creation;
see the description of @samp{--track} below.

If @samp{-B} is given, @samp{<new_branch>} is created if it doesn’t exist; otherwise,
it is reset. This is the transactional equivalent of

@example
$ git branch -f <branch> [<start point>]
$ git checkout <branch>
@end example


that is to say, the branch is not reset/created unless "git checkout" is
successful.

@item  @emph{git checkout} --detach [<branch>] 
@itemx  @emph{git checkout} [--detach] <commit> 
Prepare to work on top of @samp{<commit>}, by detaching @samp{HEAD} at it (see
"DETACHED HEAD" section), and updating the index and the files in the
working tree.  Local modifications to the files in the working tree are
kept, so that the resulting working tree will be the state recorded in the
commit plus the local modifications.

When the @samp{<commit>} argument is a branch name, the @samp{--detach} option can be
used to detach @samp{HEAD} at the tip of the branch (@samp{git checkout <branch>}
would check out that branch without detaching @samp{HEAD}).

Omitting @samp{<branch>} detaches @samp{HEAD} at the tip of the current branch.

@item  @emph{git checkout} [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <pathspec>… 
@itemx  @emph{git checkout} [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] --pathspec-from-file=<file> [--pathspec-file-nul] 
Overwrite the contents of the files that match the pathspec.  When the
@samp{<tree-ish>} (most often a commit) is not given, overwrite working tree with
the contents in the index.  When the @samp{<tree-ish>} is given, overwrite both
the index and the working tree with the contents at the @samp{<tree-ish>}.

The index may contain unmerged entries because of a previous failed merge.
By default, if you try to check out such an entry from the index, the
checkout operation will fail and nothing will be checked out.  Using @samp{-f}
will ignore these unmerged entries.  The contents from a specific side of
the merge can be checked out of the index by using @samp{--ours} or @samp{--theirs}.
With @samp{-m}, changes made to the working tree file can be discarded to
re-create the original conflicted merge result.

@item  @emph{git checkout} (-p|--patch) [<tree-ish>] [--] [<pathspec>…] 
This is similar to the previous mode, but lets you use the interactive
interface to show the "diff" output and choose which hunks to use in the
result.  See below for the description of @samp{--patch} option.
@end table

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-q} 
@itemx  @samp{--quiet} 
静かにします。フィードバックメッセージを抑制します。

@item  @samp{--progress} 
@itemx  @samp{--no-progress} 
Progress status is reported on the standard error stream by default when it
is attached to a terminal, unless @samp{--quiet} is specified. This flag enables
progress reporting even if not attached to a terminal, regardless of
@samp{--quiet}.

@item  @samp{-f} 
@itemx  @samp{--force} 
When switching branches, proceed even if the index or the working tree
differs from @samp{HEAD}.  This is used to throw away local changes.

When checking out paths from the index, do not fail upon unmerged entries;
instead, unmerged entries are ignored.

@item  @samp{--ours} 
@itemx  @samp{--theirs} 
When checking out paths from the index, check out stage #2 (@emph{ours}) or #3
(@emph{theirs}) for unmerged paths.

注意: @samp{git rebase} と @samp{git pull --rebase}
での作業中、「ours」と「theirs」が入れ替わっているように見える場合があることに注意してください。 @samp{--ours}
は、変更がリベースされるブランチからのバージョンを提供し、 @samp{--theirs} は、リベースされる作業を保持するブランチからのバージョンを提供します。

これは、リモートでの履歴を共有の正規の履歴として扱うワークフローで @samp{rebase}
が使用されているためです。リベースするブランチで行われた作業を、統合されるサードパーティの作業として扱います。そして、あなたは一時的にリベース中に正規の歴史の管理者の役割を引き受けています。正規の履歴の管理者として、リモートからの履歴を「私たち」(ours;
つまり、「私達の共有された正規の履歴」)として表示する必要があり、サイドブランチで行ったことは「彼ら」(theirs;つまり「その上での貢献者の作品」)として表示する必要があります。

@item  @samp{-b <new_branch>} 
Create a new branch named @samp{<new_branch>} and start it at @samp{<start_point>};
see git-branch(1) for details.

@item  @samp{-B <new_branch>} 
Creates the branch @samp{<new_branch>} and start it at @samp{<start_point>}; if it
already exists, then reset it to @samp{<start_point>}. This is equivalent to
running "git branch" with "-f"; see git-branch(1) for details.

@item  @samp{-t} 
@itemx  @samp{--track} 
When creating a new branch, set up "upstream" configuration. See "--track"
in git-branch(1) for details.

If no @samp{-b} option is given, the name of the new branch will be derived from
the remote-tracking branch, by looking at the local part of the refspec
configured for the corresponding remote, and then stripping the initial part
up to the "*".  This would tell us to use @samp{hack} as the local branch when
branching off of @samp{origin/hack} (or @samp{remotes/origin/hack}, or even
@samp{refs/remotes/origin/hack}).  If the given name has no slash, or the above
guessing results in an empty name, the guessing is aborted.  You can
explicitly give a name with @samp{-b} in such a case.

@item  @samp{--no-track} 
Do not set up "upstream" configuration, even if the @samp{branch.autoSetupMerge}
configuration variable is true.

@item  @samp{--guess} 
@itemx  @samp{--no-guess} 
If @samp{<branch>} is not found but there does exist a tracking branch in exactly
one remote (call it @samp{<remote>}) with a matching name, treat as equivalent to

@example
$ git checkout -b <branch> --track <remote>/<branch>
@end example


If the branch exists in multiple remotes and one of them is named by the
@samp{checkout.defaultRemote} configuration variable, we’ll use that one for the
purposes of disambiguation, even if the @samp{<branch>} isn’t unique across all
remotes. Set it to e.g. @samp{checkout.defaultRemote=origin} to always checkout
remote branches from there if @samp{<branch>} is ambiguous but exists on the
@emph{origin} remote. See also @samp{checkout.defaultRemote} in git-config(1).

@samp{--guess} is the default behavior. Use @samp{--no-guess} to disable it.

The default behavior can be set via the @samp{checkout.guess} configuration
variable.

@item  @samp{-l} 
Create the new branch’s reflog; see git-branch(1) for details.

@item  @samp{-d} 
@itemx  @samp{--detach} 
Rather than checking out a branch to work on it, check out a commit for
inspection and discardable experiments.  This is the default behavior of
@samp{git checkout <commit>} when @samp{<commit>} is not a branch name.  See the
"DETACHED HEAD" section below for details.

@item  @samp{--orphan <new_branch>} 
Create a new @emph{orphan} branch, named @samp{<new_branch>}, started from
@samp{<start_point>} and switch to it.  The first commit made on this new branch
will have no parents and it will be the root of a new history totally
disconnected from all the other branches and commits.

The index and the working tree are adjusted as if you had previously run
@samp{git checkout <start_point>}.  This allows you to start a new history that
records a set of paths similar to @samp{<start_point>} by easily running @samp{git
commit -a} to make the root commit.

This can be useful when you want to publish the tree from a commit without
exposing its full history. You might want to do this to publish an open
source branch of a project whose current tree is "clean", but whose full
history contains proprietary or otherwise encumbered bits of code.

If you want to start a disconnected history that records a set of paths that
is totally different from the one of @samp{<start_point>}, then you should clear
the index and the working tree right after creating the orphan branch by
running @samp{git rm -rf .} from the top level of the working tree.  Afterwards
you will be ready to prepare your new files, repopulating the working tree,
by copying them from elsewhere, extracting a tarball, etc.

@item  @samp{--ignore-skip-worktree-bits} 
In sparse checkout mode, @samp{git checkout -- <paths>} would update only entries
matched by @samp{<paths>} and sparse patterns in
@samp{$GIT_DIR/info/sparse-checkout}. This option ignores the sparse patterns and
adds back any files in @samp{<paths>}.

@item  @samp{-m} 
@itemx  @samp{--merge} 
When switching branches, if you have local modifications to one or more
files that are different between the current branch and the branch to which
you are switching, the command refuses to switch branches in order to
preserve your modifications in context.  However, with this option, a
three-way merge between the current branch, your working tree contents, and
the new branch is done, and you will be on the new branch.

When a merge conflict happens, the index entries for conflicting paths are
left unmerged, and you need to resolve the conflicts and mark the resolved
paths with @samp{git add} (or @samp{git rm} if the merge should result in deletion of
the path).

When checking out paths from the index, this option lets you recreate the
conflicted merge in the specified paths.

When switching branches with @samp{--merge}, staged changes may be lost.

@item  @samp{--conflict=<style>} 
The same as @samp{--merge} option above, but changes the way the conflicting
hunks are presented, overriding the @samp{merge.conflictStyle} configuration
variable.  Possible values are "merge" (default) and "diff3" (in addition to
what is shown by "merge" style, shows the original contents).

@item  @samp{-p} 
@itemx  @samp{--patch} 
Interactively select hunks in the difference between the @samp{<tree-ish>} (or
the index, if unspecified) and the working tree.  The chosen hunks are then
applied in reverse to the working tree (and if a @samp{<tree-ish>} was specified,
the index).

This means that you can use @samp{git checkout -p} to selectively discard edits
from your current working tree. See the “Interactive Mode” section of
git-add(1) to learn how to operate the @samp{--patch} mode.

Note that this option uses the no overlay mode by default (see also
@samp{--overlay}), and currently doesn’t support overlay mode.

@item  @samp{--ignore-other-worktrees} 
@samp{git checkout} refuses when the wanted ref is already checked out by another
worktree. This option makes it check the ref out anyway. In other words, the
ref can be held by more than one worktree.

@item  @samp{--overwrite-ignore} 
@itemx  @samp{--no-overwrite-ignore} 
Silently overwrite ignored files when switching branches. This is the
default behavior. Use @samp{--no-overwrite-ignore} to abort the operation when
the new branch contains ignored files.

@item  @samp{--recurse-submodules} 
@itemx  @samp{--no-recurse-submodules} 
Using @samp{--recurse-submodules} will update the content of all active
submodules according to the commit recorded in the superproject. If local
modifications in a submodule would be overwritten the checkout will fail
unless @samp{-f} is used. If nothing (or @samp{--no-recurse-submodules})  is used,
submodules working trees will not be updated.  Just like
git-submodule(1), this will detach @samp{HEAD} of the submodule.

@item  @samp{--overlay} 
@itemx  @samp{--no-overlay} 
In the default overlay mode, @samp{git checkout} never removes files from the
index or the working tree.  When specifying @samp{--no-overlay}, files that
appear in the index and working tree, but not in @samp{<tree-ish>} are removed,
to make them match @samp{<tree-ish>} exactly.

@item  @samp{--pathspec-from-file=<file>} 
Pathspec is passed in @samp{<file>} instead of commandline args. If @samp{<file>} is
exactly @samp{-} then standard input is used. Pathspec elements are separated by
LF or CR/LF. Pathspec elements can be quoted as explained for the
configuration variable @samp{core.quotePath} (see git-config(1)). See
also @samp{--pathspec-file-nul} and global @samp{--literal-pathspecs}.

@item  @samp{--pathspec-file-nul} 
Only meaningful with @samp{--pathspec-from-file}. Pathspec elements are separated
with NUL character and all other characters are taken literally (including
newlines and quotes).

@item  <branch> 
Branch to checkout; if it refers to a branch (i.e., a name that, when
prepended with "refs/heads/", is a valid ref), then that branch is checked
out. Otherwise, if it refers to a valid commit, your @samp{HEAD} becomes
"detached" and you are no longer on any branch (see below for details).

You can use the @samp{@@@{-N@}} syntax to refer to the N-th last branch/commit
checked out using "git checkout" operation. You may also specify @samp{-} which
is synonymous to @samp{@@@{-1@}}.

As a special case, you may use @samp{A...B} as a shortcut for the merge base of
@samp{A} and @samp{B} if there is exactly one merge base. You can leave out at most
one of @samp{A} and @samp{B}, in which case it defaults to @samp{HEAD}.

@item  <new_branch> 
Name for the new branch.

@item  <start_point> 
The name of a commit at which to start the new branch; see
git-branch(1) for details. Defaults to @samp{HEAD}.

As a special case, you may use @samp{"A...B"} as a shortcut for the merge base of
@samp{A} and @samp{B} if there is exactly one merge base. You can leave out at most
one of @samp{A} and @samp{B}, in which case it defaults to @samp{HEAD}.

@item  <tree-ish> 
Tree to checkout from (when paths are given). If not specified, the index
will be used.

As a special case, you may use @samp{"A...B"} as a shortcut for the merge base of
@samp{A} and @samp{B} if there is exactly one merge base. You can leave out at most
one of @samp{A} and @samp{B}, in which case it defaults to @samp{HEAD}.

@item  -- 
Do not interpret any more arguments as options.

@item  <pathspec>… 
Limits the paths affected by the operation.

For more details, see the @emph{pathspec} entry in gitglossary(7).
@end table

@noindent

@chapheading DETACHED HEAD

@samp{HEAD} normally refers to a named branch (e.g. @samp{master}). Meanwhile, each
branch refers to a specific commit. Let’s look at a repo with three commits,
one of them tagged, and with branch @samp{master} checked out:

@example
           HEAD (refers to branch 'master')
            |
            v
a---b---c  branch 'master' (refers to commit 'c')
    ^
    |
  tag 'v2.0' (refers to commit 'b')
@end example


When a commit is created in this state, the branch is updated to refer to
the new commit. Specifically, @emph{git commit} creates a new commit @samp{d}, whose
parent is commit @samp{c}, and then updates branch @samp{master} to refer to new
commit @samp{d}. @samp{HEAD} still refers to branch @samp{master} and so indirectly now
refers to commit @samp{d}:

@example
$ edit; git add; git commit

               HEAD (refers to branch 'master')
                |
                v
a---b---c---d  branch 'master' (refers to commit 'd')
    ^
    |
  tag 'v2.0' (refers to commit 'b')
@end example


It is sometimes useful to be able to checkout a commit that is not at the
tip of any named branch, or even to create a new commit that is not
referenced by a named branch. Let’s look at what happens when we checkout
commit @samp{b} (here we show two ways this may be done):

@example
$ git checkout v2.0  # or
$ git checkout master^^

   HEAD (refers to commit 'b')
    |
    v
a---b---c---d  branch 'master' (refers to commit 'd')
    ^
    |
  tag 'v2.0' (refers to commit 'b')
@end example


Notice that regardless of which checkout command we use, @samp{HEAD} now refers
directly to commit @samp{b}. This is known as being in detached @samp{HEAD} state.  It
means simply that @samp{HEAD} refers to a specific commit, as opposed to
referring to a named branch. Let’s see what happens when we create a commit:

@example
$ edit; git add; git commit

     HEAD (refers to commit 'e')
      |
      v
      e
     /
a---b---c---d  branch 'master' (refers to commit 'd')
    ^
    |
  tag 'v2.0' (refers to commit 'b')
@end example


There is now a new commit @samp{e}, but it is referenced only by @samp{HEAD}. We can
of course add yet another commit in this state:

@example
$ edit; git add; git commit

         HEAD (refers to commit 'f')
          |
          v
      e---f
     /
a---b---c---d  branch 'master' (refers to commit 'd')
    ^
    |
  tag 'v2.0' (refers to commit 'b')
@end example


In fact, we can perform all the normal Git operations. But, let’s look at
what happens when we then checkout @samp{master}:

@example
$ git checkout master

               HEAD (refers to branch 'master')
      e---f     |
     /          v
a---b---c---d  branch 'master' (refers to commit 'd')
    ^
    |
  tag 'v2.0' (refers to commit 'b')
@end example


It is important to realize that at this point nothing refers to commit
@samp{f}. Eventually commit @samp{f} (and by extension commit @samp{e}) will be deleted by
the routine Git garbage collection process, unless we create a reference
before that happens. If we have not yet moved away from commit @samp{f}, any of
these will create a reference to it:

@example
$ git checkout -b foo   (1)
$ git branch foo        (2)
$ git tag foo           (3)
@end example


@table @asis

@item @pxref{CO1-1,,(1)}
creates a new branch @samp{foo}, which refers to commit @samp{f}, and then updates
@samp{HEAD} to refer to branch @samp{foo}. In other words, we’ll no longer be in
detached @samp{HEAD} state after this command.

@item @pxref{CO1-2,,(2)}
similarly creates a new branch @samp{foo}, which refers to commit @samp{f}, but leaves
@samp{HEAD} detached.

@item @pxref{CO1-3,,(3)}
creates a new tag @samp{foo}, which refers to commit @samp{f}, leaving @samp{HEAD}
detached.
@end table

If we have moved away from commit @samp{f}, then we must first recover its object
name (typically by using git reflog), and then we can create a reference to
it. For example, to see the last two commits to which @samp{HEAD} referred, we
can use either of these commands:

@example
$ git reflog -2 HEAD # or
$ git log -g -2 HEAD
@end example


@noindent

@chapheading ARGUMENT DISAMBIGUATION

When there is only one argument given and it is not @samp{--} (e.g. @samp{git checkout
abc}), and when the argument is both a valid @samp{<tree-ish>} (e.g. a branch
@samp{abc} exists) and a valid @samp{<pathspec>} (e.g. a file or a directory whose
name is "abc" exists), Git would usually ask you to disambiguate.  Because
checking out a branch is so common an operation, however, @samp{git checkout abc}
takes "abc" as a @samp{<tree-ish>} in such a situation.  Use @samp{git checkout --
<pathspec>} if you want to checkout these paths out of the index.

@noindent

@chapheading EXAMPLES

@enumerate 

@item
The following sequence checks out the @samp{master} branch, reverts the
@samp{Makefile} to two revisions back, deletes @samp{hello.c} by mistake, and gets it
back from the index.

@example
$ git checkout master             (1)
$ git checkout master~2 Makefile  (2)
$ rm -f hello.c
$ git checkout hello.c            (3)
@end example


@table @asis

@item @pxref{CO2-1,,(1)}
switch branch

@item @pxref{CO2-2,,(2)}
take a file out of another commit

@item @pxref{CO2-3,,(3)}
restore @samp{hello.c} from the index

If you want to check out @emph{all} C source files out of the index, you can say

@example
$ git checkout -- '*.c'
@end example


Note the quotes around @samp{*.c}.  The file @samp{hello.c} will also be checked out,
even though it is no longer in the working tree, because the file globbing
is used to match entries in the index (not in the working tree by the
shell).

If you have an unfortunate branch that is named @samp{hello.c}, this step would
be confused as an instruction to switch to that branch.  You should instead
write:

@example
$ git checkout -- hello.c
@end example

@end table

@item
After working in the wrong branch, switching to the correct branch would be
done using:

@example
$ git checkout mytopic
@end example


However, your "wrong" branch and correct @samp{mytopic} branch may differ in
files that you have modified locally, in which case the above checkout would
fail like this:

@example
$ git checkout mytopic
error: You have local changes to 'frotz'; not switching branches.
@end example


You can give the @samp{-m} flag to the command, which would try a three-way
merge:

@example
$ git checkout -m mytopic
Auto-merging frotz
@end example


After this three-way merge, the local modifications are @emph{not} registered in
your index file, so @samp{git diff} would show you what changes you made since
the tip of the new branch.

@item
When a merge conflict happens during switching branches with the @samp{-m}
option, you would see something like this:

@example
$ git checkout -m mytopic
Auto-merging frotz
ERROR: Merge conflict in frotz
fatal: merge program failed
@end example


At this point, @samp{git diff} shows the changes cleanly merged as in the
previous example, as well as the changes in the conflicted files.  Edit and
resolve the conflict and mark it resolved with @samp{git add} as usual:

@example
$ edit frotz
$ git add frotz
@end example

@end enumerate

@noindent

@chapheading SEE ALSO

git-switch(1), git-restore(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-cherry-pick,,,Top
@chapheading Name

git-cherry-pick — Apply the changes introduced by some existing commits

@noindent

@chapheading Synopsis

@display
git cherry-pick [--edit] [-n] [-m parent-number] [-s] [-x] [--ff]
                  [-S[<keyid>]] <commit>…
git cherry-pick (--continue | --skip | --abort | --quit)
@end display


@noindent

@chapheading DESCRIPTION

Given one or more existing commits, apply the change each one introduces,
recording a new commit for each.  This requires your working tree to be
clean (no modifications from the HEAD commit).

When it is not obvious how to apply a change, the following happens:

@enumerate 

@item
The current branch and @samp{HEAD} pointer stay at the last commit successfully
made.

@item
The @samp{CHERRY_PICK_HEAD} ref is set to point at the commit that introduced the
change that is difficult to apply.

@item
Paths in which the change applied cleanly are updated both in the index file
and in your working tree.

@item
For conflicting paths, the index file records up to three versions, as
described in the "TRUE MERGE" section of git-merge(1).  The working
tree files will include a description of the conflict bracketed by the usual
conflict markers @samp{<<<<<<<} and @samp{>>>>>>>}.

@item
No other modifications are made.
@end enumerate

See git-merge(1) for some hints on resolving such conflicts.

@noindent

@chapheading OPTIONS

@table @asis

@item  <commit>… 
Commits to cherry-pick.  For a more complete list of ways to spell commits,
see gitrevisions(7).  Sets of commits can be passed but no traversal
is done by default, as if the @samp{--no-walk} option was specified, see
git-rev-list(1). Note that specifying a range will feed all
<commit>… arguments to a single revision walk (see a later example that
uses @emph{maint master..next}).

@item  @samp{-e} 
@itemx  @samp{--edit} 
With this option, @emph{git cherry-pick} will let you edit the commit message
prior to committing.

@item  @samp{--cleanup=<mode>} 
This option determines how the commit message will be cleaned up before
being passed on to the commit machinery. See git-commit(1) for more
details. In particular, if the @emph{<mode>} is given a value of @samp{scissors},
scissors will be appended to @samp{MERGE_MSG} before being passed on in the case
of a conflict.

@item  @samp{-x} 
When recording the commit, append a line that says "(cherry picked from
commit …)" to the original commit message in order to indicate which
commit this change was cherry-picked from.  This is done only for cherry
picks without conflicts.  Do not use this option if you are cherry-picking
from your private branch because the information is useless to the
recipient.  If on the other hand you are cherry-picking between two publicly
visible branches (e.g. backporting a fix to a maintenance branch for an
older release from a development branch), adding this information can be
useful.

@item  @samp{-r} 
It used to be that the command defaulted to do @samp{-x} described above, and
@samp{-r} was to disable it.  Now the default is not to do @samp{-x} so this option is
a no-op.

@item  @samp{-m parent-number} 
@itemx  @samp{--mainline parent-number} 
Usually you cannot cherry-pick a merge because you do not know which side of
the merge should be considered the mainline.  This option specifies the
parent number (starting from 1) of the mainline and allows cherry-pick to
replay the change relative to the specified parent.

@item  @samp{-n} 
@itemx  @samp{--no-commit} 
Usually the command automatically creates a sequence of commits.  This flag
applies the changes necessary to cherry-pick each named commit to your
working tree and the index, without making any commit.  In addition, when
this option is used, your index does not have to match the HEAD commit.  The
cherry-pick is done against the beginning state of your index.

This is useful when cherry-picking more than one commits' effect to your
index in a row.

@item  @samp{-s} 
@itemx  @samp{--signoff} 
Add a @samp{Signed-off-by} trailer at the end of the commit message.  See the
signoff option in git-commit(1) for more information.

@item  @samp{-S[<keyid>]} 
@itemx  @samp{--gpg-sign[=<keyid>]} 
@itemx  @samp{--no-gpg-sign} 
GPG-sign commits. The @samp{keyid} argument is optional and defaults to the
committer identity; if specified, it must be stuck to the option without a
space. @samp{--no-gpg-sign} is useful to countermand both @samp{commit.gpgSign}
configuration variable, and earlier @samp{--gpg-sign}.

@item  @samp{--ff} 
If the current HEAD is the same as the parent of the cherry-pick’ed commit,
then a fast forward to this commit will be performed.

@item  @samp{--allow-empty} 
By default, cherry-picking an empty commit will fail, indicating that an
explicit invocation of @samp{git commit --allow-empty} is required. This option
overrides that behavior, allowing empty commits to be preserved
automatically in a cherry-pick. Note that when "--ff" is in effect, empty
commits that meet the "fast-forward" requirement will be kept even without
this option.  Note also, that use of this option only keeps commits that
were initially empty (i.e. the commit recorded the same tree as its
parent).  Commits which are made empty due to a previous commit are
dropped.  To force the inclusion of those commits use
@samp{--keep-redundant-commits}.

@item  @samp{--allow-empty-message} 
By default, cherry-picking a commit with an empty message will fail.  This
option overrides that behavior, allowing commits with empty messages to be
cherry picked.

@item  @samp{--keep-redundant-commits} 
If a commit being cherry picked duplicates a commit already in the current
history, it will become empty.  By default these redundant commits cause
@samp{cherry-pick} to stop so the user can examine the commit. This option
overrides that behavior and creates an empty commit object.  Implies
@samp{--allow-empty}.

@item  @samp{--strategy=<strategy>} 
Use the given merge strategy.  Should only be used once.  See the MERGE
STRATEGIES section in git-merge(1) for details.

@item  @samp{-X<option>} 
@itemx  @samp{--strategy-option=<option>} 
Pass the merge strategy-specific option through to the merge strategy.  See
git-merge(1) for details.

@item  @samp{--rerere-autoupdate} 
@itemx  @samp{--no-rerere-autoupdate} 
Allow the rerere mechanism to update the index with the result of
auto-conflict resolution if possible.
@end table

@noindent

@chapheading SEQUENCER SUBCOMMANDS

@table @asis

@item  @samp{--continue} 
@samp{.git/sequencer}
の情報を使用して、進行中の操作の続行を行います。失敗したcherry-pickまたはrevertの競合を解決した後、続行するために使用できます。

@item  @samp{--skip} 
現在のコミットをスキップして、残りのシーケンスを続行します。

@item  @samp{--quit} 
進行中の今回の操作を忘れてください。チェリーピックまたはrevertに失敗した後、シーケンサーの状態をクリアするために使用できます。

@item  @samp{--abort} 
操作をキャンセルして、シーケンス操作前の状態に戻ります。
@end table

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git cherry-pick master} 
Apply the change introduced by the commit at the tip of the master branch
and create a new commit with this change.

@item  @samp{git cherry-pick ..master} 
@itemx  @samp{git cherry-pick ^HEAD master} 
Apply the changes introduced by all commits that are ancestors of master but
not of HEAD to produce new commits.

@item  @samp{git cherry-pick maint next ^master} 
@itemx  @samp{git cherry-pick maint master..next} 
Apply the changes introduced by all commits that are ancestors of maint or
next, but not master or any of its ancestors.  Note that the latter does not
mean @samp{maint} and everything between @samp{master} and @samp{next}; specifically,
@samp{maint} will not be used if it is included in @samp{master}.

@item  @samp{git cherry-pick master~4 master~2} 
Apply the changes introduced by the fifth and third last commits pointed to
by master and create 2 new commits with these changes.

@item  @samp{git cherry-pick -n master~1 next} 
Apply to the working tree and the index the changes introduced by the second
last commit pointed to by master and by the last commit pointed to by next,
but do not create any commit with these changes.

@item  @samp{git cherry-pick --ff ..next} 
If history is linear and HEAD is an ancestor of next, update the working
tree and advance the HEAD pointer to match next.  Otherwise, apply the
changes introduced by those commits that are in next but not HEAD to the
current branch, creating a new commit for each new change.

@item  @samp{git rev-list --reverse master -- README | git cherry-pick -n --stdin} 
Apply the changes introduced by all commits on the master branch that
touched README to the working tree and index, so the result can be inspected
and made into a single new commit if suitable.
@end table

The following sequence attempts to backport a patch, bails out because the
code the patch applies to has changed too much, and then tries again, this
time exercising more care about matching up context lines.

@example
$ git cherry-pick topic^             (1)
$ git diff                           (2)
$ git reset --merge ORIG_HEAD        (3)
$ git cherry-pick -Xpatience topic^  (4)
@end example


@table @asis

@item @pxref{CO1-1,,(1)}
apply the change that would be shown by @samp{git show topic^}.  In this example,
the patch does not apply cleanly, so information about the conflict is
written to the index and working tree and no new commit results.

@item @pxref{CO1-2,,(2)}
summarize changes to be reconciled

@item @pxref{CO1-3,,(3)}
cancel the cherry-pick.  In other words, return to the pre-cherry-pick
state, preserving any local modifications you had in the working tree.

@item @pxref{CO1-4,,(4)}
try to apply the change introduced by @samp{topic^} again, spending extra time to
avoid mistakes based on incorrectly matching context lines.
@end table

@noindent

@chapheading SEE ALSO

git-revert(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-cherry,,,Top
@chapheading Name

git-cherry — アップストリームにまだ適用されていないコミットを検索する

@noindent

@chapheading Synopsis

@display
git cherry [-v] [<upstream> [<head> [<limit>]]]
@end display


@noindent

@chapheading DESCRIPTION

@samp{<head>..<upstream>} に @samp{<limit>..<head>}
の範囲と同等のコミットがあるかどうかを検査(determine)します。

等価性テストは、空白と行番号を削除した後のdiffに基づいています。したがって、git-cherry は、
git-cherry-pick(1) または git-am(1) または git-rebase(1)
を使用してコミットが「コピー」された時に検出します。

@samp{<limit>..<head>} の範囲のすべてのコミットのSHA1を出力し、 <upstream> に同等のものがあるコミットの場合は @samp{-}
を接頭辞として付け、そうでないコミットの場合は @samp{+} を接頭辞として付けます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-v} 
SHA1の横にコミット件名(commit subject)を表示します。

@item  <upstream> 
同等のコミットを検索するためのアップストリームブランチ。デフォルトはHEADのアップストリームブランチです。

@item  <head> 
作業ブランチ。デフォルトはHEADです。

@item  <limit> 
コミットをlimitまで(limitを含む)報告しないでください。
@end table

@noindent

@chapheading EXAMPLES

@noindent

@heading Patch workflows

git-cherryは、パッチベースのワークフロー(gitworkflows(7)
参照)で頻繁に使用され、一連のパッチがアップストリームメンテナによって適用されているかどうかを判断します。このようなワークフローでは、以下のようなトピックブランチを作成して送信できます:

@example
$ git checkout -b topic origin/master
# work and create some commits
$ git format-patch origin/master
$ git send-email ... 00*
@end example


後で、あなたは(まだ @samp{topic} に居る時に、)次のように言うことで、変更が適用されたかどうかを確認できます:

@example
$ git fetch  # update your notion of origin/master
$ git cherry -v
@end example


@noindent

@heading Concrete example

トピックが3つのコミットで構成され、メンテナがそのうちの2つを適用した状況では、状況は以下のようになります:

@example
$ git log --graph --oneline --decorate --boundary origin/master...topic
* 7654321 (origin/master) upstream tip commit
[... snip some other commits ...]
* cccc111 cherry-pick of C
* aaaa111 cherry-pick of A
[... snip a lot more that has happened ...]
| * cccc000 (topic) commit C
| * bbbb000 commit B
| * aaaa000 commit A
|/
o 1234567 branch point
@end example


このような場合、git-cherryはまだ適用されていないモノの簡潔な要約を示します:

@example
$ git cherry origin/master topic
- cccc000... commit C
+ bbbb000... commit B
- aaaa000... commit A
@end example


ここで、(@samp{-} でマークされている)コミットAとCは、 @samp{origin/master}
のトップでリベースすると、トピックブランチから削除できますが、（@samp{+} でマークされている)コミットBは @samp{origin/master}
にapplyするために送信されるために、まだ保持しつづける必要があります。

@noindent

@heading Using a limit

オプションの <limit>
は、あなたのトピックがアップストリームにない他の作業に基づいている場合に役立ちます。前の例を拡張すると、これは以下のようになります:

@example
$ git log --graph --oneline --decorate --boundary origin/master...topic
* 7654321 (origin/master) upstream tip commit
[... snip some other commits ...]
* cccc111 cherry-pick of C
* aaaa111 cherry-pick of A
[... snip a lot more that has happened ...]
| * cccc000 (topic) commit C
| * bbbb000 commit B
| * aaaa000 commit A
| * 0000fff (base) unpublished stuff F
[... snip ...]
| * 0000aaa unpublished stuff A
|/
o 1234567 merge-base between upstream and topic
@end example


制限として @samp{base} を指定することで、 @samp{base} と @samp{topic} の間のコミットをリストすることを回避できます:

@example
$ git cherry origin/master topic base
- cccc000... commit C
+ bbbb000... commit B
- aaaa000... commit A
@end example


@noindent

@chapheading SEE ALSO

git-patch-id(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-citool,,,Top
@chapheading Name

git-citool — git-commitのグラフィカルな代替手段

@noindent

@chapheading Synopsis

@display
git citool
@end display


@noindent

@chapheading DESCRIPTION

Tcl/Tkベースのグラフィカルインターフェイス。変更されたファイルを確認し、それらをインデックスにステージングし、コミットメッセージを入力して、新しいコミットを現在のブランチに記録します。このインターフェースは、インタラクティブ性の低い’git
commit’プログラムの代替手段です。

'git citool’は実際には`git gui
citool`の標準エイリアスです。詳細については、git-gui(1)を参照してください。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-clean,,,Top
@chapheading Name

git-clean — 作業ツリーから追跡されていないファイルを削除する

@noindent

@chapheading Synopsis

@display
git clean [-d] [-f] [-i] [-n] [-q] [-e <pattern>] [-x | -X] [--] <path>…
@end display


@noindent

@chapheading DESCRIPTION

現在のディレクトリから開始して、バージョン管理下にないファイルを再帰的に削除することにより、作業ツリーをクリーンにします。

通常、Gitが追跡していないファイルのみが削除されますが、 @samp{-x} オプションが指定されている場合、無視されたファイル(ignored
files)も削除されます。これは、たとえば、ビルドでの生成物全てを削除するのに役立ちます。

オプションで、任意の数の @samp{<path> ...} 引数を指定すると、それらのパスのみが影響を受けます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-d} 
通常、<path> が指定されていない場合、削除が多すぎるのを避けるために、git cleanは追跡されていないディレクトリ内には再帰処理しません。
@samp{-d} を指定すると、そのようなディレクトリ内でも再帰的に処理します。パスが指定されている場合、 @samp{-d} は関係ありません。(@samp{--force}
で言及されているネストされたgitディレクトリを除く、)指定されたパスに一致するすべての追跡されていないファイルは削除されます。

@item  @samp{-f} 
@itemx  @samp{--force} 
Git構成変数clean.requireForceがfalseに設定されてい「ない」場合、「git clean」は、 @samp{-f} または ` -i`
が指定されていない限り、ファイルまたはディレクトリの削除を拒否します。 2つ目の @samp{-f}
が指定されていない限り、Gitは追跡されていないネストされたgitリポジトリ(.gitサブディレクトリを持つディレクトリ)の変更を拒否します。

@item  @samp{-i} 
@itemx  @samp{--interactive} 
何が行われるを示し、ファイルを対話的にクリーンアップします。 詳細は「Interactive mode」を参照してください。

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
実際には何も削除せず、何が行われるかを表示します。

@item  @samp{-q} 
@itemx  @samp{--quiet} 
静かにして、エラーのみを報告し、正常に削除されたファイルは報告しないでください。

@item  @samp{-e <pattern>} 
@itemx  @samp{--exclude=<pattern>} 
標準の無視ルールに加えて、指定の除外パターンを使用します(gitignore(5) 参照)。

@item  @samp{-x} 
標準の無視ルール(gitignore(5) 参照)を使用しないでください。ただし、コマンドラインから @samp{-e}
オプションを指定して指定された無視ルールは使用してください。これにより、ビルド生成物を含む、追跡されていないすべてのファイルを削除できます。これを使用して（おそらく「git
restore」または「git reset」と組み合わせて）、ビルドをテストするためのクリーンな、元の作業ディレクトリを作成できます。

@item  @samp{-X} 
Gitによって無視されたファイルのみを削除します。これは、すべてを最初から再構築するのに役立つ場合がありますが、手動で作成したファイルは保持します。
@end table

@noindent

@chapheading Interactive mode

コマンドがinteractive modeに入ると、クリーンアップするファイルとディレクトリが表示され、インタラクティブコマンドループに入ります。

コマンドループは、使用可能なサブコマンドのリストを表示し、「Whatnow>
」というプロンプトを表示します。一般に、プロンプトが単一の「>」で終わる場合、以下のように、選択肢の1つだけを選択し、ENTERキーを押します:

@example
    *** Commands ***
        1: clean                2: filter by pattern    3: select by numbers
        4: ask each             5: quit                 6: help
    What now> 1
@end example


選択が一意である限り、上記は「c」または「clean」と打ち込む事もできます。

メインコマンドループには6つのサブコマンドがあります。

@table @asis

@item  clean 
ファイルとディレクトリのクリーニングを開始して、終了(quit)します。

@item  filter by pattern 
これにより、削除するファイルとディレクトリが表示され、「Input ignore
patterns>>」(入力無視パターン)プロンプトが表示されます。スペースで区切られたパターンを入力して、ファイルとディレクトリを削除から除外できます。
例えば。 「* .c * .h」は、「.c」と「.h」で終わるファイルを削除から除外します。そして、結果に満足したら、ENTER
を押してメインメニューに戻ります。

@item  select by numbers 
これにより、削除するファイルとディレクトリが表示され、「Select items to
delete>>」(削除するアイテムを選択)というプロンプトが表示されます。プロンプトがこのように二重の「>>」で終わる場合、空白またはコンマで連結して複数の選択を行うことができます。また、あなたは範囲を伝えることができます。
例えば「2-57,9」でリストから2,3,4,5,7,9を選択します。範囲の2番目の数値を省略すると、残りのすべての項目が選択されます。
例えば「7-」はリストから7,8,9を選択します。「*」dで全てを選択できます。そして、結果に満足したら、ENTER を押してメインメニューに戻ります。

@item  ask each 
これはクリーニングが始まると、アイテムを削除するために一つずつ確認する必要があります。この操作は、上記の2つのアクションほど効率的ではないことに注意してください。

@item  quit 
これにより、クリーニングを行わずに終了(quit)できます。

@item  help 
git-cleanの対話的な簡単な使用法を示します。
@end table

@noindent

@chapheading SEE ALSO

gitignore(5)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-clone,,,Top
@chapheading Name

git-clone — Clone a repository into a new directory

@noindent

@chapheading Synopsis

@display
git clone [--template=<template_directory>]
          [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]
          [-o <name>] [-b <name>] [-u <upload-pack>] [--reference <repository>]
          [--dissociate] [--separate-git-dir <git dir>]
          [--depth <depth>] [--[no-]single-branch] [--no-tags]
          [--recurse-submodules[=<pathspec>]] [--[no-]shallow-submodules]
          [--[no-]remote-submodules] [--jobs <n>] [--sparse] [--[no-]reject-shallow]
          [--filter=<filter>] [--] <repository>
          [<directory>]
@end display


@noindent

@chapheading DESCRIPTION

Clones a repository into a newly created directory, creates remote-tracking
branches for each branch in the cloned repository (visible using @samp{git branch
--remotes}), and creates and checks out an initial branch that is forked
from the cloned repository’s currently active branch.

After the clone, a plain @samp{git fetch} without arguments will update all the
remote-tracking branches, and a @samp{git pull} without arguments will in
addition merge the remote master branch into the current master branch, if
any (this is untrue when "--single-branch" is given; see below).

This default configuration is achieved by creating references to the remote
branch heads under @samp{refs/remotes/origin} and by initializing
@samp{remote.origin.url} and @samp{remote.origin.fetch} configuration variables.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-l} 
@itemx  @samp{--local} 
When the repository to clone from is on a local machine, this flag bypasses
the normal "Git aware" transport mechanism and clones the repository by
making a copy of HEAD and everything under objects and refs directories.
The files under @samp{.git/objects/} directory are hardlinked to save space when
possible.

If the repository is specified as a local path (e.g., @samp{/path/to/repo}), this
is the default, and --local is essentially a no-op.  If the repository is
specified as a URL, then this flag is ignored (and we never use the local
optimizations).  Specifying @samp{--no-local} will override the default when
@samp{/path/to/repo} is given, using the regular Git transport instead.

@strong{NOTE}: this operation can race with concurrent modification to the
source repository, similar to running @samp{cp -r src dst} while modifying
@samp{src}.

@item  @samp{--no-hardlinks} 
Force the cloning process from a repository on a local filesystem to copy
the files under the @samp{.git/objects} directory instead of using
hardlinks. This may be desirable if you are trying to make a back-up of your
repository.

@item  @samp{-s} 
@itemx  @samp{--shared} 
When the repository to clone is on the local machine, instead of using hard
links, automatically setup @samp{.git/objects/info/alternates} to share the
objects with the source repository.  The resulting repository starts out
without any object of its own.

@strong{NOTE}: this is a possibly dangerous operation; do @strong{not} use
it unless you understand what it does. If you clone your
repository using this option and then delete branches (or use any
other Git command that makes any existing commit unreferenced) in the
source repository, some objects may become unreferenced (or dangling).
These objects may be removed by normal Git operations (such as @samp{git commit})
which automatically call @samp{git maintenance run --auto}. (See
git-maintenance(1).) If these objects are removed and were referenced
by the cloned repository, then the cloned repository will become corrupt.

Note that running @samp{git repack} without the @samp{--local} option in a repository
cloned with @samp{--shared} will copy objects from the source repository into a
pack in the cloned repository, removing the disk space savings of @samp{clone
--shared}.  It is safe, however, to run @samp{git gc}, which uses the @samp{--local}
option by default.

If you want to break the dependency of a repository cloned with @samp{--shared}
on its source repository, you can simply run @samp{git repack -a} to copy all
objects from the source repository into a pack in the cloned repository.

@item  @samp{--reference[-if-able] <repository>} 
If the reference repository is on the local machine, automatically setup
@samp{.git/objects/info/alternates} to obtain objects from the reference
repository.  Using an already existing repository as an alternate will
require fewer objects to be copied from the repository being cloned,
reducing network and local storage costs.  When using the
@samp{--reference-if-able}, a non existing directory is skipped with a warning
instead of aborting the clone.

@strong{NOTE}: see the NOTE for the @samp{--shared} option, and also the
@samp{--dissociate} option.

@item  @samp{--dissociate} 
Borrow the objects from reference repositories specified with the
@samp{--reference} options only to reduce network transfer, and stop borrowing
from them after a clone is made by making necessary local copies of borrowed
objects.  This option can also be used when cloning locally from a
repository that already borrows objects from another repository—the new
repository will borrow objects from the same repository, and this option can
be used to stop the borrowing.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Operate quietly.  Progress is not reported to the standard error stream.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Run verbosely. Does not affect the reporting of progress status to the
standard error stream.

@item  @samp{--progress} 
Progress status is reported on the standard error stream by default when it
is attached to a terminal, unless @samp{--quiet} is specified. This flag forces
progress status even if the standard error stream is not directed to a
terminal.

@item  @samp{--server-option=<option>} 
Transmit the given string to the server when communicating using protocol
version 2.  The given string must not contain a NUL or LF character.  The
server’s handling of server options, including unknown ones, is
server-specific.  When multiple @samp{--server-option=<option>} are given, they
are all sent to the other side in the order listed on the command line.

@item  @samp{-n} 
@itemx  @samp{--no-checkout} 
No checkout of HEAD is performed after the clone is complete.

@item  @samp{--[no-]reject-shallow} 
Fail if the source repository is a shallow repository.  The
@emph{clone.rejectShallow} configuration variable can be used to specify the
default.

@item  @samp{--bare} 
Make a @emph{bare} Git repository.  That is, instead of creating @samp{<directory>}
and placing the administrative files in @samp{<directory>/.git}, make the
@samp{<directory>} itself the @samp{$GIT_DIR}. This obviously implies the
@samp{--no-checkout} because there is nowhere to check out the working tree.
Also the branch heads at the remote are copied directly to corresponding
local branch heads, without mapping them to @samp{refs/remotes/origin/}.  When
this option is used, neither remote-tracking branches nor the related
configuration variables are created.

@item  @samp{--sparse} 
Initialize the sparse-checkout file so the working directory starts with
only the files in the root of the repository. The sparse-checkout file can
be modified to grow the working directory as needed.

@item  @samp{--filter=<filter-spec>} 
Use the partial clone feature and request that the server sends a subset of
reachable objects according to a given object filter.  When using
@samp{--filter}, the supplied @samp{<filter-spec>} is used for the partial clone
filter. For example, @samp{--filter=blob:none} will filter out all blobs (file
contents) until needed by Git. Also, @samp{--filter=blob:limit=<size>} will
filter out all blobs of size at least @samp{<size>}. For more details on filter
specifications, see the @samp{--filter} option in git-rev-list(1).

@item  @samp{--mirror} 
Set up a mirror of the source repository.  This implies @samp{--bare}.  Compared
to @samp{--bare}, @samp{--mirror} not only maps local branches of the source to local
branches of the target, it maps all refs (including remote-tracking
branches, notes etc.) and sets up a refspec configuration such that all
these refs are overwritten by a @samp{git remote update} in the target
repository.

@item  @samp{-o <name>} 
@itemx  @samp{--origin <name>} 
Instead of using the remote name @samp{origin} to keep track of the upstream
repository, use @samp{<name>}.  Overrides @samp{clone.defaultRemoteName} from the
config.

@item  @samp{-b <name>} 
@itemx  @samp{--branch <name>} 
Instead of pointing the newly created HEAD to the branch pointed to by the
cloned repository’s HEAD, point to @samp{<name>} branch instead. In a non-bare
repository, this is the branch that will be checked out.  @samp{--branch} can
also take tags and detaches the HEAD at that commit in the resulting
repository.

@item  @samp{-u <upload-pack>} 
@itemx  @samp{--upload-pack <upload-pack>} 
When given, and the repository to clone from is accessed via ssh, this
specifies a non-default path for the command run on the other end.

@item  @samp{--template=<template_directory>} 
Specify the directory from which templates will be used; (See the "TEMPLATE
DIRECTORY" section of git-init(1).)

@item  @samp{-c <key>=<value>} 
@itemx  @samp{--config <key>=<value>} 
Set a configuration variable in the newly-created repository; this takes
effect immediately after the repository is initialized, but before the
remote history is fetched or any files checked out.  The key is in the same
format as expected by git-config(1) (e.g., @samp{core.eol=true}). If
multiple values are given for the same key, each value will be written to
the config file. This makes it safe, for example, to add additional fetch
refspecs to the origin remote.

Due to limitations of the current implementation, some configuration
variables do not take effect until after the initial fetch and checkout.
Configuration variables known to not take effect are: @samp{remote.<name>.mirror}
and @samp{remote.<name>.tagOpt}.  Use the corresponding @samp{--mirror} and
@samp{--no-tags} options instead.

@item  @samp{--depth <depth>} 
Create a @emph{shallow} clone with a history truncated to the specified number of
commits. Implies @samp{--single-branch} unless @samp{--no-single-branch} is given to
fetch the histories near the tips of all branches. If you want to clone
submodules shallowly, also pass @samp{--shallow-submodules}.

@item  @samp{--shallow-since=<date>} 
Create a shallow clone with a history after the specified time.

@item  @samp{--shallow-exclude=<revision>} 
Create a shallow clone with a history, excluding commits reachable from a
specified remote branch or tag.  This option can be specified multiple
times.

@item  @samp{--[no-]single-branch} 
Clone only the history leading to the tip of a single branch, either
specified by the @samp{--branch} option or the primary branch remote’s @samp{HEAD}
points at.  Further fetches into the resulting repository will only update
the remote-tracking branch for the branch this option was used for the
initial cloning.  If the HEAD at the remote did not point at any branch when
@samp{--single-branch} clone was made, no remote-tracking branch is created.

@item  @samp{--no-tags} 
Don’t clone any tags, and set @samp{remote.<remote>.tagOpt=--no-tags} in the
config, ensuring that future @samp{git pull} and @samp{git fetch} operations won’t
follow any tags. Subsequent explicit tag fetches will still work, (see
git-fetch(1)).

Can be used in conjunction with @samp{--single-branch} to clone and maintain a
branch with no references other than a single cloned branch. This is useful
e.g. to maintain minimal clones of the default branch of some repository for
search indexing.

@item  @samp{--recurse-submodules[=<pathspec>]} 
After the clone is created, initialize and clone submodules within based on
the provided pathspec.  If no pathspec is provided, all submodules are
initialized and cloned.  This option can be given multiple times for
pathspecs consisting of multiple entries.  The resulting clone has
@samp{submodule.active} set to the provided pathspec, or "." (meaning all
submodules) if no pathspec is provided.

Submodules are initialized and cloned using their default settings. This is
equivalent to running @samp{git submodule update --init --recursive <pathspec>}
immediately after the clone is finished. This option is ignored if the
cloned repository does not have a worktree/checkout (i.e. if any of
@samp{--no-checkout}/@samp{-n}, @samp{--bare}, or @samp{--mirror} is given)

@item  @samp{--[no-]shallow-submodules} 
All submodules which are cloned will be shallow with a depth of 1.

@item  @samp{--[no-]remote-submodules} 
All submodules which are cloned will use the status of the submodule’s
remote-tracking branch to update the submodule, rather than the
superproject’s recorded SHA-1. Equivalent to passing @samp{--remote} to @samp{git
submodule update}.

@item  @samp{--separate-git-dir=<git dir>} 
Instead of placing the cloned repository where it is supposed to be, place
the cloned repository at the specified directory, then make a
filesystem-agnostic Git symbolic link to there.  The result is Git
repository can be separated from working tree.

@item  @samp{-j <n>} 
@itemx  @samp{--jobs <n>} 
The number of submodules fetched at the same time.  Defaults to the
@samp{submodule.fetchJobs} option.

@item  <repository> 
The (possibly remote) repository to clone from.  See the GIT URLS 
section below for more information on specifying repositories.

@item  <directory> 
The name of a new directory to clone into.  The "humanish" part of the
source repository is used if no directory is explicitly given (@samp{repo} for
@samp{/path/to/repo.git} and @samp{foo} for @samp{host.xz:foo/.git}).  Cloning into an
existing directory is only allowed if the directory is empty.
@end table

@noindent

@chapheading GIT URLS

一般に、URLには、トランスポートプロトコル、リモートサーバーのアドレス、およびリポジトリへのパスに関する情報が含まれています。トランスポートプロトコルによっては、一部の情報が欠落している場合があります。

Gitはsshとgitとhttpとhttpsプロトコルをサポートします(さらにftpとftpsをフェッチに使用できますが、これは非効率的で非推奨です。使用しないでください)。

ネイティブトランスポート(つまり、 git://
URL)は認証を行わないため、セキュリティで保護されていないネットワークでは注意して使用する必要があります。

以下の構文を使用できます:

@itemize 

@item
ssh://[user@@]host.xz[:port]/path/to/repo.git/

@item
git://host.xz[:port]/path/to/repo.git/

@item
http[s]://host.xz[:port]/path/to/repo.git/

@item
ftp[s]://host.xz[:port]/path/to/repo.git/
@end itemize

代替のscpのような構文をsshプロトコルで使用することもできます:

@itemize 

@item
[user@@]host.xz:path/to/repo.git/
@end itemize

この構文は、最初のコロン(:)の前にスラッシュがない場合にのみ認識されます。これは、コロンを含むローカルパスを区別するのに役立ちます。たとえば、ローカルパス
@samp{foo:bar} を、絶対パスまたは @samp{./foo:bar} として指定して、 ssh url として誤って解釈されないようにすることができます。

sshおよびgitプロトコルは、さらに ~username 拡張をサポートします:

@itemize 

@item
ssh://[user@@]host.xz[:port]/~[user]/path/to/repo.git/

@item
git://host.xz[:port]/~[user]/path/to/repo.git/

@item
[user@@]host.xz:/~[user]/path/to/repo.git/
@end itemize

Gitでもネイティブにサポートされているローカルリポジトリの場合、以下の構文を使用できます:

@itemize 

@item
/path/to/repo.git/

@item
file:///path/to/repo.git/
@end itemize

これらの2つの構文は、前者が @samp{--local} オプションを含むことを除いて、ほとんど同等です。

「git clone」と「git fetch」と「git pull」は、「git push」と違って適切なバンドルファイルを受け入れます。
git-bundle(1) を参照してください。

Gitが特定のトランスポートプロトコルを処理する方法を知らない場合、Gitは @emph{remote-<transport>}
リモートヘルパー(存在する場合)を使用しようとします。リモートヘルパーを明示的に要求するには、以下の構文を使用できます:

@itemize 

@item
<transport>::<address>
@end itemize

ここで、 <address>
は、パス、サーバーとパス、または呼び出されている特定のリモートヘルパーによって認識される任意のURLのような文字列です。詳細については、
gitremote-helpers(7) を参照してください。

同じ名前のリモートリポジトリが多数あり、それらに異なる形式を使用する場合(あなたの使用するURLが機能するURLに書き換えられるように)、以下の形式の構成セクションを作成できます:

@example
        [url "<actual url base>"]
                insteadOf = <other url base>
@end example


例えば、以下のようになります:

@example
        [url "git://git.host.xz/"]
                insteadOf = host.xz:/path/to/
                insteadOf = work:
@end example


"work:repo.git" や "host.xz:/path/to/repo.git"
のようなURLは、任意のコンテキストで、"git://git.host.xz/repo.git" に書き換えられます。

プッシュ専用のURLを書き換えたい場合は、以下の形式の構成セクションを作成できます:

@example
        [url "<actual url base>"]
                pushInsteadOf = <other url base>
@end example


例えば、以下のようになります:

@example
        [url "ssh://example.org/"]
                pushInsteadOf = git://example.org/
@end example


"git://example.org/path/to/repo.git" のようなURLは、プッシュの場合は
"ssh://example.org/path/to/repo.git" に書き換えられますが、プルは引き続き元のURLのままです。

@noindent

@chapheading EXAMPLES

@itemize 

@item
Clone from upstream:

@example
$ git clone git://git.kernel.org/pub/scm/.../linux.git my-linux
$ cd my-linux
$ make
@end example


@item
Make a local clone that borrows from the current directory, without checking
things out:

@example
$ git clone -l -s -n . ../copy
$ cd ../copy
$ git show-branch
@end example


@item
Clone from upstream while borrowing from an existing local directory:

@example
$ git clone --reference /git/linux.git \
        git://git.kernel.org/pub/scm/.../linux.git \
        my-linux
$ cd my-linux
@end example


@item
Create a bare repository to publish your changes to the public:

@example
$ git clone --bare -l /home/proj/.git /pub/scm/proj.git
@end example

@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-column,,,Top
@chapheading Name

git-column — データを複数列表示する

@noindent

@chapheading Synopsis

@display
git column [--command=<name>] [--[raw-]mode=<mode>] [--width=<width>]
             [--indent=<string>] [--nl=<string>] [--padding=<n>]
@end display


@noindent

@chapheading DESCRIPTION

このコマンドは、標準入力の行を複数の列を持つテーブル(表)にフォーマットします。各入力行は、テーブルの1つのセルを占有します。これは、出力を複数列にフォーマットするために他のgitコマンドによって内部的に使用されます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--command=<name>} 
構成変数 column.<name> とcolumn.ui を使用してレイアウトモードを探します。

@item  @samp{--mode=<mode>} 
レイアウトモードを指定します。 git-config(1) のオプション構文については、構成変数 column.ui
を参照してください。

@item  @samp{--raw-mode=<n>} 
@samp{--mode}
と同じですが、数値としてエンコードされたモードを使用します。これは主に、レイアウトモードをすでにパースしている他のコマンドによって使用されます。

@item  @samp{--width=<width>} 
端末幅を指定します。デフォルトでは、「git column」は端末の幅を検出するか、検出できない場合は80にフォールバックします。

@item  @samp{--indent=<string>} 
各行の先頭に印刷される文字列。

@item  @samp{--nl=<string>} 
改行文字を含む、各行の終わりに印刷される文字列。

@item  @samp{--padding=<N>} 
列間のスペースの数。 デフォルトでは1つの空白。
@end table

@noindent

@chapheading EXAMPLES

データを複数列(columns)でフォーマット:

@example
$ seq 1 24 | git column --mode=column --padding=5
1      4      7      10     13     16     19     22
2      5      8      11     14     17     20     23
3      6      9      12     15     18     21     24
@end example


データを複数行(rows)でフォーマット:

@example
$ seq 1 21 | git column --mode=row --padding=5
1      2      3      4      5      6      7
8      9      10     11     12     13     14
15     16     17     18     19     20     21
@end example


列幅が等しくないテーブルにいくつかのタグをリストします:

@example
$ git tag --list 'v2.4.*' --column=row,dense
v2.4.0  v2.4.0-rc0  v2.4.0-rc1  v2.4.0-rc2  v2.4.0-rc3
v2.4.1  v2.4.10     v2.4.11     v2.4.12     v2.4.2
v2.4.3  v2.4.4      v2.4.5      v2.4.6      v2.4.7
v2.4.8  v2.4.9
@end example


@noindent

@chapheading GIT

Part of the git(1) suite

@node git-commit-graph,,,Top
@chapheading Name

git-commit-graph — Write and verify Git commit-graph files

@noindent

@chapheading Synopsis

@display
git commit-graph verify [--object-dir <dir>] [--shallow] [--[no-]progress]
git commit-graph write <options> [--object-dir <dir>] [--[no-]progress]
@end display


@noindent

@chapheading DESCRIPTION

Manage the serialized commit-graph file.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--object-dir} 
Use given directory for the location of packfiles and commit-graph
file. This parameter exists to specify the location of an alternate that
only has the objects directory, not a full @samp{.git} directory. The
commit-graph file is expected to be in the @samp{<dir>/info} directory and the
packfiles are expected to be in @samp{<dir>/pack}. If the directory could not be
made into an absolute path, or does not match any known object directory,
@samp{git commit-graph ...} will exit with non-zero status.

@item  @samp{--[no-]progress} 
Turn progress on/off explicitly. If neither is specified, progress is shown
if standard error is connected to a terminal.
@end table

@noindent

@chapheading COMMANDS

@table @asis

@item  @emph{write} 
Write a commit-graph file based on the commits found in packfiles. If the
config option @samp{core.commitGraph} is disabled, then this command will output
a warning, then return success without writing a commit-graph file.

With the @samp{--stdin-packs} option, generate the new commit graph by walking
objects only in the specified pack-indexes. (Cannot be combined with
@samp{--stdin-commits} or @samp{--reachable}.)

With the @samp{--stdin-commits} option, generate the new commit graph by walking
commits starting at the commits specified in stdin as a list of OIDs in hex,
one OID per line. OIDs that resolve to non-commits (either directly, or by
peeling tags) are silently ignored. OIDs that are malformed, or do not exist
generate an error. (Cannot be combined with @samp{--stdin-packs} or
@samp{--reachable}.)

With the @samp{--reachable} option, generate the new commit graph by walking
commits starting at all refs. (Cannot be combined with @samp{--stdin-commits} or
@samp{--stdin-packs}.)

With the @samp{--append} option, include all commits that are present in the
existing commit-graph file.

With the @samp{--changed-paths} option, compute and write information about the
paths changed between a commit and its first parent. This operation can take
a while on large repositories. It provides significant performance gains for
getting history of a directory or a file with @samp{git log -- <path>}. If this
option is given, future commit-graph writes will automatically assume that
this option was intended. Use @samp{--no-changed-paths} to stop storing this
data.

With the @samp{--max-new-filters=<n>} option, generate at most @samp{n} new Bloom
filters (if @samp{--changed-paths} is specified). If @samp{n} is @samp{-1}, no limit is
enforced. Only commits present in the new layer count against this limit. To
retroactively compute Bloom filters over earlier layers, it is advised to
use @samp{--split=replace}.  Overrides the @samp{commitGraph.maxNewFilters}
configuration.

With the @samp{--split[=<strategy>]} option, write the commit-graph as a chain of
multiple commit-graph files stored in
@samp{<dir>/info/commit-graphs}. Commit-graph layers are merged based on the
strategy and other splitting options. The new commits not already in the
commit-graph are added in a new "tip" file. This file is merged with the
existing file if the following merge conditions are met:

@itemize 

@item
If @samp{--split=no-merge} is specified, a merge is never performed, and the
remaining options are ignored. @samp{--split=replace} overwrites the existing
chain with a new one. A bare @samp{--split} defers to the remaining
options. (Note that merging a chain of commit graphs replaces the existing
chain with a length-1 chain where the first and only incremental holds the
entire graph).

@item
If @samp{--size-multiple=<X>} is not specified, let @samp{X} equal 2. If the new tip
file would have @samp{N} commits and the previous tip has @samp{M} commits and @samp{X}
times @samp{N} is greater than @samp{M}, instead merge the two files into a single
file.

@item
If @samp{--max-commits=<M>} is specified with @samp{M} a positive integer, and the new
tip file would have more than @samp{M} commits, then instead merge the new tip
with the previous tip.

Finally, if @samp{--expire-time=<datetime>} is not specified, let @samp{datetime} be
the current time. After writing the split commit-graph, delete all unused
commit-graph whose modified times are older than @samp{datetime}.
@end itemize

@item  @emph{verify} 
Read the commit-graph file and verify its contents against the object
database. Used to check for corrupted data.

With the @samp{--shallow} option, only check the tip commit-graph file in a chain
of split commit-graphs.
@end table

@noindent

@chapheading EXAMPLES

@itemize 

@item
Write a commit-graph file for the packed commits in your local @samp{.git}
directory.

@example
$ git commit-graph write
@end example


@item
Write a commit-graph file, extending the current commit-graph file using
commits in @samp{<pack-index>}.

@example
$ echo <pack-index> | git commit-graph write --stdin-packs
@end example


@item
Write a commit-graph file containing all reachable commits.

@example
$ git show-ref -s | git commit-graph write --stdin-commits
@end example


@item
Write a commit-graph file containing all commits in the current commit-graph
file along with those reachable from @samp{HEAD}.

@example
$ git rev-parse HEAD | git commit-graph write --stdin-commits --append
@end example

@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-commit-tree,,,Top
@chapheading Name

git-commit-tree — 新しいコミットオブジェクトを作成します

@noindent

@chapheading Synopsis

@display
git commit-tree <tree> [(-p <parent>)…]
git commit-tree [(-p <parent>)…] [-S[<keyid>]] [(-m <message>)…]
                  [(-F <file>)…] <tree>
@end display


@noindent

@chapheading DESCRIPTION

これは通常、エンドユーザーが直接実行するものではありません。代わりに git-commit(1) を参照してください。

提供されたツリーオブジェクトに基づいて新しいコミットオブジェクトを作成し、標準出力に新しいコミットオブジェクトIDを発行します。 @samp{-m} または
@samp{-F} オプションが指定されていない限り、ログメッセージは標準入力から読み取られます。

@samp{-m} および @samp{-F} オプションは、任意の回数、任意の順序で指定できます。コミットログメッセージは、オプションが指定された順序で作成されます。

コミットオブジェクトには、任意の数の親を含めることができます。親が1つだけの場合、これは通常のコミットです。
複数の親を持つことで、コミットは複数の履歴行の間でマージされます。なお、最初のコミット(ルートコミット)には親はありません。

ツリーは作業ディレクトリの特定のディレクトリ状態を表しますが、コミットはある「時点」における状態を表し、そこに到達する方法を説明します。

あなたがその状態に関するメモをは何処に保存してもGitは気にしませんが、通常、コミットは新しい「HEAD」状態を識別します。実際のところGitは、@samp{.git/HEAD}
が指すファイルに結果を書き込む傾向にあり、最後にコミットされた状態が何であったかを常に確認できるようにしています。

@noindent

@chapheading OPTIONS

@table @asis

@item  <tree> 
既存のツリーオブジェクト。

@item  @samp{-p <parent>} 
各 @samp{-p} は、親コミットオブジェクトのIDを示します。

@item  @samp{-m <message>} 
コミットログメッセージの段落。これは複数回指定でき、各 <message> は独立した段落になります。

@item  @samp{-F <file>} 
指定されたファイルからコミットログメッセージを読み取ります。 標準入力から読み取るには、 @samp{-} を使用します。
これは複数回指定でき、各ファイルの内容は独自した段落になります。

@item  @samp{-S[<keyid>]} 
@itemx  @samp{--gpg-sign[=<keyid>]} 
@itemx  @samp{--no-gpg-sign} 
GPG署名コミット。 @samp{keyid}
引数はオプションで、デフォルトはコミッターIDです。指定する場合は、スペースなしでオプションに指定する必要があります。 @samp{--no-gpg-sign}
は、コマンドラインで前に指定した @samp{--gpg-sign} オプションを無効にするのに役立ちます。
@end table

@noindent

@chapheading Commit Information

コミットをカプセル化します:

@itemize 

@item
全ての親のオブジェクトID

@item
作者名と電子メールアドレスと日付

@item
コミッター名とコミッター電子メールアドレスとコミット日付
@end itemize

コミットコメントは標準入力から読み取られます。変更ログエントリが "<" リダイレクトを介して提供されない場合、「git
commit-tree」は、変更ログエントリがターミナルから入力されて ^D で終了するのを待つだけです。

@noindent

@chapheading DATE FORMATS

@samp{GIT_AUTHOR_DATE} と @samp{GIT_COMMITTER_DATE} 環境変数は、以下の日付形式をサポートします:

@table @asis

@item  Git internal format 
これは @samp{<unix timestamp> <time zone offset>} ここで、 @samp{<unix timestamp>}
UNIXエポックからの秒数です。 @samp{<time zone offset>} はUTCからの正または負のオフセットです。
たとえば、CET(UTCより1時間進んでいます)は @samp{+0100} です。

@item  RFC 2822 
RFC 2822で説明されている標準の電子メール形式。たとえば、 @samp{Thu, 07 Apr 2005 22:13:13 +0200} 。

@item  ISO 8601 
ISO 8601規格で指定されている日時(例: @samp{2005-04-07T22:13:13})。パーサは、 @samp{T}
文字の代わりにスペースも受け入れます。秒の小数部分は無視されます。たとえば、 @samp{2005-04-07T22:13:13.019} は
@samp{2005-04-07T22:13:13} として扱われます。

@quotation

@strong{Note}

日付部分は、上記に加えて、 @samp{YYYY.MM.DD} または @samp{MM/DD/YYYY} または @samp{DD.MM.YYYY} 形式が受け入れられます。
@end quotation
@end table

@noindent

@chapheading Discussion

Gitは、ある程度までは文字エンコードに依存しません。

@itemize 

@item
ブロブオブジェクトの内容は、解釈されていないバイトのシーケンスです。コアレベルでのエンコーディング変換はありません。

@item
パス名はUTF-8正規化形式C(UTF-8 normalization form
C)でエンコードされます。これは、ツリーオブジェクト、インデックスファイル、ref名、およびコマンドライン引数、環境変数、構成ファイル(
@samp{.git/config} (git-config(1) 参照) と gitignore(5) と
gitattributes(5) と gitmodules(5)) のパス名に適用されます。

コアレベルのGitは、パス名を単に非NULバイトのシーケンスとして扱い、パス名をエンコードする変換はありません(MacとWindowsを除く)。したがって、非ASCIIパス名の使用は、レガシー拡張ASCIIエンコーディングを使用するプラットフォームやファイルシステムでもほとんど機能します。ただし、そのようなシステムで作成されたリポジトリは、UTF-8ベースのシステム(Linux、Mac、Windowsなど)では正しく機能しません。その逆も同様です。さらに、多くのGitベースのツールは、パス名がUTF-8であると単純に想定しており、他のエンコーディングを正しく表示できません。

@item
コミットログメッセージは通常UTF-8でエンコードされますが、他の拡張ASCIIエンコードもサポートされています。これには、ISO-8859-x、CP125xなどが含まれますが、UTF-16/32、EBCDIC、およびCJKマルチバイトエンコーディング(GBK、Shift-JIS、Big5、EUC-x、CP9xxなど)は含まれません。
@end itemize

我々はコミットログメッセージをUTF-8でエンコードすることをお勧めしますが、コアとGit
Porcelainはどちらも、プロジェクトでUTF-8を強制しないように設計されています。特定のプロジェクトのすべての参加者がレガシーエンコーディングを使用する方が便利だと感じた場合、Gitはそれを禁止しません。
ただし、覚えておくべきことがいくつかあります。

@enumerate 

@item
@emph{git commit} と @emph{git commit-tree}
は、プロジェクトがレガシーエンコーディングを使用していることを明示的に指定しない限り、与えられたコミットログメッセージが有効なUTF-8文字列のように見えない場合に警告を発します。明示的に指定する方法は、以下のように、
@samp{.git/config} ファイルに @samp{i18n.commitEncoding} を含めることです。

@example
[i18n]
        commitEncoding = ISO-8859-1
@end example


上記の設定で作成されたコミットオブジェクトは、 @samp{encoding} ヘッダーに @samp{i18n.commitEncoding} の値を記録します。
これは、後でそれらを見る他の人々を助けるためです。このヘッダーがないということは、コミットログメッセージがUTF-8でエンコードされていることを意味します。

@item
@emph{git log} と @emph{git show} と @emph{git blame} とその仲間たちは、コミットオブジェクトの @samp{encoding}
ヘッダーを見て、特に指定がない限り、ログメッセージをUTF-8に再コーディングしようとします。あなたは以下のように、 @samp{.git/config}
ファイルの @samp{i18n.logOutputEncoding} を使用して目的の出力エンコーディングを指定できます。

@example
[i18n]
        logOutputEncoding = ISO-8859-1
@end example


この構成変数がない場合は、代わりに @samp{i18n.commitEncoding} の値が使用されます。
@end enumerate

UTF-8への再コーディングは必ずしも可逆的な操作ではないため、我々はコミットが行われたときにコミットログメッセージを再コーディングしないことを意図的に選択したことに注意してください。

@noindent

@chapheading FILES

/etc/mailname

@noindent

@chapheading SEE ALSO

git-write-tree(1) git-commit(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-commit,,,Top
@chapheading Name

git-commit — Record changes to the repository

@noindent

@chapheading Synopsis

@display
git commit [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]
           [--dry-run] [(-c | -C | --squash) <commit> | --fixup [(amend|reword):]<commit>)]
           [-F <file> | -m <msg>] [--reset-author] [--allow-empty]
           [--allow-empty-message] [--no-verify] [-e] [--author=<author>]
           [--date=<date>] [--cleanup=<mode>] [--[no-]status]
           [-i | -o] [--pathspec-from-file=<file> [--pathspec-file-nul]]
           [(--trailer <token>[(=|:)<value>])…] [-S[<keyid>]]
           [--] [<pathspec>…]
@end display


@noindent

@chapheading DESCRIPTION

Create a new commit containing the current contents of the index and the
given log message describing the changes. The new commit is a direct child
of HEAD, usually the tip of the current branch, and the branch is updated to
point to it (unless no branch is associated with the working tree, in which
case HEAD is "detached" as described in git-checkout(1)).

The content to be committed can be specified in several ways:

@enumerate 

@item
by using git-add(1) to incrementally "add" changes to the index
before using the @emph{commit} command (Note: even modified files must be
"added");

@item
by using git-rm(1) to remove files from the working tree and the
index, again before using the @emph{commit} command;

@item
by listing files as arguments to the @emph{commit} command (without --interactive
or --patch switch), in which case the commit will ignore changes staged in
the index, and instead record the current content of the listed files (which
must already be known to Git);

@item
by using the -a switch with the @emph{commit} command to automatically "add"
changes from all known files (i.e. all files that are already listed in the
index) and to automatically "rm" files in the index that have been removed
from the working tree, and then perform the actual commit;

@item
by using the --interactive or --patch switches with the @emph{commit} command to
decide one by one which files or hunks should be part of the commit in
addition to contents in the index, before finalizing the operation. See the
“Interactive Mode” section of git-add(1) to learn how to operate
these modes.
@end enumerate

The @samp{--dry-run} option can be used to obtain a summary of what is included
by any of the above for the next commit by giving the same set of parameters
(options and paths).

If you make a commit and then find a mistake immediately after that, you can
recover from it with @emph{git reset}.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-a} 
@itemx  @samp{--all} 
Tell the command to automatically stage files that have been modified and
deleted, but new files you have not told Git about are not affected.

@item  @samp{-p} 
@itemx  @samp{--patch} 
Use the interactive patch selection interface to choose which changes to
commit. See git-add(1) for details.

@item  @samp{-C <commit>} 
@itemx  @samp{--reuse-message=<commit>} 
Take an existing commit object, and reuse the log message and the authorship
information (including the timestamp)  when creating the commit.

@item  @samp{-c <commit>} 
@itemx  @samp{--reedit-message=<commit>} 
Like @emph{-C}, but with @samp{-c} the editor is invoked, so that the user can further
edit the commit message.

@item  @samp{--fixup=[(amend|reword):]<commit>} 
Create a new commit which "fixes up" @samp{<commit>} when applied with @samp{git
rebase --autosquash}. Plain @samp{--fixup=<commit>} creates a "fixup!" commit
which changes the content of @samp{<commit>} but leaves its log message
untouched. @samp{--fixup=amend:<commit>} is similar but creates an "amend!"
commit which also replaces the log message of @samp{<commit>} with the log
message of the "amend!" commit.  @samp{--fixup=reword:<commit>} creates an
"amend!" commit which replaces the log message of @samp{<commit>} with its own
log message but makes no changes to the content of @samp{<commit>}.

The commit created by plain @samp{--fixup=<commit>} has a subject composed of
"fixup!" followed by the subject line from <commit>, and is recognized
specially by @samp{git rebase --autosquash}. The @samp{-m} option may be used to
supplement the log message of the created commit, but the additional
commentary will be thrown away once the "fixup!" commit is squashed into
@samp{<commit>} by @samp{git rebase --autosquash}.

The commit created by @samp{--fixup=amend:<commit>} is similar but its subject is
instead prefixed with "amend!". The log message of <commit> is copied into
the log message of the "amend!" commit and opened in an editor so it can be
refined. When @samp{git rebase --autosquash} squashes the "amend!" commit into
@samp{<commit>}, the log message of @samp{<commit>} is replaced by the refined log
message from the "amend!" commit. It is an error for the "amend!" commit’s
log message to be empty unless @samp{--allow-empty-message} is specified.

@samp{--fixup=reword:<commit>} is shorthand for @samp{--fixup=amend:<commit>
--only}. It creates an "amend!" commit with only a log message (ignoring any
changes staged in the index). When squashed by @samp{git rebase --autosquash}, it
replaces the log message of @samp{<commit>} without making any other changes.

Neither "fixup!" nor "amend!" commits change authorship of @samp{<commit>} when
applied by @samp{git rebase --autosquash}.  See git-rebase(1) for
details.

@item  @samp{--squash=<commit>} 
Construct a commit message for use with @samp{rebase --autosquash}.  The commit
message subject line is taken from the specified commit with a prefix of
"squash! ".  Can be used with additional commit message options
(@samp{-m}/@samp{-c}/@samp{-C}/@samp{-F}). See git-rebase(1) for details.

@item  @samp{--reset-author} 
When used with -C/-c/--amend options, or when committing after a conflicting
cherry-pick, declare that the authorship of the resulting commit now belongs
to the committer. This also renews the author timestamp.

@item  @samp{--short} 
When doing a dry-run, give the output in the short-format. See
git-status(1) for details. Implies @samp{--dry-run}.

@item  @samp{--branch} 
Show the branch and tracking info even in short-format.

@item  @samp{--porcelain} 
When doing a dry-run, give the output in a porcelain-ready format. See
git-status(1) for details. Implies @samp{--dry-run}.

@item  @samp{--long} 
When doing a dry-run, give the output in the long-format.  Implies
@samp{--dry-run}.

@item  @samp{-z} 
@itemx  @samp{--null} 
When showing @samp{short} or @samp{porcelain} status output, print the filename
verbatim and terminate the entries with NUL, instead of LF.  If no format is
given, implies the @samp{--porcelain} output format.  Without the @samp{-z} option,
filenames with "unusual" characters are quoted as explained for the
configuration variable @samp{core.quotePath} (see git-config(1)).

@item  @samp{-F <file>} 
@itemx  @samp{--file=<file>} 
Take the commit message from the given file.  Use @emph{-} to read the message
from the standard input.

@item  @samp{--author=<author>} 
Override the commit author. Specify an explicit author using the standard @samp{A
U Thor <author@@example.com>} format. Otherwise <author> is assumed to be a
pattern and is used to search for an existing commit by that author
(i.e. rev-list --all -i --author=<author>); the commit author is then copied
from the first such commit found.

@item  @samp{--date=<date>} 
Override the author date used in the commit.

@item  @samp{-m <msg>} 
@itemx  @samp{--message=<msg>} 
Use the given <msg> as the commit message.  If multiple @samp{-m} options are
given, their values are concatenated as separate paragraphs.

The @samp{-m} option is mutually exclusive with @samp{-c}, @samp{-C}, and @samp{-F}.

@item  @samp{-t <file>} 
@itemx  @samp{--template=<file>} 
When editing the commit message, start the editor with the contents in the
given file.  The @samp{commit.template} configuration variable is often used to
give this option implicitly to the command.  This mechanism can be used by
projects that want to guide participants with some hints on what to write in
the message in what order.  If the user exits the editor without editing the
message, the commit is aborted.  This has no effect when a message is given
by other means, e.g. with the @samp{-m} or @samp{-F} options.

@item  @samp{-s} 
@itemx  @samp{--signoff} 
@itemx  @samp{--no-signoff} 
コミットログメッセージの最後に、コミッターによる「Signed-off-by」トレーラーを追加します。signoffの意味は、コミットしているプロジェクトによって異なります。たとえば、コミッターがプロジェクトのライセンスに基づいて作品を提出する権利を持っていることを証明したり、開発者の原産地証明書などの寄稿者の代表に同意したりする場合があります。(LinuxカーネルおよびGitプロジェクトで使用されるものについては、http：//developercertificate.orgを参照してください)。プロジェクトでsignoffがどのように使用されるかを理解するには、貢献しているプロジェクトのドキュメントまたはリーダーシップ(leadership)を参照してください。

@samp{--no-signoff} オプションを使用すると、コマンドラインで以前の @samp{--signoff} オプションを無効にすることができます。

@item  @samp{--trailer <token>[(=|:)<value>]} 
Specify a (<token>, <value>) pair that should be applied as a
trailer. (e.g. @samp{git commit --trailer "Signed-off-by:C O Mitter \
<committer@@example.com>" --trailer "Helped-by:C O Mitter \
<committer@@example.com>"} will add the "Signed-off-by" trailer and the
"Helped-by" trailer to the commit message.)  The @samp{trailer.*} configuration
variables (git-interpret-trailers(1)) can be used to define if a
duplicated trailer is omitted, where in the run of trailers each trailer
would appear, and other details.

@item  @samp{-n} 
@itemx  @samp{--no-verify} 
This option bypasses the pre-commit and commit-msg hooks.  See also
githooks(5).

@item  @samp{--allow-empty} 
Usually recording a commit that has the exact same tree as its sole parent
commit is a mistake, and the command prevents you from making such a
commit.  This option bypasses the safety, and is primarily for use by
foreign SCM interface scripts.

@item  @samp{--allow-empty-message} 
Like --allow-empty this command is primarily for use by foreign SCM
interface scripts. It allows you to create a commit with an empty commit
message without using plumbing commands like git-commit-tree(1).

@item  @samp{--cleanup=<mode>} 
This option determines how the supplied commit message should be cleaned up
before committing.  The @emph{<mode>} can be @samp{strip}, @samp{whitespace}, @samp{verbatim},
@samp{scissors} or @samp{default}.

@table @asis

@item  strip 
Strip leading and trailing empty lines, trailing whitespace, commentary and
collapse consecutive empty lines.

@item  whitespace 
Same as @samp{strip} except #commentary is not removed.

@item  verbatim 
Do not change the message at all.

@item  scissors 
Same as @samp{whitespace} except that everything from (and including)  the line
found below is truncated, if the message is to be edited.  "@samp{#}" can be
customized with core.commentChar.

@example
# ------------------------ >8 ------------------------
@end example

@item  default 
Same as @samp{strip} if the message is to be edited.  Otherwise @samp{whitespace}.
@end table

The default can be changed by the @samp{commit.cleanup} configuration variable
(see git-config(1)).

@item  @samp{-e} 
@itemx  @samp{--edit} 
The message taken from file with @samp{-F}, command line with @samp{-m}, and from
commit object with @samp{-C} are usually used as the commit log message
unmodified. This option lets you further edit the message taken from these
sources.

@item  @samp{--no-edit} 
Use the selected commit message without launching an editor.  For example,
@samp{git commit --amend --no-edit} amends a commit without changing its commit
message.

@item  @samp{--amend} 
Replace the tip of the current branch by creating a new commit. The recorded
tree is prepared as usual (including the effect of the @samp{-i} and @samp{-o} options
and explicit pathspec), and the message from the original commit is used as
the starting point, instead of an empty message, when no other message is
specified from the command line via options such as @samp{-m}, @samp{-F}, @samp{-c}, etc.
The new commit has the same parents and author as the current one (the
@samp{--reset-author} option can countermand this).

It is a rough equivalent for:

@example
        $ git reset --soft HEAD^
        $ ... do something else to come up with the right tree ...
        $ git commit -c ORIG_HEAD
@end example


but can be used to amend a merge commit.

You should understand the implications of rewriting history if you amend a
commit that has already been published.  (See the "RECOVERING FROM UPSTREAM
REBASE" section in git-rebase(1).)

@item  @samp{--no-post-rewrite} 
Bypass the post-rewrite hook.

@item  @samp{-i} 
@itemx  @samp{--include} 
Before making a commit out of staged contents so far, stage the contents of
paths given on the command line as well.  This is usually not what you want
unless you are concluding a conflicted merge.

@item  @samp{-o} 
@itemx  @samp{--only} 
Make a commit by taking the updated working tree contents of the paths
specified on the command line, disregarding any contents that have been
staged for other paths. This is the default mode of operation of @emph{git
commit} if any paths are given on the command line, in which case this
option can be omitted.  If this option is specified together with @samp{--amend},
then no paths need to be specified, which can be used to amend the last
commit without committing changes that have already been staged. If used
together with @samp{--allow-empty} paths are also not required, and an empty
commit will be created.

@item  @samp{--pathspec-from-file=<file>} 
Pathspec is passed in @samp{<file>} instead of commandline args. If @samp{<file>} is
exactly @samp{-} then standard input is used. Pathspec elements are separated by
LF or CR/LF. Pathspec elements can be quoted as explained for the
configuration variable @samp{core.quotePath} (see git-config(1)). See
also @samp{--pathspec-file-nul} and global @samp{--literal-pathspecs}.

@item  @samp{--pathspec-file-nul} 
Only meaningful with @samp{--pathspec-from-file}. Pathspec elements are separated
with NUL character and all other characters are taken literally (including
newlines and quotes).

@item  @samp{-u[<mode>]} 
@itemx  @samp{--untracked-files[=<mode>]} 
Show untracked files.

The mode parameter is optional (defaults to @emph{all}), and is used to specify
the handling of untracked files; when -u is not used, the default is
@emph{normal}, i.e. show untracked files and directories.

The possible options are:

@itemize 

@item
@emph{no}     - Show no untracked files

@item
@emph{normal} - Shows untracked files and directories

@item
@emph{all}    - Also shows individual files in untracked directories.
@end itemize

The default can be changed using the status.showUntrackedFiles configuration
variable documented in git-config(1).

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Show unified diff between the HEAD commit and what would be committed at the
bottom of the commit message template to help the user describe the commit
by reminding what changes the commit has.  Note that this diff output
doesn’t have its lines prefixed with @emph{#}. This diff will not be a part of
the commit message. See the @samp{commit.verbose} configuration variable in
git-config(1).

If specified twice, show in addition the unified diff between what would be
committed and the worktree files, i.e. the unstaged changes to tracked
files.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Suppress commit summary message.

@item  @samp{--dry-run} 
Do not create a commit, but show a list of paths that are to be committed,
paths with local changes that will be left uncommitted and paths that are
untracked.

@item  @samp{--status} 
Include the output of git-status(1) in the commit message template
when using an editor to prepare the commit message.  Defaults to on, but can
be used to override configuration variable commit.status.

@item  @samp{--no-status} 
Do not include the output of git-status(1) in the commit message
template when using an editor to prepare the default commit message.

@item  @samp{-S[<keyid>]} 
@itemx  @samp{--gpg-sign[=<keyid>]} 
@itemx  @samp{--no-gpg-sign} 
GPG-sign commits. The @samp{keyid} argument is optional and defaults to the
committer identity; if specified, it must be stuck to the option without a
space. @samp{--no-gpg-sign} is useful to countermand both @samp{commit.gpgSign}
configuration variable, and earlier @samp{--gpg-sign}.

@item  -- 
Do not interpret any more arguments as options.

@item  <pathspec>… 
When pathspec is given on the command line, commit the contents of the files
that match the pathspec without recording the changes already added to the
index. The contents of these files are also staged for the next commit on
top of what have been staged before.

For more details, see the @emph{pathspec} entry in gitglossary(7).
@end table

@noindent

@chapheading EXAMPLES

When recording your own work, the contents of modified files in your working
tree are temporarily stored to a staging area called the "index" with @emph{git
add}.  A file can be reverted back, only in the index but not in the working
tree, to that of the last commit with @samp{git restore --staged <file>}, which
effectively reverts @emph{git add} and prevents the changes to this file from
participating in the next commit.  After building the state to be committed
incrementally with these commands, @samp{git commit} (without any pathname
parameter) is used to record what has been staged so far.  This is the most
basic form of the command.  An example:

@example
$ edit hello.c
$ git rm goodbye.c
$ git add hello.c
$ git commit
@end example


Instead of staging files after each individual change, you can tell @samp{git
commit} to notice the changes to the files whose contents are tracked in
your working tree and do corresponding @samp{git add} and @samp{git rm} for you.  That
is, this example does the same as the earlier example if there is no other
change in your working tree:

@example
$ edit hello.c
$ rm goodbye.c
$ git commit -a
@end example


The command @samp{git commit -a} first looks at your working tree, notices that
you have modified hello.c and removed goodbye.c, and performs necessary @samp{git
add} and @samp{git rm} for you.

After staging changes to many files, you can alter the order the changes are
recorded in, by giving pathnames to @samp{git commit}.  When pathnames are given,
the command makes a commit that only records the changes made to the named
paths:

@example
$ edit hello.c hello.h
$ git add hello.c hello.h
$ edit Makefile
$ git commit Makefile
@end example


This makes a commit that records the modification to @samp{Makefile}.  The
changes staged for @samp{hello.c} and @samp{hello.h} are not included in the resulting
commit.  However, their changes are not lost — they are still staged and
merely held back.  After the above sequence, if you do:

@example
$ git commit
@end example


this second commit would record the changes to @samp{hello.c} and @samp{hello.h} as
expected.

After a merge (initiated by @emph{git merge} or @emph{git pull}) stops because of
conflicts, cleanly merged paths are already staged to be committed for you,
and paths that conflicted are left in unmerged state.  You would have to
first check which paths are conflicting with @emph{git status} and after fixing
them manually in your working tree, you would stage the result as usual with
@emph{git add}:

@example
$ git status | grep unmerged
unmerged: hello.c
$ edit hello.c
$ git add hello.c
@end example


After resolving conflicts and staging the result, @samp{git ls-files -u} would
stop mentioning the conflicted path.  When you are done, run @samp{git commit} to
finally record the merge:

@example
$ git commit
@end example


As with the case to record your own changes, you can use @samp{-a} option to save
typing.  One difference is that during a merge resolution, you cannot use
@samp{git commit} with pathnames to alter the order the changes are committed,
because the merge should be recorded as a single commit.  In fact, the
command refuses to run when given pathnames (but see @samp{-i} option).

@noindent

@chapheading COMMIT INFORMATION

Author and committer information is taken from the following environment
variables, if set:

@example
GIT_AUTHOR_NAME
GIT_AUTHOR_EMAIL
GIT_AUTHOR_DATE
GIT_COMMITTER_NAME
GIT_COMMITTER_EMAIL
GIT_COMMITTER_DATE
@end example

(nb "<", ">" and "\n"s are stripped)

The author and committer names are by convention some form of a personal
name (that is, the name by which other humans refer to you), although Git
does not enforce or require any particular form. Arbitrary Unicode may be
used, subject to the constraints listed above. This name has no effect on
authentication; for that, see the @samp{credential.username} variable in
git-config(1).

In case (some of) these environment variables are not set, the information
is taken from the configuration items @samp{user.name} and @samp{user.email}, or, if
not present, the environment variable EMAIL, or, if that is not set, system
user name and the hostname used for outgoing mail (taken from
@samp{/etc/mailname} and falling back to the fully qualified hostname when that
file does not exist).

The @samp{author.name} and @samp{committer.name} and their corresponding email options
override @samp{user.name} and @samp{user.email} if set and are overridden themselves
by the environment variables.

The typical usage is to set just the @samp{user.name} and @samp{user.email} variables;
the other options are provided for more complex use cases.

@noindent

@chapheading DATE FORMATS

@samp{GIT_AUTHOR_DATE} と @samp{GIT_COMMITTER_DATE} 環境変数は、以下の日付形式をサポートします:

@table @asis

@item  Git internal format 
これは @samp{<unix timestamp> <time zone offset>} ここで、 @samp{<unix timestamp>}
UNIXエポックからの秒数です。 @samp{<time zone offset>} はUTCからの正または負のオフセットです。
たとえば、CET(UTCより1時間進んでいます)は @samp{+0100} です。

@item  RFC 2822 
RFC 2822で説明されている標準の電子メール形式。たとえば、 @samp{Thu, 07 Apr 2005 22:13:13 +0200} 。

@item  ISO 8601 
ISO 8601規格で指定されている日時(例: @samp{2005-04-07T22:13:13})。パーサは、 @samp{T}
文字の代わりにスペースも受け入れます。秒の小数部分は無視されます。たとえば、 @samp{2005-04-07T22:13:13.019} は
@samp{2005-04-07T22:13:13} として扱われます。

@quotation

@strong{Note}

日付部分は、上記に加えて、 @samp{YYYY.MM.DD} または @samp{MM/DD/YYYY} または @samp{DD.MM.YYYY} 形式が受け入れられます。
@end quotation
@end table

上記のすべての日付形式を認識することに加えて、 @samp{--date} オプションは、 "yesterday" や "last Friday at noon"
など、より人間よりの日付形式も理解しようとします。

@noindent

@chapheading DISCUSSION

Though not required, it’s a good idea to begin the commit message with a
single short (less than 50 character) line summarizing the change, followed
by a blank line and then a more thorough description.  The text up to the
first blank line in a commit message is treated as the commit title, and
that title is used throughout Git.  For example, git-format-patch(1)
turns a commit into email, and it uses the title on the Subject line and the
rest of the commit in the body.

Gitは、ある程度までは文字エンコードに依存しません。

@itemize 

@item
ブロブオブジェクトの内容は、解釈されていないバイトのシーケンスです。コアレベルでのエンコーディング変換はありません。

@item
パス名はUTF-8正規化形式C(UTF-8 normalization form
C)でエンコードされます。これは、ツリーオブジェクト、インデックスファイル、ref名、およびコマンドライン引数、環境変数、構成ファイル(
@samp{.git/config} (git-config(1) 参照) と gitignore(5) と
gitattributes(5) と gitmodules(5)) のパス名に適用されます。

コアレベルのGitは、パス名を単に非NULバイトのシーケンスとして扱い、パス名をエンコードする変換はありません(MacとWindowsを除く)。したがって、非ASCIIパス名の使用は、レガシー拡張ASCIIエンコーディングを使用するプラットフォームやファイルシステムでもほとんど機能します。ただし、そのようなシステムで作成されたリポジトリは、UTF-8ベースのシステム(Linux、Mac、Windowsなど)では正しく機能しません。その逆も同様です。さらに、多くのGitベースのツールは、パス名がUTF-8であると単純に想定しており、他のエンコーディングを正しく表示できません。

@item
コミットログメッセージは通常UTF-8でエンコードされますが、他の拡張ASCIIエンコードもサポートされています。これには、ISO-8859-x、CP125xなどが含まれますが、UTF-16/32、EBCDIC、およびCJKマルチバイトエンコーディング(GBK、Shift-JIS、Big5、EUC-x、CP9xxなど)は含まれません。
@end itemize

我々はコミットログメッセージをUTF-8でエンコードすることをお勧めしますが、コアとGit
Porcelainはどちらも、プロジェクトでUTF-8を強制しないように設計されています。特定のプロジェクトのすべての参加者がレガシーエンコーディングを使用する方が便利だと感じた場合、Gitはそれを禁止しません。
ただし、覚えておくべきことがいくつかあります。

@enumerate 

@item
@emph{git commit} と @emph{git commit-tree}
は、プロジェクトがレガシーエンコーディングを使用していることを明示的に指定しない限り、与えられたコミットログメッセージが有効なUTF-8文字列のように見えない場合に警告を発します。明示的に指定する方法は、以下のように、
@samp{.git/config} ファイルに @samp{i18n.commitEncoding} を含めることです。

@example
[i18n]
        commitEncoding = ISO-8859-1
@end example


上記の設定で作成されたコミットオブジェクトは、 @samp{encoding} ヘッダーに @samp{i18n.commitEncoding} の値を記録します。
これは、後でそれらを見る他の人々を助けるためです。このヘッダーがないということは、コミットログメッセージがUTF-8でエンコードされていることを意味します。

@item
@emph{git log} と @emph{git show} と @emph{git blame} とその仲間たちは、コミットオブジェクトの @samp{encoding}
ヘッダーを見て、特に指定がない限り、ログメッセージをUTF-8に再コーディングしようとします。あなたは以下のように、 @samp{.git/config}
ファイルの @samp{i18n.logOutputEncoding} を使用して目的の出力エンコーディングを指定できます。

@example
[i18n]
        logOutputEncoding = ISO-8859-1
@end example


この構成変数がない場合は、代わりに @samp{i18n.commitEncoding} の値が使用されます。
@end enumerate

UTF-8への再コーディングは必ずしも可逆的な操作ではないため、我々はコミットが行われたときにコミットログメッセージを再コーディングしないことを意図的に選択したことに注意してください。

@noindent

@chapheading ENVIRONMENT AND CONFIGURATION VARIABLES

The editor used to edit the commit log message will be chosen from the
@samp{GIT_EDITOR} environment variable, the core.editor configuration variable,
the @samp{VISUAL} environment variable, or the @samp{EDITOR} environment variable (in
that order).  See git-var(1) for details.

@noindent

@chapheading HOOKS

This command can run @samp{commit-msg}, @samp{prepare-commit-msg}, @samp{pre-commit},
@samp{post-commit} and @samp{post-rewrite} hooks.  See githooks(5) for more
information.

@noindent

@chapheading FILES

@table @asis

@item  @samp{$GIT_DIR/COMMIT_EDITMSG} 
This file contains the commit message of a commit in progress.  If @samp{git
commit} exits due to an error before creating a commit, any commit message
that has been provided by the user (e.g., in an editor session) will be
available in this file, but will be overwritten by the next invocation of
@samp{git commit}.
@end table

@noindent

@chapheading SEE ALSO

git-add(1), git-rm(1), git-mv(1),
git-merge(1), git-commit-tree(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-config,,,Top
@chapheading Name

git-config — リポジトリオプションまたはグローバルオプションを、取得および設定する

@noindent

@chapheading Synopsis

@display
git config [<file-option>] [--type=<type>] [--fixed-value] [--show-origin] [--show-scope] [-z|--null] name [value [value-pattern]]
git config [<file-option>] [--type=<type>] --add name value
git config [<file-option>] [--type=<type>] [--fixed-value] --replace-all name value [value-pattern]
git config [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get name [value-pattern]
git config [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get-all name [value-pattern]
git config [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] [--name-only] --get-regexp name_regex [value-pattern]
git config [<file-option>] [--type=<type>] [-z|--null] --get-urlmatch name URL
git config [<file-option>] [--fixed-value] --unset name [value-pattern]
git config [<file-option>] [--fixed-value] --unset-all name [value-pattern]
git config [<file-option>] --rename-section old_name new_name
git config [<file-option>] --remove-section name
git config [<file-option>] [--show-origin] [--show-scope] [-z|--null] [--name-only] -l | --list
git config [<file-option>] --get-color name [default]
git config [<file-option>] --get-colorbool name [stdout-is-tty]
git config [<file-option>] -e | --edit
@end display


@noindent

@chapheading DESCRIPTION

このコマンドを使用して、オプションを照会(query)/設定(set)/置換(replace)/設定解除(unset;削除)できます。名前は実際にはドットで区切られたセクションとキーであり、値はエスケープされます。

@samp{--add}
オプションを使用すると、オプションに複数の行を追加できます。複数行で発生する可能性のあるオプションを更新または設定解除する場合は、@samp{value-pattern}
( @samp{--fixed-value}
オプションが指定されていない限り、拡張正規表現)を指定する必要があります。パターンに一致する既存の値のみが更新または設定解除されます。パターンと「一致しない」行を処理する場合は、前に1つの感嘆符(@samp{!})を追加するだけです(@ref{EXAMPLES}
も参照下さい)が、ただし、これは @samp{--fixed-value} オプションが使用されていない場合のみ機能することに注意してください。

@samp{--type=<type>} オプションは @emph{git config} に指示して、指定の<type>の下で入力値(incoming
value)と出力値(outgoing value)が正規化可能であることを確認します。 @samp{-type=<type>}
が指定されていない場合、正規化は実行されません。 呼び出し元は、既に指定済の @samp{--type} 指定子を @samp{--no-type} で設定解除できます。

読み取り時、値はデフォルトでシステム、グローバル、リポジトリのローカル構成ファイルから読み取られ、オプション @samp{--system}
、@samp{--global} 、 @samp{--local} 、 @samp{--worktree} 、 `--file <filename> `
を使用して、その場所から「のみ」読み取るようにコマンドに指示できます(@ref{FILES} 参照)。

書き込み時、新しい値はデフォルトでリポジトリのローカル構成ファイルに書き込まれます。オプション @samp{--system} 、@samp{--global} 、
@samp{--worktree} 、@samp{--file <filename> ` を使用すれば、コマンドにその場所に書き込むよう指示できます(あなたは
`--local} と言うこともでき、そしてこれはデフォルトです)。

このコマンドは、エラー時にゼロ以外のステータスで失敗します。 いくつかの終了コードは以下のとおりです:

@itemize 

@item
セクションキーが不正(ret=1)

@item
セクションまたは名前が与えられてない(ret=2)

@item
configファイルが不正(ret=3)

@item
configファイルに書き込みできない(ret=4)

@item
存在しないオプションの設定を削除(unseet)しようとしました(ret=5)

@item
あなたは、複数の行が一致するオプションを設定(set)/削除(unset)しようとしています(ret=5)

@item
不正な正規表現を使おうとしています(ret=6)
@end itemize

成功の場合、コマンドは終了コード 0 を返します。

使用可能なすべての構成変数のリストは、 @samp{git help --config} コマンドを使用して取得できます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--replace-all} 
デフォルトの振る舞いでは最大1行を置き換えますが、このオプションより、キー(およびオプションで
@samp{value-pattern})に一致するすべての行が置換されます。

@item  @samp{--add} 
既存の値を変更せずに、オプションに新しい「行を追加」します。 これは @samp{--replace-all} の @samp{value-pattern} として
@emph{^$} を指定しても同じ事が可能です。

@item  @samp{--get} 
指定されたキーの値を取得します(オプションで、値に一致する正規表現でフィルタリングされます)。キーが見つからなかった場合はエラーコード1を返し、複数のキー値が見つかった場合は「最後の値」を返します。

@item  @samp{--get-all} 
@samp{--get} と同様ですが、複数値キー(複数行;multivar)のすべての値を返します。

@item  @samp{--get-regexp} 
@samp{--get-all}
と同様ですが、名前を正規表現として解釈し、キー名を書き出します。正規表現の照合では現在、大文字と小文字が区別され、セクション名と変数名が小文字になっている正規化されたバージョンのキーに対して実行されますが、サブセクション名は大文字と小文字が区別されません。

@item  @samp{--get-urlmatch name URL} 
2つの部分からなる名前 section.key を指定すると、<url> 部分が指定したURLに最もよく一致する section.<url>.key
の値が返されます(そのようなキーが存在しない場合は、
section.keyの値にフォールバックします)。セクションだけを名前として指定した合は、当該セクション内のすべてのキー・値をリストします。値が見つからない場合はエラーコード1を返します。

@item  @samp{--global} 
オプション書き込みの場合: リポジトリの @samp{.git/config} ではなくグローバル @samp{~/.gitconfig}
@samp{$XDG_CONFIG_HOME/git/config} ファイルがある場合は @samp{$XDG_CONFIG_HOME/git/config}
ファイルに書き込みます。

オプション読み取りの場合: 使用可能なすべてのファイルからではなく、グローバル @samp{~/.gitconfig} と
@samp{$XDG_CONFIG_HOME/git/config} からのみ読み取ります。

@ref{FILES} も参照して下さい。

@item  @samp{--system} 
オプション書き込みの場合: リポジトリの @samp{.git/config} ではなくシステム全体の @samp{$(prefix)/etc/gitconfig}
に書き込みます。

オプション読み取りの場合: 使用可能なすべてのファイルからではなく、システム全体の @samp{$(prefix)/etc/gitconfig}
からのみ読み取ります。

@ref{FILES} も参照して下さい。

@item  @samp{--local} 
オプションを書き込む場合: リポジトリの @samp{.git/config} ファイルに書き込みます。これがデフォルトの動作です。

読み取りオプションの場合: 使用可能なすべてのファイルからではなく、リポジトリ @samp{.git/config} からのみ読み取ります。

@ref{FILES} も参照して下さい。

@item  @samp{--worktree} 
@samp{--local} と似ていますが、 @samp{extensions.worktreeConfig} が存在する場合、
@samp{.git/config.worktree} が読み書きされる点が異なります。@samp{extensions.worktreeConfig} が存在しない場合は
@samp{--local} と同じです。

@item  @samp{-f config-file} 
@itemx  @samp{--file config-file} 
オプション書き込みの場合: リポジトリの @samp{.git/config} ではなく、指定のファイルに書き込みます。

オプション読み取りの場合: 使用可能なすべてのファイルからではなく、指定のファイルからのみ読み取ります。

@ref{FILES} も参照して下さい。

@item  @samp{--blob blob} 
@samp{--file} に似ていますが、ファイルの代わりに指定のブロブを使用します。例えば、 @emph{master:.gitmodules}
を使用して、masterブランチのファイル @emph{.gitmodules} から値を読み取ることができます。ブロブ名の綴りのより完全なリストについては、
gitrevisions(7) の「SPECIFYING REVISIONS」セクションを参照してください。

@item  @samp{--remove-section} 
指定のセクションを構成ファイルから削除します。

@item  @samp{--rename-section} 
指定のセクションの名前を新しい名前に変更します。

@item  @samp{--unset} 
キーに一致する行を構成ファイルから削除します。

@item  @samp{--unset-all} 
キーに一致するすべての行を構成ファイルから削除します。

@item  @samp{-l} 
@itemx  @samp{--list} 
構成ファイルに「設定されている」すべての変数とその値を一覧表示します(訳注:使用可能なすべての構成変数のリストは、 @samp{git help
--config})。

@item  @samp{--fixed-value} 
@samp{value-pattern} 引数と一緒に使用する場合、 @samp{value-pattern}
を正規表現ではなく単なる文字列として扱います。これにより、値が @samp{value-pattern}
と完全に等しいものにのみ一致する、名前/値のペアだけに制限されます。

@item  @samp{--type <type>} 
@emph{git config} は、入力または出力が指定された型(type)の制約の下で有効であることを保証し、その型の正規形式で出力値を正規化します。

有効な型には以下のものがあります:

@itemize 

@item
@emph{bool}:  値を「true」または「false」として正規化します。

@item
@emph{int}
値を単純な10進数として正規化します。オプションのサフィックス「k」また「m」または「g」を使用すると、入力時に値にそれぞれ1,024または1,048,576(1024^2)または1,073,741,824(10243)が掛け算されます。

@item
@emph{bool-or-int}: 上記のように、 @emph{bool} または @emph{int} のいずれかに従って正規化します。

@item
@emph{path}: @samp{$HOME} の値を意味する @samp{~} を先頭に追加し、指定のユーザのホームディレクトリを @samp{~user} として正規化します。この
@samp{~} は値を書き込むときには効果がありません(ただし、あなたはコマンドラインから @samp{git config section.variable ~/}
と実行してシェルに展開をさせることができます)。

@item
@emph{expiry-date}: 固定または相対の日付文字列からタイムスタンプに変換することで正規化します。この指定は値を書き込むときには効果がありません。

@item
@emph{color}:
値を取得するときに、ANSIカラーエスケープシーケンスに変換して正規化します。値を設定するとき、指定された値がANSIカラーとして正規化可能であることを確認するために健全性チェックが実行されますが、正規化自体は行われず、そのまま書き込まれます。
@end itemize

@item  @samp{--bool} 
@itemx  @samp{--int} 
@itemx  @samp{--bool-or-int} 
@itemx  @samp{--path} 
@itemx  @samp{--expiry-date} 
タイプ指定子を選択するための歴史的オプション。 代わりに @samp{--type} を優先します(上記参照)。

@item  @samp{--no-type} 
(これ以前に設定されていた場合、)これ以前に設定された型指定子の設定を解除します。このオプションは、「git
config」が取得した変数を正規化しないように要求します。 @samp{--no-type} は、@samp{--type=<type>} または @samp{--<type>}
が無い場合は何の効果もありません。

@item  @samp{-z} 
@itemx  @samp{--null} 
値やキーを出力するすべてのオプションで、値を(改行ではなく)常にヌルバイト(\0)で終了します。代わりに、キーと値の間の区切り文字として改行を使用します。これにより、例えば、改行を含む値を混乱することなく、出力を安全にパースできます。

@item  @samp{--name-only} 
@samp{--list} または @samp{--get-regexp} の構成変数で名前のみを出力します。

@item  @samp{--show-origin} 
照会されたすべての構成オプションの出力に、その構成オプションの出処の種類(ファイル、標準入力、blob、コマンドライン)と実際の出処(設定ファイルのパス、参照、または該当する場合はblobのID)を追加します。

@item  @samp{--show-scope} 
@samp{--show-origin}
と同様に、クエリされたすべての設定オプションの出力をその値のスコープ(ローカル、グローバル、システム、コマンド)で拡張します。

@item  @samp{--get-colorbool name [stdout-is-tty]} 
@samp{name} の色設定(たとえば @samp{color.diff})を見つけて、「true」または「false」を出力します。 @samp{stdout-is-tty}
は「true」または「false」のいずれかである必要があり、構成で「auto」と表示されている場合に考慮されます。 @samp{stdout-is-tty}
がない場合は、コマンド自体の標準出力をチェックし、色を使用する場合はステータス0で終了し、それ以外の場合はステータス1で終了します。 @samp{name}
の色設定が未定義の場合、コマンドはフォールバックとして @samp{color.ui} を使用します。

@item  @samp{--get-color name [default]} 
@samp{name} (例: @samp{color.diff.new}) に設定されている色を見つけて、ANSIカラーエスケープシーケンスとして標準出力に出力します。
@samp{name} に色が設定されていない場合は、オプションの @samp{default} パラメータが代わりに使用されます。

@samp{--type=color [--default=<default>]} は @samp{--get-color} よりも優先されます(ただし、
@samp{--get-color} は、 @samp{--type=color} によって出力される末尾の改行を省略します)。

@item  @samp{-e} 
@itemx  @samp{--edit} 
指定の構成ファイルを変更するためのエディタを開きます。指定できるのは、 @samp{--system} または @samp{--global}
または「リポジトリ」(指定なし;デフォルト)、のいずれかです。

@item  @samp{--[no-]includes} 
値を検索するときは、設定ファイルの @samp{include.*} ディレクティブを尊重します。特定のファイルが指定されている場合(たとえば、 @samp{--file}
、@samp{--global} などを使用した場合)はデフォルトで @samp{off} になり、すべての構成ファイルを検索する場合は @samp{on} になります。

@item  @samp{--default <value>} 
@samp{--get} を使用していて、要求した変数が見つからない場合、 <value> がその変数に割り当てられた値であるかのように動作します。
@end table

@noindent

@chapheading CONFIGURATION

@samp{pager.config} は、構成を一覧表示する場合、つまり、 ` --list` 、または複数の結果を返す可能性のある @samp{--get-*}
のいずれか、を使用する場合にのみ尊重されます。デフォルトでは pager を使用します。

@noindent

@chapheading FILES

@samp{--file} で明示的に設定されていない場合、 @emph{git config} が構成オプションを検索する以下の4つのファイルがあります:

@table @asis

@item  $(prefix)/etc/gitconfig 
システム全体(PC毎)の構成ファイル

@item  $XDG_CONFIG_HOME/git/config 
2番目のユーザー固有の構成ファイルです。 $XDG_CONFIG_HOME が設定されていないか空の場合
@samp{$HOME/.config/git/config} が使用されます。このファイルに設定されている単一値の変数は、 @samp{~/.gitconfig}
にあるものによって上書きされます。このファイルのサポートはごく最近追加されたため、古いバージョンのGitを使用することがある場合は、このファイルを作成しないことをお勧めします。

@item  ~/.gitconfig 
ユーザー毎の構成ファイル。グローバル(global)構成ファイルとも呼ばれる。

@item  $GIT_DIR/config 
リポジトリ毎の構成ファイル。

@item  $GIT_DIR/config.worktree 
これはオプションであり、 @samp{extensions.worktreeConfig} が $GIT_DIR/config に存在する場合にのみ検索されます。
@end table

それ以上のオプションが指定されていない場合、すべての読み取りオプションは、使用可能なこれらのファイルをすべて読み取ります。グローバルまたはシステム全体の構成ファイルが使用できない場合、それらは無視されます。リポジトリ設定ファイルが利用できないか読み取り可能でない場合、「git
config」はゼロ以外のエラーコードで終了します。 ただし、どちらの場合もエラーメッセージは発行されません。

ファイルは上記の順序で読み取られ、「最後」に見つかった値が前に読み取った値よりも優先されます。なお、複数値(multiple
values)を取得すると、すべてのファイルのキーのすべての値が使用されます。

あなたは gitコマンドを実行するとき、 @samp{-c} オプションを使用して、個々の構成パラメーターをオーバーライドできます。詳細については
git(1) を参照してください。

すべての書き込みオプションは、デフォルトではリポジトリ固有の構成ファイルに書き込みます。これは、 @samp{--replace-all} や @samp{--unset}
などのオプションにも影響することに注意してください。 ※ @samp{git config} は一度に1つのファイルのみを変更します。

これらのルールは、 @samp{--global} と` --system` と @samp{--local} と` --worktree` と @samp{--file}
コマンドラインオプションを使用してオーバーライドできます。上記の @ref{OPTIONS} を参照してください。

@noindent

@chapheading ENVIRONMENT

@table @asis

@item  GIT_CONFIG_GLOBAL 
@itemx  GIT_CONFIG_SYSTEM 
グローバルまたはシステムレベルの構成からではなく、指定されたファイルから構成を取得します。詳細については git(1)
を参照してください。

@item  GIT_CONFIG_NOSYSTEM 
システム全体(PC毎)の $(prefix)/etc/gitconfig ファイルからの設定の読み取りをスキップするかどうか。詳細については
git(1) を参照してください。
@end table

@ref{FILES} も参照して下さい。

@table @asis

@item  GIT_CONFIG_COUNT 
@itemx  GIT_CONFIG_KEY_<n> 
@itemx  GIT_CONFIG_VALUE_<n> 
GIT_CONFIG_COUNTが正の数に設定されている場合、その数までのすべての環境ペア GIT_CONFIG_KEY_<n> と
GIT_CONFIG_VALUE_<n>
がプロセスのランタイム構成に追加されます。構成ペアはゼロインデックスです。キーまたは値が欠落している場合は、エラーとして扱われます。空のGIT_CONFIG_COUNTは、GIT_CONFIG_COUNT=0と同じように扱われます。つまり、ペアは処理されません。これらの環境変数は構成ファイルの値をオーバーライドしますが、
@samp{git -c} を介して渡された明示的なオプションによってオーバーライドされます。

これは、共通の構成で複数のgitコマンドを生成したいが、スクリプトを作成する場合など、構成ファイルに依存できない場合に役立ちます。

@item  GIT_CONFIG 
@samp{git config} に @samp{--file} オプションが指定されていない場合は、 @samp{--file} を介して提供されているかのように
@samp{GIT_CONFIG} によって指定されたファイルを使用します。この変数は他のGitコマンドには影響せず、主に歴史的な互換性のためのものです。 通常、
@samp{--file} オプションの代わりに使用する理由はありません。
@end table

@noindent

@chapheading EXAMPLES

以下の .git/config が与えられているものとします:

@example
#
# This is the config file, and
# a '#' or ';' character indicates
# a comment
#

; core variables
[core]
        ; Don't trust file modes
        filemode = false

; Our diff algorithm
[diff]
        external = /usr/local/bin/diff-wrapper
        renames = true

; Proxy settings
[core]
        gitproxy=proxy-command for kernel.org
        gitproxy=default-proxy ; for all the rest

; HTTP
[http]
        sslVerify
[http "https://weak.example.com"]
        sslVerify = false
        cookieFile = /tmp/cookie.txt
@end example


あなたは以下のようにしてfilemodeをtrueに設定できます

@example
% git config core.filemode true
@end example


とある架空のプロキシコマンドエントリで、末尾が kernel.org である行を、 @emph{"ssh" for kernel.org} に置換するには

@example
% git config core.gitproxy '"ssh" for kernel.org' 'for kernel.org$'
@end example


これにより、kernel.orgのキーと値のペアのみが置き換えられます。

renamesのエントリを削除するには

@example
% git config --unset diff.renames
@end example


マルチ変数(multivar)(上記のcore.gitproxyなど)のエントリを削除する場合は、正確に1行の値に一致する正規表現を指定する必要があります。

特定のキーの値を照会するには、次のようにします。

@example
% git config --get core.filemode
@end example


または

@example
% git config core.filemode
@end example


また、マルチ変数(multivar)の照会は:

@example
% git config --get core.gitproxy "for kernel.org$"
@end example


マルチ変数のすべての値を知りたい場合は、次のようにします:

@example
% git config --get-all core.gitproxy
@end example


あなたが危険極まりない人生を送りたい場合は、以下のようにして core.gitproxy の「全て」を新しいものに置き換えることができます。

@example
% git config --replace-all core.gitproxy ssh
@end example


しかし、あなたが本当にデフォルトプロキシの行、つまり「for …」の接尾辞のない行だけを置き換えたい場合は、次のようにします:

@example
% git config core.gitproxy ssh '! for '
@end example


感嘆符(@samp{!})と実際に一致させるには、以下のことを行う必要があります。

@example
% git config section.key value '[!]'
@end example


既存のプロキシを変更せずに新しいプロキシを追加するには、以下を使用します。

@example
% git config --add core.gitproxy '"proxy-command" for example.com'
@end example


あなたのスクリプトで構成からカスタマイズされた色を使う例:

@example
#!/bin/sh
WS=$(git config --get-color color.diff.whitespace "blue reverse")
RESET=$(git config --get-color "" "reset")
echo "$@{WS@}your whitespace color or blue reverse$@{RESET@}"
@end example


URL が @samp{https://weak.example.com} の場合、 @samp{http.sslVerify}
はfalseに設定され、他のすべてのURLでは @samp{true} に設定されます:

@example
% git config --type=bool --get-urlmatch http.sslverify https://good.example.com
true
% git config --type=bool --get-urlmatch http.sslverify https://weak.example.com
false
% git config --get-urlmatch http https://weak.example.com
http.cookieFile /tmp/cookie.txt
http.sslverify false
@end example


@noindent

@chapheading CONFIGURATION FILE

Git構成ファイルには、Gitコマンドの動作に影響を与えるいくつかの変数が含まれています。各リポジトリ内のファイル @samp{.git/config}
と、オプションで @samp{config.worktree} (git-worktree(1) の「CONFIGURATION
FILE」セクションを参照)は、そのリポジトリの設定を保存するために使用され、 @samp{$HOME/.gitconfig} は、ユーザーごとの構成を
@samp{.git/config} ファイルのフォールバック値として保存するために使用されます。 ファイル @samp{/etc/gitconfig}
を使用して、システム全体のデフォルト設定を保存できます。

構成変数は、Git配管コマンドとGit磁器コマンドの両方で使用されます。変数はセクションに分割されます。変数自体の完全修飾変数名は最後のドット区切りセグメントであり、セクション名は最後のドットより前のすべてです。変数名では大文字と小文字が区別されず、英数字(alphanumeric)と
@samp{-}(\x2d)
のみが許可され、英字(alphabetic)で始まる必要があります。一部の変数は複数回現れる場合があり、その変数はmultivalueであると言います(訳注:multiple
lines(複数行)という表現とmultivalueと言う表現が混在する。configでは同じ意味)。

@noindent

@heading Syntax

構文はかなり柔軟で寛容です。空白(whitespace)はほとんど無視されます。 @emph{#} と @emph{;}
文字はそこからその行の行末までコメントにします。空白行は無視されます。

このファイルは、セクションと変数で構成されています。セクションは角括弧内(@samp{[' …
`]')のセクションの名前で始まり、次のセクションが始まるまで続きます。セクション名では大文字と小文字は区別されません。セクション名には、英数字(alphanumeric)
と `-} (\x2d) と @samp{.} (\x2e)
のみを使用できます。各変数はあるセクションに属している必要があります。つまり、変数の最初の設定の前にセクションヘッダーが必要です。

セクションはさらにサブセクションに分割できます。サブセクションを開始するには、以下の例のように、セクションヘッダーで、セクション名からスペースで区切って、その名前を二重引用符で囲みます:

@example
        [section "subsection"]
@end example


サブセクション名では大文字と小文字が区別され、改行とヌルバイト(\x00)以外の任意の文字を含めることができます。 二重引用符 @samp{"} (\x22)と
バックスラッシュ(\x5c;日本の環境では円記号で表示される事がある)は、それぞれ @samp{\"} と @samp{\\}
としてエスケープすることで含めることができます。 他の文字の前にあるバックスラッシュは、読み取るときに削除されます。 たとえば、 @samp{\t} は @samp{t}
として読み取られ、 @samp{\0} は @samp{0}
として読み取られます。セクションヘッダーは複数行にまたがることはできません。変数は、セクションまたは特定のサブセクションに直接属する場合があります。
@samp{[section" subsection "]} がある場合は @samp{[section]} も使用できますが、必須ではありません。

非推奨の @samp{[section.subsection]}
構文があります。この構文では、サブセクション名は小文字に変換され、大文字と小文字が区別されて比較されます。これらのサブセクション名は、セクション名と同じ制限に従います。

他のすべての行(およびセクションヘッダーの後の行の残りの部分)は、「name =
value」(または単に「name」)の形式で設定変数として認識されます(「name」形式は「name =
true」の省略形で、変数をブール値「true」に設定します)。変数名では大文字と小文字が区別されず、英数字(alphanumeric)と @samp{-}
(\x2d) のみが許可され、英字(alphabetic)で始まる必要があります。

値を定義する行は、 @samp{\} (\x5c) で終了することにより、次の行に続けることができます。続けた時、バックスラッシュと行末は削除されて認識されます。
@emph{name =} の後の先頭の空白と、その行で最初に現れるコメント文字 @emph{#} または @emph{;}
以降行末まで、または、行末尾の空白は、二重引用符で囲まれていない限り破棄されます。値内の内部空白はそのまま保持されます。

ダブルクォートで囲まれた中では、ダブルクォート @samp{"} とバックスラッシュ @samp{\} 文字はエスケープしなければなりません。 @samp{"} を表わすには
@samp{\"} を使い、 @samp{\} を表わすには @samp{\\} を使ってください。

( @samp{\"} と @samp{\\} に加えて)認識されるエスケープシーケンスは、改行文字(NL;newline)が @samp{\n} 、水平タブ(HT;TAB)が
@samp{\t} 、バックスペース(BS)が @samp{\b} です。他のエスケープシーケンス(8進エスケープシーケンスを含む)は無効です。

@noindent

@heading Includes

@samp{include} セクションと @samp{includeIf}
セクションを使用すると、別のソースからの設定ディレクティブを含めることができます。これら２つのセクションは、条件がtrueと評価されない場合
@samp{includeIf} セクションが無視されることを除いて、同様に動作します。 以下の「Conditional includes」を参照してください。

特別な @samp{include.path} (または @samp{includeIf.*.path}
)変数をインクルードするファイルの名前に設定することにより、別の構成ファイルをインクルードできます。
変数はその値としてパス名を取り、チルダ展開の対象となります。これらの変数は複数回指定できます。

インクルードファイルの内容は、includeディレクティブの場所で見つかったかのように、すぐに挿入されます。変数の値が相対パスである場合、そのパスは、includeディレクティブが見つかった構成ファイルからの相対パスであると見なされます。例については、以下を参照してください。

@noindent

@heading Conditional includes

@samp{includeIf.<condition>.path}
変数をインクルードするファイルの名前に設定することにより、条件付きで別の構成ファイルをインクルードできます。

条件は、キーワードで始まり、その後にコロンと、形式と意味がキーワードによって異なるいくつかのデータが続きます。サポートされているキーワードは以下のとおりです:

@table @asis

@item  @samp{gitdir} 
キーワード @samp{gitdir:} 続くデータは、グロブパターンとして使用されます。 .git
ディレクトリの場所がパターンと一致する場合、インクルード条件が満たされます。

@samp{.git} の場所は自動検出されるか、 @samp{$GIT_DIR} 環境変数から取得されます。 リポジトリが .git
ファイルを介して(つまり、サブモジュールやリンクされたワークツリーなどから)自動検出される場合、最終的に検出される .git の場所とは、 .git
ファイルの場所ではなく .git ファイルからたどった
.gitディレクトリの場所です。

パターンには、標準のグロブワイルドカードと、複数のパス部分に一致する可能性のある2つの追加のワイルドカード @samp{**/} と @samp{/**}
を含めることができます。詳細については、 gitignore(5) を参照してください。便宜上、以下の記法が使えます:

@itemize 

@item
パターンが @samp{~/} で始まる場合、 @samp{~} は環境変数 @samp{HOME} の内容に置き換えられます。

@item
パターンが @samp{./} で始まる場合、現在の設定ファイルを含むディレクトリに置き換えられます。

@item
パターンが @samp{~/} ・ @samp{./} ・ @samp{/} のいずれでも始まらない場合、 @samp{**/} 自動的に先頭に追加されます。たとえば、パターン
@samp{foo/bar} は @samp{**/foo/bar} になり、 @samp{/any/path/to/foo/bar} と一致します。

@item
パターンが @samp{/} で終わる場合、 @samp{**} が自動的に追加されます。 たとえば、パターン @samp{foo/} は @samp{foo/**}
になります。言い換えると、「foo」ディレクトリとその中のすべてに再帰的に一致します。
@end itemize

@item  @samp{gitdir/i} 
これは、照合が大文字と小文字を区別せずに行われることを除いて、 @samp{gitdir} と同じです(大文字と小文字を区別しないファイルシステムなど)。

@item  @samp{onbranch} 
キーワード @samp{onbranch:} に続くデータは、標準のグロブワイルドカードと、複数のパス部分に一致する可能性のある2つの追加のワイルドカード
@samp{**/} と @samp{/**}
を含むパターンと見なされます。現在チェックアウトされているブランチの名前がパターンと一致するワークツリーにいる場合、インクルード条件が満たされます。

パターンが @samp{/} で終わる場合、 @samp{**} が自動的に追加されます。 たとえば、パターン @samp{foo/} は @samp{foo/**} になります。つまり、
@samp{foo/}
で始まるすべてのブランチに一致します。これは、ブランチが階層的に編成されていて、その階層内のすべてのブランチに構成を適用する場合に役立ちます。
@end table

@samp{gitdir} と @samp{gitdir/i} を介したマッチングに関するいくつかの注意事項:

@itemize 

@item
@samp{$GIT_DIR} の中のシンボリックリンクは、マッチ前に解決されません。

@item
シンボリックリンクバージョンとrealpathバージョンの両方のパスが、 @samp{$GIT_DIR} の値と照合されます。例えば @samp{~/git} が
@samp{/mnt/storage/git} へのシンボリックリンクである場合、 @samp{gitdir:~/git} と
@samp{gitdir:/mnt/storage/git} の両方が一致します。

これは、Git v2.13.0
でのこの機能の最初のリリースには当てはまりませんでした。これは、realpathバージョンにのみ一致していました。この機能の初期リリースとの互換性を希望する構成では、realpathバージョンのみ、あるいは両方のバージョンを指定する必要があります。

@item
注意: 「../」は特別なものではなく、文字通り一致することに注意してください。これは、あなたが望むものではない可能性があります。
@end itemize

@noindent

@heading Example

@example
# Core variables
[core]
        ; Don't trust file modes
        filemode = false

# Our diff algorithm
[diff]
        external = /usr/local/bin/diff-wrapper
        renames = true

[branch "devel"]
        remote = origin
        merge = refs/heads/devel

# Proxy settings
[core]
        gitProxy="ssh" for "kernel.org"
        gitProxy=default-proxy ; for the rest

[include]
        path = /path/to/foo.inc ; include by absolute path
        path = foo.inc ; find "foo.inc" relative to the current file
        path = ~/foo.inc ; find "foo.inc" in your `$HOME` directory

; include if $GIT_DIR is /path/to/foo/.git
[includeIf "gitdir:/path/to/foo/.git"]
        path = /path/to/foo.inc

; include for all repositories inside /path/to/group
[includeIf "gitdir:/path/to/group/"]
        path = /path/to/foo.inc

; include for all repositories inside $HOME/to/group
[includeIf "gitdir:~/to/group/"]
        path = /path/to/foo.inc

; relative paths are always relative to the including
; file (if the condition is true); their location is not
; affected by the condition
[includeIf "gitdir:/path/to/group/"]
        path = foo.inc

; include only if we are in a worktree where foo-branch is
; currently checked out
[includeIf "onbranch:foo-branch"]
        path = foo.inc
@end example


@noindent

@heading Values

多くの変数の値は単純な文字列として扱われますが、特定のタイプの値をとる変数があり、それらの綴り方に関する規則があります。

@table @asis

@item  boolean 
変数がブール値をとると言われるとき、「true」と「false」の多くの同義語が受け入れられます。なお、これらはすべて大文字と小文字を区別しません。

@table @asis

@item  true 
ブール値 true のリテラルは、 @samp{yes} と @samp{on} と @samp{true} と @samp{1`です。
また、値の指定無し( `= <value>} 無し)
の変数は true と見なされます。

@item  false 
ブール値 false リテラルは、 @samp{no} と @samp{off} と @samp{false} と @samp{0} と
空文字列です。

@samp{--type = bool} 型指定子を使用して値を正規形に変換する場合、 @emph{git config}
は、値の出力を「true」または「false」（小文字で表記）にします。
@end table

@item  integer 
さまざまなサイズを指定する多くの変数の値には、「k」、「M」などの接尾辞を付けることができます。これは、「数値に1024掛けた値に」、「数値に1024x1024を掛けた値に」などを意味します。

@item  color 
色をとる変数の値は、スペースで区切られた色(最大で2つ、1つは前景用(foreground)、もう1つは背景用(background))と、(必要な数の)属性(attribute)の「リスト」です。

使用できる基本色は、 @samp{normal} と @samp{black} と @samp{red} と @samp{green} と @samp{yellow} と @samp{blue} と
@samp{magenta} と @samp{cyan} と @samp{white} です。与えられた最初の色は前景用です。2番目は背景用です。 @samp{normal}
を除くすべての基本色には、 @samp{brightred} のように色の前に @samp{bright} と付けることで指定できる明るいバリエーションがあります。

色は0から255までの数字で指定することもできます。これらはANSI256色モードを使用します(ただし、すべての端末がこれをサポートしているわけではないことに注意してください)。端末が24ビットRGB値をサポートしている場合は
@samp{#ff0ab3} のように16進数として指定することもできます。

受け入れられる属性(attribute)は、 @samp{bold} と @samp{dim} と @samp{ul} と @samp{blink} と @samp{reverse} と
@samp{italic} と @samp{strike} (取り消し線(cross-out)または「取り消し線」の文字(strikethrough
letters)の場合)
です。色に関する属性の位置(前、後、または中間)は重要ではありません。特定の属性は、それらの前に「no」または「no-」を付けることによってオフにすることができます(たとえば、「noreverse」、「no-ul」など)。

空のカラー文字列は、色の効果をまったく生成しません。 これは、色を完全に無効にすることなく、特定の要素の色付けを回避するために使用できます。

gitで事前定義されたカラースロットの場合、属性は、カラー出力の各アイテムの先頭でリセットされることを意図しています。したがって、
@samp{color.decorate.branch`を} black`に設定すると、同じ出力行の前のものが @samp{bold}
または他の属性でペイントされるように設定されている場合(たとえば @samp{log --decorate}
出力のブランチ名のリストの前で括弧を開く)でも、そのブランチ名がプレーンな @samp{black}
でペイントされます。ただし、カスタムログ形式では、より複雑で階層化された色付けが行われる場合があり、否定された形式が役立つ場合があります。

@item  pathname 
パス名の値をとる変数には、 @samp{~/} または @samp{~user/} で始まる文字列を指定できます。このような文字列には、通常のチルダ展開が行われます。
@samp{~/} は @samp{$HOME} の値に展開され、 @samp{~user/} は指定のユーザーのホームディレクトリに展開されます。

パスが  @samp{%(prefix)/}
で始まる場合、残りはGitの「ランタイムプレフィックス」に関連するパス、つまりGit自体がインストールされた場所に関連するパスとして解釈されます。
たとえば、 @samp{%(prefix)/bin/}
は、Git実行可能ファイル自体が存在するディレクトリを指します。Gitがランタイムプレフィックスのサポートなしでコンパイルされた場合、代わりにコンパイルされたプレフィックスが置き換えられます。万が一、展開してはならないリテラルパスを指定する必要がある場合は、
@samp{./%(prefix)/bin} のように接頭辞 @samp{./} を付ける必要があります。
@end table

@noindent

@heading Variables

注意:
このリストは包括的ではなく、必ずしも完全ではないことに注意してください。コマンド固有の変数については、適切なマニュアルページに詳細な説明があります。

他のgit関連ツールは、独自の変数を使用する場合があります。独自のツールで使用する新しい変数を考案するときは、それらの名前がGit自体や他の一般的なツールで使用されているものと競合しないことを確認し、ドキュメントに記述してください。

@table @asis

@item  advice.* 
これらの変数は、新しいユーザーを支援するために設計されたさまざまなオプションのヘルプメッセージを制御します。すべての「advice.*」変数はデフォルトで「true」に設定されており、これらを「false」に設定することで、ヘルプが不要であることをGitに伝えることができます。

@table @asis

@item  fetchShowForcedUpdates 
git-fetch(1)がrefの更新後に強制更新を計算したり、
チェックが無効になっていることを警告したりするのに
長い時間がかかる場合に表示されるアドバイス。

@item  pushUpdateRejected 
@emph{pushNonFFCurrent} と @emph{pushNonFFMatching} と @emph{pushAlreadyExists} と
@emph{pushFetchFirst} と @emph{pushNeedsForce} と @emph{pushRefNeedsUpdate} を
同時に無効にする場合は、この変数を
@emph{false} に設定します。

@item  pushNonFFCurrent 
現在のブランチへの non-fast-forward 更新が原因で
git-push(1) が失敗した場合に表示されるアドバイス。

@item  pushNonFFMatching 
git-push(1) を実行し、
「matching refs」を明示的にプッシュ(つまり あなたは「:」を使用したか、
あなたの現在のブランチではないrefspecを指定した)して、
「non-fast-forward」エラーが発生したときに表示されるアドバイスです。

@item  pushAlreadyExists 
git-push(1) が、
fast-forwarding の対象とならない更新(タグなど)を拒否した場合に表示されます。

@item  pushFetchFirst 
git-push(1) が、私たちが持っていないオブジェクトを指す
リモート参照を上書きしようとする更新を
拒否した場合に表示されます。

@item  pushNeedsForce 
git-push(1) が、
コミットっぽくないオブジェクトを指すリモートrefを上書きしようとする更新、
またはコミットっぽくないブジェクトを指すリモートrefを作成しようとする更新を
拒否した場合に表示されます。

@item  pushUnqualifiedRefname 
git-push(1) が、
ソースと宛先のrefsに基づいて、
ソースが属するリモートref名前空間を推測しようとするのをあきらめたときに表示されます。
ただし、
ソースオブジェクトのタイプに基づいて、
refs/heads/* または refs/tags/* のいずれかにプッシュすることを提案できる場合もあります。

@item  pushRefNeedsUpdate 
git-push(1) が、
リモート追跡refにローカルにない更新がある場合に、
ブランチの強制更新を拒否した場合に表示されます。

@item  skippedCherryPicks 
git-rebase(1) が、
アップストリームブランチにすでにチェリーピックされているコミットをスキップした場合に表示されます。

@item  statusAheadBehind 
git-status(1) が、
リモート追跡refと比較したローカルrefの先行(ahead)/遅延(behind)カウントを計算し、
その計算に予想よりも時間がかかる場合に表示されます。
@samp{status.aheadBehind} がfalseの場合、
またはオプション @samp{--no-ahead-behind} が指定されている場合は表示されません。

@item  statusHints 
git-status(1) の出力や、
git-commit(1) の
コミットメッセージ記入時のテンプレート表示や、
git-switch(1) または git-checkout(1) の
ブランチ切り替え時のヘルプメッセージに、
現在の状態からどのように進めていくかの指示を表示します。

@item  statusUoption 
コマンドが、
追跡されていないファイルを列挙するのに2秒以上かかる場合は、
git-status(1) で @samp{-u} オプション使用の検討をアドバイスします。

@item  commitBeforeMerge 
git-merge(1) がローカルの変更を上書きしないようにマージを拒否した場合に、
アドバイスが表示されます。

@item  resetQuiet 
コマンドがreset後に、
ステージングされていない変更を列挙するのに2秒以上かかる場合は、
git-reset(1) で @samp{--quiet} オプション使用の検討をアドバイスします。

@item  resolveConflict 
競合が原因で操作が実行できない場合に、
さまざまなコマンドによって表示されるアドバイス。

@item  sequencerInUse 
シーケンサーコマンドがすでに進行中の場合に表示されるアドバイス。

@item  implicitIdentity 
システムのユーザー名とドメイン名から
情報が推測される場合のID構成の設定方法に
関するアドバイス。

@item  detachedHead 
git-switch(1) または git-checkout(1) を使用して
HEADのデタッチ状態に移行し、
事後にローカルブランチを作成する方法を
指示したときに表示されるアドバイス。

@item  checkoutAmbiguousRemoteBranchName 
git-checkout(1) と git-switch(1) の引数が、
明確な引数によらず
リモート追跡ブランチがチェックアウトされる状況で、
複数のリモート上のリモート追跡ブランチに対して
あいまいに解決される場合に表示されるアドバイス。
このアドバイスが出力される状況で、
特定のリモートをデフォルトで
使用するように設定する方法については、
@samp{checkout.defaultRemote}
構成変数を参照してください。

@item  amWorkDir 
git-am(1) がパッチファイルの適用に失敗した場合に
パッチファイルの場所を示すアドバイス。

@item  rmHints 
git-rm(1) の出力に失敗した場合、
現在の状態からどのように進めるかについての指示を表示します。

@item  addEmbeddedRepo 
誤って、あるgitリポジトリを別のリポジトリ内に追加した
場合の対処方法に関するアドバイス。

@item  ignoredHook 
フックが実行可能ファイルとして設定されていないために
フックが無視された場合に表示されるアドバイス。

@item  waitingForEditor 
Gitがユーザーからのエディタ入力を待機しているときは、
いつでも端末にメッセージを出力します。

@item  nestedTag 
ユーザーがタグオブジェクトに再帰的にタグを付けようとした
場合に表示されるアドバイス。

@item  submoduleAlternateErrorStrategyDie 
「die」に設定された submodule.alternateErrorStrategy オプションが
致命的なエラーを引き起こす場合に表示されるアドバイス。

@item  addIgnoredFile 
ユーザーが、無視されたファイルをインデックスに追加しようとした
場合に表示されるアドバイス。

@item  addEmptyPathspec 
ユーザーがpathspecパラメーターを指定せずに
addコマンドを実行した場合に表示されるアドバイス。

@item  updateSparsePath 
git-add(1) または git-rm(1) のいずれかが、
現在のスパースチェックアウト外のインデックスエントリを
更新するように求められたときに表示されるアドバイス。
@end table

@item  core.fileMode 
作業ツリー内のファイルの実行可能ビットを尊重するかどうかをGitに通知します。

一部のファイルシステムでは、実行可能としてマークされたファイルがチェックアウトされるか、実行可能ビットがオンになっている実行不可能なファイルをチェックアウトすると、実行可能ビットを失います。
git-clone(1) または git-init(1)
は、ファイルシステムを調査して、実行可能ビットを正しく処理し、この変数が必要に応じて自動的に設定されるかどうかを確認します。

リポジトリはファイルモードを正しく処理するファイルシステム上にある可能性があり、この変数は作成時に「true」に設定されますが、後でファイルモードを失う別の環境からアクセスできるようになる可能性があります(たとえば、CIFSマウントを介したext4のエクスポート。CygwinがGit
for WindowsまたはEclipseでリポジトリを作成た時など)。このような場合、この変数を「false」に設定する必要がある場合があります。
git-update-index(1) を参照してください。

(設定ファイルでcore.filemodeが指定されていない場合、)デフォルトはtrueです。

@item  core.hideDotFiles 
(Windowsのみ)trueの場合、名前がドットで始まる、新しく作成されたディレクトリと新しく作成されたファイルを非表示としてマークします。
@emph{dotGitOnly} の場合、  @samp{.git/}
ディレクトリのみが非表示になり、ドットで始まる他のファイルは非表示になりません。デフォルトのモードは「dotGitOnly」です。

@item  core.ignoreCase 
Internal variable which enables various workarounds to enable Git to work
better on filesystems that are not case sensitive, like APFS, HFS+, FAT,
NTFS, etc. For example, if a directory listing finds "makefile" when Git
expects "Makefile", Git will assume it is really the same file, and continue
to remember it as "Makefile".

デフォルトはfalseですが、 git-clone(1) または git-init(1)
は、リポジトリの作成時に必要に応じてcore.ignoreCaseを調査してtrueに設定します。

あなたのオペレーティングシステムとファイルシステムに関して、Gitは、この変数の適切な構成に依存しています。この値を変更すると、予期しない動作が発生する可能性があります。

@item  core.precomposeUnicode 
このオプションは、GitのMacOS実装でのみ使用されます。 core.precomposeUnicode=true
の場合、GitはMacOSによって行われたファイル名のUnicode分解(unicode
decomposition)を元に戻します。これは、MacOSとLinuxまたはWindowsの間でリポジトリを共有する場合に便利です。 (Git
for Windows 1.7.10以降、または Git under cygwin 1.7 が必要です)。
falseの場合、ファイル名はGitによって完全に透過的に処理されます。これは、古いバージョンのGitとの下位互換性があります。

@item  core.protectHFS 
trueに設定されている場合、 HFS+ ファイルシステムで @samp{.git}
と同等と見なされるパスのチェックアウトを許可しないでください。デフォルトはMacOSでは @samp{true} 、それ以外の場合は @samp{false} です。

@item  core.protectNTFS 
trueに設定されている場合、NTFSファイルシステムで問題を引き起こす可能性のあるパスのチェックアウトを許可しないでください。 例えば、 8.3
の「短い」名前と競合します。デフォルトは、Windowsでは「true」、それ以外の場合は「false」です。

@item  core.fsmonitor 
設定されている場合、この変数の値は、要求された日時以降に変更された可能性のあるすべてのファイルを識別するコマンドとして使用されます。この情報は、変更されていないファイルの不要な処理を回避することにより、gitを高速化するために使用されます。
githooks(5) の「fsmonitor-watchman」セクションを参照してください。

@item  core.fsmonitorHookVersion 
Sets the version of hook that is to be used when calling fsmonitor.  There
are currently versions 1 and 2. When this is not set, version 2 will be
tried first and if it fails then version 1 will be tried. Version 1 uses a
timestamp as input to determine which files have changes since that time but
some monitors like watchman have race conditions when used with a
timestamp.  Version 2 uses an opaque string so that the monitor can return
something that can be used to determine what files have changed without race
conditions.

@item  core.trustctime 
If false, the ctime differences between the index and the working tree are
ignored; useful when the inode change time is regularly modified by
something outside Git (file system crawlers and some backup systems).  See
git-update-index(1). True by default.

@item  core.splitIndex 
trueの場合、インデックスの分割インデックス機能が使用されます。 git-update-index(1) を参照してください。
デフォルトではfalseです。

@item  core.untrackedCache 
Determines what to do about the untracked cache feature of the index. It
will be kept, if this variable is unset or set to @samp{keep}. It will
automatically be added if set to @samp{true}. And it will automatically be
removed, if set to @samp{false}. Before setting it to @samp{true}, you should check
that mtime is working properly on your system.  See
git-update-index(1). @samp{keep} by default, unless @samp{feature.manyFiles}
is enabled which sets this setting to @samp{true} by default.

@item  core.checkStat 
When missing or is set to @samp{default}, many fields in the stat structure are
checked to detect if a file has been modified since Git looked at it.  When
this configuration variable is set to @samp{minimal}, sub-second part of mtime
and ctime, the uid and gid of the owner of the file, the inode number (and
the device number, if Git was compiled to use it), are excluded from the
check among these fields, leaving only the whole-second part of mtime (and
ctime, if @samp{core.trustCtime} is set) and the filesize to be checked.

There are implementations of Git that do not leave usable values in some
fields (e.g. JGit); by excluding these fields from the comparison, the
@samp{minimal} mode may help interoperability when the same repository is used by
these other systems at the same time.

@item  core.quotePath 
Commands that output paths (e.g. @emph{ls-files}, @emph{diff}), will quote "unusual"
characters in the pathname by enclosing the pathname in double-quotes and
escaping those characters with backslashes in the same way C escapes control
characters (e.g.  @samp{\t} for TAB, @samp{\n} for LF, @samp{\\} for backslash) or bytes
with values larger than 0x80 (e.g. octal @samp{\302\265} for "micro" in UTF-8).
If this variable is set to false, bytes higher than 0x80 are not considered
"unusual" any more. Double-quotes, backslash and control characters are
always escaped regardless of the setting of this variable.  A simple space
character is not considered "unusual".  Many commands can output pathnames
completely verbatim using the @samp{-z} option. The default value is true.

@item  core.eol 
Sets the line ending type to use in the working directory for files that are
marked as text (either by having the @samp{text} attribute set, or by having
@samp{text=auto} and Git auto-detecting the contents as text).  Alternatives are
@emph{lf}, @emph{crlf} and @emph{native}, which uses the platform’s native line ending.
The default value is @samp{native}.  See gitattributes(5) for more
information on end-of-line conversion. Note that this value is ignored if
@samp{core.autocrlf} is set to @samp{true} or @samp{input}.

@item  core.safecrlf 
If true, makes Git check if converting @samp{CRLF} is reversible when end-of-line
conversion is active.  Git will verify if a command modifies a file in the
work tree either directly or indirectly.  For example, committing a file
followed by checking out the same file should yield the original file in the
work tree.  If this is not the case for the current setting of
@samp{core.autocrlf}, Git will reject the file.  The variable can be set to
"warn", in which case Git will only warn about an irreversible conversion
but continue the operation.

CRLF conversion bears a slight chance of corrupting data.  When it is
enabled, Git will convert CRLF to LF during commit and LF to CRLF during
checkout.  A file that contains a mixture of LF and CRLF before the commit
cannot be recreated by Git.  For text files this is the right thing to do:
it corrects line endings such that we have only LF line endings in the
repository.  But for binary files that are accidentally classified as text
the conversion can corrupt data.

If you recognize such corruption early you can easily fix it by setting the
conversion type explicitly in .gitattributes.  Right after committing you
still have the original file in your work tree and this file is not yet
corrupted.  You can explicitly tell Git that this file is binary and Git
will handle the file appropriately.

Unfortunately, the desired effect of cleaning up text files with mixed line
endings and the undesired effect of corrupting binary files cannot be
distinguished.  In both cases CRLFs are removed in an irreversible way.  For
text files this is the right thing to do because CRLFs are line endings,
while for binary files converting CRLFs corrupts data.

Note, this safety check does not mean that a checkout will generate a file
identical to the original file for a different setting of @samp{core.eol} and
@samp{core.autocrlf}, but only for the current one.  For example, a text file
with @samp{LF} would be accepted with @samp{core.eol=lf} and could later be checked
out with @samp{core.eol=crlf}, in which case the resulting file would contain
@samp{CRLF}, although the original file contained @samp{LF}.  However, in both work
trees the line endings would be consistent, that is either all @samp{LF} or all
@samp{CRLF}, but never mixed.  A file with mixed line endings would be reported
by the @samp{core.safecrlf} mechanism.

@item  core.autocrlf 
Setting this variable to "true" is the same as setting the @samp{text} attribute
to "auto" on all files and core.eol to "crlf".  Set to true if you want to
have @samp{CRLF} line endings in your working directory and the repository has LF
line endings.  This variable can be set to @emph{input}, in which case no output
conversion is performed.

@item  core.checkRoundtripEncoding 
A comma and/or whitespace separated list of encodings that Git performs
UTF-8 round trip checks on if they are used in an @samp{working-tree-encoding}
attribute (see gitattributes(5)).  The default value is @samp{SHIFT-JIS}.

@item  core.symlinks 
If false, symbolic links are checked out as small plain files that contain
the link text. git-update-index(1) and git-add(1) will not
change the recorded type to regular file. Useful on filesystems like FAT
that do not support symbolic links.

The default is true, except git-clone(1) or git-init(1) will
probe and set core.symlinks false if appropriate when the repository is
created.

@item  core.gitProxy 
フェッチにGitプロトコルを使用する場合、リモートサーバーへの直接接続を確立する代わりに(「コマンドホストポート」として)実行する「プロキシコマンド」。変数値が「COMMAND
for
DOMAIN」形式の場合、コマンドは、指定されたドメイン文字列で終わるホスト名にのみ適用されます。この変数は複数回設定でき、指定された順序で照合されます。最初にマッチしたものが採用されます。

Can be overridden by the @samp{GIT_PROXY_COMMAND} environment variable (which
always applies universally, without the special "for" handling).

The special string @samp{none} can be used as the proxy command to specify that
no proxy be used for a given domain pattern.  This is useful for excluding
servers inside a firewall from proxy use, while defaulting to a common proxy
for external domains.

@item  core.sshCommand 
If this variable is set, @samp{git fetch} and @samp{git push} will use the specified
command instead of @samp{ssh} when they need to connect to a remote system. The
command is in the same form as the @samp{GIT_SSH_COMMAND} environment variable
and is overridden when the environment variable is set.

@item  core.ignoreStat 
If true, Git will avoid using lstat() calls to detect if files have changed
by setting the "assume-unchanged" bit for those tracked files which it has
updated identically in both the index and working tree.

When files are modified outside of Git, the user will need to stage the
modified files explicitly (e.g. see @emph{Examples} section in
git-update-index(1)).  Git will not normally detect changes to those
files.

This is useful on systems where lstat() calls are very slow, such as
CIFS/Microsoft Windows.

False by default.

@item  core.preferSymlinkRefs 
Instead of the default "symref" format for HEAD and other symbolic reference
files, use symbolic links.  This is sometimes needed to work with old
scripts that expect HEAD to be a symbolic link.

@item  core.alternateRefsCommand 
When advertising tips of available history from an alternate, use the shell
to execute the specified command instead of git-for-each-ref(1). The
first argument is the absolute path of the alternate. Output must contain
one hex object id per line (i.e., the same as produced by @samp{git for-each-ref
--format='%(objectname)'}).

Note that you cannot generally put @samp{git for-each-ref} directly into the
config value, as it does not take a repository path as an argument (but you
can wrap the command above in a shell script).

@item  core.alternateRefsPrefixes 
When listing references from an alternate, list only references that begin
with the given prefix. Prefixes match as if they were given as arguments to
git-for-each-ref(1). To list multiple prefixes, separate them with
whitespace. If @samp{core.alternateRefsCommand} is set, setting
@samp{core.alternateRefsPrefixes} has no effect.

@item  core.bare 
If true this repository is assumed to be @emph{bare} and has no working directory
associated with it.  If this is the case a number of commands that require a
working directory will be disabled, such as git-add(1) or
git-merge(1).

This setting is automatically guessed by git-clone(1) or
git-init(1) when the repository was created.  By default a
repository that ends in "/.git" is assumed to be not bare (bare = false),
while all other repositories are assumed to be bare (bare
= true).

@item  core.worktree 
Set the path to the root of the working tree.  If @samp{GIT_COMMON_DIR}
environment variable is set, core.worktree is ignored and not used for
determining the root of working tree.  This can be overridden by the
@samp{GIT_WORK_TREE} environment variable and the @samp{--work-tree} command-line
option.  The value can be an absolute path or relative to the path to the
.git directory, which is either specified by --git-dir or GIT_DIR, or
automatically discovered.  If --git-dir or GIT_DIR is specified but none of
--work-tree, GIT_WORK_TREE and core.worktree is specified, the current
working directory is regarded as the top level of your working tree.

Note that this variable is honored even when set in a configuration file in
a ".git" subdirectory of a directory and its value differs from the latter
directory (e.g. "/path/to/.git/config" has core.worktree set to
"/different/path"), which is most likely a misconfiguration.  Running Git
commands in the "/path/to" directory will still use "/different/path" as the
root of the work tree and can cause confusion unless you know what you are
doing (e.g. you are creating a read-only snapshot of the same index to a
location different from the repository’s usual working tree).

@item  core.logAllRefUpdates 
Enable the reflog. Updates to a ref <ref> is logged to the file
"@samp{$GIT_DIR/logs/<ref>}", by appending the new and old SHA-1, the date/time
and the reason of the update, but only when the file exists.  If this
configuration variable is set to @samp{true}, missing "@samp{$GIT_DIR/logs/<ref>}"
file is automatically created for branch heads (i.e. under @samp{refs/heads/}),
remote refs (i.e. under @samp{refs/remotes/}), note refs (i.e. under
@samp{refs/notes/}), and the symbolic ref @samp{HEAD}.  If it is set to @samp{always}, then
a missing reflog is automatically created for any ref under @samp{refs/}.

This information can be used to determine what commit was the tip of a
branch "2 days ago".

This value is true by default in a repository that has a working directory
associated with it, and false by default in a bare repository.

@item  core.repositoryFormatVersion 
Internal variable identifying the repository format and layout version.

@item  core.sharedRepository 
When @emph{group} (or @emph{true}), the repository is made shareable between several
users in a group (making sure all the files and objects are
group-writable). When @emph{all} (or @emph{world} or @emph{everybody}), the repository will
be readable by all users, additionally to being group-shareable. When
@emph{umask} (or @emph{false}), Git will use permissions reported by umask(2). When
@emph{0xxx}, where @emph{0xxx} is an octal number, files in the repository will have
this mode value. @emph{0xxx} will override user’s umask value (whereas the other
options will only override requested parts of the user’s umask
value). Examples: @emph{0660} will make the repo read/write-able for the owner
and group, but inaccessible to others (equivalent to @emph{group} unless umask is
e.g. @emph{0022}). @emph{0640} is a repository that is group-readable but not
group-writable.  See git-init(1). False by default.

@item  core.warnAmbiguousRefs 
If true, Git will warn you if the ref name you passed it is ambiguous and
might match multiple refs in the repository. True by default.

@item  core.compression 
An integer -1..9, indicating a default compression level.  -1 is the zlib
default. 0 means no compression, and 1..9 are various speed/size tradeoffs,
9 being slowest.  If set, this provides a default to other compression
variables, such as @samp{core.looseCompression} and @samp{pack.compression}.

@item  core.looseCompression 
An integer -1..9, indicating the compression level for objects that are not
in a pack file. -1 is the zlib default. 0 means no compression, and 1..9 are
various speed/size tradeoffs, 9 being slowest.  If not set, defaults to
core.compression.  If that is not set, defaults to 1 (best speed).

@item  core.packedGitWindowSize 
Number of bytes of a pack file to map into memory in a single mapping
operation.  Larger window sizes may allow your system to process a smaller
number of large pack files more quickly.  Smaller window sizes will
negatively affect performance due to increased calls to the operating
system’s memory manager, but may improve performance when accessing a large
number of large pack files.

Default is 1 MiB if NO_MMAP was set at compile time, otherwise 32 MiB on 32
bit platforms and 1 GiB on 64 bit platforms.  This should be reasonable for
all users/operating systems.  You probably do not need to adjust this value.

Common unit suffixes of @emph{k}, @emph{m}, or @emph{g} are supported.

@item  core.packedGitLimit 
Maximum number of bytes to map simultaneously into memory from pack files.
If Git needs to access more than this many bytes at once to complete an
operation it will unmap existing regions to reclaim virtual address space
within the process.

Default is 256 MiB on 32 bit platforms and 32 TiB (effectively unlimited) on
64 bit platforms.  This should be reasonable for all users/operating
systems, except on the largest projects.  You probably do not need to adjust
this value.

Common unit suffixes of @emph{k}, @emph{m}, or @emph{g} are supported.

@item  core.deltaBaseCacheLimit 
Maximum number of bytes per thread to reserve for caching base objects that
may be referenced by multiple deltified objects.  By storing the entire
decompressed base objects in a cache Git is able to avoid unpacking and
decompressing frequently used base objects multiple times.

Default is 96 MiB on all platforms.  This should be reasonable for all
users/operating systems, except on the largest projects.  You probably do
not need to adjust this value.

Common unit suffixes of @emph{k}, @emph{m}, or @emph{g} are supported.

@item  core.bigFileThreshold 
Files larger than this size are stored deflated, without attempting delta
compression.  Storing large files without delta compression avoids excessive
memory usage, at the slight expense of increased disk usage. Additionally
files larger than this size are always treated as binary.

Default is 512 MiB on all platforms.  This should be reasonable for most
projects as source code and other text files can still be delta compressed,
but larger binary media files won’t be.

Common unit suffixes of @emph{k}, @emph{m}, or @emph{g} are supported.

@item  core.excludesFile 
Specifies the pathname to the file that contains patterns to describe paths
that are not meant to be tracked, in addition to @samp{.gitignore}
(per-directory) and @samp{.git/info/exclude}.  Defaults to
@samp{$XDG_CONFIG_HOME/git/ignore}.  If @samp{$XDG_CONFIG_HOME} is either not set or
empty, @samp{$HOME/.config/git/ignore} is used instead. See gitignore(5).

@item  core.askPass 
Some commands (e.g. svn and http interfaces) that interactively ask for a
password can be told to use an external program given via the value of this
variable. Can be overridden by the @samp{GIT_ASKPASS} environment variable. If
not set, fall back to the value of the @samp{SSH_ASKPASS} environment variable
or, failing that, a simple password prompt. The external program shall be
given a suitable prompt as command-line argument and write the password on
its STDOUT.

@item  core.attributesFile 
In addition to @samp{.gitattributes} (per-directory) and @samp{.git/info/attributes},
Git looks into this file for attributes (see gitattributes(5)). Path
expansions are made the same way as for @samp{core.excludesFile}. Its default
value is @samp{$XDG_CONFIG_HOME/git/attributes}. If @samp{$XDG_CONFIG_HOME} is either
not set or empty, @samp{$HOME/.config/git/attributes} is used instead.

@item  core.hooksPath 
By default Git will look for your hooks in the @samp{$GIT_DIR/hooks}
directory. Set this to different path, e.g. @samp{/etc/git/hooks}, and Git will
try to find your hooks in that directory, e.g. @samp{/etc/git/hooks/pre-receive}
instead of in @samp{$GIT_DIR/hooks/pre-receive}.

The path can be either absolute or relative. A relative path is taken as
relative to the directory where the hooks are run (see the "DESCRIPTION"
section of githooks(5)).

This configuration variable is useful in cases where you’d like to centrally
configure your Git hooks instead of configuring them on a per-repository
basis, or as a more flexible and centralized alternative to having an
@samp{init.templateDir} where you’ve changed default hooks.

@item  core.editor 
Commands such as @samp{commit} and @samp{tag} that let you edit messages by launching
an editor use the value of this variable when it is set, and the environment
variable @samp{GIT_EDITOR} is not set.  See git-var(1).

@item  core.commentChar 
Commands such as @samp{commit} and @samp{tag} that let you edit messages consider a
line that begins with this character commented, and removes them after the
editor returns (default @emph{#}).

If set to "auto", @samp{git-commit} would select a character that is not the
beginning character of any line in existing commit messages.

@item  core.filesRefLockTimeout 
The length of time, in milliseconds, to retry when trying to lock an
individual reference. Value 0 means not to retry at all; -1 means to try
indefinitely. Default is 100 (i.e., retry for 100ms).

@item  core.packedRefsTimeout 
The length of time, in milliseconds, to retry when trying to lock the
@samp{packed-refs} file. Value 0 means not to retry at all; -1 means to try
indefinitely. Default is 1000 (i.e., retry for 1 second).

@item  core.pager 
Text viewer for use by Git commands (e.g., @emph{less}).  The value is meant to
be interpreted by the shell.  The order of preference is the @samp{$GIT_PAGER}
environment variable, then @samp{core.pager} configuration, then @samp{$PAGER}, and
then the default chosen at compile time (usually @emph{less}).

When the @samp{LESS} environment variable is unset, Git sets it to @samp{FRX} (if
@samp{LESS} environment variable is set, Git does not change it at all).  If you
want to selectively override Git’s default setting for @samp{LESS}, you can set
@samp{core.pager} to e.g. @samp{less -S}.  This will be passed to the shell by Git,
which will translate the final command to @samp{LESS=FRX less -S}. The
environment does not set the @samp{S} option but the command line does,
instructing less to truncate long lines. Similarly, setting @samp{core.pager} to
@samp{less -+F} will deactivate the @samp{F} option specified by the environment from
the command-line, deactivating the "quit if one screen" behavior of @samp{less}.
One can specifically activate some flags for particular commands: for
example, setting @samp{pager.blame} to @samp{less -S} enables line truncation only for
@samp{git blame}.

Likewise, when the @samp{LV} environment variable is unset, Git sets it to @samp{-c}.
You can override this setting by exporting @samp{LV} with another value or
setting @samp{core.pager} to @samp{lv +c}.

@item  core.whitespace 
A comma separated list of common whitespace problems to notice.  @emph{git diff}
will use @samp{color.diff.whitespace} to highlight them, and @emph{git apply
--whitespace=error} will consider them as errors.  You can prefix @samp{-} to
disable any of them (e.g. @samp{-trailing-space}):

@itemize 

@item
@samp{blank-at-eol} treats trailing whitespaces at the end of the line as an
error (enabled by default).

@item
@samp{space-before-tab} treats a space character that appears immediately before
a tab character in the initial indent part of the line as an error (enabled
by default).

@item
@samp{indent-with-non-tab} treats a line that is indented with space characters
instead of the equivalent tabs as an error (not enabled by default).

@item
@samp{tab-in-indent} treats a tab character in the initial indent part of the
line as an error (not enabled by default).

@item
@samp{blank-at-eof} treats blank lines added at the end of file as an error
(enabled by default).

@item
@samp{trailing-space} is a short-hand to cover both @samp{blank-at-eol} and
@samp{blank-at-eof}.

@item
@samp{cr-at-eol} treats a carriage-return at the end of line as part of the line
terminator, i.e. with it, @samp{trailing-space} does not trigger if the character
before such a carriage-return is not a whitespace (not enabled by default).

@item
@samp{tabwidth=<n>} tells how many character positions a tab occupies; this is
relevant for @samp{indent-with-non-tab} and when Git fixes @samp{tab-in-indent}
errors. The default tab width is 8. Allowed values are 1 to 63.
@end itemize

@item  core.fsyncObjectFiles 
This boolean will enable @emph{fsync()} when writing object files.

This is a total waste of time and effort on a filesystem that orders data
writes properly, but can be useful for filesystems that do not use
journalling (traditional UNIX filesystems) or that only journal metadata and
not file contents (OS X’s HFS+, or Linux ext3 with "data=writeback").

@item  core.preloadIndex 
Enable parallel index preload for operations like @emph{git diff}

This can speed up operations like @emph{git diff} and @emph{git status} especially on
filesystems like NFS that have weak caching semantics and thus relatively
high IO latencies.  When enabled, Git will do the index comparison to the
filesystem data in parallel, allowing overlapping IO’s.  Defaults to true.

@item  core.unsetenvvars 
Windows-only: comma-separated list of environment variables' names that need
to be unset before spawning any other process.  Defaults to @samp{PERL5LIB} to
account for the fact that Git for Windows insists on using its own Perl
interpreter.

@item  core.restrictinheritedhandles 
Windows-only: override whether spawned processes inherit only standard file
handles (@samp{stdin}, @samp{stdout} and @samp{stderr}) or all handles. Can be @samp{auto},
@samp{true} or @samp{false}. Defaults to @samp{auto}, which means @samp{true} on Windows 7 and
later, and @samp{false} on older Windows versions.

@item  core.createObject 
You can set this to @emph{link}, in which case a hardlink followed by a delete of
the source are used to make sure that object creation will not overwrite
existing objects.

On some file system/operating system combinations, this is unreliable.  Set
this config setting to @emph{rename} there; However, This will remove the check
that makes sure that existing object files will not get overwritten.

@item  core.notesRef 
When showing commit messages, also show notes which are stored in the given
ref.  The ref must be fully qualified.  If the given ref does not exist, it
is not an error but means that no notes should be printed.

This setting defaults to "refs/notes/commits", and it can be overridden by
the @samp{GIT_NOTES_REF} environment variable.  See git-notes(1).

@item  core.commitGraph 
If true, then git will read the commit-graph file (if it exists)  to parse
the graph structure of commits. Defaults to true. See
git-commit-graph(1) for more information.

@item  core.useReplaceRefs 
If set to @samp{false}, behave as if the @samp{--no-replace-objects} option was given
on the command line. See git(1) and git-replace(1) for more
information.

@item  core.multiPackIndex 
Use the multi-pack-index file to track multiple packfiles using a single
index. See git-multi-pack-index(1) for more information. Defaults to
true.

@item  core.sparseCheckout 
Enable "sparse checkout" feature. See git-sparse-checkout(1) for
more information.

@item  core.sparseCheckoutCone 
Enables the "cone mode" of the sparse checkout feature. When the
sparse-checkout file contains a limited set of patterns, then this mode
provides significant performance advantages. See
git-sparse-checkout(1) for more information.

@item  core.abbrev 
Set the length object names are abbreviated to.  If unspecified or set to
"auto", an appropriate value is computed based on the approximate number of
packed objects in your repository, which hopefully is enough for abbreviated
object names to stay unique for some time.  If set to "no", no abbreviation
is made and the object names are shown in their full length.  The minimum
length is 4.

@item  add.ignoreErrors 
@itemx  add.ignore-errors (deprecated) 
Tells @emph{git add} to continue adding files when some files cannot be added due
to indexing errors. Equivalent to the @samp{--ignore-errors} option of
git-add(1).  @samp{add.ignore-errors} is deprecated, as it does not
follow the usual naming convention for configuration variables.

@item  add.interactive.useBuiltin 
[EXPERIMENTAL] Set to @samp{true} to use the experimental built-in implementation
of the interactive version of git-add(1) instead of the Perl script
version. Is @samp{false} by default.

@item  alias.* 
Command aliases for the git(1) command wrapper - e.g.  after
defining @samp{alias.last = cat-file commit HEAD}, the invocation @samp{git last} is
equivalent to @samp{git cat-file commit HEAD}. To avoid confusion and troubles
with script usage, aliases that hide existing Git commands are
ignored. Arguments are split by spaces, the usual shell quoting and escaping
is supported.  A quote pair or a backslash can be used to quote them.

Note that the first word of an alias does not necessarily have to be a
command. It can be a command-line option that will be passed into the
invocation of @samp{git}. In particular, this is useful when used with @samp{-c} to
pass in one-time configurations or @samp{-p} to force pagination. For example,
@samp{loud-rebase = -c commit.verbose=true rebase} can be defined such that
running @samp{git loud-rebase} would be equivalent to @samp{git -c commit.verbose=true
rebase}. Also, @samp{ps = -p status} would be a helpful alias since @samp{git ps}
would paginate the output of @samp{git status} where the original command does
not.

If the alias expansion is prefixed with an exclamation point, it will be
treated as a shell command.  For example, defining @samp{alias.new = !gitk --all
--not ORIG_HEAD}, the invocation @samp{git new} is equivalent to running the
shell command @samp{gitk --all --not ORIG_HEAD}.  Note that shell commands will
be executed from the top-level directory of a repository, which may not
necessarily be the current directory.  @samp{GIT_PREFIX} is set as returned by
running @samp{git rev-parse --show-prefix} from the original current
directory. See git-rev-parse(1).

@item  am.keepcr 
If true, git-am will call git-mailsplit for patches in mbox format with
parameter @samp{--keep-cr}. In this case git-mailsplit will not remove @samp{\r} from
lines ending with @samp{\r\n}. Can be overridden by giving @samp{--no-keep-cr} from
the command line.  See git-am(1), git-mailsplit(1).

@item  am.threeWay 
By default, @samp{git am} will fail if the patch does not apply cleanly. When set
to true, this setting tells @samp{git am} to fall back on 3-way merge if the
patch records the identity of blobs it is supposed to apply to and we have
those blobs available locally (equivalent to giving the @samp{--3way} option from
the command line). Defaults to @samp{false}.  See git-am(1).

@item  apply.ignoreWhitespace 
When set to @emph{change}, tells @emph{git apply} to ignore changes in whitespace, in
the same way as the @samp{--ignore-space-change} option.  When set to one of: no,
none, never, false tells @emph{git apply} to respect all whitespace differences.
See git-apply(1).

@item  apply.whitespace 
Tells @emph{git apply} how to handle whitespaces, in the same way as the
@samp{--whitespace} option. See git-apply(1).

@item  blame.blankBoundary 
Show blank commit object name for boundary commits in
git-blame(1). This option defaults to false.

@item  blame.coloring 
This determines the coloring scheme to be applied to blame output. It can be
@emph{repeatedLines}, @emph{highlightRecent}, or @emph{none} which is the default.

@item  blame.date 
Specifies the format used to output dates in git-blame(1).  If unset
the iso format is used. For supported values, see the discussion of the
@samp{--date} option at git-log(1).

@item  blame.showEmail 
Show the author email instead of author name in git-blame(1).  This
option defaults to false.

@item  blame.showRoot 
Do not treat root commits as boundaries in git-blame(1).  This
option defaults to false.

@item  blame.ignoreRevsFile 
Ignore revisions listed in the file, one unabbreviated object name per line,
in git-blame(1).  Whitespace and comments beginning with @samp{#} are
ignored.  This option may be repeated multiple times.  Empty file names will
reset the list of ignored revisions.  This option will be handled before the
command line option @samp{--ignore-revs-file}.

@item  blame.markUnblamableLines 
Mark lines that were changed by an ignored revision that we could not
attribute to another commit with a @emph{*} in the output of
git-blame(1).

@item  blame.markIgnoredLines 
Mark lines that were changed by an ignored revision that we attributed to
another commit with a @emph{?} in the output of git-blame(1).

@item  branch.autoSetupMerge 
Tells @emph{git branch}, @emph{git switch} and @emph{git checkout} to set up new branches
so that git-pull(1) will appropriately merge from the starting point
branch. Note that even if this option is not set, this behavior can be
chosen per-branch using the @samp{--track} and @samp{--no-track} options. The valid
settings are: @samp{false} — no automatic setup is done; @samp{true} — automatic
setup is done when the starting point is a remote-tracking branch; @samp{always}
 — automatic setup is done when the starting point is either a local branch
or remote-tracking branch. This option defaults to true.

@item  branch.autoSetupRebase 
When a new branch is created with @emph{git branch}, @emph{git switch} or @emph{git
checkout} that tracks another branch, this variable tells Git to set up pull
to rebase instead of merge (see "branch.<name>.rebase").  When @samp{never},
rebase is never automatically set to true.  When @samp{local}, rebase is set to
true for tracked branches of other local branches.  When @samp{remote}, rebase is
set to true for tracked branches of remote-tracking branches.  When
@samp{always}, rebase will be set to true for all tracking branches.  See
"branch.autoSetupMerge" for details on how to set up a branch to track
another branch.  This option defaults to never.

@item  branch.sort 
This variable controls the sort ordering of branches when displayed by
git-branch(1). Without the "--sort=<value>" option provided, the
value of this variable will be used as the default.  See
git-for-each-ref(1) field names for valid values.

@item  branch.<name>.remote 
When on branch <name>, it tells @emph{git fetch} and @emph{git push} which remote to
fetch from/push to.  The remote to push to may be overridden with
@samp{remote.pushDefault} (for all branches).  The remote to push to, for the
current branch, may be further overridden by @samp{branch.<name>.pushRemote}.  If
no remote is configured, or if you are not on any branch, it defaults to
@samp{origin} for fetching and @samp{remote.pushDefault} for pushing.  Additionally,
@samp{.} (a period) is the current local repository (a dot-repository), see
@samp{branch.<name>.merge}'s final note below.

@item  branch.<name>.pushRemote 
When on branch <name>, it overrides @samp{branch.<name>.remote} for pushing.  It
also overrides @samp{remote.pushDefault} for pushing from branch <name>.  When
you pull from one place (e.g. your upstream) and push to another place
(e.g. your own publishing repository), you would want to set
@samp{remote.pushDefault} to specify the remote to push to for all branches, and
use this option to override it for a specific branch.

@item  branch.<name>.merge 
Defines, together with branch.<name>.remote, the upstream branch for the
given branch. It tells @emph{git fetch}/@emph{git pull}/@emph{git rebase} which branch to
merge and can also affect @emph{git push} (see push.default).  When in branch
<name>, it tells @emph{git fetch} the default refspec to be marked for merging in
FETCH_HEAD. The value is handled like the remote part of a refspec, and must
match a ref which is fetched from the remote given by
"branch.<name>.remote".  The merge information is used by @emph{git pull} (which
at first calls @emph{git fetch}) to lookup the default branch for
merging. Without this option, @emph{git pull} defaults to merge the first refspec
fetched.  Specify multiple values to get an octopus merge.  If you wish to
setup @emph{git pull} so that it merges into <name> from another branch in the
local repository, you can point branch.<name>.merge to the desired branch,
and use the relative path setting @samp{.} (a period) for branch.<name>.remote.

@item  branch.<name>.mergeOptions 
Sets default options for merging into branch <name>. The syntax and
supported options are the same as those of git-merge(1), but option
values containing whitespace characters are currently not supported.

@item  branch.<name>.rebase 
When true, rebase the branch <name> on top of the fetched branch, instead of
merging the default branch from the default remote when "git pull" is
run. See "pull.rebase" for doing this in a non branch-specific manner.

When @samp{merges} (or just @emph{m}), pass the @samp{--rebase-merges} option to @emph{git
rebase} so that the local merge commits are included in the rebase (see
git-rebase(1) for details).

When @samp{preserve} (or just @emph{p}, deprecated in favor of @samp{merges}), also pass
@samp{--preserve-merges} along to @emph{git rebase} so that locally committed merge
commits will not be flattened by running @emph{git pull}.

When the value is @samp{interactive} (or just @emph{i}), the rebase is run in
interactive mode.

@strong{NOTE}: this is a possibly dangerous operation; do @strong{not} use
it unless you understand the implications (see git-rebase(1)
for details).

@item  branch.<name>.description 
Branch description, can be edited with @samp{git branch
--edit-description}. Branch description is automatically added in the
format-patch cover letter or request-pull summary.

@item  browser.<tool>.cmd 
Specify the command to invoke the specified browser. The specified command
is evaluated in shell with the URLs passed as arguments. (See
git-web--browse(1).)

@item  browser.<tool>.path 
Override the path for the given tool that may be used to browse HTML help
(see @samp{-w} option in git-help(1)) or a working repository in gitweb
(see git-instaweb(1)).

@item  checkout.defaultRemote 
When you run @samp{git checkout <something>} or @samp{git switch <something>} and only
have one remote, it may implicitly fall back on checking out and tracking
e.g. @samp{origin/<something>}. This stops working as soon as you have more than
one remote with a @samp{<something>} reference. This setting allows for setting
the name of a preferred remote that should always win when it comes to
disambiguation. The typical use-case is to set this to @samp{origin}.

Currently this is used by git-switch(1) and git-checkout(1)
when @samp{git checkout <something>} or @samp{git switch <something>} will checkout
the @samp{<something>} branch on another remote, and by git-worktree(1)
when @samp{git worktree add} refers to a remote branch. This setting might be
used for other checkout-like commands or functionality in the future.

@item  checkout.guess 
Provides the default value for the @samp{--guess} or @samp{--no-guess} option in @samp{git
checkout} and @samp{git switch}. See git-switch(1) and
git-checkout(1).

@item  checkout.workers 
The number of parallel workers to use when updating the working tree.  The
default is one, i.e. sequential execution. If set to a value less than one,
Git will use as many workers as the number of logical cores available. This
setting and @samp{checkout.thresholdForParallelism} affect all commands that
perform checkout. E.g. checkout, clone, reset, sparse-checkout, etc.

Note: parallel checkout usually delivers better performance for repositories
located on SSDs or over NFS. For repositories on spinning disks and/or
machines with a small number of cores, the default sequential checkout often
performs better. The size and compression level of a repository might also
influence how well the parallel version performs.

@item  checkout.thresholdForParallelism 
When running parallel checkout with a small number of files, the cost of
subprocess spawning and inter-process communication might outweigh the
parallelization gains. This setting allows to define the minimum number of
files for which parallel checkout should be attempted. The default is 100.

@item  clean.requireForce 
A boolean to make git-clean do nothing unless given -f,
-i or -n.   Defaults to true.

@item  clone.defaultRemoteName 
The name of the remote to create when cloning a repository.  Defaults to
@samp{origin}, and can be overridden by passing the @samp{--origin} command-line
option to git-clone(1).

@item  clone.rejectShallow 
Reject to clone a repository if it is a shallow one, can be overridden by
passing option @samp{--reject-shallow} in command line. See git-clone(1)

@item  color.advice 
A boolean to enable/disable color in hints (e.g. when a push failed, see
@samp{advice.*} for a list).  May be set to @samp{always}, @samp{false} (or @samp{never}) or
@samp{auto} (or @samp{true}), in which case colors are used only when the error output
goes to a terminal. If unset, then the value of @samp{color.ui} is used (@samp{auto}
by default).

@item  color.advice.hint 
Use customized color for hints.

@item  color.blame.highlightRecent 
This can be used to color the metadata of a blame line depending on age of
the line.

This setting should be set to a comma-separated list of color and date
settings, starting and ending with a color, the dates should be set from
oldest to newest.  The metadata will be colored given the colors if the line
was introduced before the given timestamp, overwriting older timestamped
colors.

Instead of an absolute timestamp relative timestamps work as well, e.g.
2.weeks.ago is valid to address anything older than 2 weeks.

It defaults to @emph{blue,12 month ago,white,1 month ago,red}, which colors
everything older than one year blue, recent changes between one month and
one year old are kept white, and lines introduced within the last month are
colored red.

@item  color.blame.repeatedLines 
Use the customized color for the part of git-blame output that is repeated
meta information per line (such as commit id, author name, date and
timezone). Defaults to cyan.

@item  color.branch 
A boolean to enable/disable color in the output of
git-branch(1). May be set to @samp{always}, @samp{false} (or @samp{never}) or
@samp{auto} (or @samp{true}), in which case colors are used only when the output is to
a terminal. If unset, then the value of @samp{color.ui} is used (@samp{auto} by
default).

@item  color.branch.<slot> 
Use customized color for branch coloration. @samp{<slot>} is one of @samp{current}
(the current branch), @samp{local} (a local branch), @samp{remote} (a remote-tracking
branch in refs/remotes/), @samp{upstream} (upstream tracking branch), @samp{plain}
(other refs).

@item  color.diff 
Whether to use ANSI escape sequences to add color to patches.  If this is
set to @samp{always}, git-diff(1), git-log(1), and
git-show(1) will use color for all patches.  If it is set to @samp{true}
or @samp{auto}, those commands will only use color when output is to the
terminal.  If unset, then the value of @samp{color.ui} is used (@samp{auto} by
default).

This does not affect git-format-patch(1) or the
@emph{git-diff-*} plumbing commands.  Can be overridden on the command
line with the @samp{--color[=<when>]} option.

@item  color.diff.<slot> 
Use customized color for diff colorization.  @samp{<slot>} specifies which part
of the patch to use the specified color, and is one of @samp{context} (context
text - @samp{plain} is a historical synonym), @samp{meta} (metainformation), @samp{frag}
(hunk header), @emph{func} (function in hunk header), @samp{old} (removed lines),
@samp{new} (added lines), @samp{commit} (commit headers), @samp{whitespace} (highlighting
whitespace errors), @samp{oldMoved} (deleted lines), @samp{newMoved} (added lines),
@samp{oldMovedDimmed}, @samp{oldMovedAlternative}, @samp{oldMovedAlternativeDimmed},
@samp{newMovedDimmed}, @samp{newMovedAlternative} @samp{newMovedAlternativeDimmed} (See the
@emph{<mode>} setting of @emph{--color-moved} in git-diff(1) for details),
@samp{contextDimmed}, @samp{oldDimmed}, @samp{newDimmed}, @samp{contextBold}, @samp{oldBold}, and
@samp{newBold} (see git-range-diff(1) for details).

@item  color.decorate.<slot> 
Use customized color for @emph{git log --decorate} output.  @samp{<slot>} is one of
@samp{branch}, @samp{remoteBranch}, @samp{tag}, @samp{stash} or @samp{HEAD} for local branches,
remote-tracking branches, tags, stash and HEAD, respectively and @samp{grafted}
for grafted commits.

@item  color.grep 
When set to @samp{always}, always highlight matches.  When @samp{false} (or @samp{never}),
never.  When set to @samp{true} or @samp{auto}, use color only when the output is
written to the terminal.  If unset, then the value of @samp{color.ui} is used
(@samp{auto} by default).

@item  color.grep.<slot> 
Use customized color for grep colorization.  @samp{<slot>} specifies which part
of the line to use the specified color, and is one of

@table @asis

@item  @samp{context} 
non-matching text in context lines (when using @samp{-A}, @samp{-B}, or @samp{-C})

@item  @samp{filename} 
filename prefix (when not using @samp{-h})

@item  @samp{function} 
function name lines (when using @samp{-p})

@item  @samp{lineNumber} 
line number prefix (when using @samp{-n})

@item  @samp{column} 
column number prefix (when using @samp{--column})

@item  @samp{match} 
matching text (same as setting @samp{matchContext} and @samp{matchSelected})

@item  @samp{matchContext} 
matching text in context lines

@item  @samp{matchSelected} 
matching text in selected lines

@item  @samp{selected} 
non-matching text in selected lines

@item  @samp{separator} 
separators between fields on a line (@samp{:}, @samp{-}, and @samp{=})  and between hunks
(@samp{--})
@end table

@item  color.interactive 
When set to @samp{always}, always use colors for interactive prompts and displays
(such as those used by "git-add --interactive" and "git-clean
--interactive"). When false (or @samp{never}), never.  When set to @samp{true} or
@samp{auto}, use colors only when the output is to the terminal. If unset, then
the value of @samp{color.ui} is used (@samp{auto} by default).

@item  color.interactive.<slot> 
Use customized color for @emph{git add --interactive} and @emph{git clean
--interactive} output. @samp{<slot>} may be @samp{prompt}, @samp{header}, @samp{help} or
@samp{error}, for four distinct types of normal output from interactive commands.

@item  color.pager 
A boolean to specify whether @samp{auto} color modes should colorize output going
to the pager. Defaults to true; set this to false if your pager does not
understand ANSI color codes.

@item  color.push 
A boolean to enable/disable color in push errors. May be set to @samp{always},
@samp{false} (or @samp{never}) or @samp{auto} (or @samp{true}), in which case colors are used
only when the error output goes to a terminal.  If unset, then the value of
@samp{color.ui} is used (@samp{auto} by default).

@item  color.push.error 
Use customized color for push errors.

@item  color.remote 
If set, keywords at the start of the line are highlighted. The keywords are
"error", "warning", "hint" and "success", and are matched
case-insensitively. May be set to @samp{always}, @samp{false} (or @samp{never}) or @samp{auto}
(or @samp{true}). If unset, then the value of @samp{color.ui} is used (@samp{auto} by
default).

@item  color.remote.<slot> 
Use customized color for each remote keyword. @samp{<slot>} may be @samp{hint},
@samp{warning}, @samp{success} or @samp{error} which match the corresponding keyword.

@item  color.showBranch 
A boolean to enable/disable color in the output of
git-show-branch(1). May be set to @samp{always}, @samp{false} (or @samp{never}) or
@samp{auto} (or @samp{true}), in which case colors are used only when the output is to
a terminal. If unset, then the value of @samp{color.ui} is used (@samp{auto} by
default).

@item  color.status 
A boolean to enable/disable color in the output of
git-status(1). May be set to @samp{always}, @samp{false} (or @samp{never}) or
@samp{auto} (or @samp{true}), in which case colors are used only when the output is to
a terminal. If unset, then the value of @samp{color.ui} is used (@samp{auto} by
default).

@item  color.status.<slot> 
Use customized color for status colorization. @samp{<slot>} is one of @samp{header}
(the header text of the status message), @samp{added} or @samp{updated} (files which
are added but not committed), @samp{changed} (files which are changed but not
added in the index), @samp{untracked} (files which are not tracked by Git),
@samp{branch} (the current branch), @samp{nobranch} (the color the @emph{no branch} warning
is shown in, defaulting to red), @samp{localBranch} or @samp{remoteBranch} (the local
and remote branch names, respectively, when branch and tracking information
is displayed in the status short-format), or @samp{unmerged} (files which have
unmerged changes).

@item  color.transport 
A boolean to enable/disable color when pushes are rejected. May be set to
@samp{always}, @samp{false} (or @samp{never}) or @samp{auto} (or @samp{true}), in which case colors
are used only when the error output goes to a terminal.  If unset, then the
value of @samp{color.ui} is used (@samp{auto} by default).

@item  color.transport.rejected 
Use customized color when a push was rejected.

@item  color.ui 
This variable determines the default value for variables such as
@samp{color.diff} and @samp{color.grep} that control the use of color per command
family. Its scope will expand as more commands learn configuration to set a
default for the @samp{--color} option.  Set it to @samp{false} or @samp{never} if you
prefer Git commands not to use color unless enabled explicitly with some
other configuration or the @samp{--color} option. Set it to @samp{always} if you want
all output not intended for machine consumption to use color, to @samp{true} or
@samp{auto} (this is the default since Git 1.8.4) if you want such output to use
color when written to the terminal.

@item  column.ui 
Specify whether supported commands should output in columns.  This variable
consists of a list of tokens separated by spaces or commas:

These options control when the feature should be enabled (defaults to
@emph{never}):

@table @asis

@item  @samp{always} 
always show in columns

@item  @samp{never} 
never show in columns

@item  @samp{auto} 
show in columns if the output is to the terminal
@end table

These options control layout (defaults to @emph{column}).  Setting any of these
implies @emph{always} if none of @emph{always}, @emph{never}, or @emph{auto} are specified.

@table @asis

@item  @samp{column} 
fill columns before rows

@item  @samp{row} 
fill rows before columns

@item  @samp{plain} 
show in one column
@end table

Finally, these options can be combined with a layout option (defaults to
@emph{nodense}):

@table @asis

@item  @samp{dense} 
make unequal size columns to utilize more space

@item  @samp{nodense} 
make equal size columns
@end table

@item  column.branch 
Specify whether to output branch listing in @samp{git branch} in columns.  See
@samp{column.ui} for details.

@item  column.clean 
Specify the layout when list items in @samp{git clean -i}, which always shows
files and directories in columns. See @samp{column.ui} for details.

@item  column.status 
Specify whether to output untracked files in @samp{git status} in columns.  See
@samp{column.ui} for details.

@item  column.tag 
Specify whether to output tag listing in @samp{git tag} in columns.  See
@samp{column.ui} for details.

@item  commit.cleanup 
This setting overrides the default of the @samp{--cleanup} option in @samp{git
commit}. See git-commit(1) for details. Changing the default can be
useful when you always want to keep lines that begin with comment character
@samp{#} in your log message, in which case you would do @samp{git config
commit.cleanup whitespace} (note that you will have to remove the help lines
that begin with @samp{#} in the commit log template yourself, if you do this).

@item  commit.gpgSign 
A boolean to specify whether all commits should be GPG signed.  Use of this
option when doing operations such as rebase can result in a large number of
commits being signed. It may be convenient to use an agent to avoid typing
your GPG passphrase several times.

@item  commit.status 
A boolean to enable/disable inclusion of status information in the commit
message template when using an editor to prepare the commit message.
Defaults to true.

@item  commit.template 
Specify the pathname of a file to use as the template for new commit
messages.

@item  commit.verbose 
A boolean or int to specify the level of verbose with @samp{git commit}.  See
git-commit(1).

@item  commitGraph.generationVersion 
Specifies the type of generation number version to use when writing or
reading the commit-graph file. If version 1 is specified, then the corrected
commit dates will not be written or read. Defaults to 2.

@item  commitGraph.maxNewFilters 
Specifies the default value for the @samp{--max-new-filters} option of @samp{git
commit-graph write} (c.f., git-commit-graph(1)).

@item  commitGraph.readChangedPaths 
If true, then git will use the changed-path Bloom filters in the
commit-graph file (if it exists, and they are present). Defaults to
true. See git-commit-graph(1) for more information.

@item  credential.helper 
ユーザー名またはパスワードの資格情報が必要なときに呼び出される外部ヘルパーを指定します。ヘルパーは、ユーザーに資格情報の入力を求めないように、外部ストレージを参照する場合があります。これは通常、可能な引数を持つ資格情報ヘルパーの名前ですが、引数を持つ絶対パス、または
@samp{!} が前に付いている場合はシェルコマンドの場合もあります。

注意: 複数のヘルパーが定義されている場合があることに注意してください。詳細と例については、 gitcredentials(7)
を参照してください。

@item  credential.useHttpPath 
資格情報を取得するとき、http URL または https URL のパス部分を重要視します。デフォルトはfalseです。詳細については、
gitcredentials(7) を参照してください。

@item  credential.username 
ネットワーク認証にユーザー名が設定されていない場合は、デフォルトでこのユーザー名を使用します。 以下の credential.<context>.* と
gitcredentials(7) を参照してください。

@item  credential.<url>.* 
上記の credential.* オプションは、一部の資格情報に選択的に適用できます。 たとえば、
"credential.https://example.com.username" は、example.com への https
接続に対してのみデフォルトのユーザー名を設定します。 URLの照合方法の詳細については、 gitcredentials(7)
を参照してください。

@item  credentialCache.ignoreSIGHUP 
git-credential-cache—daemon に、終了する代わりにSIGHUPを無視するように指示します。

@item  credentialStore.lockTimeoutMS 
資格情報ファイルをロックしようとしたときに git-credential-store
が再試行する時間の長さ(ミリ秒単位)。値0は、まったく再試行しないことを意味します。-1は無期限に試すことを意味します。デフォルトは1000です(つまり、1秒間再試行します)。

@item  completion.commands 
This is only used by git-completion.bash to add or remove commands from the
list of completed commands. Normally only porcelain commands and a few
select others are completed. You can add more commands, separated by space,
in this variable. Prefixing the command with @emph{-} will remove it from the
existing list.

@item  diff.autoRefreshIndex 
When using @emph{git diff} to compare with work tree files, do not consider
stat-only change as changed.  Instead, silently run @samp{git update-index
--refresh} to update the cached stat information for paths whose contents in
the work tree match the contents in the index.  This option defaults to
true.  Note that this affects only @emph{git diff} Porcelain, and not lower level
@emph{diff} commands such as @emph{git diff-files}.

@item  diff.dirstat 
A comma separated list of @samp{--dirstat} parameters specifying the default
behavior of the @samp{--dirstat} option to git-diff(1) and friends. The
defaults can be overridden on the command line (using
@samp{--dirstat=<param1,param2,...>}). The fallback defaults (when not changed by
@samp{diff.dirstat}) are @samp{changes,noncumulative,3}.  The following parameters are
available:

@table @asis

@item  @samp{changes} 
Compute the dirstat numbers by counting the lines that have been removed
from the source, or added to the destination. This ignores the amount of
pure code movements within a file.  In other words, rearranging lines in a
file is not counted as much as other changes.  This is the default behavior
when no parameter is given.

@item  @samp{lines} 
Compute the dirstat numbers by doing the regular line-based diff analysis,
and summing the removed/added line counts. (For binary files, count 64-byte
chunks instead, since binary files have no natural concept of lines). This
is a more expensive @samp{--dirstat} behavior than the @samp{changes} behavior, but it
does count rearranged lines within a file as much as other changes. The
resulting output is consistent with what you get from the other @samp{--*stat}
options.

@item  @samp{files} 
Compute the dirstat numbers by counting the number of files changed.  Each
changed file counts equally in the dirstat analysis. This is the
computationally cheapest @samp{--dirstat} behavior, since it does not have to
look at the file contents at all.

@item  @samp{cumulative} 
Count changes in a child directory for the parent directory as well.  Note
that when using @samp{cumulative}, the sum of the percentages reported may exceed
100%. The default (non-cumulative) behavior can be specified with the
@samp{noncumulative} parameter.

@item  <limit> 
An integer parameter specifies a cut-off percent (3% by default).
Directories contributing less than this percentage of the changes are not
shown in the output.
@end table

Example: The following will count changed files, while ignoring directories
with less than 10% of the total amount of changed files, and accumulating
child directory counts in the parent directories: @samp{files,10,cumulative}.

@item  diff.statGraphWidth 
Limit the width of the graph part in --stat output. If set, applies to all
commands generating --stat output except format-patch.

@item  diff.context 
Generate diffs with <n> lines of context instead of the default of 3. This
value is overridden by the -U option.

@item  diff.interHunkContext 
Show the context between diff hunks, up to the specified number of lines,
thereby fusing the hunks that are close to each other.  This value serves as
the default for the @samp{--inter-hunk-context} command line option.

@item  diff.external 
If this config variable is set, diff generation is not performed using the
internal diff machinery, but using the given command.  Can be overridden
with the ‘GIT_EXTERNAL_DIFF’ environment variable.  The command is called
with parameters as described under "git Diffs" in git(1).  Note: if
you want to use an external diff program only on a subset of your files, you
might want to use gitattributes(5) instead.

@item  diff.ignoreSubmodules 
Sets the default value of --ignore-submodules. Note that this affects only
@emph{git diff} Porcelain, and not lower level @emph{diff} commands such as @emph{git
diff-files}. @emph{git checkout} and @emph{git switch} also honor this setting when
reporting uncommitted changes. Setting it to @emph{all} disables the submodule
summary normally shown by @emph{git commit} and @emph{git status} when
@samp{status.submoduleSummary} is set unless it is overridden by using the
--ignore-submodules command-line option.  The @emph{git submodule} commands are
not affected by this setting.  By default this is set to untracked so that
any untracked submodules are ignored.

@item  diff.mnemonicPrefix 
If set, @emph{git diff} uses a prefix pair that is different from the standard
"a/" and "b/" depending on what is being compared.  When this configuration
is in effect, reverse diff output also swaps the order of the prefixes:

@table @asis

@item  @samp{git diff} 
compares the (i)ndex and the (w)ork tree;

@item  @samp{git diff HEAD} 
compares a (c)ommit and the (w)ork tree;

@item  @samp{git diff --cached} 
compares a (c)ommit and the (i)ndex;

@item  @samp{git diff HEAD:file1 file2} 
compares an (o)bject and a (w)ork tree entity;

@item  @samp{git diff --no-index a b} 
compares two non-git things (1) and (2).
@end table

@item  diff.noprefix 
If set, @emph{git diff} does not show any source or destination prefix.

@item  diff.relative 
If set to @emph{true}, @emph{git diff} does not show changes outside of the directory
and show pathnames relative to the current directory.

@item  diff.orderFile 
File indicating how to order files within a diff.  See the @emph{-O} option to
git-diff(1) for details.  If @samp{diff.orderFile} is a relative
pathname, it is treated as relative to the top of the working tree.

@item  diff.renameLimit 
The number of files to consider in the exhaustive portion of copy/rename
detection; equivalent to the @emph{git diff} option @samp{-l}.  If not set, the
default value is currently 1000.  This setting has no effect if rename
detection is turned off.

@item  diff.renames 
Whether and how Git detects renames.  If set to "false", rename detection is
disabled. If set to "true", basic rename detection is enabled.  If set to
"copies" or "copy", Git will detect copies, as well.  Defaults to true.
Note that this affects only @emph{git diff} Porcelain like git-diff(1)
and git-log(1), and not lower level commands such as
git-diff-files(1).

@item  diff.suppressBlankEmpty 
A boolean to inhibit the standard behavior of printing a space before each
empty output line. Defaults to false.

@item  diff.submodule 
Specify the format in which differences in submodules are shown.  The
"short" format just shows the names of the commits at the beginning and end
of the range. The "log" format lists the commits in the range like
git-submodule(1) @samp{summary} does. The "diff" format shows an inline
diff of the changed contents of the submodule. Defaults to "short".

@item  diff.wordRegex 
A POSIX Extended Regular Expression used to determine what is a "word" when
performing word-by-word difference calculations.  Character sequences that
match the regular expression are "words", all other characters are
@strong{ignorable} whitespace.

@item  diff.<driver>.command 
The custom diff driver command.  See gitattributes(5) for details.

@item  diff.<driver>.xfuncname 
The regular expression that the diff driver should use to recognize the hunk
header.  A built-in pattern may also be used.  See gitattributes(5)
for details.

@item  diff.<driver>.binary 
Set this option to true to make the diff driver treat files as binary.  See
gitattributes(5) for details.

@item  diff.<driver>.textconv 
The command that the diff driver should call to generate the text-converted
version of a file.  The result of the conversion is used to generate a
human-readable diff.  See gitattributes(5) for details.

@item  diff.<driver>.wordRegex 
The regular expression that the diff driver should use to split words in a
line.  See gitattributes(5) for details.

@item  diff.<driver>.cachetextconv 
Set this option to true to make the diff driver cache the text conversion
outputs.  See gitattributes(5) for details.

@item  diff.tool 
Controls which diff tool is used by git-difftool(1).  This variable
overrides the value configured in @samp{merge.tool}.  The list below shows the
valid built-in values.  Any other value is treated as a custom diff tool and
requires that a corresponding difftool.<tool>.cmd variable is defined.

@item  diff.guitool 
Controls which diff tool is used by git-difftool(1) when the
-g/--gui flag is specified. This variable overrides the value configured in
@samp{merge.guitool}. The list below shows the valid built-in values. Any other
value is treated as a custom diff tool and requires that a corresponding
difftool.<guitool>.cmd variable is defined.

@itemize 

@item
araxis

@item
bc

@item
bc3

@item
bc4

@item
codecompare

@item
deltawalker

@item
diffmerge

@item
diffuse

@item
ecmerge

@item
emerge

@item
examdiff

@item
guiffy

@item
gvimdiff

@item
gvimdiff1

@item
gvimdiff2

@item
gvimdiff3

@item
kdiff3

@item
kompare

@item
meld

@item
nvimdiff

@item
nvimdiff1

@item
nvimdiff2

@item
nvimdiff3

@item
opendiff

@item
p4merge

@item
smerge

@item
tkdiff

@item
vimdiff

@item
vimdiff1

@item
vimdiff2

@item
vimdiff3

@item
winmerge

@item
xxdiff
@end itemize

@item  diff.indentHeuristic 
Set this option to @samp{false} to disable the default heuristics that shift diff
hunk boundaries to make patches easier to read.

@item  diff.algorithm 
Choose a diff algorithm.  The variants are as follows:

@table @asis

@item  @samp{default}, @samp{myers} 
The basic greedy diff algorithm. Currently, this is the default.

@item  @samp{minimal} 
Spend extra time to make sure the smallest possible diff is produced.

@item  @samp{patience} 
Use "patience diff" algorithm when generating patches.

@item  @samp{histogram} 
This algorithm extends the patience algorithm to "support low-occurrence
common elements".
@end table

@item  diff.wsErrorHighlight 
Highlight whitespace errors in the @samp{context}, @samp{old} or @samp{new} lines of the
diff.  Multiple values are separated by comma, @samp{none} resets previous
values, @samp{default} reset the list to @samp{new} and @samp{all} is a shorthand for
@samp{old,new,context}.  The whitespace errors are colored with
@samp{color.diff.whitespace}.  The command line option
@samp{--ws-error-highlight=<kind>} overrides this setting.

@item  diff.colorMoved 
If set to either a valid @samp{<mode>} or a true value, moved lines in a diff are
colored differently, for details of valid modes see @emph{--color-moved} in
git-diff(1). If simply set to true the default color mode will be
used. When set to false, moved lines are not colored.

@item  diff.colorMovedWS 
When moved lines are colored using e.g. the @samp{diff.colorMoved} setting, this
option controls the @samp{<mode>} how spaces are treated for details of valid
modes see @emph{--color-moved-ws} in git-diff(1).

@item  difftool.<tool>.path 
Override the path for the given tool.  This is useful in case your tool is
not in the PATH.

@item  difftool.<tool>.cmd 
Specify the command to invoke the specified diff tool.  The specified
command is evaluated in shell with the following variables available:
@emph{LOCAL} is set to the name of the temporary file containing the contents of
the diff pre-image and @emph{REMOTE} is set to the name of the temporary file
containing the contents of the diff post-image.

@item  difftool.prompt 
Prompt before each invocation of the diff tool.

@item  extensions.objectFormat 
Specify the hash algorithm to use.  The acceptable values are @samp{sha1} and
@samp{sha256}.  If not specified, @samp{sha1} is assumed.  It is an error to specify
this key unless @samp{core.repositoryFormatVersion} is 1.

Note that this setting should only be set by git-init(1) or
git-clone(1).  Trying to change it after initialization will not
work and will produce hard-to-diagnose issues.

@item  fastimport.unpackLimit 
If the number of objects imported by git-fast-import(1) is below
this limit, then the objects will be unpacked into loose object files.
However if the number of imported objects equals or exceeds this limit then
the pack will be stored as a pack.  Storing the pack from a fast-import can
make the import operation complete faster, especially on slow filesystems.
If not set, the value of @samp{transfer.unpackLimit} is used instead.

@item  feature.* 
The config settings that start with @samp{feature.} modify the defaults of a
group of other config settings. These groups are created by the Git
developer community as recommended defaults and are subject to change.  In
particular, new config options may be added with different defaults.

@item  feature.experimental 
Enable config options that are new to Git, and are being considered for
future defaults. Config settings included here may be added or removed with
each release, including minor version updates. These settings may have
unintended interactions since they are so new. Please enable this setting if
you are interested in providing feedback on experimental features. The new
default values are:

@itemize 

@item
@samp{fetch.negotiationAlgorithm=skipping} may improve fetch negotiation times by
skipping more commits at a time, reducing the number of round trips.
@end itemize

@item  feature.manyFiles 
Enable config options that optimize for repos with many files in the working
directory. With many files, commands such as @samp{git status} and @samp{git checkout}
may be slow and these new defaults improve performance:

@itemize 

@item
@samp{index.version=4} enables path-prefix compression in the index.

@item
@samp{core.untrackedCache=true} enables the untracked cache. This setting assumes
that mtime is working on your machine.
@end itemize

@item  fetch.recurseSubmodules 
This option controls whether @samp{git fetch} (and the underlying fetch in @samp{git
pull}) will recursively fetch into populated submodules.  This option can be
set either to a boolean value or to @emph{on-demand}.  Setting it to a boolean
changes the behavior of fetch and pull to recurse unconditionally into
submodules when set to true or to not recurse at all when set to false. When
set to @emph{on-demand}, fetch and pull will only recurse into a populated
submodule when its superproject retrieves a commit that updates the
submodule’s reference.  Defaults to @emph{on-demand}, or to the value of
@emph{submodule.recurse} if set.

@item  fetch.fsckObjects 
If it is set to true, git-fetch-pack will check all fetched objects. See
@samp{transfer.fsckObjects} for what’s checked. Defaults to false. If not set,
the value of @samp{transfer.fsckObjects} is used instead.

@item  fetch.fsck.<msg-id> 
Acts like @samp{fsck.<msg-id>}, but is used by git-fetch-pack(1) instead
of git-fsck(1). See the @samp{fsck.<msg-id>} documentation for details.

@item  fetch.fsck.skipList 
Acts like @samp{fsck.skipList}, but is used by git-fetch-pack(1) instead
of git-fsck(1). See the @samp{fsck.skipList} documentation for details.

@item  fetch.unpackLimit 
If the number of objects fetched over the Git native transfer is below this
limit, then the objects will be unpacked into loose object files. However if
the number of received objects equals or exceeds this limit then the
received pack will be stored as a pack, after adding any missing delta
bases.  Storing the pack from a push can make the push operation complete
faster, especially on slow filesystems.  If not set, the value of
@samp{transfer.unpackLimit} is used instead.

@item  fetch.prune 
If true, fetch will automatically behave as if the @samp{--prune} option was
given on the command line.  See also @samp{remote.<name>.prune} and the PRUNING
section of git-fetch(1).

@item  fetch.pruneTags 
If true, fetch will automatically behave as if the @samp{refs/tags/*:refs/tags/*}
refspec was provided when pruning, if not set already. This allows for
setting both this option and @samp{fetch.prune} to maintain a 1=1 mapping to
upstream refs. See also @samp{remote.<name>.pruneTags} and the PRUNING section of
git-fetch(1).

@item  fetch.output 
Control how ref update status is printed. Valid values are @samp{full} and
@samp{compact}. Default value is @samp{full}. See section OUTPUT in
git-fetch(1) for detail.

@item  fetch.negotiationAlgorithm 
Control how information about the commits in the local repository is sent
when negotiating the contents of the packfile to be sent by the server. Set
to "skipping" to use an algorithm that skips commits in an effort to
converge faster, but may result in a larger-than-necessary packfile; or set
to "noop" to not send any information at all, which will almost certainly
result in a larger-than-necessary packfile, but will skip the negotiation
step.  The default is "default" which instructs Git to use the default
algorithm that never skips commits (unless the server has acknowledged it or
one of its descendants). If @samp{feature.experimental} is enabled, then this
setting defaults to "skipping".  Unknown values will cause @emph{git fetch} to
error out.

See also the @samp{--negotiate-only} and @samp{--negotiation-tip} options to
git-fetch(1).

@item  fetch.showForcedUpdates 
Set to false to enable @samp{--no-show-forced-updates} in git-fetch(1)
and git-pull(1) commands.  Defaults to true.

@item  fetch.parallel 
Specifies the maximal number of fetch operations to be run in parallel at a
time (submodules, or remotes when the @samp{--multiple} option of
git-fetch(1) is in effect).

A value of 0 will give some reasonable default. If unset, it defaults to 1.

For submodules, this setting can be overridden using the
@samp{submodule.fetchJobs} config setting.

@item  fetch.writeCommitGraph 
Set to true to write a commit-graph after every @samp{git fetch} command that
downloads a pack-file from a remote. Using the @samp{--split} option, most
executions will create a very small commit-graph file on top of the existing
commit-graph file(s). Occasionally, these files will merge and the write may
take longer. Having an updated commit-graph file helps performance of many
Git commands, including @samp{git merge-base}, @samp{git push -f}, and @samp{git log
--graph}. Defaults to false.

@item  format.attach 
Enable multipart/mixed attachments as the default for @emph{format-patch}.  The
value can also be a double quoted string which will enable attachments as
the default and set the value as the boundary.  See the --attach option in
git-format-patch(1).

@item  format.from 
Provides the default value for the @samp{--from} option to format-patch.  Accepts
a boolean value, or a name and email address.  If false, format-patch
defaults to @samp{--no-from}, using commit authors directly in the "From:" field
of patch mails.  If true, format-patch defaults to @samp{--from}, using your
committer identity in the "From:" field of patch mails and including a
"From:" field in the body of the patch mail if different.  If set to a
non-boolean value, format-patch uses that value instead of your committer
identity.  Defaults to false.

@item  format.numbered 
A boolean which can enable or disable sequence numbers in patch subjects.
It defaults to "auto" which enables it only if there is more than one
patch.  It can be enabled or disabled for all messages by setting it to
"true" or "false".  See --numbered option in git-format-patch(1).

@item  format.headers 
Additional email headers to include in a patch to be submitted by mail.  See
git-format-patch(1).

@item  format.to 
@itemx  format.cc 
Additional recipients to include in a patch to be submitted by mail.  See
the --to and --cc options in git-format-patch(1).

@item  format.subjectPrefix 
The default for format-patch is to output files with the @emph{[PATCH]} subject
prefix. Use this variable to change that prefix.

@item  format.coverFromDescription 
The default mode for format-patch to determine which parts of the cover
letter will be populated using the branch’s description. See the
@samp{--cover-from-description} option in git-format-patch(1).

@item  format.signature 
The default for format-patch is to output a signature containing the Git
version number. Use this variable to change that default.  Set this variable
to the empty string ("") to suppress signature generation.

@item  format.signatureFile 
Works just like format.signature except the contents of the file specified
by this variable will be used as the signature.

@item  format.suffix 
The default for format-patch is to output files with the suffix
@samp{.patch}. Use this variable to change that suffix (make sure to include the
dot if you want it).

@item  format.encodeEmailHeaders 
Encode email headers that have non-ASCII characters with "Q-encoding"
(described in RFC 2047) for email transmission.  Defaults to true.

@item  format.pretty 
The default pretty format for log/show/whatchanged command, See
git-log(1), git-show(1), git-whatchanged(1).

@item  format.thread 
The default threading style for @emph{git format-patch}.  Can be a boolean value,
or @samp{shallow} or @samp{deep}.  @samp{shallow} threading makes every mail a reply to the
head of the series, where the head is chosen from the cover letter, the
@samp{--in-reply-to}, and the first patch mail, in this order.  @samp{deep} threading
makes every mail a reply to the previous one.  A true boolean value is the
same as @samp{shallow}, and a false value disables threading.

@item  format.signOff 
A boolean value which lets you enable the @samp{-s/--signoff} option of
format-patch by default. @strong{Note:} Adding the @samp{Signed-off-by} trailer to a
patch should be a conscious act and means that you certify you have the
rights to submit this work under the same open source license.  Please see
the @emph{SubmittingPatches} document for further discussion.

@item  format.coverLetter 
A boolean that controls whether to generate a cover-letter when format-patch
is invoked, but in addition can be set to "auto", to generate a cover-letter
only when there’s more than one patch.  Default is false.

@item  format.outputDirectory 
Set a custom directory to store the resulting files instead of the current
working directory. All directory components will be created.

@item  format.filenameMaxLength 
The maximum length of the output filenames generated by the @samp{format-patch}
command; defaults to 64.  Can be overridden by the
@samp{--filename-max-length=<n>} command line option.

@item  format.useAutoBase 
A boolean value which lets you enable the @samp{--base=auto} option of
format-patch by default. Can also be set to "whenAble" to allow enabling
@samp{--base=auto} if a suitable base is available, but to skip adding base info
otherwise without the format dying.

@item  format.notes 
Provides the default value for the @samp{--notes} option to format-patch. Accepts
a boolean value, or a ref which specifies where to get notes. If false,
format-patch defaults to @samp{--no-notes}. If true, format-patch defaults to
@samp{--notes}. If set to a non-boolean value, format-patch defaults to
@samp{--notes=<ref>}, where @samp{ref} is the non-boolean value. Defaults to false.

If one wishes to use the ref @samp{ref/notes/true}, please use that literal
instead.

This configuration can be specified multiple times in order to allow
multiple notes refs to be included. In that case, it will behave similarly
to multiple @samp{--[no-]notes[=]} options passed in. That is, a value of @samp{true}
will show the default notes, a value of @samp{<ref>} will also show notes from
that notes ref and a value of @samp{false} will negate previous configurations
and not show notes.

For example,

@example
[format]
        notes = true
        notes = foo
        notes = false
        notes = bar
@end example


will only show notes from @samp{refs/notes/bar}.

@item  filter.<driver>.clean 
The command which is used to convert the content of a worktree file to a
blob upon checkin.  See gitattributes(5) for details.

@item  filter.<driver>.smudge 
The command which is used to convert the content of a blob object to a
worktree file upon checkout.  See gitattributes(5) for details.

@item  fsck.<msg-id> 
fsck中に、gitは、現在のバージョンのgitでは生成されず、 @samp{transfer.fsckObjects}
が設定されている場合はネットワーク経由で送信されない、レガシーデータの問題を検出する場合があります。この機能は、そのようなデータを含むレガシーリポジトリの操作をサポートすることを目的としています。

@samp{fsck.<msg-id>} 設定は、 git-fsck(1) によって取得されますが、代わりに、そのようなデータセット
@samp{receive.fsck.<msg-id>} のプッシュを受け入れるか、または、クローンまたはフェッチのセットである
@samp{fetch.fsck.<msg-id>} を使用します。

この文書の残りの部分では、簡潔にするために @samp{fsck.*} 変数について説明していますが、対応する @samp{receive.fsck.*} 変数と
@samp{fetch.<msg-id>.*} 変数にも同じことが当てはまります。

@samp{color.ui} や @samp{core.editor} のような変数とは異なり、 @samp{receive.fsck.<msg-id>} と
@samp{fetch.fsck.<msg-id>} 変数は、設定されていない場合、 @samp{fsck.<msg-id>}
構成にフォールバックしません。さまざまな状況で同じfsck設定を均一に構成するには、3つすべてを同じ値に設定する必要があります。

@samp{fsck.<msg-id>} が設定されている場合、 @samp{fsck.<msg-id>} の値を @samp{error} 、 @samp{warn} 、@samp{ignore}
のいずれか一つとすることにより、エラーを警告に切り替える事もでき、その逆も可能です。そして @samp{<msg-id>}
の部分はメッセージIDです。便利なように、fsckはエラー/警告メッセージの前にメッセージIDを付けます。たとえば「missingEmail:
invalid author/committer line - missing email」は、 @samp{fsck.missingEmail =
ignore} を設定するとその問題が非表示になることを意味します。

一般に、これらの問題のあるオブジェクトが共有する破損の種類をリストして無視するのではなく、 @samp{fsck.skipList}
に問題のある既存のオブジェクトを列挙することをお勧めします。前者を実行すると、同じ破損の新しいインスタンスが見過ごされる可能性があります。

不明な @samp{fsck.<msg-id>} 値を設定すると、fsckが停止(die)しますが、 @samp{receive.fsck.<msg-id>} や
@samp{fetch.fsck.<msg-id>} に対して同じことを行うと、gitは単に警告するだけです。

@item  fsck.skipList 
非致命的な理由により既に壊れている(broken)ことが分かっているため無視する必要があるオブジェクト名(1行につき1つの省略されてないSHA-1)のリストへのパス。Git
2.20
以降では、コメント(@samp{#})文字から行末までと、空行と、先頭と末尾の空白(whitespace)は無視されます。それより古いバージョンでは1行につき1つのSHA-1以外は全てエラーになります。

この機能は、無効なコミッターの電子メールアドレスなど、初期のコミットにもかかわらず、安全に無視できるエラーを含む、確立されたプロジェクトを受け入れる必要がある場合に役立ちます。
注意: この設定では、corruptオブジェクトをスキップすることはできません。

@samp{fsck.<msg-id>} と同様に、この変数に対応する @samp{receive.fsck.skipList} 派生と
@samp{fetch.fsck.skipList} 派生があります。

@samp{color.ui} や @samp{core.editor} のような変数とは異なり、 @samp{receive.fsck.skipList} 変数と
@samp{fetch.fsck.skipList} 変数は、設定されていない場合、 @samp{fsck.skipList}
構成にフォールバックしません。さまざまな状況で同じfsck設定を均一に構成するには、3つすべてを同じ値に設定する必要があります。

古いバージョンのGit(2.20より前)では、オブジェクト名リストを並べ替える必要があることが文書化されています。これは必須ではなく、オブジェクト名は任意の順序で表示できますが、リストを読み取るときに、内部バイナリ検索実装の目的でリストが並べ替えられているかどうかを追跡しました。これにより、既に並べ替えられたリストでは作業を節約できます。膨大なリストがない限り、リストを事前に並べ替える必要はありませんでした。
Gitバージョン2.20以降では、代わりにハッシュ実装が使用されるため、リストを事前に並べ替える必要はありません。

@item  gc.aggressiveDepth 
@samp{git gc --aggressive}
で使用されるデルタ圧縮アルゴリズムで使用される深さパラメーター。これはデフォルトで50に設定されています。これは @samp{--aggressive}
が使用されていない場合の @samp{--depth} オプションのデフォルトです。

詳細については git-repack(1) の @samp{--depth} オプションの文書を参照してください。

@item  gc.aggressiveWindow 
@samp{git gc --aggressive}
で使用されるデルタ圧縮アルゴリズムで使用されるウィンドウサイズパラメータ。これはデフォルトで250に設定されています。これは、 @samp{--window}
のデフォルト値の10よりもはるかに積極的なウィンドウサイズです。

詳細については、 git-repack(1) の @samp{--window} オプションの文書を参照してください。

@item  gc.auto 
リポジトリにおおよそ指定の値より多くのルーズオブジェクトがある場合、 @samp{git gc --auto}
はそれらをパックします。一部の磁器コマンドは、このコマンドを使用して、軽量のガベージコレクションを時々実行します。デフォルト値は6700です。

これを0に設定すると、ルーズオブジェクトの数に基づく自動パッキングが無効にななります。また、他のヒューリスティックな @samp{git gc --auto}
が、 @samp{gc.autoPackLimit} などの作業があるかどうかを判断するためにこの値を使用します。

@item  gc.autoPackLimit 
リポジトリに @samp{* .keep} ファイルでマークされていないパックがこの設定値より多くある場合、 @samp{git gc --auto}
はそれらを1つの大きなパックに統合します。デフォルト値は50です。これを0に設定すると、無効になります。 @samp{gc.auto}
を0に設定すると、この設定も無効になります。

以下の @samp{gc.bigPackThreshold} 構成変数を参照してください。この設定を使用中は、自動パックの制限がどのように機能するかに影響します。

@item  gc.autoDetach 
システムがサポートしている場合は @samp{git gc --auto} は即座戻り、実行はバックグラウンドで行われます。デフォルトはtrueです。

@item  gc.bigPackThreshold 
ゼロ以外の場合、 @samp{git gc} の実行時に、この設定値より大きいすべてのパックが保持されます。これは @samp{--keep-largest-pack}
と非常に似ていますが、最大のパックだけでなく、しきい値を満たす全てのパックが保持される点が異なります。デフォルトはゼロです。 @emph{k} 、 @emph{m} 、
@emph{g} の一般的な単位接尾辞がサポートされています。

注意: 保持されるパックの数が gc.autoPackLimit
を超える場合、この構成変数は無視され、基本パックを除くすべてのパックが再パックされることに注意してください。再パック後、パックの数は
gc.autoPackLimit を下回り、再び gc.bigPackThreshold が尊重されるでしょう。

@samp{git repack} がスムーズに実行されると推定されるメモリ量が利用できず、かつ、 @samp{gc.bigPackThreshold}
が設定されていない場合、最大のパックも除外されます(これは、 @samp{--keep-largest-pack} を指定して @samp{git gc}
を実行するのと同じです)。

@item  gc.writeCommitGraph 
trueの場合、 git-gc(1) が実行されると、 gcはcommit-graphファイルを書き換えます。 @samp{git gc
--auto} を使用する場合、ハウスキーピングが必要な場合はコミットグラフが更新されます。デフォルトはtrueです。詳細については
git-commit-graph(1) を参照してください。

@item  gc.logExpiry 
ファイルgc.logが存在する場合、 @samp{git gc --auto}
はそのコンテンツを出力し、そのファイルが「gc.logExpiry」より古い場合を除いて、実行する代わりにステータス0で終了します。デフォルトは「1.day」です。その他の値の指定方法については
@samp{gc.pruneExpire} を参照してください。

@item  gc.packRefs 
リポジトリで @samp{git pack-refs} を実行すると、HTTPなどの馬鹿プロトコル(dumb transport) を介して 1.5.1.2
より前のGitバージョンではクローンが作成できなくなります。この変数は、「git gc」が「git
pack-refs」を実行するかどうかを決定します。これを @samp{notbare}
に設定して、すべての非ベアリポジトリ内で有効にするか、ブール値に設定することができます。 デフォルトは @samp{true} です。

@item  gc.pruneExpire 
「git gc」を実行すると、@samp{prune --expire 2.weeks.ago} が呼び出されます。この構成変数で猶予期間をオーバーライドします。
値「now」を使用してこの猶予期間を無効にし、到達不能なオブジェクトを常にすぐに剪定(prune)するか、「never」を使用して剪定を抑制することができます。この機能は「git
gc」がリポジトリに書き込む別のプロセスと同時に実行される場合の破損を防ぐのに役立ちます。 git-gc(1)
の「NOTES」セクションを参照してください。

@item  gc.worktreePruneExpire 
@emph{git gc} が実行されると、 @samp{git worktree prune --expire3.months.ago}
が呼び出されます。この構成変数を使用して、別の猶予期間を設定できます。値「now」を使用して猶予期間を無効にし、
@samp{$GIT_DIR/worktrees} をすぐに剪定(prune)するか、「never」を使用して剪定を抑制することができます。

@item  gc.reflogExpire 
@itemx  gc.<pattern>.reflogExpire 
「git reflog
expire」は、この時間より古いreflogエントリを削除します。デフォルトは90日です。値「now」はすべてのエントリをすぐに期限切れにし、「never」は期限切れを完全に抑制します。中央に「<pattern>」(例:「refs/stash」)がある場合、設定は
<pattern> に一致するrefにのみ適用されます。

@item  gc.reflogExpireUnreachable 
@itemx  gc.<pattern>.reflogExpireUnreachable 
@emph{git reflog expire} は、この時間より古いreflogエントリを削除し、現在の先端(the current
tip)から到達不能にします。デフォルトは30日です。値「now」はすべてのエントリをすぐに期限切れにし、「never」は期限切れを完全に抑制します。中央に「<pattern>」(例:「refs/stash」)がある場合、設定は
<pattern> に一致するrefにのみ適用されます。

これらのタイプのエントリは通常、 @samp{git commit--amend} または @samp{git rebase}
を使用した結果として作成され、修正またはリベースが発生する前のコミットです。これらの変更は現在のプロジェクトの一部ではないため、ほとんどのユーザーはそれらをより早く期限切れにしたいと思うでしょう。そのため、デフォルトは
@samp{gc.reflogExpire} よりも積極的です。

@item  gc.rerereResolved 
以前に解決した競合するマージの記録は、「git rerere
gc」が実行されるときに、この設定値で指定の日数保持されます。より人間が読める「1.month.ago」などを使用することもできます。デフォルトは60日です。
git-rerere(1) を参照してください。

@item  gc.rerereUnresolved 
@emph{git rerere gc}
が実行されると、解決していない競合するマージの記録がこの設定値の日数保持されます。より人間が読める「1.month.ago」などを使用することもできます。デフォルトは15日です。
git-rerere(1) を参照してください。

@item  gitcvs.commitMsgAnnotation 
Append this string to each commit message. Set to empty string to disable
this feature. Defaults to "via git-CVS emulator".

@item  gitcvs.enabled 
Whether the CVS server interface is enabled for this repository.  See
git-cvsserver(1).

@item  gitcvs.logFile 
Path to a log file where the CVS server interface well… logs various
stuff. See git-cvsserver(1).

@item  gitcvs.usecrlfattr 
If true, the server will look up the end-of-line conversion attributes for
files to determine the @samp{-k} modes to use. If the attributes force Git to
treat a file as text, the @samp{-k} mode will be left blank so CVS clients will
treat it as text. If they suppress text conversion, the file will be set
with @emph{-kb} mode, which suppresses any newline munging the client might
otherwise do. If the attributes do not allow the file type to be determined,
then @samp{gitcvs.allBinary} is used. See gitattributes(5).

@item  gitcvs.allBinary 
This is used if @samp{gitcvs.usecrlfattr} does not resolve the correct @emph{-kb} mode
to use. If true, all unresolved files are sent to the client in mode
@emph{-kb}. This causes the client to treat them as binary files, which
suppresses any newline munging it otherwise might do. Alternatively, if it
is set to "guess", then the contents of the file are examined to decide if
it is binary, similar to @samp{core.autocrlf}.

@item  gitcvs.dbName 
Database used by git-cvsserver to cache revision information derived from
the Git repository. The exact meaning depends on the used database driver,
for SQLite (which is the default driver) this is a filename. Supports
variable substitution (see git-cvsserver(1) for details). May not
contain semicolons (@samp{;}).  Default: @emph{%Ggitcvs.%m.sqlite}

@item  gitcvs.dbDriver 
Used Perl DBI driver. You can specify any available driver for this here,
but it might not work. git-cvsserver is tested with @emph{DBD::SQLite}, reported
to work with @emph{DBD::Pg}, and reported @strong{not} to work with
@emph{DBD::mysql}. Experimental feature.  May not contain double colons
(@samp{:}). Default: @emph{SQLite}.  See git-cvsserver(1).

@item  gitcvs.dbUser, gitcvs.dbPass 
Database user and password. Only useful if setting @samp{gitcvs.dbDriver}, since
SQLite has no concept of database users and/or passwords.  @emph{gitcvs.dbUser}
supports variable substitution (see git-cvsserver(1) for details).

@item  gitcvs.dbTableNamePrefix 
Database table name prefix.  Prepended to the names of any database tables
used, allowing a single database to be used for several repositories.
Supports variable substitution (see git-cvsserver(1) for details).
Any non-alphabetic characters will be replaced with underscores.
@end table

All gitcvs variables except for @samp{gitcvs.usecrlfattr} and @samp{gitcvs.allBinary}
can also be specified as @emph{gitcvs.<access_method>.<varname>} (where
@emph{access_method} is one of "ext" and "pserver") to make them apply only for
the given access method.

@table @asis

@item  gitweb.category 
@itemx  gitweb.description 
@itemx  gitweb.owner 
@itemx  gitweb.url 
See gitweb(1) for description.

@item  gitweb.avatar 
@itemx  gitweb.blame 
@itemx  gitweb.grep 
@itemx  gitweb.highlight 
@itemx  gitweb.patches 
@itemx  gitweb.pickaxe 
@itemx  gitweb.remote_heads 
@itemx  gitweb.showSizes 
@itemx  gitweb.snapshot 
See gitweb.conf(5) for description.

@item  grep.lineNumber 
If set to true, enable @samp{-n} option by default.

@item  grep.column 
If set to true, enable the @samp{--column} option by default.

@item  grep.patternType 
Set the default matching behavior. Using a value of @emph{basic}, @emph{extended},
@emph{fixed}, or @emph{perl} will enable the @samp{--basic-regexp}, @samp{--extended-regexp},
@samp{--fixed-strings}, or @samp{--perl-regexp} option accordingly, while the value
@emph{default} will return to the default matching behavior.

@item  grep.extendedRegexp 
If set to true, enable @samp{--extended-regexp} option by default. This option is
ignored when the @samp{grep.patternType} option is set to a value other than
@emph{default}.

@item  grep.threads 
Number of grep worker threads to use.  See @samp{grep.threads} in
git-grep(1) for more information.

@item  grep.fallbackToNoIndex 
If set to true, fall back to git grep --no-index if git grep is executed
outside of a git repository.  Defaults to false.

@item  gpg.program 
Use this custom program instead of "@samp{gpg}" found on @samp{$PATH} when making or
verifying a PGP signature. The program must support the same command-line
interface as GPG, namely, to verify a detached signature, "@samp{gpg --verify
$signature - <$file}" is run, and the program is expected to signal a good
signature by exiting with code 0, and to generate an ASCII-armored detached
signature, the standard input of "@samp{gpg -bsau $key}" is fed with the contents
to be signed, and the program is expected to send the result to its standard
output.

@item  gpg.format 
Specifies which key format to use when signing with @samp{--gpg-sign}.  Default
is "openpgp" and another possible value is "x509".

@item  gpg.<format>.program 
Use this to customize the program used for the signing format you
chose. (see @samp{gpg.program} and @samp{gpg.format}) @samp{gpg.program} can still be used
as a legacy synonym for @samp{gpg.openpgp.program}. The default value for
@samp{gpg.x509.program} is "gpgsm".

@item  gpg.minTrustLevel 
Specifies a minimum trust level for signature verification.  If this option
is unset, then signature verification for merge operations require a key
with at least @samp{marginal} trust.  Other operations that perform signature
verification require a key with at least @samp{undefined} trust.  Setting this
option overrides the required trust-level for all operations.  Supported
values, in increasing order of significance:

@itemize 

@item
@samp{undefined}

@item
@samp{never}

@item
@samp{marginal}

@item
@samp{fully}

@item
@samp{ultimate}
@end itemize

@item  gui.commitMsgWidth 
Defines how wide the commit message window is in the
git-gui(1). "75" is the default.

@item  gui.diffContext 
Specifies how many context lines should be used in calls to diff made by the
git-gui(1). The default is "5".

@item  gui.displayUntracked 
Determines if git-gui(1) shows untracked files in the file list. The
default is "true".

@item  gui.encoding 
Specifies the default character encoding to use for displaying of file
contents in git-gui(1) and gitk(1).  It can be overridden by
setting the @emph{encoding} attribute for relevant files (see
gitattributes(5)).  If this option is not set, the tools default to
the locale encoding.

@item  gui.matchTrackingBranch 
Determines if new branches created with git-gui(1) should default to
tracking remote branches with matching names or not. Default: "false".

@item  gui.newBranchTemplate 
Is used as suggested name when creating new branches using the
git-gui(1).

@item  gui.pruneDuringFetch 
"true" if git-gui(1) should prune remote-tracking branches when
performing a fetch. The default value is "false".

@item  gui.trustmtime 
Determines if git-gui(1) should trust the file modification
timestamp or not. By default the timestamps are not trusted.

@item  gui.spellingDictionary 
Specifies the dictionary used for spell checking commit messages in the
git-gui(1). When set to "none" spell checking is turned off.

@item  gui.fastCopyBlame 
If true, @emph{git gui blame} uses @samp{-C} instead of @samp{-C -C} for original location
detection. It makes blame significantly faster on huge repositories at the
expense of less thorough copy detection.

@item  gui.copyBlameThreshold 
Specifies the threshold to use in @emph{git gui blame} original location
detection, measured in alphanumeric characters. See the git-blame(1)
manual for more information on copy detection.

@item  gui.blamehistoryctx 
Specifies the radius of history context in days to show in gitk(1)
for the selected commit, when the @samp{Show History Context} menu item is
invoked from @emph{git gui blame}. If this variable is set to zero, the whole
history is shown.

@item  guitool.<name>.cmd 
Specifies the shell command line to execute when the corresponding item of
the git-gui(1) @samp{Tools} menu is invoked. This option is mandatory for
every tool. The command is executed from the root of the working directory,
and in the environment it receives the name of the tool as @samp{GIT_GUITOOL},
the name of the currently selected file as @emph{FILENAME}, and the name of the
current branch as @emph{CUR_BRANCH} (if the head is detached, @emph{CUR_BRANCH} is
empty).

@item  guitool.<name>.needsFile 
Run the tool only if a diff is selected in the GUI. It guarantees that
@emph{FILENAME} is not empty.

@item  guitool.<name>.noConsole 
Run the command silently, without creating a window to display its output.

@item  guitool.<name>.noRescan 
Don’t rescan the working directory for changes after the tool finishes
execution.

@item  guitool.<name>.confirm 
Show a confirmation dialog before actually running the tool.

@item  guitool.<name>.argPrompt 
Request a string argument from the user, and pass it to the tool through the
@samp{ARGS} environment variable. Since requesting an argument implies
confirmation, the @emph{confirm} option has no effect if this is enabled. If the
option is set to @emph{true}, @emph{yes}, or @emph{1}, the dialog uses a built-in generic
prompt; otherwise the exact value of the variable is used.

@item  guitool.<name>.revPrompt 
Request a single valid revision from the user, and set the @samp{REVISION}
environment variable. In other aspects this option is similar to
@emph{argPrompt}, and can be used together with it.

@item  guitool.<name>.revUnmerged 
Show only unmerged branches in the @emph{revPrompt} subdialog.  This is useful
for tools similar to merge or rebase, but not for things like checkout or
reset.

@item  guitool.<name>.title 
Specifies the title to use for the prompt dialog. The default is the tool
name.

@item  guitool.<name>.prompt 
Specifies the general prompt string to display at the top of the dialog,
before subsections for @emph{argPrompt} and @emph{revPrompt}.  The default value
includes the actual command.

@item  help.browser 
Specify the browser that will be used to display help in the @emph{web}
format. See git-help(1).

@item  help.format 
Override the default help format used by git-help(1).  Values @emph{man},
@emph{info}, @emph{web} and @emph{html} are supported. @emph{man} is the default. @emph{web} and
@emph{html} are the same.

@item  help.autoCorrect 
If git detects typos and can identify exactly one valid command similar to
the error, git will try to suggest the correct command or even run the
suggestion automatically. Possible config values are:

@itemize 

@item
0 (default): show the suggested command.
positive number: run the suggested command after specified deciseconds (0.1
sec).

@item
"immediate": run the suggested command immediately.
"prompt": show the suggestion and prompt for confirmation to run the
command.

@item
"never": don’t run or show any suggested command.
@end itemize

@item  help.htmlPath 
Specify the path where the HTML documentation resides. File system paths and
URLs are supported. HTML pages will be prefixed with this path when help is
displayed in the @emph{web} format. This defaults to the documentation path of
your Git installation.

@item  http.proxy 
Override the HTTP proxy, normally configured using the @emph{http_proxy},
@emph{https_proxy}, and @emph{all_proxy} environment variables (see @samp{curl(1)}). In
addition to the syntax understood by curl, it is possible to specify a proxy
string with a user name but no password, in which case git will attempt to
acquire one in the same way it does for other credentials. See
gitcredentials(7) for more information. The syntax thus is
@emph{[protocol://][user[:password]@@]proxyhost[:port]}. This can be overridden on
a per-remote basis; see remote.<name>.proxy

@item  http.proxyAuthMethod 
Set the method with which to authenticate against the HTTP proxy. This only
takes effect if the configured proxy string contains a user name part
(i.e. is of the form @emph{user@@host} or @emph{user@@host:port}). This can be
overridden on a per-remote basis; see @samp{remote.<name>.proxyAuthMethod}.  Both
can be overridden by the @samp{GIT_HTTP_PROXY_AUTHMETHOD} environment variable.
Possible values are:

@itemize 

@item
@samp{anyauth} - Automatically pick a suitable authentication method. It is
assumed that the proxy answers an unauthenticated request with a 407 status
code and one or more Proxy-authenticate headers with supported
authentication methods. This is the default.

@item
@samp{basic} - HTTP Basic authentication

@item
@samp{digest} - HTTP Digest authentication; this prevents the password from being
transmitted to the proxy in clear text

@item
@samp{negotiate} - GSS-Negotiate authentication (compare the --negotiate option
of @samp{curl(1)})

@item
@samp{ntlm} - NTLM authentication (compare the --ntlm option of @samp{curl(1)})
@end itemize

@item  http.proxySSLCert 
The pathname of a file that stores a client certificate to use to
authenticate with an HTTPS proxy. Can be overridden by the
@samp{GIT_PROXY_SSL_CERT} environment variable.

@item  http.proxySSLKey 
The pathname of a file that stores a private key to use to authenticate with
an HTTPS proxy. Can be overridden by the @samp{GIT_PROXY_SSL_KEY} environment
variable.

@item  http.proxySSLCertPasswordProtected 
Enable Git’s password prompt for the proxy SSL certificate.  Otherwise
OpenSSL will prompt the user, possibly many times, if the certificate or
private key is encrypted. Can be overridden by the
@samp{GIT_PROXY_SSL_CERT_PASSWORD_PROTECTED} environment variable.

@item  http.proxySSLCAInfo 
Pathname to the file containing the certificate bundle that should be used
to verify the proxy with when using an HTTPS proxy. Can be overridden by the
@samp{GIT_PROXY_SSL_CAINFO} environment variable.

@item  http.emptyAuth 
Attempt authentication without seeking a username or password.  This can be
used to attempt GSS-Negotiate authentication without specifying a username
in the URL, as libcurl normally requires a username for authentication.

@item  http.delegation 
Control GSSAPI credential delegation. The delegation is disabled by default
in libcurl since version 7.21.7. Set parameter to tell the server what it is
allowed to delegate when it comes to user credentials. Used with
GSS/kerberos. Possible values are:

@itemize 

@item
@samp{none} - Don’t allow any delegation.

@item
@samp{policy} - Delegates if and only if the OK-AS-DELEGATE flag is set in the
Kerberos service ticket, which is a matter of realm policy.

@item
@samp{always} - Unconditionally allow the server to delegate.
@end itemize

@item  http.extraHeader 
Pass an additional HTTP header when communicating with a server.  If more
than one such entry exists, all of them are added as extra headers.  To
allow overriding the settings inherited from the system config, an empty
value will reset the extra headers to the empty list.

@item  http.cookieFile 
The pathname of a file containing previously stored cookie lines, which
should be used in the Git http session, if they match the server. The file
format of the file to read cookies from should be plain HTTP headers or the
Netscape/Mozilla cookie file format (see @samp{curl(1)}).  NOTE that the file
specified with http.cookieFile is used only as input unless http.saveCookies
is set.

@item  http.saveCookies 
If set, store cookies received during requests to the file specified by
http.cookieFile. Has no effect if http.cookieFile is unset.

@item  http.version 
Use the specified HTTP protocol version when communicating with a server.
If you want to force the default. The available and default version depend
on libcurl. Currently the possible values of this option are:

@itemize 

@item
HTTP/2

@item
HTTP/1.1
@end itemize

@item  http.sslVersion 
The SSL version to use when negotiating an SSL connection, if you want to
force the default.  The available and default version depend on whether
libcurl was built against NSS or OpenSSL and the particular configuration of
the crypto library in use. Internally this sets the @emph{CURLOPT_SSL_VERSION}
option; see the libcurl documentation for more details on the format of this
option and for the ssl version supported. Currently the possible values of
this option are:

@itemize 

@item
sslv2

@item
sslv3

@item
tlsv1

@item
tlsv1.0

@item
tlsv1.1

@item
tlsv1.2

@item
tlsv1.3
@end itemize

Can be overridden by the @samp{GIT_SSL_VERSION} environment variable.  To force
git to use libcurl’s default ssl version and ignore any explicit
http.sslversion option, set @samp{GIT_SSL_VERSION} to the empty string.

@item  http.sslCipherList 
A list of SSL ciphers to use when negotiating an SSL connection.  The
available ciphers depend on whether libcurl was built against NSS or OpenSSL
and the particular configuration of the crypto library in use.  Internally
this sets the @emph{CURLOPT_SSL_CIPHER_LIST} option; see the libcurl
documentation for more details on the format of this list.

Can be overridden by the @samp{GIT_SSL_CIPHER_LIST} environment variable.  To
force git to use libcurl’s default cipher list and ignore any explicit
http.sslCipherList option, set @samp{GIT_SSL_CIPHER_LIST} to the empty string.

@item  http.sslVerify 
Whether to verify the SSL certificate when fetching or pushing over
HTTPS. Defaults to true. Can be overridden by the @samp{GIT_SSL_NO_VERIFY}
environment variable.

@item  http.sslCert 
File containing the SSL certificate when fetching or pushing over HTTPS. Can
be overridden by the @samp{GIT_SSL_CERT} environment variable.

@item  http.sslKey 
File containing the SSL private key when fetching or pushing over HTTPS. Can
be overridden by the @samp{GIT_SSL_KEY} environment variable.

@item  http.sslCertPasswordProtected 
Enable Git’s password prompt for the SSL certificate.  Otherwise OpenSSL
will prompt the user, possibly many times, if the certificate or private key
is encrypted.  Can be overridden by the @samp{GIT_SSL_CERT_PASSWORD_PROTECTED}
environment variable.

@item  http.sslCAInfo 
File containing the certificates to verify the peer with when fetching or
pushing over HTTPS. Can be overridden by the @samp{GIT_SSL_CAINFO} environment
variable.

@item  http.sslCAPath 
Path containing files with the CA certificates to verify the peer with when
fetching or pushing over HTTPS. Can be overridden by the @samp{GIT_SSL_CAPATH}
environment variable.

@item  http.sslBackend 
Name of the SSL backend to use (e.g. "openssl" or "schannel").  This option
is ignored if cURL lacks support for choosing the SSL backend at runtime.

@item  http.schannelCheckRevoke 
Used to enforce or disable certificate revocation checks in cURL when
http.sslBackend is set to "schannel". Defaults to @samp{true} if unset. Only
necessary to disable this if Git consistently errors and the message is
about checking the revocation status of a certificate. This option is
ignored if cURL lacks support for setting the relevant SSL option at
runtime.

@item  http.schannelUseSSLCAInfo 
As of cURL v7.60.0, the Secure Channel backend can use the certificate
bundle provided via @samp{http.sslCAInfo}, but that would override the Windows
Certificate Store. Since this is not desirable by default, Git will tell
cURL not to use that bundle by default when the @samp{schannel} backend was
configured via @samp{http.sslBackend}, unless @samp{http.schannelUseSSLCAInfo}
overrides this behavior.

@item  http.pinnedpubkey 
Public key of the https service. It may either be the filename of a PEM or
DER encoded public key file or a string starting with @emph{sha256//} followed by
the base64 encoded sha256 hash of the public key. See also libcurl
@emph{CURLOPT_PINNEDPUBLICKEY}. git will exit with an error if this option is set
but not supported by cURL.

@item  http.sslTry 
Attempt to use AUTH SSL/TLS and encrypted data transfers when connecting via
regular FTP protocol. This might be needed if the FTP server requires it for
security reasons or you wish to connect securely whenever remote FTP server
supports it.  Default is false since it might trigger certificate
verification errors on misconfigured servers.

@item  http.maxRequests 
How many HTTP requests to launch in parallel. Can be overridden by the
@samp{GIT_HTTP_MAX_REQUESTS} environment variable. Default is 5.

@item  http.minSessions 
The number of curl sessions (counted across slots) to be kept across
requests. They will not be ended with curl_easy_cleanup() until
http_cleanup() is invoked. If USE_CURL_MULTI is not defined, this value will
be capped at 1. Defaults to 1.

@item  http.postBuffer 
Maximum size in bytes of the buffer used by smart HTTP transports when
POSTing data to the remote system.  For requests larger than this buffer
size, HTTP/1.1 and Transfer-Encoding: chunked is used to avoid creating a
massive pack file locally.  Default is 1 MiB, which is sufficient for most
requests.

Note that raising this limit is only effective for disabling chunked
transfer encoding and therefore should be used only where the remote server
or a proxy only supports HTTP/1.0 or is noncompliant with the HTTP
standard.  Raising this is not, in general, an effective solution for most
push problems, but can increase memory consumption significantly since the
entire buffer is allocated even for small pushes.

@item  http.lowSpeedLimit, http.lowSpeedTime 
If the HTTP transfer speed is less than @emph{http.lowSpeedLimit} for longer than
@emph{http.lowSpeedTime} seconds, the transfer is aborted.  Can be overridden by
the @samp{GIT_HTTP_LOW_SPEED_LIMIT} and @samp{GIT_HTTP_LOW_SPEED_TIME} environment
variables.

@item  http.noEPSV 
A boolean which disables using of EPSV ftp command by curl.  This can
helpful with some "poor" ftp servers which don’t support EPSV mode. Can be
overridden by the @samp{GIT_CURL_FTP_NO_EPSV} environment variable. Default is
false (curl will use EPSV).

@item  http.userAgent 
The HTTP USER_AGENT string presented to an HTTP server.  The default value
represents the version of the client Git such as git/1.7.1.  This option
allows you to override this value to a more common value such as
Mozilla/4.0.  This may be necessary, for instance, if connecting through a
firewall that restricts HTTP connections to a set of common USER_AGENT
strings (but not including those like git/1.7.1).  Can be overridden by the
@samp{GIT_HTTP_USER_AGENT} environment variable.

@item  http.followRedirects 
Whether git should follow HTTP redirects. If set to @samp{true}, git will
transparently follow any redirect issued by a server it encounters. If set
to @samp{false}, git will treat all redirects as errors. If set to @samp{initial}, git
will follow redirects only for the initial request to a remote, but not for
subsequent follow-up HTTP requests. Since git uses the redirected URL as the
base for the follow-up requests, this is generally sufficient. The default
is @samp{initial}.

@item  http.<url>.* 
Any of the http.* options above can be applied selectively to some URLs.
For a config key to match a URL, each element of the config key is compared
to that of the URL, in the following order:

@enumerate 

@item
Scheme (e.g., @samp{https} in @samp{https://example.com/}). This field must match
exactly between the config key and the URL.

@item
Host/domain name (e.g., @samp{example.com} in @samp{https://example.com/}).  This
field must match between the config key and the URL. It is possible to
specify a @samp{*} as part of the host name to match all subdomains at this
level. @samp{https://*.example.com/} for example would match
@samp{https://foo.example.com/}, but not @samp{https://foo.bar.example.com/}.

@item
Port number (e.g., @samp{8080} in @samp{http://example.com:8080/}).  This field must
match exactly between the config key and the URL.  Omitted port numbers are
automatically converted to the correct default for the scheme before
matching.

@item
Path (e.g., @samp{repo.git} in @samp{https://example.com/repo.git}). The path field of
the config key must match the path field of the URL either exactly or as a
prefix of slash-delimited path elements.  This means a config key with path
@samp{foo/} matches URL path @samp{foo/bar}.  A prefix can only match on a slash (@samp{/})
boundary.  Longer matches take precedence (so a config key with path
@samp{foo/bar} is a better match to URL path @samp{foo/bar} than a config key with
just path @samp{foo/}).

@item
User name (e.g., @samp{user} in @samp{https://user@@example.com/repo.git}). If the
config key has a user name it must match the user name in the URL
exactly. If the config key does not have a user name, that config key will
match a URL with any user name (including none), but at a lower precedence
than a config key with a user name.
@end enumerate

The list above is ordered by decreasing precedence; a URL that matches a
config key’s path is preferred to one that matches its user name. For
example, if the URL is @samp{https://user@@example.com/foo/bar} a config key match
of @samp{https://example.com/foo} will be preferred over a config key match of
@samp{https://user@@example.com}.

All URLs are normalized before attempting any matching (the password part,
if embedded in the URL, is always ignored for matching purposes) so that
equivalent URLs that are simply spelled differently will match properly.
Environment variable settings always override any matches.  The URLs that
are matched against are those given directly to Git commands.  This means
any URLs visited as a result of a redirection do not participate in
matching.

@item  i18n.commitEncoding 
Character encoding the commit messages are stored in; Git itself does not
care per se, but this information is necessary e.g. when importing commits
from emails or in the gitk graphical history browser (and possibly at other
places in the future or in other porcelains). See
e.g. git-mailinfo(1). Defaults to @emph{utf-8}.

@item  i18n.logOutputEncoding 
Character encoding the commit messages are converted to when running @emph{git
log} and friends.

@item  imap.folder 
The folder to drop the mails into, which is typically the Drafts folder. For
example: "INBOX.Drafts", "INBOX/Drafts" or "[Gmail]/Drafts". Required.

@item  imap.tunnel 
Command used to setup a tunnel to the IMAP server through which commands
will be piped instead of using a direct network connection to the
server. Required when imap.host is not set.

@item  imap.host 
A URL identifying the server. Use an @samp{imap://} prefix for non-secure
connections and an @samp{imaps://} prefix for secure connections.  Ignored when
imap.tunnel is set, but required otherwise.

@item  imap.user 
The username to use when logging in to the server.

@item  imap.pass 
The password to use when logging in to the server.

@item  imap.port 
An integer port number to connect to on the server.  Defaults to 143 for
imap:// hosts and 993 for imaps:// hosts.  Ignored when imap.tunnel is set.

@item  imap.sslverify 
A boolean to enable/disable verification of the server certificate used by
the SSL/TLS connection. Default is @samp{true}. Ignored when imap.tunnel is set.

@item  imap.preformattedHTML 
A boolean to enable/disable the use of html encoding when sending a patch.
An html encoded patch will be bracketed with <pre> and have a content type
of text/html.  Ironically, enabling this option causes Thunderbird to send
the patch as a plain/text, format=fixed email.  Default is @samp{false}.

@item  imap.authMethod 
Specify authenticate method for authentication with IMAP server.  If Git was
built with the NO_CURL option, or if your curl version is older than 7.34.0,
or if you’re running git-imap-send with the @samp{--no-curl} option, the only
supported method is @emph{CRAM-MD5}. If this is not set then @emph{git imap-send} uses
the basic IMAP plaintext LOGIN command.

@item  index.recordEndOfIndexEntries 
Specifies whether the index file should include an "End Of Index Entry"
section. This reduces index load time on multiprocessor machines but
produces a message "ignoring EOIE extension" when reading the index using
Git versions before 2.20. Defaults to @emph{true} if index.threads has been
explicitly enabled, @emph{false} otherwise.

@item  index.recordOffsetTable 
Specifies whether the index file should include an "Index Entry Offset
Table" section. This reduces index load time on multiprocessor machines but
produces a message "ignoring IEOT extension" when reading the index using
Git versions before 2.20.  Defaults to @emph{true} if index.threads has been
explicitly enabled, @emph{false} otherwise.

@item  index.sparse 
When enabled, write the index using sparse-directory entries. This has no
effect unless @samp{core.sparseCheckout} and @samp{core.sparseCheckoutCone} are both
enabled. Defaults to @emph{false}.

@item  index.threads 
Specifies the number of threads to spawn when loading the index.  This is
meant to reduce index load time on multiprocessor machines.  Specifying 0 or
@emph{true} will cause Git to auto-detect the number of CPU’s and set the number
of threads accordingly. Specifying 1 or @emph{false} will disable
multithreading. Defaults to @emph{true}.

@item  index.version 
Specify the version with which new index files should be initialized.  This
does not affect existing repositories.  If @samp{feature.manyFiles} is enabled,
then the default is 4.

@item  init.templateDir 
Specify the directory from which templates will be copied.  (See the
"TEMPLATE DIRECTORY" section of git-init(1).)

@item  init.defaultBranch 
Allows overriding the default branch name e.g. when initializing a new
repository.

@item  instaweb.browser 
Specify the program that will be used to browse your working repository in
gitweb. See git-instaweb(1).

@item  instaweb.httpd 
The HTTP daemon command-line to start gitweb on your working repository. See
git-instaweb(1).

@item  instaweb.local 
If true the web server started by git-instaweb(1) will be bound to
the local IP (127.0.0.1).

@item  instaweb.modulePath 
The default module path for git-instaweb(1) to use instead of
/usr/lib/apache2/modules.  Only used if httpd is Apache.

@item  instaweb.port 
The port number to bind the gitweb httpd to. See git-instaweb(1).

@item  interactive.singleKey 
In interactive commands, allow the user to provide one-letter input with a
single key (i.e., without hitting enter).  Currently this is used by the
@samp{--patch} mode of git-add(1), git-checkout(1),
git-restore(1), git-commit(1), git-reset(1), and
git-stash(1). Note that this setting is silently ignored if portable
keystroke input is not available; requires the Perl module Term::ReadKey.

@item  interactive.diffFilter 
When an interactive command (such as @samp{git add --patch}) shows a colorized
diff, git will pipe the diff through the shell command defined by this
configuration variable. The command may mark up the diff further for human
consumption, provided that it retains a one-to-one correspondence with the
lines in the original diff. Defaults to disabled (no filtering).

@item  log.abbrevCommit 
If true, makes git-log(1), git-show(1), and
git-whatchanged(1) assume @samp{--abbrev-commit}. You may override this
option with @samp{--no-abbrev-commit}.

@item  log.date 
Set the default date-time mode for the @emph{log} command.  Setting a value for
log.date is similar to using @emph{git log}'s @samp{--date} option.  See
git-log(1) for details.

@item  log.decorate 
Print out the ref names of any commits that are shown by the log command. If
@emph{short} is specified, the ref name prefixes @emph{refs/heads/}, @emph{refs/tags/} and
@emph{refs/remotes/} will not be printed. If @emph{full} is specified, the full ref
name (including prefix) will be printed.  If @emph{auto} is specified, then if
the output is going to a terminal, the ref names are shown as if @emph{short}
were given, otherwise no ref names are shown. This is the same as the
@samp{--decorate} option of the @samp{git log}.

@item  log.excludeDecoration 
Exclude the specified patterns from the log decorations. This is similar to
the @samp{--decorate-refs-exclude} command-line option, but the config option can
be overridden by the @samp{--decorate-refs} option.

@item  log.diffMerges 
Set default diff format to be used for merge commits. See @samp{--diff-merges} in
git-log(1) for details.  Defaults to @samp{separate}.

@item  log.follow 
If @samp{true}, @samp{git log} will act as if the @samp{--follow} option was used when a
single <path> is given.  This has the same limitations as @samp{--follow},
i.e. it cannot be used to follow multiple files and does not work well on
non-linear history.

@item  log.graphColors 
A list of colors, separated by commas, that can be used to draw history
lines in @samp{git log --graph}.

@item  log.showRoot 
If true, the initial commit will be shown as a big creation event.  This is
equivalent to a diff against an empty tree.  Tools like git-log(1)
or git-whatchanged(1), which normally hide the root commit will now
show it. True by default.

@item  log.showSignature 
If true, makes git-log(1), git-show(1), and
git-whatchanged(1) assume @samp{--show-signature}.

@item  log.mailmap 
If true, makes git-log(1), git-show(1), and
git-whatchanged(1) assume @samp{--use-mailmap}, otherwise assume
@samp{--no-use-mailmap}. True by default.

@item  lsrefs.unborn 
May be "advertise" (the default), "allow", or "ignore". If "advertise", the
server will respond to the client sending "unborn" (as described in
protocol-v2.txt) and will advertise support for this feature during the
protocol v2 capability advertisement. "allow" is the same as "advertise"
except that the server will not advertise support for this feature; this is
useful for load-balanced servers that cannot be updated atomically (for
example), since the administrator could configure "allow", then after a
delay, configure "advertise".

@item  mailinfo.scissors 
If true, makes git-mailinfo(1) (and therefore git-am(1)) act
by default as if the --scissors option was provided on the
command-line. When active, this features removes everything from the message
body before a scissors line (i.e. consisting mainly of ">8", "8<" and "-").

@item  mailmap.file 
拡張メールマップファイルの場所。リポジトリのルートにあるデフォルトのメールマップが最初にロードされ、次にこの変数が指すメールマップファイルがロードされます。メールマップファイルの場所は、リポジトリサブディレクトリ内、またはリポジトリの外部のどこかにあります。
git-shortlog(1) と git-blame(1) を参照してください。

@item  mailmap.blob 
@samp{mailmap.file} と同様ですが、値をリポジトリ内のブロブへの参照と見なします。 @samp{mailmap.file} と
@samp{mailmap.blob} の両方が指定されている場合、両方が解析され、 @samp{mailmap.file}
からのエントリが優先されます。この変数は、ベアリポジトリではデフォルトで @samp{HEAD:.mailmap}
になります。非ベアリポジトリでは、デフォルトで空になります。

@item  maintenance.auto 
This boolean config option controls whether some commands run @samp{git
maintenance run --auto} after doing their normal work. Defaults to true.

@item  maintenance.strategy 
This string config option provides a way to specify one of a few recommended
schedules for background maintenance. This only affects which tasks are run
during @samp{git maintenance run --schedule=X} commands, provided no
@samp{--task=<task>} arguments are provided.  Further, if a
@samp{maintenance.<task>.schedule} config value is set, then that value is used
instead of the one provided by @samp{maintenance.strategy}. The possible strategy
strings are:

@itemize 

@item
@samp{none}: This default setting implies no task are run at any schedule.

@item
@samp{incremental}: This setting optimizes for performing small maintenance
activities that do not delete any data. This does not schedule the @samp{gc}
task, but runs the @samp{prefetch} and @samp{commit-graph} tasks hourly, the
@samp{loose-objects} and @samp{incremental-repack} tasks daily, and the @samp{pack-refs}
task weekly.
@end itemize

@item  maintenance.<task>.enabled 
This boolean config option controls whether the maintenance task with name
@samp{<task>} is run when no @samp{--task} option is specified to @samp{git maintenance
run}. These config values are ignored if a @samp{--task} option exists. By
default, only @samp{maintenance.gc.enabled} is true.

@item  maintenance.<task>.schedule 
This config option controls whether or not the given @samp{<task>} runs during a
@samp{git maintenance run --schedule=<frequency>} command. The value must be one
of "hourly", "daily", or "weekly".

@item  maintenance.commit-graph.auto 
This integer config option controls how often the @samp{commit-graph} task should
be run as part of @samp{git maintenance run --auto}. If zero, then the
@samp{commit-graph} task will not run with the @samp{--auto} option. A negative value
will force the task to run every time. Otherwise, a positive value implies
the command should run when the number of reachable commits that are not in
the commit-graph file is at least the value of
@samp{maintenance.commit-graph.auto}. The default value is 100.

@item  maintenance.loose-objects.auto 
This integer config option controls how often the @samp{loose-objects} task
should be run as part of @samp{git maintenance run --auto}. If zero, then the
@samp{loose-objects} task will not run with the @samp{--auto} option. A negative value
will force the task to run every time. Otherwise, a positive value implies
the command should run when the number of loose objects is at least the
value of @samp{maintenance.loose-objects.auto}.  The default value is 100.

@item  maintenance.incremental-repack.auto 
This integer config option controls how often the @samp{incremental-repack} task
should be run as part of @samp{git maintenance run --auto}. If zero, then the
@samp{incremental-repack} task will not run with the @samp{--auto} option. A negative
value will force the task to run every time.  Otherwise, a positive value
implies the command should run when the number of pack-files not in the
multi-pack-index is at least the value of
@samp{maintenance.incremental-repack.auto}. The default value is 10.

@item  man.viewer 
Specify the programs that may be used to display help in the @emph{man}
format. See git-help(1).

@item  man.<tool>.cmd 
Specify the command to invoke the specified man viewer. The specified
command is evaluated in shell with the man page passed as argument. (See
git-help(1).)

@item  man.<tool>.path 
Override the path for the given tool that may be used to display help in the
@emph{man} format. See git-help(1).

@item  merge.conflictStyle 
Specify the style in which conflicted hunks are written out to working tree
files upon merge.  The default is "merge", which shows a @samp{<<<<<<<} conflict
marker, changes made by one side, a @samp{=======} marker, changes made by the
other side, and then a @samp{>>>>>>>} marker.  An alternate style, "diff3", adds
a @samp{|||||||} marker and the original text before the @samp{=======} marker.

@item  merge.defaultToUpstream 
If merge is called without any commit argument, merge the upstream branches
configured for the current branch by using their last observed values stored
in their remote-tracking branches.  The values of the @samp{branch.<current
branch>.merge} that name the branches at the remote named by
@samp{branch.<current branch>.remote} are consulted, and then they are mapped via
@samp{remote.<remote>.fetch} to their corresponding remote-tracking branches, and
the tips of these tracking branches are merged. Defaults to true.

@item  merge.ff 
By default, Git does not create an extra merge commit when merging a commit
that is a descendant of the current commit. Instead, the tip of the current
branch is fast-forwarded. When set to @samp{false}, this variable tells Git to
create an extra merge commit in such a case (equivalent to giving the
@samp{--no-ff} option from the command line). When set to @samp{only}, only such
fast-forward merges are allowed (equivalent to giving the @samp{--ff-only} option
from the command line).

@item  merge.verifySignatures 
If true, this is equivalent to the --verify-signatures command line
option. See git-merge(1) for details.

@item  merge.branchdesc 
ブランチ名に加えて、それらに関連付けられたブランチの説明テキストをログメッセージに入力します。デフォルトはfalseです。

@item  merge.log 
ブランチ名に加えて、マージされる実際のコミットからの最大「指定の数」の親コミットの1行説明をログメッセージに入力します。デフォルトはfalseで、trueは20の同義語です。

@item  merge.suppressDest 
統合ブランチの名前に一致するグロブをこの複数値の構成変数(multi-valued configuration
variable)に追加することにより、これらの統合ブランチへのマージに対して計算されるデフォルトのマージメッセージは、タイトルから「into
<branch name>」を省略します。

空の値を持つ要素を使用して、以前の構成エントリから蓄積されたグロブのリストをクリアできます。 @samp{merge.suppressDest}
変数が定義されていない場合、下位互換性のためにデフォルト値の @samp{master} が使用されます。

@item  merge.renameLimit 
The number of files to consider in the exhaustive portion of rename
detection during a merge.  If not specified, defaults to the value of
diff.renameLimit.  If neither merge.renameLimit nor diff.renameLimit are
specified, currently defaults to 7000.  This setting has no effect if rename
detection is turned off.

@item  merge.renames 
Whether Git detects renames.  If set to "false", rename detection is
disabled. If set to "true", basic rename detection is enabled.  Defaults to
the value of diff.renames.

@item  merge.directoryRenames 
Whether Git detects directory renames, affecting what happens at merge time
to new files added to a directory on one side of history when that directory
was renamed on the other side of history.  If merge.directoryRenames is set
to "false", directory rename detection is disabled, meaning that such new
files will be left behind in the old directory.  If set to "true", directory
rename detection is enabled, meaning that such new files will be moved into
the new directory.  If set to "conflict", a conflict will be reported for
such paths.  If merge.renames is false, merge.directoryRenames is ignored
and treated as false.  Defaults to "conflict".

@item  merge.renormalize 
Tell Git that canonical representation of files in the repository has
changed over time (e.g. earlier commits record text files with CRLF line
endings, but recent ones use LF line endings).  In such a repository, Git
can convert the data recorded in commits to a canonical form before
performing a merge to reduce unnecessary conflicts.  For more information,
see section "Merging branches with differing checkin/checkout attributes" in
gitattributes(5).

@item  merge.stat 
Whether to print the diffstat between ORIG_HEAD and the merge result at the
end of the merge.  True by default.

@item  merge.autoStash 
When set to true, automatically create a temporary stash entry before the
operation begins, and apply it after the operation ends.  This means that
you can run merge on a dirty worktree.  However, use with care: the final
stash application after a successful merge might result in non-trivial
conflicts.  This option can be overridden by the @samp{--no-autostash} and
@samp{--autostash} options of git-merge(1).  Defaults to false.

@item  merge.tool 
Controls which merge tool is used by git-mergetool(1).  The list
below shows the valid built-in values.  Any other value is treated as a
custom merge tool and requires that a corresponding mergetool.<tool>.cmd
variable is defined.

@item  merge.guitool 
Controls which merge tool is used by git-mergetool(1) when the
-g/--gui flag is specified. The list below shows the valid built-in values.
Any other value is treated as a custom merge tool and requires that a
corresponding mergetool.<guitool>.cmd variable is defined.

@itemize 

@item
araxis

@item
bc

@item
bc3

@item
bc4

@item
codecompare

@item
deltawalker

@item
diffmerge

@item
diffuse

@item
ecmerge

@item
emerge

@item
examdiff

@item
guiffy

@item
gvimdiff

@item
gvimdiff1

@item
gvimdiff2

@item
gvimdiff3

@item
kdiff3

@item
meld

@item
nvimdiff

@item
nvimdiff1

@item
nvimdiff2

@item
nvimdiff3

@item
opendiff

@item
p4merge

@item
smerge

@item
tkdiff

@item
tortoisemerge

@item
vimdiff

@item
vimdiff1

@item
vimdiff2

@item
vimdiff3

@item
winmerge

@item
xxdiff
@end itemize

@item  merge.verbosity 
Controls the amount of output shown by the recursive merge strategy.  Level
0 outputs nothing except a final error message if conflicts were
detected. Level 1 outputs only conflicts, 2 outputs conflicts and file
changes.  Level 5 and above outputs debugging information.  The default is
level 2.  Can be overridden by the @samp{GIT_MERGE_VERBOSITY} environment
variable.

@item  merge.<driver>.name 
Defines a human-readable name for a custom low-level merge driver.  See
gitattributes(5) for details.

@item  merge.<driver>.driver 
Defines the command that implements a custom low-level merge driver.  See
gitattributes(5) for details.

@item  merge.<driver>.recursive 
Names a low-level merge driver to be used when performing an internal merge
between common ancestors.  See gitattributes(5) for details.

@item  mergetool.<tool>.path 
Override the path for the given tool.  This is useful in case your tool is
not in the PATH.

@item  mergetool.<tool>.cmd 
Specify the command to invoke the specified merge tool.  The specified
command is evaluated in shell with the following variables available: @emph{BASE}
is the name of a temporary file containing the common base of the files to
be merged, if available; @emph{LOCAL} is the name of a temporary file containing
the contents of the file on the current branch; @emph{REMOTE} is the name of a
temporary file containing the contents of the file from the branch being
merged; @emph{MERGED} contains the name of the file to which the merge tool
should write the results of a successful merge.

@item  mergetool.<tool>.hideResolved 
Allows the user to override the global @samp{mergetool.hideResolved} value for a
specific tool. See @samp{mergetool.hideResolved} for the full description.

@item  mergetool.<tool>.trustExitCode 
For a custom merge command, specify whether the exit code of the merge
command can be used to determine whether the merge was successful.  If this
is not set to true then the merge target file timestamp is checked and the
merge assumed to have been successful if the file has been updated,
otherwise the user is prompted to indicate the success of the merge.

@item  mergetool.meld.hasOutput 
Older versions of @samp{meld} do not support the @samp{--output} option.  Git will
attempt to detect whether @samp{meld} supports @samp{--output} by inspecting the
output of @samp{meld --help}.  Configuring @samp{mergetool.meld.hasOutput} will make
Git skip these checks and use the configured value instead.  Setting
@samp{mergetool.meld.hasOutput} to @samp{true} tells Git to unconditionally use the
@samp{--output} option, and @samp{false} avoids using @samp{--output}.

@item  mergetool.meld.useAutoMerge 
When the @samp{--auto-merge} is given, meld will merge all non-conflicting parts
automatically, highlight the conflicting parts and wait for user decision.
Setting @samp{mergetool.meld.useAutoMerge} to @samp{true} tells Git to unconditionally
use the @samp{--auto-merge} option with @samp{meld}.  Setting this value to @samp{auto}
makes git detect whether @samp{--auto-merge} is supported and will only use
@samp{--auto-merge} when available.  A value of @samp{false} avoids using
@samp{--auto-merge} altogether, and is the default value.

@item  mergetool.hideResolved 
During a merge Git will automatically resolve as many conflicts as possible
and write the @emph{MERGED} file containing conflict markers around any conflicts
that it cannot resolve; @emph{LOCAL} and @emph{REMOTE} normally represent the versions
of the file from before Git’s conflict resolution. This flag causes @emph{LOCAL}
and @emph{REMOTE} to be overwriten so that only the unresolved conflicts are
presented to the merge tool. Can be configured per-tool via the
@samp{mergetool.<tool>.hideResolved} configuration variable. Defaults to @samp{false}.

@item  mergetool.keepBackup 
After performing a merge, the original file with conflict markers can be
saved as a file with a @samp{.orig} extension.  If this variable is set to
@samp{false} then this file is not preserved.  Defaults to @samp{true} (i.e. keep the
backup files).

@item  mergetool.keepTemporaries 
When invoking a custom merge tool, Git uses a set of temporary files to pass
to the tool. If the tool returns an error and this variable is set to
@samp{true}, then these temporary files will be preserved, otherwise they will be
removed after the tool has exited. Defaults to @samp{false}.

@item  mergetool.writeToTemp 
Git writes temporary @emph{BASE}, @emph{LOCAL}, and @emph{REMOTE} versions of conflicting
files in the worktree by default.  Git will attempt to use a temporary
directory for these files when set @samp{true}.  Defaults to @samp{false}.

@item  mergetool.prompt 
Prompt before each invocation of the merge resolution program.

@item  notes.mergeStrategy 
Which merge strategy to choose by default when resolving notes conflicts.
Must be one of @samp{manual}, @samp{ours}, @samp{theirs}, @samp{union}, or @samp{cat_sort_uniq}.
Defaults to @samp{manual}.  See "NOTES MERGE STRATEGIES" section of
git-notes(1) for more information on each strategy.

@item  notes.<name>.mergeStrategy 
Which merge strategy to choose when doing a notes merge into
refs/notes/<name>.  This overrides the more general "notes.mergeStrategy".
See the "NOTES MERGE STRATEGIES" section in git-notes(1) for more
information on the available strategies.

@item  notes.displayRef 
The (fully qualified) refname from which to show notes when showing commit
messages.  The value of this variable can be set to a glob, in which case
notes from all matching refs will be shown.  You may also specify this
configuration variable several times.  A warning will be issued for refs
that do not exist, but a glob that does not match any refs is silently
ignored.

This setting can be overridden with the @samp{GIT_NOTES_DISPLAY_REF} environment
variable, which must be a colon separated list of refs or globs.

The effective value of "core.notesRef" (possibly overridden by
GIT_NOTES_REF) is also implicitly added to the list of refs to be displayed.

@item  notes.rewrite.<command> 
When rewriting commits with <command> (currently @samp{amend} or @samp{rebase}) and
this variable is set to @samp{true}, Git automatically copies your notes from the
original to the rewritten commit.  Defaults to @samp{true}, but see
"notes.rewriteRef" below.

@item  notes.rewriteMode 
When copying notes during a rewrite (see the "notes.rewrite.<command>"
option), determines what to do if the target commit already has a note.
Must be one of @samp{overwrite}, @samp{concatenate}, @samp{cat_sort_uniq}, or @samp{ignore}.
Defaults to @samp{concatenate}.

This setting can be overridden with the @samp{GIT_NOTES_REWRITE_MODE} environment
variable.

@item  notes.rewriteRef 
When copying notes during a rewrite, specifies the (fully qualified) ref
whose notes should be copied.  The ref may be a glob, in which case notes in
all matching refs will be copied.  You may also specify this configuration
several times.

Does not have a default value; you must configure this variable to enable
note rewriting.  Set it to @samp{refs/notes/commits} to enable rewriting for the
default commit notes.

This setting can be overridden with the @samp{GIT_NOTES_REWRITE_REF} environment
variable, which must be a colon separated list of refs or globs.

@item  pack.window 
The size of the window used by git-pack-objects(1) when no window
size is given on the command line. Defaults to 10.

@item  pack.depth 
The maximum delta depth used by git-pack-objects(1) when no maximum
depth is given on the command line. Defaults to 50.  Maximum value is 4095.

@item  pack.windowMemory 
The maximum size of memory that is consumed by each thread in
git-pack-objects(1) for pack window memory when no limit is given on
the command line.  The value can be suffixed with "k", "m", or "g".  When
left unconfigured (or set explicitly to 0), there will be no limit.

@item  pack.compression 
An integer -1..9, indicating the compression level for objects in a pack
file. -1 is the zlib default. 0 means no compression, and 1..9 are various
speed/size tradeoffs, 9 being slowest.  If not set, defaults to
core.compression.  If that is not set, defaults to -1, the zlib default,
which is "a default compromise between speed and compression (currently
equivalent to level 6)."

Note that changing the compression level will not automatically recompress
all existing objects. You can force recompression by passing the -F option
to git-repack(1).

@item  pack.allowPackReuse 
When true, and when reachability bitmaps are enabled, pack-objects will try
to send parts of the bitmapped packfile verbatim. This can reduce memory and
CPU usage to serve fetches, but might result in sending a slightly larger
pack. Defaults to true.

@item  pack.island 
An extended regular expression configuring a set of delta islands. See
"DELTA ISLANDS" in git-pack-objects(1) for details.

@item  pack.islandCore 
Specify an island name which gets to have its objects be packed first. This
creates a kind of pseudo-pack at the front of one pack, so that the objects
from the specified island are hopefully faster to copy into any pack that
should be served to a user requesting these objects. In practice this means
that the island specified should likely correspond to what is the most
commonly cloned in the repo. See also "DELTA ISLANDS" in
git-pack-objects(1).

@item  pack.deltaCacheSize 
The maximum memory in bytes used for caching deltas in
git-pack-objects(1) before writing them out to a pack.  This cache
is used to speed up the writing object phase by not having to recompute the
final delta result once the best match for all objects is found.  Repacking
large repositories on machines which are tight with memory might be badly
impacted by this though, especially if this cache pushes the system into
swapping.  A value of 0 means no limit. The smallest size of 1 byte may be
used to virtually disable this cache. Defaults to 256 MiB.

@item  pack.deltaCacheLimit 
The maximum size of a delta, that is cached in
git-pack-objects(1). This cache is used to speed up the writing
object phase by not having to recompute the final delta result once the best
match for all objects is found.  Defaults to 1000. Maximum value is 65535.

@item  pack.threads 
Specifies the number of threads to spawn when searching for best delta
matches.  This requires that git-pack-objects(1) be compiled with
pthreads otherwise this option is ignored with a warning. This is meant to
reduce packing time on multiprocessor machines. The required amount of
memory for the delta search window is however multiplied by the number of
threads.  Specifying 0 will cause Git to auto-detect the number of CPU’s and
set the number of threads accordingly.

@item  pack.indexVersion 
Specify the default pack index version.  Valid values are 1 for legacy pack
index used by Git versions prior to 1.5.2, and 2 for the new pack index with
capabilities for packs larger than 4 GB as well as proper protection against
the repacking of corrupted packs.  Version 2 is the default.  Note that
version 2 is enforced and this config option ignored whenever the
corresponding pack is larger than 2 GB.

If you have an old Git that does not understand the version 2 @samp{*.idx} file,
cloning or fetching over a non native protocol (e.g. "http")  that will copy
both @samp{*.pack} file and corresponding @samp{*.idx} file from the other side may
give you a repository that cannot be accessed with your older version of
Git. If the @samp{*.pack} file is smaller than 2 GB, however, you can use
git-index-pack(1) on the *.pack file to regenerate the @samp{*.idx} file.

@item  pack.packSizeLimit 
The maximum size of a pack.  This setting only affects packing to a file
when repacking, i.e. the git:// protocol is unaffected.  It can be
overridden by the @samp{--max-pack-size} option of git-repack(1).
Reaching this limit results in the creation of multiple packfiles.

Note that this option is rarely useful, and may result in a larger total
on-disk size (because Git will not store deltas between packs), as well as
worse runtime performance (object lookup within multiple packs is slower
than a single pack, and optimizations like reachability bitmaps cannot cope
with multiple packs).

If you need to actively run Git using smaller packfiles (e.g., because your
filesystem does not support large files), this option may help. But if your
goal is to transmit a packfile over a medium that supports limited sizes
(e.g., removable media that cannot store the whole repository), you are
likely better off creating a single large packfile and splitting it using a
generic multi-volume archive tool (e.g., Unix @samp{split}).

The minimum size allowed is limited to 1 MiB. The default is unlimited.
Common unit suffixes of @emph{k}, @emph{m}, or @emph{g} are supported.

@item  pack.useBitmaps 
When true, git will use pack bitmaps (if available) when packing to stdout
(e.g., during the server side of a fetch). Defaults to true. You should not
generally need to turn this off unless you are debugging pack bitmaps.

@item  pack.useSparse 
When true, git will default to using the @emph{--sparse} option in @emph{git
pack-objects} when the @emph{--revs} option is present. This algorithm only walks
trees that appear in paths that introduce new objects. This can have
significant performance benefits when computing a pack to send a small
change. However, it is possible that extra objects are added to the
pack-file if the included commits contain certain types of direct
renames. Default is @samp{true}.

@item  pack.preferBitmapTips 
When selecting which commits will receive bitmaps, prefer a commit at the
tip of any reference that is a suffix of any value of this configuration
over any other commits in the "selection window".

Note that setting this configuration to @samp{refs/foo} does not mean that the
commits at the tips of @samp{refs/foo/bar} and @samp{refs/foo/baz} will necessarily be
selected. This is because commits are selected for bitmaps from within a
series of windows of variable length.

If a commit at the tip of any reference which is a suffix of any value of
this configuration is seen in a window, it is immediately given preference
over any other commit in that window.

@item  pack.writeBitmaps (deprecated) 
This is a deprecated synonym for @samp{repack.writeBitmaps}.

@item  pack.writeBitmapHashCache 
When true, git will include a "hash cache" section in the bitmap index (if
one is written). This cache can be used to feed git’s delta heuristics,
potentially leading to better deltas between bitmapped and non-bitmapped
objects (e.g., when serving a fetch between an older, bitmapped pack and
objects that have been pushed since the last gc). The downside is that it
consumes 4 bytes per object of disk space. Defaults to true.

@item  pack.writeReverseIndex 
When true, git will write a corresponding .rev file (see:
@uref{../technical/pack-format.html,Documentation/technical/pack-format.txt})
for each new packfile that it writes in all places except for
git-fast-import(1) and in the bulk checkin mechanism.  Defaults to
false.

@item  pager.<cmd> 
If the value is boolean, turns on or off pagination of the output of a
particular Git subcommand when writing to a tty.  Otherwise, turns on
pagination for the subcommand using the pager specified by the value of
@samp{pager.<cmd>}.  If @samp{--paginate} or @samp{--no-pager} is specified on the command
line, it takes precedence over this option.  To disable pagination for all
commands, set @samp{core.pager} or @samp{GIT_PAGER} to @samp{cat}.

@item  pretty.<name> 
Alias for a --pretty= format string, as specified in git-log(1). Any
aliases defined here can be used just as the built-in pretty formats
could. For example, running @samp{git config pretty.changelog "format:* %H %s"}
would cause the invocation @samp{git log --pretty=changelog} to be equivalent to
running @samp{git log "--pretty=format:* %H %s"}.  Note that an alias with the
same name as a built-in format will be silently ignored.

@item  protocol.allow 
If set, provide a user defined default policy for all protocols which don’t
explicitly have a policy (@samp{protocol.<name>.allow}).  By default, if unset,
known-safe protocols (http, https, git, ssh, file) have a default policy of
@samp{always}, known-dangerous protocols (ext) have a default policy of @samp{never},
and all other protocols have a default policy of @samp{user}.  Supported
policies:

@itemize 

@item
@samp{always} - protocol is always able to be used.

@item
@samp{never} - protocol is never able to be used.

@item
@samp{user} - protocol is only able to be used when @samp{GIT_PROTOCOL_FROM_USER} is
either unset or has a value of 1.  This policy should be used when you want
a protocol to be directly usable by the user but don’t want it used by
commands which execute clone/fetch/push commands without user input,
e.g. recursive submodule initialization.
@end itemize

@item  protocol.<name>.allow 
Set a policy to be used by protocol @samp{<name>} with clone/fetch/push
commands. See @samp{protocol.allow} above for the available policies.

The protocol names currently used by git are:

@itemize 

@item
@samp{file}: any local file-based path (including @samp{file://} URLs, or local paths)

@item
@samp{git}: the anonymous git protocol over a direct TCP connection (or proxy, if
configured)

@item
@samp{ssh}: git over ssh (including @samp{host:path} syntax, @samp{ssh://}, etc).

@item
@samp{http}: git over http, both "smart http" and "dumb http".  Note that this
does @emph{not} include @samp{https}; if you want to configure both, you must do so
individually.

@item
any external helpers are named by their protocol (e.g., use @samp{hg} to allow
the @samp{git-remote-hg} helper)
@end itemize

@item  protocol.version 
If set, clients will attempt to communicate with a server using the
specified protocol version.  If the server does not support it,
communication falls back to version 0.  If unset, the default is @samp{2}.
Supported versions:

@itemize 

@item
@samp{0} - the original wire protocol.

@item
@samp{1} - the original wire protocol with the addition of a version string in
the initial response from the server.

@item
@samp{2} - @uref{technical/protocol-v2.html,wire protocol version 2}.
@end itemize

@item  pull.ff 
By default, Git does not create an extra merge commit when merging a commit
that is a descendant of the current commit. Instead, the tip of the current
branch is fast-forwarded. When set to @samp{false}, this variable tells Git to
create an extra merge commit in such a case (equivalent to giving the
@samp{--no-ff} option from the command line). When set to @samp{only}, only such
fast-forward merges are allowed (equivalent to giving the @samp{--ff-only} option
from the command line). This setting overrides @samp{merge.ff} when pulling.

@item  pull.rebase 
When true, rebase branches on top of the fetched branch, instead of merging
the default branch from the default remote when "git pull" is run. See
"branch.<name>.rebase" for setting this on a per-branch basis.

When @samp{merges} (or just @emph{m}), pass the @samp{--rebase-merges} option to @emph{git
rebase} so that the local merge commits are included in the rebase (see
git-rebase(1) for details).

When @samp{preserve} (or just @emph{p}, deprecated in favor of @samp{merges}), also pass
@samp{--preserve-merges} along to @emph{git rebase} so that locally committed merge
commits will not be flattened by running @emph{git pull}.

When the value is @samp{interactive} (or just @emph{i}), the rebase is run in
interactive mode.

@strong{NOTE}: this is a possibly dangerous operation; do @strong{not} use
it unless you understand the implications (see git-rebase(1)
for details).

@item  pull.octopus 
The default merge strategy to use when pulling multiple branches at once.

@item  pull.twohead 
The default merge strategy to use when pulling a single branch.

@item  push.default 
Defines the action @samp{git push} should take if no refspec is given (whether
from the command-line, config, or elsewhere).  Different values are
well-suited for specific workflows; for instance, in a purely central
workflow (i.e. the fetch source is equal to the push destination),
@samp{upstream} is probably what you want.  Possible values are:

@itemize 

@item
@samp{nothing} - do not push anything (error out) unless a refspec is given. This
is primarily meant for people who want to avoid mistakes by always being
explicit.

@item
@samp{current} - push the current branch to update a branch with the same name on
the receiving end.  Works in both central and non-central workflows.

@item
@samp{upstream} - push the current branch back to the branch whose changes are
usually integrated into the current branch (which is called @samp{@@@{upstream@}}).
This mode only makes sense if you are pushing to the same repository you
would normally pull from (i.e. central workflow).

@item
@samp{tracking} - This is a deprecated synonym for @samp{upstream}.

@item
@samp{simple} - pushes the current branch with the same name on the remote.

If you are working on a centralized workflow (pushing to the same repository
you pull from, which is typically @samp{origin}), then you need to configure an
upstream branch with the same name.

This mode is the default since Git 2.0, and is the safest option suited for
beginners.

@item
@samp{matching} - push all branches having the same name on both ends.  This
makes the repository you are pushing to remember the set of branches that
will be pushed out (e.g. if you always push @emph{maint} and @emph{master} there and
no other branches, the repository you push to will have these two branches,
and your local @emph{maint} and @emph{master} will be pushed there).

To use this mode effectively, you have to make sure @emph{all} the branches you
would push out are ready to be pushed out before running @emph{git push}, as the
whole point of this mode is to allow you to push all of the branches in one
go.  If you usually finish work on only one branch and push out the result,
while other branches are unfinished, this mode is not for you.  Also this
mode is not suitable for pushing into a shared central repository, as other
people may add new branches there, or update the tip of existing branches
outside your control.

This used to be the default, but not since Git 2.0 (@samp{simple} is the new
default).
@end itemize

@item  push.followTags 
If set to true enable @samp{--follow-tags} option by default.  You may override
this configuration at time of push by specifying @samp{--no-follow-tags}.

@item  push.gpgSign 
May be set to a boolean value, or the string @emph{if-asked}. A true value causes
all pushes to be GPG signed, as if @samp{--signed} is passed to
git-push(1). The string @emph{if-asked} causes pushes to be signed if the
server supports it, as if @samp{--signed=if-asked} is passed to @emph{git push}. A
false value may override a value from a lower-priority config file. An
explicit command-line flag always overrides this config option.

@item  push.pushOption 
When no @samp{--push-option=<option>} argument is given from the command line,
@samp{git push} behaves as if each <value> of this variable is given as
@samp{--push-option=<value>}.

This is a multi-valued variable, and an empty value can be used in a higher
priority configuration file (e.g. @samp{.git/config} in a repository) to clear
the values inherited from a lower priority configuration files
(e.g. @samp{$HOME/.gitconfig}).

@example
Example:

/etc/gitconfig
  push.pushoption = a
  push.pushoption = b

~/.gitconfig
  push.pushoption = c

repo/.git/config
  push.pushoption =
  push.pushoption = b

This will result in only b (a and c are cleared).
@end example


@item  push.recurseSubmodules 
Make sure all submodule commits used by the revisions to be pushed are
available on a remote-tracking branch. If the value is @emph{check} then Git will
verify that all submodule commits that changed in the revisions to be pushed
are available on at least one remote of the submodule. If any commits are
missing, the push will be aborted and exit with non-zero status. If the
value is @emph{on-demand} then all submodules that changed in the revisions to be
pushed will be pushed. If on-demand was not able to push all necessary
revisions it will also be aborted and exit with non-zero status. If the
value is @emph{no} then default behavior of ignoring submodules when pushing is
retained. You may override this configuration at time of push by specifying
@emph{--recurse-submodules=check|on-demand|no}.  If not set, @emph{no} is used by
default, unless @emph{submodule.recurse} is set (in which case a @emph{true} value
means @emph{on-demand}).

@item  push.useForceIfIncludes 
If set to "true", it is equivalent to specifying @samp{--force-if-includes} as an
option to git-push(1) in the command line. Adding
@samp{--no-force-if-includes} at the time of push overrides this configuration
setting.

@item  push.negotiate 
If set to "true", attempt to reduce the size of the packfile sent by rounds
of negotiation in which the client and the server attempt to find commits in
common. If "false", Git will rely solely on the server’s ref advertisement
to find commits in common.

@item  rebase.backend 
Default backend to use for rebasing.  Possible choices are @emph{apply} or
@emph{merge}.  In the future, if the merge backend gains all remaining
capabilities of the apply backend, this setting may become unused.

@item  rebase.stat 
Whether to show a diffstat of what changed upstream since the last
rebase. False by default.

@item  rebase.autoSquash 
If set to true enable @samp{--autosquash} option by default.

@item  rebase.autoStash 
When set to true, automatically create a temporary stash entry before the
operation begins, and apply it after the operation ends.  This means that
you can run rebase on a dirty worktree.  However, use with care: the final
stash application after a successful rebase might result in non-trivial
conflicts.  This option can be overridden by the @samp{--no-autostash} and
@samp{--autostash} options of git-rebase(1).  Defaults to false.

@item  rebase.missingCommitsCheck 
If set to "warn", git rebase -i will print a warning if some commits are
removed (e.g. a line was deleted), however the rebase will still proceed. If
set to "error", it will print the previous warning and stop the rebase, @emph{git
rebase --edit-todo} can then be used to correct the error. If set to
"ignore", no checking is done.  To drop a commit without warning or error,
use the @samp{drop} command in the todo list.  Defaults to "ignore".

@item  rebase.instructionFormat 
A format string, as specified in git-log(1), to be used for the todo
list during an interactive rebase.  The format will automatically have the
long commit hash prepended to the format.

@item  rebase.abbreviateCommands 
If set to true, @samp{git rebase} will use abbreviated command names in the todo
list resulting in something like this:

@example
        p deadbee The oneline of the commit
        p fa1afe1 The oneline of the next commit
        ...
@end example


instead of:

@example
        pick deadbee The oneline of the commit
        pick fa1afe1 The oneline of the next commit
        ...
@end example


Defaults to false.

@item  rebase.rescheduleFailedExec 
Automatically reschedule @samp{exec} commands that failed. This only makes sense
in interactive mode (or when an @samp{--exec} option was provided).  This is the
same as specifying the @samp{--reschedule-failed-exec} option.

@item  rebase.forkPoint 
If set to false set @samp{--no-fork-point} option by default.

@item  receive.advertiseAtomic 
By default, git-receive-pack will advertise the atomic push capability to
its clients. If you don’t want to advertise this capability, set this
variable to false.

@item  receive.advertisePushOptions 
When set to true, git-receive-pack will advertise the push options
capability to its clients. False by default.

@item  receive.autogc 
By default, git-receive-pack will run "git-gc --auto" after receiving data
from git-push and updating refs.  You can stop it by setting this variable
to false.

@item  receive.certNonceSeed 
By setting this variable to a string, @samp{git receive-pack} will accept a @samp{git
push --signed} and verifies it by using a "nonce" protected by HMAC using
this string as a secret key.

@item  receive.certNonceSlop 
When a @samp{git push --signed} sent a push certificate with a "nonce" that was
issued by a receive-pack serving the same repository within this many
seconds, export the "nonce" found in the certificate to
@samp{GIT_PUSH_CERT_NONCE} to the hooks (instead of what the receive-pack asked
the sending side to include).  This may allow writing checks in
@samp{pre-receive} and @samp{post-receive} a bit easier.  Instead of checking
@samp{GIT_PUSH_CERT_NONCE_SLOP} environment variable that records by how many
seconds the nonce is stale to decide if they want to accept the certificate,
they only can check @samp{GIT_PUSH_CERT_NONCE_STATUS} is @samp{OK}.

@item  receive.fsckObjects 
If it is set to true, git-receive-pack will check all received objects. See
@samp{transfer.fsckObjects} for what’s checked.  Defaults to false. If not set,
the value of @samp{transfer.fsckObjects} is used instead.

@item  receive.fsck.<msg-id> 
Acts like @samp{fsck.<msg-id>}, but is used by git-receive-pack(1)
instead of git-fsck(1). See the @samp{fsck.<msg-id>} documentation for
details.

@item  receive.fsck.skipList 
Acts like @samp{fsck.skipList}, but is used by git-receive-pack(1)
instead of git-fsck(1). See the @samp{fsck.skipList} documentation for
details.

@item  receive.keepAlive 
After receiving the pack from the client, @samp{receive-pack} may produce no
output (if @samp{--quiet} was specified) while processing the pack, causing some
networks to drop the TCP connection.  With this option set, if
@samp{receive-pack} does not transmit any data in this phase for
@samp{receive.keepAlive} seconds, it will send a short keepalive packet.  The
default is 5 seconds; set to 0 to disable keepalives entirely.

@item  receive.unpackLimit 
If the number of objects received in a push is below this limit then the
objects will be unpacked into loose object files. However if the number of
received objects equals or exceeds this limit then the received pack will be
stored as a pack, after adding any missing delta bases.  Storing the pack
from a push can make the push operation complete faster, especially on slow
filesystems.  If not set, the value of @samp{transfer.unpackLimit} is used
instead.

@item  receive.maxInputSize 
If the size of the incoming pack stream is larger than this limit, then
git-receive-pack will error out, instead of accepting the pack file. If not
set or set to 0, then the size is unlimited.

@item  receive.denyDeletes 
If set to true, git-receive-pack will deny a ref update that deletes the
ref. Use this to prevent such a ref deletion via a push.

@item  receive.denyDeleteCurrent 
If set to true, git-receive-pack will deny a ref update that deletes the
currently checked out branch of a non-bare repository.

@item  receive.denyCurrentBranch 
If set to true or "refuse", git-receive-pack will deny a ref update to the
currently checked out branch of a non-bare repository.  Such a push is
potentially dangerous because it brings the HEAD out of sync with the index
and working tree. If set to "warn", print a warning of such a push to
stderr, but allow the push to proceed. If set to false or "ignore", allow
such pushes with no message. Defaults to "refuse".

Another option is "updateInstead" which will update the working tree if
pushing into the current branch.  This option is intended for synchronizing
working directories when one side is not easily accessible via interactive
ssh (e.g. a live web site, hence the requirement that the working directory
be clean). This mode also comes in handy when developing inside a VM to test
and fix code on different Operating Systems.

By default, "updateInstead" will refuse the push if the working tree or the
index have any difference from the HEAD, but the @samp{push-to-checkout} hook can
be used to customize this.  See githooks(5).

@item  receive.denyNonFastForwards 
If set to true, git-receive-pack will deny a ref update which is not a
fast-forward. Use this to prevent such an update via a push, even if that
push is forced. This configuration variable is set when initializing a
shared repository.

@item  receive.hideRefs 
This variable is the same as @samp{transfer.hideRefs}, but applies only to
@samp{receive-pack} (and so affects pushes, but not fetches).  An attempt to
update or delete a hidden ref by @samp{git push} is rejected.

@item  receive.procReceiveRefs 
This is a multi-valued variable that defines reference prefixes to match the
commands in @samp{receive-pack}.  Commands matching the prefixes will be executed
by an external hook "proc-receive", instead of the internal
@samp{execute_commands} function.  If this variable is not defined, the
"proc-receive" hook will never be used, and all commands will be executed by
the internal @samp{execute_commands} function.

For example, if this variable is set to "refs/for", pushing to reference
such as "refs/for/master" will not create or update a reference named
"refs/for/master", but may create or update a pull request directly by
running the hook "proc-receive".

Optional modifiers can be provided in the beginning of the value to filter
commands for specific actions: create (a), modify (m), delete (d).  A @samp{!}
can be included in the modifiers to negate the reference prefix entry.
E.g.:

@example
git config --system --add receive.procReceiveRefs ad:refs/heads
git config --system --add receive.procReceiveRefs !:refs/heads
@end example

@item  receive.updateServerInfo 
If set to true, git-receive-pack will run git-update-server-info after
receiving data from git-push and updating refs.

@item  receive.shallowUpdate 
If set to true, .git/shallow can be updated when new refs require new
shallow roots. Otherwise those refs are rejected.

@item  remote.pushDefault 
The remote to push to by default.  Overrides @samp{branch.<name>.remote} for all
branches, and is overridden by @samp{branch.<name>.pushRemote} for specific
branches.

@item  remote.<name>.url 
The URL of a remote repository.  See git-fetch(1) or
git-push(1).

@item  remote.<name>.pushurl 
The push URL of a remote repository.  See git-push(1).

@item  remote.<name>.proxy 
For remotes that require curl (http, https and ftp), the URL to the proxy to
use for that remote.  Set to the empty string to disable proxying for that
remote.

@item  remote.<name>.proxyAuthMethod 
For remotes that require curl (http, https and ftp), the method to use for
authenticating against the proxy in use (probably set in
@samp{remote.<name>.proxy}). See @samp{http.proxyAuthMethod}.

@item  remote.<name>.fetch 
The default set of "refspec" for git-fetch(1). See
git-fetch(1).

@item  remote.<name>.push 
The default set of "refspec" for git-push(1). See
git-push(1).

@item  remote.<name>.mirror 
If true, pushing to this remote will automatically behave as if the
@samp{--mirror} option was given on the command line.

@item  remote.<name>.skipDefaultUpdate 
If true, this remote will be skipped by default when updating using
git-fetch(1) or the @samp{update} subcommand of git-remote(1).

@item  remote.<name>.skipFetchAll 
If true, this remote will be skipped by default when updating using
git-fetch(1) or the @samp{update} subcommand of git-remote(1).

@item  remote.<name>.receivepack 
The default program to execute on the remote side when pushing.  See option
--receive-pack of git-push(1).

@item  remote.<name>.uploadpack 
The default program to execute on the remote side when fetching.  See option
--upload-pack of git-fetch-pack(1).

@item  remote.<name>.tagOpt 
Setting this value to --no-tags disables automatic tag following when
fetching from remote <name>. Setting it to --tags will fetch every tag from
remote <name>, even if they are not reachable from remote branch
heads. Passing these flags directly to git-fetch(1) can override
this setting. See options --tags and --no-tags of git-fetch(1).

@item  remote.<name>.vcs 
Setting this to a value <vcs> will cause Git to interact with the remote
with the git-remote-<vcs> helper.

@item  remote.<name>.prune 
When set to true, fetching from this remote by default will also remove any
remote-tracking references that no longer exist on the remote (as if the
@samp{--prune} option was given on the command line).  Overrides @samp{fetch.prune}
settings, if any.

@item  remote.<name>.pruneTags 
When set to true, fetching from this remote by default will also remove any
local tags that no longer exist on the remote if pruning is activated in
general via @samp{remote.<name>.prune}, @samp{fetch.prune} or @samp{--prune}. Overrides
@samp{fetch.pruneTags} settings, if any.

See also @samp{remote.<name>.prune} and the PRUNING section of
git-fetch(1).

@item  remote.<name>.promisor 
When set to true, this remote will be used to fetch promisor objects.

@item  remote.<name>.partialclonefilter 
The filter that will be applied when fetching from this promisor remote.

@item  remotes.<group> 
The list of remotes which are fetched by "git remote update <group>".  See
git-remote(1).

@item  repack.useDeltaBaseOffset 
By default, git-repack(1) creates packs that use delta-base
offset. If you need to share your repository with Git older than version
1.4.4, either directly or via a dumb protocol such as http, then you need to
set this option to "false" and repack. Access from old Git versions over the
native protocol are unaffected by this option.

@item  repack.packKeptObjects 
If set to true, makes @samp{git repack} act as if @samp{--pack-kept-objects} was
passed. See git-repack(1) for details. Defaults to @samp{false} normally,
but @samp{true} if a bitmap index is being written (either via
@samp{--write-bitmap-index} or @samp{repack.writeBitmaps}).

@item  repack.useDeltaIslands 
If set to true, makes @samp{git repack} act as if @samp{--delta-islands} was
passed. Defaults to @samp{false}.

@item  repack.writeBitmaps 
When true, git will write a bitmap index when packing all objects to disk
(e.g., when @samp{git repack -a} is run).  This index can speed up the "counting
objects" phase of subsequent packs created for clones and fetches, at the
cost of some disk space and extra time spent on the initial repack.  This
has no effect if multiple packfiles are created.  Defaults to true on bare
repos, false otherwise.

@item  rerere.autoUpdate 
When set to true, @samp{git-rerere} updates the index with the resulting contents
after it cleanly resolves conflicts using previously recorded resolution.
Defaults to false.

@item  rerere.enabled 
Activate recording of resolved conflicts, so that identical conflict hunks
can be resolved automatically, should they be encountered again.  By
default, git-rerere(1) is enabled if there is an @samp{rr-cache}
directory under the @samp{$GIT_DIR}, e.g. if "rerere" was previously used in the
repository.

@item  reset.quiet 
trueに設定すると、 @samp{git reset} はデフォルトで @samp{--quiet} オプションになります。

@item  sendemail.identity 
A configuration identity. When given, causes values in the
@emph{sendemail.<identity>} subsection to take precedence over values in the
@emph{sendemail} section. The default identity is the value of
@samp{sendemail.identity}.

@item  sendemail.smtpEncryption 
See git-send-email(1) for description.  Note that this setting is
not subject to the @emph{identity} mechanism.

@item  sendemail.smtpsslcertpath 
Path to ca-certificates (either a directory or a single file).  Set it to an
empty string to disable certificate verification.

@item  sendemail.<identity>.* 
Identity-specific versions of the @emph{sendemail.*} parameters found below,
taking precedence over those when this identity is selected, through either
the command-line or @samp{sendemail.identity}.

@item  sendemail.aliasesFile 
@itemx  sendemail.aliasFileType 
@itemx  sendemail.annotate 
@itemx  sendemail.bcc 
@itemx  sendemail.cc 
@itemx  sendemail.ccCmd 
@itemx  sendemail.chainReplyTo 
@itemx  sendemail.confirm 
@itemx  sendemail.envelopeSender 
@itemx  sendemail.from 
@itemx  sendemail.multiEdit 
@itemx  sendemail.signedoffbycc 
@itemx  sendemail.smtpPass 
@itemx  sendemail.suppresscc 
@itemx  sendemail.suppressFrom 
@itemx  sendemail.to 
@itemx  sendemail.tocmd 
@itemx  sendemail.smtpDomain 
@itemx  sendemail.smtpServer 
@itemx  sendemail.smtpServerPort 
@itemx  sendemail.smtpServerOption 
@itemx  sendemail.smtpUser 
@itemx  sendemail.thread 
@itemx  sendemail.transferEncoding 
@itemx  sendemail.validate 
@itemx  sendemail.xmailer 
See git-send-email(1) for description.

@item  sendemail.signedoffcc (deprecated) 
Deprecated alias for @samp{sendemail.signedoffbycc}.

@item  sendemail.smtpBatchSize 
Number of messages to be sent per connection, after that a relogin will
happen.  If the value is 0 or undefined, send all messages in one
connection.  See also the @samp{--batch-size} option of
git-send-email(1).

@item  sendemail.smtpReloginDelay 
Seconds wait before reconnecting to smtp server.  See also the
@samp{--relogin-delay} option of git-send-email(1).

@item  sendemail.forbidSendmailVariables 
To avoid common misconfiguration mistakes, git-send-email(1) will
abort with a warning if any configuration options for "sendmail" exist. Set
this variable to bypass the check.

@item  sequence.editor 
Text editor used by @samp{git rebase -i} for editing the rebase instruction
file.  The value is meant to be interpreted by the shell when it is used.
It can be overridden by the @samp{GIT_SEQUENCE_EDITOR} environment variable.
When not configured the default commit message editor is used instead.

@item  showBranch.default 
The default set of branches for git-show-branch(1).  See
git-show-branch(1).

@item  splitIndex.maxPercentChange 
When the split index feature is used, this specifies the percent of entries
the split index can contain compared to the total number of entries in both
the split index and the shared index before a new shared index is written.
The value should be between 0 and 100. If the value is 0 then a new shared
index is always written, if it is 100 a new shared index is never written.
By default the value is 20, so a new shared index is written if the number
of entries in the split index would be greater than 20 percent of the total
number of entries.  See git-update-index(1).

@item  splitIndex.sharedIndexExpire 
When the split index feature is used, shared index files that were not
modified since the time this variable specifies will be removed when a new
shared index file is created. The value "now" expires all entries
immediately, and "never" suppresses expiration altogether.  The default
value is "2.weeks.ago".  Note that a shared index file is considered
modified (for the purpose of expiration) each time a new split-index file is
either created based on it or read from it.  See
git-update-index(1).

@item  ssh.variant 
By default, Git determines the command line arguments to use based on the
basename of the configured SSH command (configured using the environment
variable @samp{GIT_SSH} or @samp{GIT_SSH_COMMAND} or the config setting
@samp{core.sshCommand}). If the basename is unrecognized, Git will attempt to
detect support of OpenSSH options by first invoking the configured SSH
command with the @samp{-G} (print configuration) option and will subsequently use
OpenSSH options (if that is successful) or no options besides the host and
remote command (if it fails).

The config variable @samp{ssh.variant} can be set to override this detection.
Valid values are @samp{ssh} (to use OpenSSH options), @samp{plink}, @samp{putty},
@samp{tortoiseplink}, @samp{simple} (no options except the host and remote command).
The default auto-detection can be explicitly requested using the value
@samp{auto}.  Any other value is treated as @samp{ssh}.  This setting can also be
overridden via the environment variable @samp{GIT_SSH_VARIANT}.

The current command-line parameters used for each variant are as follows:

@itemize 

@item
@samp{ssh} - [-p port] [-4] [-6] [-o option] [username@@]host command

@item
@samp{simple} - [username@@]host command

@item
@samp{plink} or @samp{putty} - [-P port] [-4] [-6] [username@@]host command

@item
@samp{tortoiseplink} - [-P port] [-4] [-6] -batch [username@@]host command
@end itemize

Except for the @samp{simple} variant, command-line parameters are likely to
change as git gains new features.

@item  status.relativePaths 
By default, git-status(1) shows paths relative to the current
directory. Setting this variable to @samp{false} shows paths relative to the
repository root (this was the default for Git prior to v1.5.4).

@item  status.short 
Set to true to enable --short by default in git-status(1).  The
option --no-short takes precedence over this variable.

@item  status.branch 
Set to true to enable --branch by default in git-status(1).  The
option --no-branch takes precedence over this variable.

@item  status.aheadBehind 
Set to true to enable @samp{--ahead-behind} and false to enable
@samp{--no-ahead-behind} by default in git-status(1) for non-porcelain
status formats.  Defaults to true.

@item  status.displayCommentPrefix 
If set to true, git-status(1) will insert a comment prefix before
each output line (starting with @samp{core.commentChar}, i.e. @samp{#} by
default). This was the behavior of git-status(1) in Git 1.8.4 and
previous.  Defaults to false.

@item  status.renameLimit 
The number of files to consider when performing rename detection in
git-status(1) and git-commit(1). Defaults to the value of
diff.renameLimit.

@item  status.renames 
Whether and how Git detects renames in git-status(1) and
git-commit(1) .  If set to "false", rename detection is disabled. If
set to "true", basic rename detection is enabled.  If set to "copies" or
"copy", Git will detect copies, as well.  Defaults to the value of
diff.renames.

@item  status.showStash 
If set to true, git-status(1) will display the number of entries
currently stashed away.  Defaults to false.

@item  status.showUntrackedFiles 
By default, git-status(1) and git-commit(1) show files which
are not currently tracked by Git. Directories which contain only untracked
files, are shown with the directory name only. Showing untracked files means
that Git needs to lstat() all the files in the whole repository, which might
be slow on some systems. So, this variable controls how the commands
displays the untracked files. Possible values are:

@itemize 

@item
@samp{no} - Show no untracked files.

@item
@samp{normal} - Show untracked files and directories.

@item
@samp{all} - Show also individual files in untracked directories.
@end itemize

If this variable is not specified, it defaults to @emph{normal}.  This variable
can be overridden with the -u|--untracked-files option of
git-status(1) and git-commit(1).

@item  status.submoduleSummary 
Defaults to false.  If this is set to a non zero number or true (identical
to -1 or an unlimited number), the submodule summary will be enabled and a
summary of commits for modified submodules will be shown (see
--summary-limit option of git-submodule(1)). Please note that the
summary output command will be suppressed for all submodules when
@samp{diff.ignoreSubmodules} is set to @emph{all} or only for those submodules where
@samp{submodule.<name>.ignore=all}. The only exception to that rule is that
status and commit will show staged submodule changes. To also view the
summary for ignored submodules you can either use the
--ignore-submodules=dirty command-line option or the @emph{git submodule summary}
command, which shows a similar output but does not honor these settings.

@item  stash.useBuiltin 
Unused configuration variable.  Used in Git versions 2.22 to 2.26 as an
escape hatch to enable the legacy shellscript implementation of stash.  Now
the built-in rewrite of it in C is always used. Setting this will emit a
warning, to alert any remaining users that setting this now does nothing.

@item  stash.showIncludeUntracked 
If this is set to true, the @samp{git stash show} command will show the untracked
files of a stash entry.  Defaults to false. See description of @emph{show}
command in git-stash(1).

@item  stash.showPatch 
If this is set to true, the @samp{git stash show} command without an option will
show the stash entry in patch form.  Defaults to false.  See description of
@emph{show} command in git-stash(1).

@item  stash.showStat 
If this is set to true, the @samp{git stash show} command without an option will
show diffstat of the stash entry.  Defaults to true.  See description of
@emph{show} command in git-stash(1).

@item  submodule.<name>.url 
The URL for a submodule. This variable is copied from the .gitmodules file
to the git config via @emph{git submodule init}. The user can change the
configured URL before obtaining the submodule via @emph{git submodule update}. If
neither submodule.<name>.active or submodule.active are set, the presence of
this variable is used as a fallback to indicate whether the submodule is of
interest to git commands.  See git-submodule(1) and
gitmodules(5) for details.

@item  submodule.<name>.update 
The method by which a submodule is updated by @emph{git submodule update}, which
is the only affected command, others such as @emph{git checkout
--recurse-submodules} are unaffected. It exists for historical reasons, when
@emph{git submodule} was the only command to interact with submodules; settings
like @samp{submodule.active} and @samp{pull.rebase} are more specific. It is populated
by @samp{git submodule init} from the gitmodules(5) file.  See
description of @emph{update} command in git-submodule(1).

@item  submodule.<name>.branch 
The remote branch name for a submodule, used by @samp{git submodule update
--remote}.  Set this option to override the value found in the @samp{.gitmodules}
file.  See git-submodule(1) and gitmodules(5) for details.

@item  submodule.<name>.fetchRecurseSubmodules 
This option can be used to control recursive fetching of this submodule. It
can be overridden by using the --[no-]recurse-submodules command-line option
to "git fetch" and "git pull".  This setting will override that from in the
gitmodules(5) file.

@item  submodule.<name>.ignore 
Defines under what circumstances "git status" and the diff family show a
submodule as modified. When set to "all", it will never be considered
modified (but it will nonetheless show up in the output of status and commit
when it has been staged), "dirty" will ignore all changes to the submodules
work tree and takes only differences between the HEAD of the submodule and
the commit recorded in the superproject into account. "untracked" will
additionally let submodules with modified tracked files in their work tree
show up.  Using "none" (the default when this option is not set) also shows
submodules that have untracked files in their work tree as changed.  This
setting overrides any setting made in .gitmodules for this submodule, both
settings can be overridden on the command line by using the
"--ignore-submodules" option. The @emph{git submodule} commands are not affected
by this setting.

@item  submodule.<name>.active 
Boolean value indicating if the submodule is of interest to git commands.
This config option takes precedence over the submodule.active config
option. See gitsubmodules(7) for details.

@item  submodule.active 
A repeated field which contains a pathspec used to match against a
submodule’s path to determine if the submodule is of interest to git
commands. See gitsubmodules(7) for details.

@item  submodule.recurse 
A boolean indicating if commands should enable the @samp{--recurse-submodules}
option by default.  Applies to all commands that support this option
(@samp{checkout}, @samp{fetch}, @samp{grep}, @samp{pull}, @samp{push}, @samp{read-tree}, @samp{reset},
@samp{restore} and @samp{switch}) except @samp{clone} and @samp{ls-files}.  Defaults to false.
When set to true, it can be deactivated via the @samp{--no-recurse-submodules}
option. Note that some Git commands lacking this option may call some of the
above commands affected by @samp{submodule.recurse}; for instance @samp{git remote
update} will call @samp{git fetch} but does not have a @samp{--no-recurse-submodules}
option.  For these commands a workaround is to temporarily change the
configuration value by using @samp{git -c submodule.recurse=0}.

@item  submodule.fetchJobs 
Specifies how many submodules are fetched/cloned at the same time.  A
positive integer allows up to that number of submodules fetched in
parallel. A value of 0 will give some reasonable default.  If unset, it
defaults to 1.

@item  submodule.alternateLocation 
Specifies how the submodules obtain alternates when submodules are
cloned. Possible values are @samp{no}, @samp{superproject}.  By default @samp{no} is
assumed, which doesn’t add references. When the value is set to
@samp{superproject} the submodule to be cloned computes its alternates location
relative to the superprojects alternate.

@item  submodule.alternateErrorStrategy 
Specifies how to treat errors with the alternates for a submodule as
computed via @samp{submodule.alternateLocation}. Possible values are @samp{ignore},
@samp{info}, @samp{die}. Default is @samp{die}. Note that if set to @samp{ignore} or @samp{info}, and
if there is an error with the computed alternate, the clone proceeds as if
no alternate was specified.

@item  tag.forceSignAnnotated 
A boolean to specify whether annotated tags created should be GPG signed.
If @samp{--annotate} is specified on the command line, it takes precedence over
this option.

@item  tag.sort 
This variable controls the sort ordering of tags when displayed by
git-tag(1). Without the "--sort=<value>" option provided, the value
of this variable will be used as the default.

@item  tag.gpgSign 
A boolean to specify whether all tags should be GPG signed.  Use of this
option when running in an automated script can result in a large number of
tags being signed. It is therefore convenient to use an agent to avoid
typing your gpg passphrase several times. Note that this option doesn’t
affect tag signing behavior enabled by "-u <keyid>" or
"--local-user=<keyid>" options.

@item  tar.umask 
This variable can be used to restrict the permission bits of tar archive
entries.  The default is 0002, which turns off the world write bit.  The
special value "user" indicates that the archiving user’s umask will be used
instead.  See umask(2) and git-archive(1).
@end table

Trace2 config settings are only read from the system and global config
files; repository local and worktree config files and @samp{-c} command line
arguments are not respected.

@table @asis

@item  trace2.normalTarget 
This variable controls the normal target destination.  It may be overridden
by the @samp{GIT_TRACE2} environment variable.  The following table shows
possible values.

@item  trace2.perfTarget 
This variable controls the performance target destination.  It may be
overridden by the @samp{GIT_TRACE2_PERF} environment variable.  The following
table shows possible values.

@item  trace2.eventTarget 
This variable controls the event target destination.  It may be overridden
by the @samp{GIT_TRACE2_EVENT} environment variable.  The following table shows
possible values.

@itemize 

@item
@samp{0} or @samp{false} - ターゲットを無効にします。

@item
@samp{1} or @samp{true} - @samp{STDERR} に書き出します。

@item
@samp{[2-9]} - すでに開いているファイル・デスクリプターに書き出します。

@item
@samp{<absolute-pathname>} -
appendモードでファイルに書き込みます。ターゲットがすでに存在し、ディレクトリである場合、トレースは指定のディレクトリの下のファイル(プロセスごとに1つ)に書き込まれます。

@item
@samp{af_unix:[<socket_type>:]<absolute-pathname>} -
Unixドメインソケットに書き出します(それらをサポートするプラットフォーム上であれば)。ソケットタイプは @samp{stream} または @samp{dgram}
のいずれかです。省略した場合、Gitは両方を試します。
@end itemize

@item  trace2.normalBrief 
Boolean.  When true @samp{time}, @samp{filename}, and @samp{line} fields are omitted from
normal output.  May be overridden by the @samp{GIT_TRACE2_BRIEF} environment
variable.  Defaults to false.

@item  trace2.perfBrief 
Boolean.  When true @samp{time}, @samp{filename}, and @samp{line} fields are omitted from
PERF output.  May be overridden by the @samp{GIT_TRACE2_PERF_BRIEF} environment
variable.  Defaults to false.

@item  trace2.eventBrief 
Boolean.  When true @samp{time}, @samp{filename}, and @samp{line} fields are omitted from
event output.  May be overridden by the @samp{GIT_TRACE2_EVENT_BRIEF} environment
variable.  Defaults to false.

@item  trace2.eventNesting 
Integer.  Specifies desired depth of nested regions in the event output.
Regions deeper than this value will be omitted.  May be overridden by the
@samp{GIT_TRACE2_EVENT_NESTING} environment variable.  Defaults to 2.

@item  trace2.configParams 
A comma-separated list of patterns of "important" config settings that
should be recorded in the trace2 output.  For example, @samp{core.*,remote.*.url}
would cause the trace2 output to contain events listing each configured
remote.  May be overridden by the @samp{GIT_TRACE2_CONFIG_PARAMS} environment
variable.  Unset by default.

@item  trace2.envVars 
A comma-separated list of "important" environment variables that should be
recorded in the trace2 output.  For example,
@samp{GIT_HTTP_USER_AGENT,GIT_CONFIG} would cause the trace2 output to contain
events listing the overrides for HTTP user agent and the location of the Git
configuration file (assuming any are set).  May be overridden by the
@samp{GIT_TRACE2_ENV_VARS} environment variable.  Unset by default.

@item  trace2.destinationDebug 
Boolean.  When true Git will print error messages when a trace target
destination cannot be opened for writing.  By default, these errors are
suppressed and tracing is silently disabled.  May be overridden by the
@samp{GIT_TRACE2_DST_DEBUG} environment variable.

@item  trace2.maxFiles 
Integer.  When writing trace files to a target directory, do not write
additional traces if we would exceed this many files. Instead, write a
sentinel file that will block further tracing to this directory. Defaults to
0, which disables this check.

@item  transfer.fsckObjects 
When @samp{fetch.fsckObjects} or @samp{receive.fsckObjects} are not set, the value of
this variable is used instead.  Defaults to false.

When set, the fetch or receive will abort in the case of a malformed object
or a link to a nonexistent object. In addition, various other issues are
checked for, including legacy issues (see @samp{fsck.<msg-id>}), and potential
security issues like the existence of a @samp{.GIT} directory or a malicious
@samp{.gitmodules} file (see the release notes for v2.2.1 and v2.17.1 for
details). Other sanity and security checks may be added in future releases.

On the receiving side, failing fsckObjects will make those objects
unreachable, see "QUARANTINE ENVIRONMENT" in git-receive-pack(1). On
the fetch side, malformed objects will instead be left unreferenced in the
repository.

Due to the non-quarantine nature of the @samp{fetch.fsckObjects} implementation
it cannot be relied upon to leave the object store clean like
@samp{receive.fsckObjects} can.

As objects are unpacked they’re written to the object store, so there can be
cases where malicious objects get introduced even though the "fetch" failed,
only to have a subsequent "fetch" succeed because only new incoming objects
are checked, not those that have already been written to the object
store. That difference in behavior should not be relied upon. In the future,
such objects may be quarantined for "fetch" as well.

For now, the paranoid need to find some way to emulate the quarantine
environment if they’d like the same protection as "push". E.g. in the case
of an internal mirror do the mirroring in two steps, one to fetch the
untrusted objects, and then do a second "push" (which will use the
quarantine) to another internal repo, and have internal clients consume this
pushed-to repository, or embargo internal fetches and only allow them once a
full "fsck" has run (and no new fetches have happened in the meantime).

@item  transfer.hideRefs 
String(s) @samp{receive-pack} and @samp{upload-pack} use to decide which refs to omit
from their initial advertisements.  Use more than one definition to specify
multiple prefix strings. A ref that is under the hierarchies listed in the
value of this variable is excluded, and is hidden when responding to @samp{git
push} or @samp{git fetch}.  See @samp{receive.hideRefs} and @samp{uploadpack.hideRefs} for
program-specific versions of this config.

You may also include a @samp{!} in front of the ref name to negate the entry,
explicitly exposing it, even if an earlier entry marked it as hidden.  If
you have multiple hideRefs values, later entries override earlier ones (and
entries in more-specific config files override less-specific ones).

If a namespace is in use, the namespace prefix is stripped from each
reference before it is matched against @samp{transfer.hiderefs} patterns. In
order to match refs before stripping, add a @samp{^} in front of the ref name. If
you combine @samp{!} and @samp{^}, @samp{!} must be specified first.

For example, if @samp{refs/heads/master} is specified in @samp{transfer.hideRefs} and
the current namespace is @samp{foo}, then @samp{refs/namespaces/foo/refs/heads/master}
is omitted from the advertisements. If @samp{uploadpack.allowRefInWant} is set,
@samp{upload-pack} will treat @samp{want-ref refs/heads/master} in a protocol v2
@samp{fetch} command as if @samp{refs/namespaces/foo/refs/heads/master} did not
exist.  @samp{receive-pack}, on the other hand, will still advertise the object
id the ref is pointing to without mentioning its name (a so-called ".have"
line).

Even if you hide refs, a client may still be able to steal the target
objects via the techniques described in the "SECURITY" section of the
gitnamespaces(7) man page; it’s best to keep private data in a
separate repository.

@item  transfer.unpackLimit 
When @samp{fetch.unpackLimit} or @samp{receive.unpackLimit} are not set, the value of
this variable is used instead.  The default value is 100.

@item  transfer.advertiseSID 
Boolean. When true, client and server processes will advertise their unique
session IDs to their remote counterpart. Defaults to false.

@item  uploadarchive.allowUnreachable 
If true, allow clients to use @samp{git archive --remote} to request any tree,
whether reachable from the ref tips or not. See the discussion in the
"SECURITY" section of git-upload-archive(1) for more
details. Defaults to @samp{false}.

@item  uploadpack.hideRefs 
This variable is the same as @samp{transfer.hideRefs}, but applies only to
@samp{upload-pack} (and so affects only fetches, not pushes).  An attempt to
fetch a hidden ref by @samp{git fetch} will fail.  See also
@samp{uploadpack.allowTipSHA1InWant}.

@item  uploadpack.allowTipSHA1InWant 
When @samp{uploadpack.hideRefs} is in effect, allow @samp{upload-pack} to accept a
fetch request that asks for an object at the tip of a hidden ref (by
default, such a request is rejected).  See also @samp{uploadpack.hideRefs}.  Even
if this is false, a client may be able to steal objects via the techniques
described in the "SECURITY" section of the gitnamespaces(7) man
page; it’s best to keep private data in a separate repository.

@item  uploadpack.allowReachableSHA1InWant 
Allow @samp{upload-pack} to accept a fetch request that asks for an object that
is reachable from any ref tip. However, note that calculating object
reachability is computationally expensive.  Defaults to @samp{false}.  Even if
this is false, a client may be able to steal objects via the techniques
described in the "SECURITY" section of the gitnamespaces(7) man
page; it’s best to keep private data in a separate repository.

@item  uploadpack.allowAnySHA1InWant 
Allow @samp{upload-pack} to accept a fetch request that asks for any object at
all.  Defaults to @samp{false}.

@item  uploadpack.keepAlive 
When @samp{upload-pack} has started @samp{pack-objects}, there may be a quiet period
while @samp{pack-objects} prepares the pack. Normally it would output progress
information, but if @samp{--quiet} was used for the fetch, @samp{pack-objects} will
output nothing at all until the pack data begins. Some clients and networks
may consider the server to be hung and give up. Setting this option
instructs @samp{upload-pack} to send an empty keepalive packet every
@samp{uploadpack.keepAlive} seconds. Setting this option to 0 disables keepalive
packets entirely. The default is 5 seconds.

@item  uploadpack.packObjectsHook 
If this option is set, when @samp{upload-pack} would run @samp{git pack-objects} to
create a packfile for a client, it will run this shell command instead.  The
@samp{pack-objects} command and arguments it @emph{would} have run (including the @samp{git
pack-objects} at the beginning) are appended to the shell command. The stdin
and stdout of the hook are treated as if @samp{pack-objects} itself was
run. I.e., @samp{upload-pack} will feed input intended for @samp{pack-objects} to the
hook, and expects a completed packfile on stdout.

Note that this configuration variable is ignored if it is seen in the
repository-level config (this is a safety measure against fetching from
untrusted repositories).

@item  uploadpack.allowFilter 
If this option is set, @samp{upload-pack} will support partial clone and partial
fetch object filtering.

@item  uploadpackfilter.allow 
Provides a default value for unspecified object filters (see: the below
configuration variable). If set to @samp{true}, this will also enable all filters
which get added in the future.  Defaults to @samp{true}.

@item  uploadpackfilter.<filter>.allow 
Explicitly allow or ban the object filter corresponding to @samp{<filter>}, where
@samp{<filter>} may be one of: @samp{blob:none}, @samp{blob:limit}, @samp{object:type}, @samp{tree},
@samp{sparse:oid}, or @samp{combine}.  If using combined filters, both @samp{combine} and
all of the nested filter kinds must be allowed. Defaults to
@samp{uploadpackfilter.allow}.

@item  uploadpackfilter.tree.maxDepth 
Only allow @samp{--filter=tree:<n>} when @samp{<n>} is no more than the value of
@samp{uploadpackfilter.tree.maxDepth}. If set, this also implies
@samp{uploadpackfilter.tree.allow=true}, unless this configuration variable had
already been set. Has no effect if unset.

@item  uploadpack.allowRefInWant 
If this option is set, @samp{upload-pack} will support the @samp{ref-in-want} feature
of the protocol version 2 @samp{fetch} command.  This feature is intended for the
benefit of load-balanced servers which may not have the same view of what
OIDs their refs point to due to replication delay.

@item  url.<base>.insteadOf 
Any URL that starts with this value will be rewritten to start, instead,
with <base>. In cases where some site serves a large number of repositories,
and serves them with multiple access methods, and some users need to use
different access methods, this feature allows people to specify any of the
equivalent URLs and have Git automatically rewrite the URL to the best
alternative for the particular user, even for a never-before-seen repository
on the site.  When more than one insteadOf strings match a given URL, the
longest match is used.

Note that any protocol restrictions will be applied to the rewritten URL. If
the rewrite changes the URL to use a custom protocol or remote helper, you
may need to adjust the @samp{protocol.*.allow} config to permit the request.  In
particular, protocols you expect to use for submodules must be set to
@samp{always} rather than the default of @samp{user}. See the description of
@samp{protocol.allow} above.

@item  url.<base>.pushInsteadOf 
Any URL that starts with this value will not be pushed to; instead, it will
be rewritten to start with <base>, and the resulting URL will be pushed
to. In cases where some site serves a large number of repositories, and
serves them with multiple access methods, some of which do not allow push,
this feature allows people to specify a pull-only URL and have Git
automatically use an appropriate URL to push, even for a never-before-seen
repository on the site.  When more than one pushInsteadOf strings match a
given URL, the longest match is used.  If a remote has an explicit pushurl,
Git will ignore this setting for that remote.

@item  user.name 
@itemx  user.email 
@itemx  author.name 
@itemx  author.email 
@itemx  committer.name 
@itemx  committer.email 
The @samp{user.name} and @samp{user.email} variables determine what ends up in the
@samp{author} and @samp{committer} field of commit objects.  If you need the @samp{author}
or @samp{committer} to be different, the @samp{author.name}, @samp{author.email},
@samp{committer.name} or @samp{committer.email} variables can be set.  Also, all of
these can be overridden by the @samp{GIT_AUTHOR_NAME}, @samp{GIT_AUTHOR_EMAIL},
@samp{GIT_COMMITTER_NAME}, @samp{GIT_COMMITTER_EMAIL} and @samp{EMAIL} environment
variables.

Note that the @samp{name} forms of these variables conventionally refer to some
form of a personal name.  See git-commit(1) and the environment
variables section of git(1) for more information on these settings
and the @samp{credential.username} option if you’re looking for authentication
credentials instead.

@item  user.useConfigOnly 
Instruct Git to avoid trying to guess defaults for @samp{user.email} and
@samp{user.name}, and instead retrieve the values only from the
configuration. For example, if you have multiple email addresses and would
like to use a different one for each repository, then with this
configuration option set to @samp{true} in the global config along with a name,
Git will prompt you to set up an email before making new commits in a newly
cloned repository.  Defaults to @samp{false}.

@item  user.signingKey 
If git-tag(1) or git-commit(1) is not selecting the key you
want it to automatically when creating a signed tag or commit, you can
override the default selection with this variable.  This option is passed
unchanged to gpg’s --local-user parameter, so you may specify a key using
any method that gpg supports.

@item  versionsort.prereleaseSuffix (deprecated) 
Deprecated alias for @samp{versionsort.suffix}.  Ignored if @samp{versionsort.suffix}
is set.

@item  versionsort.suffix 
Even when version sort is used in git-tag(1), tagnames with the same
base version but different suffixes are still sorted lexicographically,
resulting e.g. in prerelease tags appearing after the main release
(e.g. "1.0-rc1" after "1.0").  This variable can be specified to determine
the sorting order of tags with different suffixes.

By specifying a single suffix in this variable, any tagname containing that
suffix will appear before the corresponding main release.  E.g. if the
variable is set to "-rc", then all "1.0-rcX" tags will appear before "1.0".
If specified multiple times, once per suffix, then the order of suffixes in
the configuration will determine the sorting order of tagnames with those
suffixes.  E.g. if "-pre" appears before "-rc" in the configuration, then
all "1.0-preX" tags will be listed before any "1.0-rcX" tags.  The placement
of the main release tag relative to tags with various suffixes can be
determined by specifying the empty suffix among those other suffixes.
E.g. if the suffixes "-rc", "", "-ck" and "-bfs" appear in the configuration
in this order, then all "v4.8-rcX" tags are listed first, followed by
"v4.8", then "v4.8-ckX" and finally "v4.8-bfsX".

If more than one suffixes match the same tagname, then that tagname will be
sorted according to the suffix which starts at the earliest position in the
tagname.  If more than one different matching suffixes start at that
earliest position, then that tagname will be sorted according to the longest
of those suffixes.  The sorting order between different suffixes is
undefined if they are in multiple config files.

@item  web.browser 
Specify a web browser that may be used by some commands.  Currently only
git-instaweb(1) and git-help(1) may use it.

@item  worktree.guessRemote 
If no branch is specified and neither @samp{-b} nor @samp{-B} nor @samp{--detach} is used,
then @samp{git worktree add} defaults to creating a new branch from HEAD.  If
@samp{worktree.guessRemote} is set to true, @samp{worktree add} tries to find a
remote-tracking branch whose name uniquely matches the new branch name.  If
such a branch exists, it is checked out and set as "upstream" for the new
branch.  If no such match can be found, it falls back to creating a new
branch from the current HEAD.
@end table

@noindent

@chapheading BUGS

非推奨の @samp{[section.subsection]}
構文を使用する場合、サブセクションに少なくとも1つの大文字が指定されていると、値を変更すると、変更ではなく複数行のキーが追加されます。たとえば、設定が以下のようになっている場合

@example
  [section.subsection]
    key = value1
@end example


@samp{git config section.Subsection.key value2} を実行すると、以下のようになります。

@example
  [section.subsection]
    key = value1
    key = value2
@end example


@noindent

@chapheading GIT

Part of the git(1) suite

@node git-count-objects,,,Top
@chapheading Name

git-count-objects — パックされていない(unpack)オブジェクトの数とそのディスク消費量を計量します

@noindent

@chapheading Synopsis

@display
git count-objects [-v] [-H | --human-readable]
@end display


@noindent

@chapheading DESCRIPTION

これは、パックされていないオブジェクトファイルの数とそれらによって消費されたディスク領域を計量し、再パックするのに適した時期を判断するのに役立ちます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-v} 
@itemx  @samp{--verbose} 
より詳細な報告:

count: 緩いオブジェクト(loose objects;ファイルごとに１つのオブジェクトな形式)の数

size: 緩いオブジェクトによって消費される、KiB単位のディスク容量(-H が指定されていない場合)

in-pack: パック内にあるオブジェクトの数

size-pack: パック群によって消費される、KiB単位のディスク容量(-Hが指定されていない場合)

prune-packable: パック内にも同じものが存在する緩いオブジェクトの数。これらの緩いオブジェクトは、@samp{git prune-packed}
を使用して剪定する(prune)事ができます。

garbage: オブジェクトデータベース内の、有効な緩いオブジェクトでも有効なパックでもないファイルの数

size-garbage: garbageファイルによって消費されるKiB単位のディスク容量(-Hが指定されていない場合)

alternate:
代替オブジェクトデータベース群の絶対パス。パスごとに1行ずつ、複数回表示される場合があります。パスに印刷不可能な文字が含まれている場合は、二重引用符で囲まれ、C言語スタイルのバックスラッシュエスケープシーケンスが含まれている可能性があることに注意してください。

@item  @samp{-H} 
@itemx  @samp{--human-readable} 
人間に分かりやすい形式でサイズを出力する
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-credential-cache--daemon,,,Top
@chapheading Name

git-credential-cache--daemon — ユーザーの資格情報を一時的にメモリに保存する

@noindent

@chapheading Synopsis

@display
git credential-cache—daemon [--debug] <socket>
@end display


@noindent

@chapheading DESCRIPTION

@quotation

@strong{Note}

あなたが、このコマンドを手動で起動したくないなら、 git-credential-cache(1) を使用すれば自動的に開始されます。
@end quotation

このコマンドは、 @samp{<socket>} で指定されたUnixドメインソケットで @samp{git-credential-cache}
クライアントをリッスンします。クライアントは、資格情報を保存および取得できます。
各資格情報は、クライアントによって指定されたタイムアウトまで保持されます。資格情報が保持されなくなると、デーモンは終了します。

@samp{--debug}
オプションが指定されている場合、デーモンはstderrストリームを閉じず、クライアントのリッスンを開始した後でも、追加の診断を出力する場合があります。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-credential-cache,,,Top
@chapheading Name

git-credential-cache — パスワードを一時的にメモリに保存するヘルパー

@noindent

@chapheading Synopsis

@example
git config credential.helper 'cache [<options>]'
@end example


@noindent

@chapheading DESCRIPTION

このコマンドは、将来のGitプログラムで使用するために認証情報(credential)をメモリにキャッシュします。保存された認証情報はディスクに記録されることはなく、設定可能なタイムアウト後にメモリから削除されます。キャッシュはUnixドメインソケットを介してアクセスでき、ファイルシステムのアクセス許可によって現在のユーザーに制限されます。

あなたはこのコマンドを直接呼び出すことは無いでしょう。これは、Gitの他の部分で認証情報ヘルパーとして使用されることを目的としています。gitcredentials(7)
または 以下の EXAMPLES を参照してください。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--timeout <seconds>} 
認証情報をキャッシュする秒数(デフォルト: 900)。

@item  @samp{--socket <path>} 
@samp{<path>} を使用して、実行中のキャッシュデーモンに接続します(または、新しいキャッシュデーモンが開始されていない場合は開始します)。デフォルトは
@samp{$XDG_CACHE_HOME/git/credential/socket} です(@samp{~/.git-credential-cache/}
が存在しない限り)。 @samp{~/.git-credential-cache/} が存在する場合は、代わりに
@samp{~/.git-credential-cache/}
が使用されます。あなたのホームディレクトリがネットワークにマウントされたファイルシステム上にある場合は、これをローカルファイルシステムに変更する必要がある場合があります。あなたは絶対パスを指定しなければなりません。
@end table

@noindent

@chapheading CONTROLLING THE DAEMON

あなたがデーモンを早期に終了させ、タイムアウトする前にキャッシュされたすべての認証情報を忘れ去りたい場合は、「exit」アクションを発行できます:

@example
git credential-cache exit
@end example


@noindent

@chapheading EXAMPLES

このヘルパーの肝は、ユーザー名またはパスワードを入力する必要がある回数を減らすことです。例えば:

@example
$ git config credential.helper cache
$ git push http://example.com/repo.git
Username: <type your username>
Password: <type your password>

[work for 5 more minutes]
$ git push http://example.com/repo.git
[your credentials are used automatically]
@end example


credential.helper構成変数を介してオプションを提供できます(この例では、キャッシュ時間が5分に短縮されます):

@example
$ git config credential.helper 'cache --timeout=300'
@end example


@noindent

@chapheading GIT

Part of the git(1) suite

@node git-credential-store,,,Top
@chapheading Name

git-credential-store — 資格情報をディスクに保存するヘルパー

@noindent

@chapheading Synopsis

@example
git config credential.helper 'store [<options>]'
@end example


@noindent

@chapheading DESCRIPTION

@quotation

@strong{Note}

このヘルパーを使用すると、パスワードは暗号化されずにディスクに保存され、ファイルシステムのアクセス許可によってのみ保護されます。これが許容できるセキュリティのトレードオフではない場合は
git-credential-cache(1)
を試すか、オペレーティングシステムが提供する安全なストレージと統合するヘルパーを探してください。
@end quotation

このコマンドは、将来に渡ってGitプログラムで使用できるように、資格情報をディスクに無期限に保存します。

このコマンドが直接呼び出されることはありません。これは、gitの他の部分で資格情報ヘルパーとして使用されることを目的としています。以下のEXAMPLESまたは
gitcredentials(7) を参照してください。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--file=<path>} 
@samp{<path>}
を使用して、資格情報を探してして保存します。ファイルには、システム上の他のユーザーがファイルを読み取れないようにファイルシステムのアクセス許可が設定されますが、暗号化またはその他の方法で保護されることはありません。@samp{<path>}
指定がない場合、資格情報は @samp{~/.git-credentials} と @samp{$XDG_CONFIG_HOME/git/credentials}
から検索されます。そして、書き込みは、存在すれば @samp{~/.git-credentials} に書き込みますが、@samp{~/.git-credentials}
に書き込まなかった場合、存在すれば @samp{$XDG_CONFIG_HOME/git/credentials} に書き込みます。 @ref{FILES}
も参照してください。
@end table

@noindent

@chapheading FILES

@samp{--file} で明示的に設定されていない場合、git-credential-store
が優先順位に従って資格情報を検索する2つのファイルがあります:

@table @asis

@item  ~/.git-credentials 
ユーザー毎の資格情報ファイル。

@item  $XDG_CONFIG_HOME/git/credentials 
2番目のユーザー毎の資格情報ファイル。 @emph{$XDG_CONFIG_HOME} が設定されていないか空の場合、
@samp{$HOME/.config/git/credentials} が使用されます。 @samp{~/.git-credentials}
に一致する資格情報がある場合、このファイルに保存されている資格情報は使用されません。このファイルがサポートされていない、古いバージョンのGitを使用することがある場合は、このファイルを作成しないことをお勧めします。
@end table

資格情報探索の場合、ファイルは上記の順序で読み取られ、最初に一致した資格情報が、リストのさらに下のファイルで見つかった資格情報よりも優先されます。

資格情報ストレージは、デフォルトでこのリストの順で最初に見つかった既存のファイルに書き込みます。これらのファイルが存在しない場合は、
@samp{~/.git-credentials} を作成して書き込みます。

資格情報の消去を行うと、一致するすべての資格情報がすべてのファイルから消去されます。

@noindent

@chapheading EXAMPLES

このヘルパーの要点は、ユーザー名またはパスワードを入力する必要がある回数を減らすことです。 例えば:

@example
$ git config credential.helper store
$ git push http://example.com/repo.git
Username: <type your username>
Password: <type your password>

[several days later]
$ git push http://example.com/repo.git
[your credentials are used automatically]
@end example


@noindent

@chapheading STORAGE FORMAT

@samp{.git-credentials} ファイルはプレーンテキストで保存されます。各資格情報は、以下のようなURLとしてそれぞれ独自の行に保存されます:

@example
https://user:pass@@example.com
@end example


他の種類の行(空の行やコメント行など)は、一部が黙って無視される場合でも、ファイル内では許可されません。エディタでファイルを表示または編集しないでください。

Gitが特定のURLコンテキストの認証を必要とする場合、credential-store
はそのコンテキストを、資格情報ファイルの各エントリと照合するパターンと見なします。
protocolとhostnameと(すでに持っている場合)usernameが一致する場合、パスワードはGitに返されます。詳細については、
gitcredentials(7) の 「the discussion of configuration」を参照してください。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-credential,,,Top
@chapheading Name

git-credential — Retrieve and store user credentials

@noindent

@chapheading Synopsis

@example
git credential <fill|approve|reject>
@end example


@noindent

@chapheading DESCRIPTION

Git has an internal interface for storing and retrieving credentials from
system-specific helpers, as well as prompting the user for usernames and
passwords. The git-credential command exposes this interface to scripts
which may want to retrieve, store, or prompt for credentials in the same
manner as Git. The design of this scriptable interface models the internal C
API; see credential.h for more background on the concepts.

git-credential takes an "action" option on the command-line (one of @samp{fill},
@samp{approve}, or @samp{reject}) and reads a credential description on stdin (see
INPUT/OUTPUT FORMAT (@pxref{INPUT/OUTPUT FORMAT})).

If the action is @samp{fill}, git-credential will attempt to add "username" and
"password" attributes to the description by reading config files, by
contacting any configured credential helpers, or by prompting the user. The
username and password attributes of the credential description are then
printed to stdout together with the attributes already provided.

If the action is @samp{approve}, git-credential will send the description to any
configured credential helpers, which may store the credential for later use.

If the action is @samp{reject}, git-credential will send the description to any
configured credential helpers, which may erase any stored credential
matching the description.

If the action is @samp{approve} or @samp{reject}, no output should be emitted.

@noindent

@chapheading TYPICAL USE OF GIT CREDENTIAL

An application using git-credential will typically use @samp{git credential}
following these steps:

@enumerate 

@item
Generate a credential description based on the context.

For example, if we want a password for @samp{https://example.com/foo.git}, we
might generate the following credential description (don’t forget the blank
line at the end; it tells @samp{git credential} that the application finished
feeding all the information it has):

@example
protocol=https
host=example.com
path=foo.git
@end example

@item
Ask git-credential to give us a username and password for this
description. This is done by running @samp{git credential fill}, feeding the
description from step (1) to its standard input. The complete credential
description (including the credential per se, i.e. the login and password)
will be produced on standard output, like:

@example
protocol=https
host=example.com
username=bob
password=secr3t
@end example

In most cases, this means the attributes given in the input will be repeated
in the output, but Git may also modify the credential description, for
example by removing the @samp{path} attribute when the protocol is HTTP(s) and
@samp{credential.useHttpPath} is false.

If the @samp{git credential} knew about the password, this step may not have
involved the user actually typing this password (the user may have typed a
password to unlock the keychain instead, or no user interaction was done if
the keychain was already unlocked) before it returned @samp{password=secr3t}.

@item
Use the credential (e.g., access the URL with the username and password from
step (2)), and see if it’s accepted.

@item
Report on the success or failure of the password. If the credential allowed
the operation to complete successfully, then it can be marked with an
"approve" action to tell @samp{git credential} to reuse it in its next
invocation. If the credential was rejected during the operation, use the
"reject" action so that @samp{git credential} will ask for a new password in its
next invocation. In either case, @samp{git credential} should be fed with the
credential description obtained from step (2) (which also contain the ones
provided in step (1)).
@end enumerate

@noindent

@chapheading INPUT/OUTPUT FORMAT

@samp{git credential} reads and/or writes (depending on the action used)
credential information in its standard input/output. This information can
correspond either to keys for which @samp{git credential} will obtain the login
information (e.g. host, protocol, path), or to the actual credential data to
be obtained (username/password).

The credential is split into a set of named attributes, with one attribute
per line. Each attribute is specified by a key-value pair, separated by an
@samp{=} (equals) sign, followed by a newline.

The key may contain any bytes except @samp{=}, newline, or NUL. The value may
contain any bytes except newline or NUL.

In both cases, all bytes are treated as-is (i.e., there is no quoting, and
one cannot transmit a value with newline or NUL in it). The list of
attributes is terminated by a blank line or end-of-file.

Git understands the following attributes:

@table @asis

@item  @samp{protocol} 
The protocol over which the credential will be used (e.g., @samp{https}).

@item  @samp{host} 
The remote hostname for a network credential.  This includes the port number
if one was specified (e.g., "example.com:8088").

@item  @samp{path} 
The path with which the credential will be used. E.g., for accessing a
remote https repository, this will be the repository’s path on the server.

@item  @samp{username} 
The credential’s username, if we already have one (e.g., from a URL, the
configuration, the user, or from a previously run helper).

@item  @samp{password} 
The credential’s password, if we are asking it to be stored.

@item  @samp{url} 
When this special attribute is read by @samp{git credential}, the value is parsed
as a URL and treated as if its constituent parts were read (e.g.,
@samp{url=https://example.com} would behave as if @samp{protocol=https} and
@samp{host=example.com} had been provided). This can help callers avoid parsing
URLs themselves.

Note that specifying a protocol is mandatory and if the URL doesn’t specify
a hostname (e.g., "cert:///path/to/file") the credential will contain a
hostname attribute whose value is an empty string.

Components which are missing from the URL (e.g., there is no username in the
example above) will be left unset.
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-cvsexportcommit,,,Top
@chapheading Name

git-cvsexportcommit — Export a single commit to a CVS checkout

@noindent

@chapheading Synopsis

@display
git cvsexportcommit [-h] [-u] [-v] [-c] [-P] [-p] [-a] [-d cvsroot]
        [-w cvsworkdir] [-W] [-f] [-m msgprefix] [PARENTCOMMIT] COMMITID
@end display


@noindent

@chapheading DESCRIPTION

Exports a commit from Git to a CVS checkout, making it easier to merge
patches from a Git repository into a CVS repository.

Specify the name of a CVS checkout using the -w switch or execute it from
the root of the CVS working copy. In the latter case GIT_DIR must be
defined. See examples below.

It does its best to do the safe thing, it will check that the files are
unchanged and up to date in the CVS checkout, and it will not autocommit by
default.

Supports file additions, removals, and commits that affect binary files.

If the commit is a merge commit, you must tell @emph{git cvsexportcommit} what
parent the changeset should be done against.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-c} 
Commit automatically if the patch applied cleanly. It will not commit if any
hunks fail to apply or there were other problems.

@item  @samp{-p} 
Be pedantic (paranoid) when applying patches. Invokes patch with --fuzz=0

@item  @samp{-a} 
Add authorship information. Adds Author line, and Committer (if different
from Author) to the message.

@item  @samp{-d} 
Set an alternative CVSROOT to use.  This corresponds to the CVS -d
parameter.  Usually users will not want to set this, except if using CVS in
an asymmetric fashion.

@item  @samp{-f} 
Force the merge even if the files are not up to date.

@item  @samp{-P} 
Force the parent commit, even if it is not a direct parent.

@item  @samp{-m} 
Prepend the commit message with the provided prefix.  Useful for patch
series and the like.

@item  @samp{-u} 
Update affected files from CVS repository before attempting export.

@item  @samp{-k} 
Reverse CVS keyword expansion (e.g. $Revision: 1.2.3.4$ becomes $Revision$)
in working CVS checkout before applying patch.

@item  @samp{-w} 
Specify the location of the CVS checkout to use for the export. This option
does not require GIT_DIR to be set before execution if the current directory
is within a Git repository.  The default is the value of
@emph{cvsexportcommit.cvsdir}.

@item  @samp{-W} 
Tell cvsexportcommit that the current working directory is not only a Git
checkout, but also the CVS checkout.  Therefore, Git will reset the working
directory to the parent commit before proceeding.

@item  @samp{-v} 
Verbose.
@end table

@noindent

@chapheading CONFIGURATION

@table @asis

@item  cvsexportcommit.cvsdir 
The default location of the CVS checkout to use for the export.
@end table

@noindent

@chapheading EXAMPLES

@table @asis

@item  Merge one patch into CVS 
@example
$ export GIT_DIR=~/project/.git
$ cd ~/project_cvs_checkout
$ git cvsexportcommit -v <commit-sha1>
$ cvs commit -F .msg <files>
@end example


@item  Merge one patch into CVS (-c and -w options). The working directory is within the Git Repo 
@example
        $ git cvsexportcommit -v -c -w ~/project_cvs_checkout <commit-sha1>
@end example


@item  Merge pending patches into CVS automatically — only if you really know what you are doing 
@example
$ export GIT_DIR=~/project/.git
$ cd ~/project_cvs_checkout
$ git cherry cvshead myhead | sed -n 's/^+ //p' | xargs -l1 git cvsexportcommit -c -p -v
@end example

@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-cvsimport,,,Top
@chapheading Name

git-cvsimport — Salvage your data out of another SCM people love to hate

@noindent

@chapheading Synopsis

@display
git cvsimport [-o <branch-for-HEAD>] [-h] [-v] [-d <CVSROOT>]
              [-A <author-conv-file>] [-p <options-for-cvsps>] [-P <file>]
              [-C <git_repository>] [-z <fuzz>] [-i] [-k] [-u] [-s <subst>]
              [-a] [-m] [-M <regex>] [-S <regex>] [-L <commitlimit>]
              [-r <remote>] [-R] [<CVS_module>]
@end display


@noindent

@chapheading DESCRIPTION

@strong{WARNING:} @samp{git cvsimport} uses cvsps version 2, which is considered
deprecated; it does not work with cvsps version 3 and later.  If you are
performing a one-shot import of a CVS repository consider using
@uref{http://cvs2svn.tigris.org/cvs2git.html,cvs2git} or
@uref{http://www.catb.org/esr/cvs-fast-export/,cvs-fast-export}.

Imports a CVS repository into Git. It will either create a new repository,
or incrementally import into an existing one.

Splitting the CVS log into patch sets is done by @emph{cvsps}.  At least version
2.1 is required.

@strong{WARNING:} for certain situations the import leads to incorrect results.
Please see the section ISSUES (@pxref{ISSUES}) for further reference.

You should @strong{never} do any work of your own on the branches that are created
by @emph{git cvsimport}.  By default initial import will create and populate a
"master" branch from the CVS repository’s main branch which you’re free to
work with; after that, you need to @emph{git merge} incremental imports, or any
CVS branches, yourself.  It is advisable to specify a named remote via -r to
separate and protect the incoming branches.

If you intend to set up a shared public repository that all developers can
read/write, or if you want to use git-cvsserver(1), then you
probably want to make a bare clone of the imported repository, and use the
clone as the shared repository.  See gitcvs-migration(7).

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-v} 
Verbosity: let @emph{cvsimport} report what it is doing.

@item  @samp{-d <CVSROOT>} 
The root of the CVS archive. May be local (a simple path) or remote;
currently, only the :local:, :ext: and :pserver: access methods are
supported. If not given, @emph{git cvsimport} will try to read it from
@samp{CVS/Root}. If no such file exists, it checks for the @samp{CVSROOT} environment
variable.

@item  <CVS_module> 
The CVS module you want to import. Relative to <CVSROOT>.  If not given,
@emph{git cvsimport} tries to read it from @samp{CVS/Repository}.

@item  @samp{-C <target-dir>} 
The Git repository to import to.  If the directory doesn’t
exist, it will be created.  Default is the current directory.

@item  @samp{-r <remote>} 
The Git remote to import this CVS repository into.  Moves all CVS branches
into remotes/<remote>/<branch> akin to the way @emph{git clone} uses @emph{origin} by
default.

@item  @samp{-o <branch-for-HEAD>} 
When no remote is specified (via -r) the @samp{HEAD} branch from CVS is imported
to the @emph{origin} branch within the Git repository, as @samp{HEAD} already has a
special meaning for Git.  When a remote is specified the @samp{HEAD} branch is
named remotes/<remote>/master mirroring @emph{git clone} behaviour.  Use this
option if you want to import into a different branch.

Use @emph{-o master} for continuing an import that was initially done by the old
cvs2git tool.

@item  @samp{-i} 
Import-only: don’t perform a checkout after importing.  This option ensures
the working directory and index remain untouched and will not create them if
they do not exist.

@item  @samp{-k} 
Kill keywords: will extract files with @emph{-kk} from the CVS archive to avoid
noisy changesets. Highly recommended, but off by default to preserve
compatibility with early imported trees.

@item  @samp{-u} 
Convert underscores in tag and branch names to dots.

@item  @samp{-s <subst>} 
Substitute the character "/" in branch names with <subst>

@item  @samp{-p <options-for-cvsps>} 
Additional options for cvsps.  The options @samp{-u} and @emph{-A} are implicit and
should not be used here.

If you need to pass multiple options, separate them with a comma.

@item  @samp{-z <fuzz>} 
Pass the timestamp fuzz factor to cvsps, in seconds. If unset, cvsps
defaults to 300s.

@item  @samp{-P <cvsps-output-file>} 
Instead of calling cvsps, read the provided cvsps output file. Useful for
debugging or when cvsps is being handled outside cvsimport.

@item  @samp{-m} 
Attempt to detect merges based on the commit message. This option will
enable default regexes that try to capture the source branch name from the
commit message.

@item  @samp{-M <regex>} 
Attempt to detect merges based on the commit message with a custom regex. It
can be used with @samp{-m} to enable the default regexes as well. You must escape
forward slashes.

The regex must capture the source branch name in $1.

This option can be used several times to provide several detection regexes.

@item  @samp{-S <regex>} 
Skip paths matching the regex.

@item  @samp{-a} 
Import all commits, including recent ones. cvsimport by default skips
commits that have a timestamp less than 10 minutes ago.

@item  @samp{-L <limit>} 
Limit the number of commits imported. Workaround for cases where cvsimport
leaks memory.

@item  @samp{-A <author-conv-file>} 
CVS by default uses the Unix username when writing its commit logs. Using
this option and an author-conv-file maps the name recorded in CVS to author
name, e-mail and optional time zone:

@example
        exon=Andreas Ericsson <ae@@op5.se>
        spawn=Simon Pawn <spawn@@frog-pond.org> America/Chicago
@end example


@emph{git cvsimport} will make it appear as those authors had their
GIT_AUTHOR_NAME and GIT_AUTHOR_EMAIL set properly all along.  If a time zone
is specified, GIT_AUTHOR_DATE will have the corresponding offset applied.

For convenience, this data is saved to @samp{$GIT_DIR/cvs-authors} each time the
@emph{-A} option is provided and read from that same file each time @emph{git
cvsimport} is run.

It is not recommended to use this feature if you intend to export changes
back to CVS again later with @emph{git cvsexportcommit}.

@item  @samp{-R} 
Generate a @samp{$GIT_DIR/cvs-revisions} file containing a mapping from CVS
revision numbers to newly-created Git commit IDs.  The generated file will
contain one line for each (filename, revision) pair imported; each line will
look like

@example
src/widget.c 1.1 1d862f173cdc7325b6fa6d2ae1cfd61fd1b512b7
@end example


The revision data is appended to the file if it already exists, for use when
doing incremental imports.

This option may be useful if you have CVS revision numbers stored in commit
messages, bug-tracking systems, email archives, and the like.

@item  @samp{-h} 
Print a short usage message and exit.
@end table

@noindent

@chapheading OUTPUT

If @samp{-v} is specified, the script reports what it is doing.

Otherwise, success is indicated the Unix way, i.e. by simply exiting with a
zero exit status.

@noindent

@chapheading ISSUES

Problems related to timestamps:

@itemize 

@item
If timestamps of commits in the CVS repository are not stable enough to be
used for ordering commits changes may show up in the wrong order.

@item
If any files were ever "cvs import"ed more than once (e.g., import of more
than one vendor release) the HEAD contains the wrong content.

@item
If the timestamp order of different files cross the revision order within
the commit matching time window the order of commits may be wrong.
@end itemize

Problems related to branches:

@itemize 

@item
Branches on which no commits have been made are not imported.

@item
All files from the branching point are added to a branch even if never added
in CVS.

@item
This applies to files added to the source branch @strong{after} a daughter branch
was created: if previously no commit was made on the daughter branch they
will erroneously be added to the daughter branch in git.
@end itemize

Problems related to tags:

@itemize 

@item
Multiple tags on the same revision are not imported.
@end itemize

If you suspect that any of these issues may apply to the repository you want
to import, consider using cvs2git:

@itemize 

@item
cvs2git (part of cvs2svn), @samp{http://subversion.apache.org/}
@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-cvsserver,,,Top
@chapheading Name

git-cvsserver — A CVS server emulator for Git

@noindent

@chapheading Synopsis

SSH:

@display
export CVS_SERVER="git cvsserver"
cvs -d :ext:user@@server/path/repo.git co <HEAD_name>
@end display


pserver (/etc/inetd.conf):

@display
cvspserver stream tcp nowait nobody /usr/bin/git-cvsserver git-cvsserver pserver
@end display


Usage:

@display
git-cvsserver [<options>] [pserver|server] [<directory> …]
@end display


@noindent

@chapheading DESCRIPTION

This application is a CVS emulation layer for Git.

It is highly functional. However, not all methods are implemented, and for
those methods that are implemented, not all switches are implemented.

Testing has been done using both the CLI CVS client, and the Eclipse CVS
plugin. Most functionality works fine with both of these clients.

@noindent

@chapheading OPTIONS

All these options obviously only make sense if enforced by the server side.
They have been implemented to resemble the git-daemon(1) options as
closely as possible.

@table @asis

@item  @samp{--base-path <path>} 
Prepend @emph{path} to requested CVSROOT

@item  @samp{--strict-paths} 
Don’t allow recursing into subdirectories

@item  @samp{--export-all} 
Don’t check for @samp{gitcvs.enabled} in config. You also have to specify a list
of allowed directories (see below) if you want to use this option.

@item  @samp{-V} 
@itemx  @samp{--version} 
Print version information and exit

@item  @samp{-h} 
@itemx  @samp{-H} 
@itemx  @samp{--help} 
Print usage information and exit

@item  <directory> 
You can specify a list of allowed directories. If no directories are given,
all are allowed. This is an additional restriction, gitcvs access still
needs to be enabled by the @samp{gitcvs.enabled} config option unless
@samp{--export-all} was given, too.
@end table

@noindent

@chapheading LIMITATIONS

CVS clients cannot tag, branch or perform Git merges.

@emph{git-cvsserver} maps Git branches to CVS modules. This is very different
from what most CVS users would expect since in CVS modules usually represent
one or more directories.

@noindent

@chapheading INSTALLATION

@enumerate 

@item
If you are going to offer CVS access via pserver, add a line in
/etc/inetd.conf like

@example
   cvspserver stream tcp nowait nobody git-cvsserver pserver
@end example


Note: Some inetd servers let you specify the name of the executable
independently of the value of argv[0] (i.e. the name the program assumes it
was executed with). In this case the correct line in /etc/inetd.conf looks
like

@example
   cvspserver stream tcp nowait nobody /usr/bin/git-cvsserver git-cvsserver pserver
@end example


Only anonymous access is provided by pserve by default. To commit you will
have to create pserver accounts, simply add a gitcvs.authdb setting in the
config file of the repositories you want the cvsserver to allow writes to,
for example:

@example
   [gitcvs]
        authdb = /etc/cvsserver/passwd
@end example


The format of these files is username followed by the encrypted password,
for example:

@example
   myuser:$1Oyx5r9mdGZ2
   myuser:$1$BA)@@$vbnMJMDym7tA32AamXrm./
@end example


You can use the @emph{htpasswd} facility that comes with Apache to make these
files, but Apache’s MD5 crypt method differs from the one used by most C
library’s crypt() function, so don’t use the -m option.

Alternatively you can produce the password with perl’s crypt() operator:

@example
   perl -e 'my ($user, $pass) = @@ARGV; printf "%s:%s\n", $user, crypt($user, $pass)' $USER password
@end example


Then provide your password via the pserver method, for example:

@example
   cvs -d:pserver:someuser:somepassword <at> server/path/repo.git co <HEAD_name>
@end example


No special setup is needed for SSH access, other than having Git tools in
the PATH. If you have clients that do not accept the CVS_SERVER environment
variable, you can rename @emph{git-cvsserver} to @samp{cvs}.

Note: Newer CVS versions (>= 1.12.11) also support specifying CVS_SERVER
directly in CVSROOT like

@example
cvs -d ":ext;CVS_SERVER=git cvsserver:user@@server/path/repo.git" co <HEAD_name>
@end example


This has the advantage that it will be saved in your @emph{CVS/Root} files and
you don’t need to worry about always setting the correct environment
variable.  SSH users restricted to @emph{git-shell} don’t need to override the
default with CVS_SERVER (and shouldn’t) as @emph{git-shell} understands @samp{cvs} to
mean @emph{git-cvsserver} and pretends that the other end runs the real @emph{cvs}
better.

@item
For each repo that you want accessible from CVS you need to edit config in
the repo and add the following section.

@example
   [gitcvs]
        enabled=1
        # optional for debugging
        logFile=/path/to/logfile
@end example


Note: you need to ensure each user that is going to invoke @emph{git-cvsserver}
has write access to the log file and to the database (see
Database Backend (@pxref{DATABASE BACKEND}). If you want to offer write access over SSH,
the users of course also need write access to the Git repository itself.

You also need to ensure that each repository is "bare" (without a Git index
file) for @samp{cvs commit} to work. See gitcvs-migration(7).

All configuration variables can also be overridden for a specific method of
access. Valid method names are "ext" (for SSH access) and "pserver". The
following example configuration would disable pserver access while still
allowing access over SSH.

@example
   [gitcvs]
        enabled=0

   [gitcvs "ext"]
        enabled=1
@end example


@item
If you didn’t specify the CVSROOT/CVS_SERVER directly in the checkout
command, automatically saving it in your @emph{CVS/Root} files, then you need to
set them explicitly in your environment.  CVSROOT should be set as per
normal, but the directory should point at the appropriate Git repo.  As
above, for SSH clients @emph{not} restricted to @emph{git-shell}, CVS_SERVER should be
set to @emph{git-cvsserver}.

@example
     export CVSROOT=:ext:user@@server:/var/git/project.git
     export CVS_SERVER="git cvsserver"
@end example


@item
For SSH clients that will make commits, make sure their server-side
.ssh/environment files (or .bashrc, etc., according to their specific shell)
export appropriate values for GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL,
GIT_COMMITTER_NAME, and GIT_COMMITTER_EMAIL.  For SSH clients whose login
shell is bash, .bashrc may be a reasonable alternative.

@item
Clients should now be able to check out the project. Use the CVS @emph{module}
name to indicate what Git @emph{head} you want to check out.  This also sets the
name of your newly checked-out directory, unless you tell it otherwise with
@samp{-d <dir_name>}.  For example, this checks out @emph{master} branch to the
@samp{project-master} directory:

@example
     cvs co -d project-master master
@end example

@end enumerate

@noindent

@chapheading DATABASE BACKEND

@emph{git-cvsserver} uses one database per Git head (i.e. CVS module) to store
information about the repository to maintain consistent CVS revision
numbers. The database needs to be updated (i.e. written to) after every
commit.

If the commit is done directly by using @samp{git} (as opposed to using
@emph{git-cvsserver}) the update will need to happen on the next repository
access by @emph{git-cvsserver}, independent of access method and requested
operation.

That means that even if you offer only read access (e.g. by using the
pserver method), @emph{git-cvsserver} should have write access to the database to
work reliably (otherwise you need to make sure that the database is up to
date any time @emph{git-cvsserver} is executed).

By default it uses SQLite databases in the Git directory, named
@samp{gitcvs.<module_name>.sqlite}. Note that the SQLite backend creates
temporary files in the same directory as the database file on write so it
might not be enough to grant the users using @emph{git-cvsserver} write access to
the database file without granting them write access to the directory, too.

The database cannot be reliably regenerated in a consistent form after the
branch it is tracking has changed.  Example: For merged branches,
@emph{git-cvsserver} only tracks one branch of development, and after a @emph{git
merge} an incrementally updated database may track a different branch than a
database regenerated from scratch, causing inconsistent CVS revision
numbers. @samp{git-cvsserver} has no way of knowing which branch it would have
picked if it had been run incrementally pre-merge. So if you have to fully
or partially (from old backup) regenerate the database, you should be
suspicious of pre-existing CVS sandboxes.

You can configure the database backend with the following configuration
variables:

@noindent

@heading Configuring database backend

@emph{git-cvsserver} uses the Perl DBI module. Please also read its documentation
if changing these variables, especially about @samp{DBI->connect()}.

@table @asis

@item  gitcvs.dbName 
Database name. The exact meaning depends on the selected database driver,
for SQLite this is a filename.  Supports variable substitution (see
below). May not contain semicolons (@samp{;}).  Default: @emph{%Ggitcvs.%m.sqlite}

@item  gitcvs.dbDriver 
Used DBI driver. You can specify any available driver for this here, but it
might not work. cvsserver is tested with @emph{DBD::SQLite}, reported to work
with @emph{DBD::Pg}, and reported @strong{not} to work with @emph{DBD::mysql}.  Please regard
this as an experimental feature. May not contain colons (@samp{:}).  Default:
@emph{SQLite}

@item  gitcvs.dbuser 
Database user. Only useful if setting @samp{dbDriver}, since SQLite has no
concept of database users. Supports variable substitution (see below).

@item  gitcvs.dbPass 
Database password.  Only useful if setting @samp{dbDriver}, since SQLite has no
concept of database passwords.

@item  gitcvs.dbTableNamePrefix 
Database table name prefix.  Supports variable substitution (see below).
Any non-alphabetic characters will be replaced with underscores.
@end table

All variables can also be set per access method, see
above (@pxref{configaccessmethod}).

@noindent

@subheading Variable substitution

In @samp{dbDriver} and @samp{dbUser} you can use the following variables:

@table @asis

@item  %G 
Git directory name

@item  %g 
Git directory name, where all characters except for alphanumeric ones, @samp{.},
and @samp{-} are replaced with @samp{_} (this should make it easier to use the
directory name in a filename if wanted)

@item  %m 
CVS module/Git head name

@item  %a 
access method (one of "ext" or "pserver")

@item  %u 
Name of the user running @emph{git-cvsserver}.  If no name can be determined, the
numeric uid is used.
@end table

@noindent

@chapheading ENVIRONMENT

These variables obviate the need for command-line options in some
circumstances, allowing easier restricted usage through git-shell.

GIT_CVSSERVER_BASE_PATH takes the place of the argument to --base-path.

GIT_CVSSERVER_ROOT specifies a single-directory whitelist. The repository
must still be configured to allow access through git-cvsserver, as described
above.

When these environment variables are set, the corresponding command-line
arguments may not be used.

@noindent

@chapheading ECLIPSE CVS CLIENT NOTES

To get a checkout with the Eclipse CVS client:

@enumerate 

@item
Select "Create a new project → From CVS checkout"

@item
Create a new location. See the notes below for details on how to choose the
right protocol.

@item
Browse the @emph{modules} available. It will give you a list of the heads in the
repository. You will not be able to browse the tree from there. Only the
heads.

@item
Pick @samp{HEAD} when it asks what branch/tag to check out. Untick the "launch
commit wizard" to avoid committing the .project file.
@end enumerate

Protocol notes: If you are using anonymous access via pserver, just select
that.  Those using SSH access should choose the @emph{ext} protocol, and
configure @emph{ext} access on the Preferences→Team→CVS→ExtConnection
pane. Set CVS_SERVER to "@samp{git cvsserver}". Note that password support is not
good when using @emph{ext}, you will definitely want to have SSH keys setup.

Alternatively, you can just use the non-standard extssh protocol that
Eclipse offer. In that case CVS_SERVER is ignored, and you will have to
replace the cvs utility on the server with @emph{git-cvsserver} or manipulate
your @samp{.bashrc} so that calling @emph{cvs} effectively calls @emph{git-cvsserver}.

@noindent

@chapheading CLIENTS KNOWN TO WORK

@itemize 

@item
CVS 1.12.9 on Debian

@item
CVS 1.11.17 on MacOSX (from Fink package)

@item
Eclipse 3.0, 3.1.2 on MacOSX (see Eclipse CVS Client Notes)

@item
TortoiseCVS
@end itemize

@noindent

@chapheading OPERATIONS SUPPORTED

All the operations required for normal use are supported, including
checkout, diff, status, update, log, add, remove, commit.

Most CVS command arguments that read CVS tags or revision numbers (typically
-r) work, and also support any git refspec (tag, branch, commit ID, etc).
However, CVS revision numbers for non-default branches are not well
emulated, and cvs log does not show tags or branches at all.
(Non-main-branch CVS revision numbers superficially resemble CVS revision
numbers, but they actually encode a git commit ID directly, rather than
represent the number of revisions since the branch point.)

Note that there are two ways to checkout a particular branch.  As described
elsewhere on this page, the "module" parameter of cvs checkout is
interpreted as a branch name, and it becomes the main branch.  It remains
the main branch for a given sandbox even if you temporarily make another
branch sticky with cvs update -r.  Alternatively, the -r argument can
indicate some other branch to actually checkout, even though the module is
still the "main" branch.  Tradeoffs (as currently implemented): Each new
"module" creates a new database on disk with a history for the given module,
and after the database is created, operations against that main branch are
fast.  Or alternatively, -r doesn’t take any extra disk space, but may be
significantly slower for many operations, like cvs update.

If you want to refer to a git refspec that has characters that are not
allowed by CVS, you have two options.  First, it may just work to supply the
git refspec directly to the appropriate CVS -r argument; some CVS clients
don’t seem to do much sanity checking of the argument.  Second, if that
fails, you can use a special character escape mechanism that only uses
characters that are valid in CVS tags.  A sequence of 4 or 5 characters of
the form (underscore (@samp{"_"}), dash (@samp{"-"}), one or two characters, and dash
(@samp{"-"})) can encode various characters based on the one or two letters:
@samp{"s"} for slash (@samp{"/"}), @samp{"p"} for period (@samp{"."}), @samp{"u"} for underscore
(@samp{"_"}), or two hexadecimal digits for any byte value at all (typically an
ASCII number, or perhaps a part of a UTF-8 encoded character).

Legacy monitoring operations are not supported (edit, watch and related).
Exports and tagging (tags and branches) are not supported at this stage.

@noindent

@heading CRLF Line Ending Conversions

By default the server leaves the @samp{-k} mode blank for all files, which causes
the CVS client to treat them as a text files, subject to end-of-line
conversion on some platforms.

You can make the server use the end-of-line conversion attributes to set the
@samp{-k} modes for files by setting the @samp{gitcvs.usecrlfattr} config variable.
See gitattributes(5) for more information about end-of-line
conversion.

Alternatively, if @samp{gitcvs.usecrlfattr} config is not enabled or the
attributes do not allow automatic detection for a filename, then the server
uses the @samp{gitcvs.allBinary} config for the default setting.  If
@samp{gitcvs.allBinary} is set, then file not otherwise specified will default to
@emph{-kb} mode. Otherwise the @samp{-k} mode is left blank. But if @samp{gitcvs.allBinary}
is set to "guess", then the correct @samp{-k} mode will be guessed based on the
contents of the file.

For best consistency with @emph{cvs}, it is probably best to override the
defaults by setting @samp{gitcvs.usecrlfattr} to true, and @samp{gitcvs.allBinary} to
"guess".

@noindent

@chapheading DEPENDENCIES

@emph{git-cvsserver} depends on DBD::SQLite.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-daemon,,,Top
@chapheading Name

git-daemon — A really simple server for Git repositories

@noindent

@chapheading Synopsis

@display
git daemon [--verbose] [--syslog] [--export-all]
             [--timeout=<n>] [--init-timeout=<n>] [--max-connections=<n>]
             [--strict-paths] [--base-path=<path>] [--base-path-relaxed]
             [--user-path | --user-path=<path>]
             [--interpolated-path=<pathtemplate>]
             [--reuseaddr] [--detach] [--pid-file=<file>]
             [--enable=<service>] [--disable=<service>]
             [--allow-override=<service>] [--forbid-override=<service>]
             [--access-hook=<path>] [--[no-]informative-errors]
             [--inetd |
              [--listen=<host_or_ipaddr>] [--port=<n>]
              [--user=<user> [--group=<group>]]]
             [--log-destination=(stderr|syslog|none)]
             [<directory>…]
@end display


@noindent

@chapheading DESCRIPTION

A really simple TCP Git daemon that normally listens on port
"DEFAULT_GIT_PORT" aka 9418.  It waits for a connection asking for a
service, and will serve that service if it is enabled.

It verifies that the directory has the magic file "git-daemon-export-ok",
and it will refuse to export any Git directory that hasn’t explicitly been
marked for export this way (unless the @samp{--export-all} parameter is
specified). If you pass some directory paths as @emph{git daemon} arguments, you
can further restrict the offers to a whitelist comprising of those.

By default, only @samp{upload-pack} service is enabled, which serves @emph{git
fetch-pack} and @emph{git ls-remote} clients, which are invoked from @emph{git fetch},
@emph{git pull}, and @emph{git clone}.

This is ideally suited for read-only updates, i.e., pulling from Git
repositories.

An @samp{upload-archive} also exists to serve @emph{git archive}.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--strict-paths} 
Match paths exactly (i.e. don’t allow "/foo/repo" when the real path is
"/foo/repo.git" or "/foo/repo/.git") and don’t do user-relative paths.  @emph{git
daemon} will refuse to start when this option is enabled and no whitelist is
specified.

@item  @samp{--base-path=<path>} 
Remap all the path requests as relative to the given path.  This is sort of
"Git root" - if you run @emph{git daemon} with @emph{--base-path=/srv/git} on
example.com, then if you later try to pull @emph{git://example.com/hello.git},
@emph{git daemon} will interpret the path as @samp{/srv/git/hello.git}.

@item  @samp{--base-path-relaxed} 
If --base-path is enabled and repo lookup fails, with this option @emph{git
daemon} will attempt to lookup without prefixing the base path.  This is
useful for switching to --base-path usage, while still allowing the old
paths.

@item  @samp{--interpolated-path=<pathtemplate>} 
To support virtual hosting, an interpolated path template can be used to
dynamically construct alternate paths.  The template supports %H for the
target hostname as supplied by the client but converted to all lowercase,
%CH for the canonical hostname, %IP for the server’s IP address, %P for the
port number, and %D for the absolute path of the named repository.  After
interpolation, the path is validated against the directory whitelist.

@item  @samp{--export-all} 
Allow pulling from all directories that look like Git repositories (have the
@emph{objects} and @emph{refs} subdirectories), even if they do not have the
@emph{git-daemon-export-ok} file.

@item  @samp{--inetd} 
Have the server run as an inetd service. Implies --syslog (may be overridden
with @samp{--log-destination=}).  Incompatible with --detach, --port, --listen,
--user and --group options.

@item  @samp{--listen=<host_or_ipaddr>} 
Listen on a specific IP address or hostname.  IP addresses can be either an
IPv4 address or an IPv6 address if supported.  If IPv6 is not supported,
then --listen=hostname is also not supported and --listen must be given an
IPv4 address.  Can be given more than once.  Incompatible with @samp{--inetd}
option.

@item  @samp{--port=<n>} 
Listen on an alternative port.  Incompatible with @samp{--inetd} option.

@item  @samp{--init-timeout=<n>} 
Timeout (in seconds) between the moment the connection is established and
the client request is received (typically a rather low value, since that
should be basically immediate).

@item  @samp{--timeout=<n>} 
Timeout (in seconds) for specific client sub-requests. This includes the
time it takes for the server to process the sub-request and the time spent
waiting for the next client’s request.

@item  @samp{--max-connections=<n>} 
Maximum number of concurrent clients, defaults to 32.  Set it to zero for no
limit.

@item  @samp{--syslog} 
Short for @samp{--log-destination=syslog}.

@item  @samp{--log-destination=<destination>} 
Send log messages to the specified destination.  Note that this option does
not imply --verbose, thus by default only error conditions will be logged.
The <destination> must be one of:

@table @asis

@item  stderr 
Write to standard error.  Note that if @samp{--detach} is specified, the process
disconnects from the real standard error, making this destination
effectively equivalent to @samp{none}.

@item  syslog 
Write to syslog, using the @samp{git-daemon} identifier.

@item  none 
Disable all logging.
@end table

The default destination is @samp{syslog} if @samp{--inetd} or @samp{--detach} is specified,
otherwise @samp{stderr}.

@item  @samp{--user-path} 
@itemx  @samp{--user-path=<path>} 
Allow ~user notation to be used in requests.  When specified with no
parameter, requests to git://host/~alice/foo is taken as a request to
access @emph{foo} repository in the home directory of user @samp{alice}.  If
@samp{--user-path=path} is specified, the same request is taken as a request to
access @samp{path/foo} repository in the home directory of user @samp{alice}.

@item  @samp{--verbose} 
Log details about the incoming connections and requested files.

@item  @samp{--reuseaddr} 
Use SO_REUSEADDR when binding the listening socket.  This allows the server
to restart without waiting for old connections to time out.

@item  @samp{--detach} 
Detach from the shell. Implies --syslog.

@item  @samp{--pid-file=<file>} 
Save the process id in @emph{file}.  Ignored when the daemon is run under
@samp{--inetd}.

@item  @samp{--user=<user>} 
@itemx  @samp{--group=<group>} 
Change daemon’s uid and gid before entering the service loop.  When only
@samp{--user} is given without @samp{--group}, the primary group ID for the user is
used.  The values of the option are given to @samp{getpwnam(3)} and @samp{getgrnam(3)}
and numeric IDs are not supported.

Giving these options is an error when used with @samp{--inetd}; use the facility
of inet daemon to achieve the same before spawning @emph{git daemon} if needed.

Like many programs that switch user id, the daemon does not reset
environment variables such as @samp{$HOME} when it runs git programs,
e.g. @samp{upload-pack} and @samp{receive-pack}. When using this option, you may also
want to set and export @samp{HOME} to point at the home directory of @samp{<user>}
before starting the daemon, and make sure any Git configuration files in
that directory are readable by @samp{<user>}.

@item  @samp{--enable=<service>} 
@itemx  @samp{--disable=<service>} 
Enable/disable the service site-wide per default.  Note that a service
disabled site-wide can still be enabled per repository if it is marked
overridable and the repository enables the service with a configuration
item.

@item  @samp{--allow-override=<service>} 
@itemx  @samp{--forbid-override=<service>} 
Allow/forbid overriding the site-wide default with per repository
configuration.  By default, all the services may be overridden.

@item  @samp{--[no-]informative-errors} 
When informative errors are turned on, git-daemon will report more verbose
errors to the client, differentiating conditions like "no such repository"
from "repository not exported". This is more convenient for clients, but may
leak information about the existence of unexported repositories.  When
informative errors are not enabled, all errors report "access denied" to the
client. The default is --no-informative-errors.

@item  @samp{--access-hook=<path>} 
Every time a client connects, first run an external command specified by the
<path> with service name (e.g. "upload-pack"), path to the repository,
hostname (%H), canonical hostname (%CH), IP address (%IP), and TCP port (%P)
as its command-line arguments. The external command can decide to decline
the service by exiting with a non-zero status (or to allow it by exiting
with a zero status).  It can also look at the $REMOTE_ADDR and
@samp{$REMOTE_PORT} environment variables to learn about the requestor when
making this decision.

The external command can optionally write a single line to its standard
output to be sent to the requestor as an error message when it declines the
service.

@item  <directory> 
A directory to add to the whitelist of allowed directories. Unless
--strict-paths is specified this will also include subdirectories of each
named directory.
@end table

@noindent

@chapheading SERVICES

These services can be globally enabled/disabled using the command-line
options of this command.  If finer-grained control is desired (e.g. to allow
@emph{git archive} to be run against only in a few selected repositories the
daemon serves), the per-repository configuration file can be used to enable
or disable them.

@table @asis

@item  upload-pack 
This serves @emph{git fetch-pack} and @emph{git ls-remote} clients.  It is enabled by
default, but a repository can disable it by setting @samp{daemon.uploadpack}
configuration item to @samp{false}.

@item  upload-archive 
This serves @emph{git archive --remote}.  It is disabled by default, but a
repository can enable it by setting @samp{daemon.uploadarch} configuration item
to @samp{true}.

@item  receive-pack 
This serves @emph{git send-pack} clients, allowing anonymous push.  It is
disabled by default, as there is @emph{no} authentication in the protocol (in
other words, anybody can push anything into the repository, including
removal of refs).  This is solely meant for a closed LAN setting where
everybody is friendly.  This service can be enabled by setting
@samp{daemon.receivepack} configuration item to @samp{true}.
@end table

@noindent

@chapheading EXAMPLES

@table @asis

@item  We assume the following in /etc/services 
@example
$ grep 9418 /etc/services
git             9418/tcp                # Git Version Control System
@end example


@item  @emph{git daemon} as inetd server 
To set up @emph{git daemon} as an inetd service that handles any repository under
the whitelisted set of directories, /pub/foo and /pub/bar, place an entry
like the following into /etc/inetd all on one line:

@example
        git stream tcp nowait nobody  /usr/bin/git
                git daemon --inetd --verbose --export-all
                /pub/foo /pub/bar
@end example


@item  @emph{git daemon} as inetd server for virtual hosts 
To set up @emph{git daemon} as an inetd service that handles repositories for
different virtual hosts, @samp{www.example.com} and @samp{www.example.org}, place an
entry like the following into @samp{/etc/inetd} all on one line:

@example
        git stream tcp nowait nobody /usr/bin/git
                git daemon --inetd --verbose --export-all
                --interpolated-path=/pub/%H%D
                /pub/www.example.org/software
                /pub/www.example.com/software
                /software
@end example


In this example, the root-level directory @samp{/pub} will contain a subdirectory
for each virtual host name supported.  Further, both hosts advertise
repositories simply as @samp{git://www.example.com/software/repo.git}.  For
pre-1.4.0 clients, a symlink from @samp{/software} into the appropriate default
repository could be made as well.

@item  @emph{git daemon} as regular daemon for virtual hosts 
To set up @emph{git daemon} as a regular, non-inetd service that handles
repositories for multiple virtual hosts based on their IP addresses, start
the daemon like this:

@example
        git daemon --verbose --export-all
                --interpolated-path=/pub/%IP/%D
                /pub/192.168.1.200/software
                /pub/10.10.220.23/software
@end example


In this example, the root-level directory @samp{/pub} will contain a subdirectory
for each virtual host IP address supported.  Repositories can still be
accessed by hostname though, assuming they correspond to these IP addresses.

@item  selectively enable/disable services per repository 
To enable @emph{git archive --remote} and disable @emph{git fetch} against a
repository, have the following in the configuration file in the repository
(that is the file @emph{config} next to @samp{HEAD}, @emph{refs} and @emph{objects}).

@example
        [daemon]
                uploadpack = false
                uploadarch = true
@end example

@end table

@noindent

@chapheading ENVIRONMENT

@emph{git daemon} will set REMOTE_ADDR to the IP address of the client that
connected to it, if the IP address is available. REMOTE_ADDR will be
available in the environment of hooks called when services are performed.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-describe,,,Top
@chapheading Name

git-describe — Give an object a human readable name based on an available ref

@noindent

@chapheading Synopsis

@display
git describe [--all] [--tags] [--contains] [--abbrev=<n>] [<commit-ish>…]
git describe [--all] [--tags] [--contains] [--abbrev=<n>] --dirty[=<mark>]
git describe <blob>
@end display


@noindent

@chapheading DESCRIPTION

The command finds the most recent tag that is reachable from a commit.  If
the tag points to the commit, then only the tag is shown.  Otherwise, it
suffixes the tag name with the number of additional commits on top of the
tagged object and the abbreviated object name of the most recent commit. The
result is a "human-readable" object name which can also be used to identify
the commit to other git commands.

By default (without --all or --tags) @samp{git describe} only shows annotated
tags.  For more information about creating annotated tags see the -a and -s
options to git-tag(1).

If the given object refers to a blob, it will be described as
@samp{<commit-ish>:<path>}, such that the blob can be found at @samp{<path>} in the
@samp{<commit-ish>}, which itself describes the first commit in which this blob
occurs in a reverse revision walk from HEAD.

@noindent

@chapheading OPTIONS

@table @asis

@item  <commit-ish>… 
Commit-ish object names to describe.  Defaults to HEAD if omitted.

@item  @samp{--dirty[=<mark>]} 
@itemx  @samp{--broken[=<mark>]} 
Describe the state of the working tree.  When the working tree matches HEAD,
the output is the same as "git describe HEAD".  If the working tree has
local modification "-dirty" is appended to it.  If a repository is corrupt
and Git cannot determine if there is local modification, Git will error out,
unless ‘--broken’ is given, which appends the suffix "-broken" instead.

@item  @samp{--all} 
Instead of using only the annotated tags, use any ref found in @samp{refs/}
namespace.  This option enables matching any known branch, remote-tracking
branch, or lightweight tag.

@item  @samp{--tags} 
Instead of using only the annotated tags, use any tag found in @samp{refs/tags}
namespace.  This option enables matching a lightweight (non-annotated) tag.

@item  @samp{--contains} 
Instead of finding the tag that predates the commit, find the tag that comes
after the commit, and thus contains it.  Automatically implies --tags.

@item  @samp{--abbrev=<n>} 
Instead of using the default number of hexadecimal digits (which will vary
according to the number of objects in the repository with a default of 7) of
the abbreviated object name, use <n> digits, or as many digits as needed to
form a unique object name. An <n> of 0 will suppress long format, only
showing the closest tag.

@item  @samp{--candidates=<n>} 
Instead of considering only the 10 most recent tags as candidates to
describe the input commit-ish consider up to <n> candidates.  Increasing <n>
above 10 will take slightly longer but may produce a more accurate result.
An <n> of 0 will cause only exact matches to be output.

@item  @samp{--exact-match} 
Only output exact matches (a tag directly references the supplied commit).
This is a synonym for --candidates=0.

@item  @samp{--debug} 
Verbosely display information about the searching strategy being employed to
standard error.  The tag name will still be printed to standard out.

@item  @samp{--long} 
Always output the long format (the tag, the number of commits and the
abbreviated commit name) even when it matches a tag.  This is useful when
you want to see parts of the commit object name in "describe" output, even
when the commit in question happens to be a tagged version.  Instead of just
emitting the tag name, it will describe such a commit as v1.2-0-gdeadbee
(0th commit since tag v1.2 that points at object deadbee….).

@item  @samp{--match <pattern>} 
Only consider tags matching the given @samp{glob(7)} pattern, excluding the
"refs/tags/" prefix. If used with @samp{--all}, it also considers local branches
and remote-tracking references matching the pattern, excluding respectively
"refs/heads/" and "refs/remotes/" prefix; references of other types are
never considered. If given multiple times, a list of patterns will be
accumulated, and tags matching any of the patterns will be considered.  Use
@samp{--no-match} to clear and reset the list of patterns.

@item  @samp{--exclude <pattern>} 
Do not consider tags matching the given @samp{glob(7)} pattern, excluding the
"refs/tags/" prefix. If used with @samp{--all}, it also does not consider local
branches and remote-tracking references matching the pattern, excluding
respectively "refs/heads/" and "refs/remotes/" prefix; references of other
types are never considered. If given multiple times, a list of patterns will
be accumulated and tags matching any of the patterns will be excluded. When
combined with --match a tag will be considered when it matches at least one
--match pattern and does not match any of the --exclude patterns. Use
@samp{--no-exclude} to clear and reset the list of patterns.

@item  @samp{--always} 
Show uniquely abbreviated commit object as fallback.

@item  @samp{--first-parent} 
Follow only the first parent commit upon seeing a merge commit.  This is
useful when you wish to not match tags on branches merged in the history of
the target commit.
@end table

@noindent

@chapheading EXAMPLES

With something like git.git current tree, I get:

@example
[torvalds@@g5 git]$ git describe parent
v1.0.4-14-g2414721
@end example

i.e. the current head of my "parent" branch is based on v1.0.4, but since it
has a few commits on top of that, describe has added the number of
additional commits ("14") and an abbreviated object name for the commit
itself ("2414721")  at the end.

The number of additional commits is the number of commits which would be
displayed by "git log v1.0.4..parent".  The hash suffix is "-g" + an
unambigous abbreviation for the tip commit of parent (which was
@samp{2414721b194453f058079d897d13c4e377f92dc6}). The length of the abbreviation
scales as the repository grows, using the approximate number of objects in
the repository and a bit of math around the birthday paradox, and defaults
to a minimum of 7.  The "g" prefix stands for "git" and is used to allow
describing the version of a software depending on the SCM the software is
managed with. This is useful in an environment where people may use
different SCMs.

Doing a @emph{git describe} on a tag-name will just show the tag name:

@example
[torvalds@@g5 git]$ git describe v1.0.4
v1.0.4
@end example

With --all, the command can use branch heads as references, so the output
shows the reference path as well:

@example
[torvalds@@g5 git]$ git describe --all --abbrev=4 v1.0.5^2
tags/v1.0.0-21-g975b
@end example

@example
[torvalds@@g5 git]$ git describe --all --abbrev=4 HEAD^
heads/lt/describe-7-g975b
@end example

With --abbrev set to 0, the command can be used to find the closest tagname
without any suffix:

@example
[torvalds@@g5 git]$ git describe --abbrev=0 v1.0.5^2
tags/v1.0.0
@end example

Note that the suffix you get if you type these commands today may be longer
than what Linus saw above when he ran these commands, as your Git repository
may have new commits whose object names begin with 975b that did not exist
back then, and "-g975b" suffix alone may not be sufficient to disambiguate
these commits.

@noindent

@chapheading SEARCH STRATEGY

For each commit-ish supplied, @emph{git describe} will first look for a tag which
tags exactly that commit.  Annotated tags will always be preferred over
lightweight tags, and tags with newer dates will always be preferred over
tags with older dates.  If an exact match is found, its name will be output
and searching will stop.

If an exact match was not found, @emph{git describe} will walk back through the
commit history to locate an ancestor commit which has been tagged.  The
ancestor’s tag will be output along with an abbreviation of the input
commit-ish’s SHA-1. If @samp{--first-parent} was specified then the walk will
only consider the first parent of each commit.

If multiple tags were found during the walk then the tag which has the
fewest commits different from the input commit-ish will be selected and
output.  Here fewest commits different is defined as the number of commits
which would be shown by @samp{git log tag..input} will be the smallest number of
commits possible.

@noindent

@chapheading BUGS

Tree objects as well as tag objects not pointing at commits, cannot be
described.  When describing blobs, the lightweight tags pointing at blobs
are ignored, but the blob is still described as <committ-ish>:<path> despite
the lightweight tag being favorable.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-diff-files,,,Top
@chapheading Name

git-diff-files — 作業ツリーとインデックス内のファイルを比較します

@noindent

@chapheading Synopsis

@display
git diff-files [-q] [-0|-1|-2|-3|-c|--cc] [<common diff options>] [<path>…]
@end display


@noindent

@chapheading DESCRIPTION

作業ツリーとインデックス内のファイルを比較します。パスが指定されている場合、それらの名前付きパスのみを比較します。それ以外の場合は、インデックス内のすべてのエントリが比較されます。出力形式は、
@emph{git diff-index} や @emph{git diff-tree} の場合と同じです。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-p} 
@itemx  @samp{-u} 
@itemx  @samp{--patch} 
パッチを生成します(generating patches に関するセクションを参照)。

@item  @samp{-s} 
@itemx  @samp{--no-patch} 
diff出力を抑制します。デフォルトでパッチを表示する @samp{git show} のようなコマンド、または @samp{--patch}
の効果をキャンセルする場合に便利です。

@item  @samp{-U<n>} 
@itemx  @samp{--unified=<n>} 
通常の3行ではなく、<n> 行の内容でdiffを生成します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--output=<file>} 
stdout ではなく指定のファイルに出力します。

@item  @samp{--output-indicator-new=<char>} 
@itemx  @samp{--output-indicator-old=<char>} 
@itemx  @samp{--output-indicator-context=<char>} 
生成されたパッチの新しい行、古い行、またはコンテキスト行を示すために使用される文字を指定します。 通常、それらはそれぞれ @emph{+} 、 @emph{-} 、 ' '
です。

@item  @samp{--raw} 
生形式(raw format)でdiffを生成します。
これがデフォルトです。

@item  @samp{--patch-with-raw} 
@samp{-p --raw} の同義語。

@item  @samp{--indent-heuristic} 
diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッチを読みやすくします。 これがデフォルトです。

@item  @samp{--no-indent-heuristic} 
インデントヒューリスティック(indent heuristic)を無効にします。

@item  @samp{--minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{--patience} 
"patience diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--histogram} 
"histogram diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--anchored=<text>} 
"anchored diff" アルゴリズムを使用してdiffを生成します。

このオプションは複数回指定できます。

行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる場合、このアルゴリズムは、その行が出力に削除または追加として表示されないようにします。内部で
"patience diff" アルゴリズムを使用します。

@item  @samp{--diff-algorithm=@{patience|minimal|histogram|myers@}} 
diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

@table @asis

@item  @samp{default}, @samp{myers} 
基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、これがデフォルトです。

@item  @samp{minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{patience} 
パッチを生成する時に "patience diff" アルゴリズムを使います。

@item  @samp{histogram} 
このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張して、「発生率の低い共通要素をサポート」(support
low-occurrence common elements)します。
@end table

たとえば、 あなたが @samp{diff.algorithm}
変数をデフォルト以外の値に設定した上で、それでもデフォルト値を使用する場合は、@samp{--diff-algorithm=default}
オプションを使用する必要があります。

@item  @samp{--stat[=<width>[,<name-width>[,<count>]]]} 
diffstatを生成します。
デフォルトでは、必要なだけのスペースがファイル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォルトで端末幅、または端末に接続されていない場合は80桁であり、
@samp{<width>} で上書きできます。ファイル名部分の幅は、コンマの後に別の幅 @samp{<name-width>}
を指定することで制限できます。グラフ部分の幅は、 @samp{--stat-graph-width=<width>}
(統計グラフを生成するすべてのコマンドに影響します)を使用するか、 @samp{diff.statGraphWidth=<width>} ( @samp{git
format-patch} に影響しません)を設定することによって制限できます。3番目のパラメータ @samp{<count>}
を指定することにより、出力を最初の @samp{<count>} 行に制限し、それに @samp{...} が続く形にできます。

これらのパラメータは、 @samp{--stat-width=<width>} と @samp{--stat-name-width=<name-width>} と
@samp{--stat-count=<count>} を使用して個別に設定することもできます。

@item  @samp{--compact-summary} 
ファイルの作成や削除( "new" または "gone" 。オプションでシンボリックリンクの場合は "+l"
)、diffstatのモード変更(実行可能ビットを追加または削除する場合は、それぞれ "+x" または "-x"
)など、拡張ヘッダー情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置かれます。本機能は @samp{--stat} の機能を含んでいます。

@item  @samp{--numstat} 
@samp{--stat`に似ていますが、プログラムで処理しやすい(machine
friendly)ように、追加および削除された行数を10進表記とパス名で省略形なしで表示します。バイナリファイルの場合、 `0 0} の代わりに2つの
@samp{-} を出力します。

@item  @samp{--shortstat} 
変更されたファイルの総数と、追加および削除された行の数を含む @samp{--stat} 形式の最後の行のみを出力します。

@item  @samp{-X[<param1,param2,...>]} 
@itemx  @samp{--dirstat[=<param1,param2,...>]} 
各サブディレクトリの相対的な変更量の分布を出力します。 @samp{--dirstat}
の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズできます。デフォルトは、 @samp{diff.dirstat}
構成変数によって制御されます(git-config(1) 参照)。以下のパラメータを使用できます:

@table @asis

@item  @samp{changes} 
ソースから削除された、または宛先に追加された行をカウントして、dirstat数を計算します。これは、ファイル内の純粋なコード移動の量を無視します。つまり、ファイル内の行の再配置は、他の変更ほどカウントされません。これは、パラメーターが指定されていない場合のデフォルトの動作です。

@item  @samp{lines} 
通常の行ベースのdiff分析を実行し、削除/追加された行数を合計して、dirstat数を計算します。
(バイナリファイルの場合、バイナリファイルには行の概念がないため、代わりに64バイトのチャンクをカウントします)。 これは @samp{changes}
動作よりも高価な @samp{--dirstat} 動作ですが、他の変更と同じようにファイル内の再配置された行をカウントします。結果の出力は、他の
@samp{--*stat} オプションから得られるものと一致しています。

@item  @samp{files} 
変更されたファイルの数を数えて、dirstat数を計算します。変更された各ファイルは、dirstat分析で等しくカウントされます。これは、ファイルの内容をまったく調べる必要がないため、計算コストが最もかからない
@samp{--dirstat} の動作です。

@item  @samp{cumulative} 
親ディレクトリの子ディレクトリの変更も同様にカウントします。 @samp{cumulative}(累積的)
を使用する場合、報告されるパーセンテージの合計が100%を超える場合があることに注意してください。デフォルトの(非累積的な)動作は、@samp{noncumulative}
パラメーターで指定できます。

@item  <limit> 
整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指定します。指定の割合より少ないディレクトリは、出力に表示されません。
@end table

例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディレクトリに子ディレクトリの数を累積しながら、変更されたファイルをカウント:
@samp{--dirstat=files,10,cumulative}

@item  @samp{--cumulative} 
@samp{--dirstat=cumulative} と同義語

@item  @samp{--dirstat-by-file[=<param1,param2>...]} 
@samp{--dirstat=files,param1,param2...} と同義語

@item  @samp{--summary} 
作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約(condensed summary)を出力します。

@item  @samp{--patch-with-stat} 
@samp{-p --stat} と同義語。

@item  @samp{-z} 
@samp{--raw} または @samp{--numstat} または @samp{--name-only} または @samp{--name-status} が指定されている場合は
パス名を変更せず、出力フィールドターミネータとしてNULLを使用してください。

このオプションがないと、構成変数 @samp{core.quotePath} で説明されているように、 通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。

@item  @samp{--name-only} 
変更されたファイルの名前のみを表示します。 多くの場合、ファイル名はUTF-8でエンコードされます。 詳細については、
git-log(1) のマニュアルページにあるエンコーディングに関する議論(the discussion about
encoding)を参照してください。

@item  @samp{--name-status} 
変更されたファイルの名前とステータスのみを表示します。ステータス文字の意味については、 @samp{--diff-filter}
オプションの説明を参照してください。 @samp{--name-only} と同じように、ファイル名はしばしばUTF-8でエンコードされます。

@item  @samp{--submodule[=<format>]} 
サブモジュールの違いをどのように表示するかを指定します。 @samp{--submodule=short} を指定する場合、 @emph{short}
形式が使用されます。この形式は、範囲の最初と最後にコミットの名前を表示するだけです。 @samp{--submodule} または
@samp{--submodule=log} が指定されている場合、 @emph{log} 形式が使用されます。この形式では、
git-submodule(1) @samp{summary} のように範囲内のコミットが一覧表示されます。 @samp{--submodule=diff}
が指定されている場合、 @emph{diff}
形式が使用されます。この形式は、コミット範囲間のサブモジュールの内容の変更のインラインdiffを示します。configオプションが設定されていない場合、デフォルトは
@samp{diff.submodule} または @emph{short} 形式です。

@item  @samp{--color[=<when>]} 
色付きのdiffを表示します。 @samp{--color} (つまり、 @emph{=<when>} ) は @samp{--color=always} と同じです。
@emph{<when>} は、 @samp{always} または @samp{never} または @samp{auto} のいずれかになります。

@item  @samp{--no-color} 
カラーdiffをオフにします。
@samp{--color=never} と同じです。

@item  @samp{--color-moved[=<mode>]} 
ソースコードの移動した行を別の色にします。
<mode>は、オプションが指定されていない場合はデフォルトで @emph{no} になり、
モードが指定されていないオプションが指定されている場合は @emph{zebra} になります。
モードは以下のいずれかでなければなりません:

@table @asis

@item  no 
移動行をハイライトしません。

@item  default 
@samp{zebra} の同義語です。これは、将来、より賢明なモードに変更される可能性があります。

@item  plain 
ある場所で追加され、別の場所で削除された行は、 @emph{color.diff.newMoved} で色付けされます。 同様に、
@emph{color.diff.oldMoved}
は、差分の別の場所に追加された削除された行に使用されます。このモードは移動された行をピックアップしますが、コードのブロックが順列なしで移動されたかどうかを判断することはレビューではあまり役に立ちません。

@item  blocks 
少なくとも20文字の英数字の移動テキストのブロックが貪欲に検出されます。検出されたブロックは、 @emph{color.diff.@{old,new@}Moved}
色のいずれかを使用して色付けされます。隣接するブロックを区別することはできません。

@item  zebra 
移動されたテキストのブロックは、 @emph{blocks} モードの場合と同様に検出されます。 ブロックは、
@emph{color.diff.@{old,new@}Moved} 色または @emph{color.diff.@{old,new@}MovedAlternative}
色のいずれかを使用して色付けされます。2つの色の間の変化は、新しいブロックが検出されたことを示します。

@item  dimmed-zebra 
@emph{zebra}
に似ていますが、移動されたコードの重要でない部分の追加の調光(dimmed)が実行されます。隣接する2つのブロックの境界線は興味深いと見なされ、残りは興味深いものではありません。
@samp{dimmed_zebra} は非推奨の同義語です。
@end table

@item  @samp{--no-color-moved} 
移動検出をオフにします。 これは、構成設定を上書きするために使用できます。 @samp{--color-moved=no} と同じです。

@item  @samp{--color-moved-ws=<modes>} 
これは、 @samp{--color-moved} の移動検出を実行するときに空白を無視する方法を設定します。
これらのモードは、コンマ区切りのリストとして指定できます:

@table @asis

@item  no 
移動行検出を実行するときに、空白(whitespace)を無視しない。

@item  ignore-space-at-eol 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  ignore-space-change 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  ignore-all-space 
行を比較するときは空白(whitespace)を無視します。これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  allow-indentation-change 
最初に移動検出で空白(whitespace)を無視し、空白(whitespace)の変更が行ごとに同じである場合にのみ、移動されたコードブロックをブロックにグループ化します。
これは他のモードと互換性がありません。
@end table

@item  @samp{--no-color-moved-ws} 
移動検出を実行するときは、空白(whitespace)を無視しないでください。これは、構成設定を上書きするために使用できます。
@samp{--color-moved-ws=no} と同じです。

@item  @samp{--word-diff[=<mode>]} 
<mode> を使用して変更された単語を区切ることにより、単語のdiffを表示します。デフォルトでは、単語は空白で区切られます。 以下の
@samp{--word-diff-regex} を参照してください。 <mode> のデフォルトは 'plain’です。 <mode>
は以下のいずれかである必要があります:

@table @asis

@item  color 
変更された単語(word)を色のみを使用して強調表示します。 @samp{--color} を意味します。

@item  plain 
単語を @samp{[-removed-]} および @samp{@{+added+@}} として表示します。
区切り文字が入力に表示されている場合、区切り文字をエスケープしようとしないため、出力があいまいになる可能性があります。

@item  porcelain 
スクリプトの使用を目的とした特別な行ベースの形式を使用します。追加/削除/無変更については、通常の統一されたdiff形式で印刷され、行の先頭の
@samp{+}/@samp{-}/` ` 文字で始まり、行の終わりまで続きます。入力の改行は、それ自体の行のチルダ @samp{~} で表されます。

@item  none 
単語(word)のdiffを再度無効にします。
@end table

注意: 最初のモードの名前にもかかわらず、有効になっている場合、すべてのモードで変更された部分を強調するために色が使用されることに注意してください。

@item  @samp{--word-diff-regex=<regex>} 
空白以外を単語と見なす代わりに、 <regex> を使用して単語が何であるかを決定します。また、すでに有効になっていない限り、この機能は
@samp{--word-diff} の機能を含んでいます。

<regex> の重複しないマッチはすべて、単語と見なされます。これらのマッチの間のすべては空白と見なされ、違いを見つけるためとしては無視されます！
正規表現に @samp{|[^[:space:]]}
を追加して、空白以外のすべての文字とマッチすることを確認することをお勧めします。改行を含むマッチは、改行で黙って切り捨てられます！

たとえば、 @samp{--word-diff-regex=.} は各文字を単語として扱い、それに応じて文字ごとの違いを表示します。

正規表現は、diffドライバーまたは構成オプション(configuration option)を介して設定することもできます。
gitattributes(5) または git-config(1)
を参照してください。これを指定すると、diffドライバーまたは構成設定(configuration
settings)が明示的にオーバーライドされます。diffドライバーは構成設定を上書きします。

@item  @samp{--color-words[=<regex>]} 
@samp{--word-diff=color} に @samp{--word-diff-regex=<regex>}
を加えたものに相当します(正規表現が指定されている場合)。

@item  @samp{--no-renames} 
構成ファイルにデフォルトで指定されている場合でも、名前変更の検出をオフにします。

@item  @samp{--[no-]rename-empty} 
名前変更ソースとして空のブロブを使用するかどうか。

@item  @samp{--check} 
変更によって競合マーカーまたは空白エラーが発生した場合に警告します。空白エラーと見なされるものは、 @samp{core.whitespace}
構成によって制御されます。
デフォルトでは、末尾の空白(空白のみで構成される行を含む)と、行の最初のインデント内で直後にタブ文字が続くスペース文字は、空白エラーと見なされます。問題が見つかった場合は、ゼロ以外のステータスで終了します。なお、
--exit-code とは互換性がありません。

@item  @samp{--ws-error-highlight=<kind>} 
diffの @samp{context} または @samp{old} または @samp{new} 行の空白エラーを強調表示します。複数の値はコンマで区切られ、 @samp{none}
は前の値をリセットし、 @samp{default} はリストを @samp{new} にリセットし、 @samp{all} は old、new、context
の省略形です。このオプションが指定されておらず、構成変数 @samp{diff.wsErrorHighlight} が設定されていない場合、 @samp{new}
行の空白エラーのみが強調表示されます。空白エラーは @samp{color.diff.whitespace} で色分けされています。

@item  @samp{--full-index} 
パッチ形式の出力を生成するときは、最初の一握りの文字(first handful of
characters)の代わりに、「インデックス」行にイメージ前およびイメージ後の完全ブロブオブジェクト名を表示します。

@item  @samp{--binary} 
@samp{--full-index} に加えて、 @samp{git-apply} で適用できるバイナリ差分を出力します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--abbrev[=<n>]} 
完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくとも
@emph{<n>} 桁の16進数の長さの最短のプレフィックスを表示します。diffパッチ出力形式では、 @samp{--full-index} が優先されます。つまり、
@samp{--full-index} が指定されている場合、 @samp{--abbrev} に関係なく、完全なブロブ名が表示されます。デフォルト以外の桁数は、
@samp{--abbrev=<n>} で指定できます。

@item  @samp{-B[<n>][/<m>]} 
@itemx  @samp{--break-rewrites[=[<n>][/<m>]]} 
完全な書き換えの変更を削除と作成のペアに分割します。これには以下の2つの目的があります:

これは、ファイルの完全な書き換えに相当する変更が、コンテキストとしてテキストで一致する非常に少数の行と混合された一連の削除と挿入としてではなく、古いものすべての単一の削除とそれに続く
すべての新しいものを1回挿入し、数値 @samp{m} が -B オプションのこの側面を制御します(デフォルトは60%)。 @samp{-B/70%}
は、Gitがそれを完全な書き換えと見なすために、元の30%未満が結果に残る必要があることを指定します(つまり、結果のパッチは、コンテキスト行と混合された一連の削除と挿入になります)。

-M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソースと見なされ(通常、 -M
は、消えたファイルのみを名前変更のソースと見なします)、数 @samp{n} が -Bオプションのこの側面を制御します(デフォルトは50%)。 @samp{-B20%}
は、ファイルのサイズの20%以上と比較して、追加および削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取得される資格があることを指定します。

@item  @samp{-M[<n>]} 
@itemx  @samp{--find-renames[=<n>]} 
名前の変更(renames)を検知する。
@samp{n} が指定されている場合、それは類似性インデックスのしきい値です
(つまり、ファイルのサイズと比較した追加/削除の量)。
たとえば、 @samp{-M90%} は、ファイルの90%以上が変更されていない場合、
Gitが削除/追加のペアを名前変更と見なす必要があることを意味します。
@samp{%} 記号がない場合、数値は小数として読み取られ、その前に小数点が付きます。
つまり、 @samp{-M5} は0.5になるため、@samp{-M50%} と同じになります。
同様に、 @samp{-M05} は @samp{-M5%} と同じです。
検出を正確な名前変更に制限するには、 @samp{-M100%} を使用します。
デフォルトの類似性インデックスは50%です。

@item  @samp{-C[<n>]} 
@itemx  @samp{--find-copies[=<n>]} 
名前と同様コピーを検出します。 @samp{--find-copies-harder} @samp{も参照してください。 `n} を指定すると、 @samp{-M<n>}
と同じ意味になります。

@item  @samp{--find-copies-harder} 
パフォーマンス上の理由から、デフォルトでは、 @samp{-C}
オプションは、コピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピーを検索します。このフラグにより、コマンドは変更されていないファイルをコピー元の候補として検査します。これは大規模なプロジェクトでは非常にコストのかかる操作であるため、注意して使用してください。
複数の @samp{-C} オプションを指定しても同じ効果があります。

@item  @samp{-D} 
@itemx  @samp{--irreversible-delete} 
削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを出力し、プレイメージと @samp{/dev/null}
の差分は出力しません。結果のパッチは、 @samp{patch} または @samp{git apply}
で適用されることを意図していません。これは、変更後にテキストを確認することに集中したい人のためだけのものです。さらに、出力には明らかに、そのようなパッチを手動でも逆に適用するのに十分な情報が不足しているため、オプションの名前が付けられています。

@samp{-B} と併用する場合は、削除/作成ペアの削除部分のプリイメージ(preimage)も省略してください。

@item  @samp{-l<num>} 
@samp{-M} および @samp{-C}
オプションには、名前変更/コピーのサブセットを安価に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペアになっていない宛先をすべての関連ソースと比較する徹底的なフォールバック部分が続きます。(名前の変更の場合、残りのペアになっていないソースのみが関係します。コピーの場合、すべての元のソースが関係します)。Nのソースと宛先の場合、この徹底的なチェックのコストは
O(N^2)
です。このオプションは、関係するソース/宛先ファイルの数が指定された数を超えた場合に、名前変更/コピー検出の完全な部分が実行されないようにします。デフォルトは
diff.renameLimit です。 値0は無制限として扱われることに注意してください。

@item  @samp{--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]} 
追加(Add)・コピー(Copy)・削除(Delete)・変更(Modify)・名前変更(Rename)されたファイル、タイプが変更されたファイル(T)、マージされていないファイル(U)、不明なファイル(X)、またはペアリングが壊れているファイル(B)のみを選択します。フィルタ文字(無しも含む)の任意の組み合わせを使用できます。
組み合わせに @samp{*} (全てまたは無し)が追加されると、比較で他の基準に一致するファイルがある場合、すべてのパスが選択されます。
他の基準に一致するファイルがない場合、何も選択されません。

また、逆に、除外したい時はこれらの各大文字指定を小文字にして指定します。例えば @samp{--diff-filter=ad}
は、追加および削除されたパスを除外します。

注意:すべてのdiffがすべてのタイプを特徴とするわけではないことに注意してください。
たとえば、インデックスから作業ツリーへのdiffにエントリを追加することはできません(diffに含まれるパスのセットは、インデックスの内容によって制限されるため)。
同様に、これらのタイプの検出が無効になっている場合、コピーおよび名前変更されたエントリは表示されません。

@item  @samp{-S<string>} 
ファイル内の指定の文字列(つまり、 addition 、deletion)の出現回数の差分を調べます。スクリプターが使用することを目的としています。

(構造体など)コードの正確なブロックを探していて、そのブロックが最初に作成されてからの履歴を知りたい場合に便利です。この機能を繰り返し使用して、プリイメージ(preimage)内の興味深いブロックを
@samp{-S} にフィードバックし、そしてあなたはそれをブロックの最初のバージョンを取得するまで続けます。

バイナリファイルも検索されます。

@item  @samp{-G<regex>} 
パッチテキストに <regex> にマッチする 追加/削除 された行が含まれている差分を探します。

@samp{-S<regex>-pickaxe-regex} と @samp{-G<regex>}
の違いを説明するために、同じファイル内で以下のdiffを使用してコミットすることを検討してください:

@example
+    return frotz(nitfol, two->ptr, 1, 0);
...
-    hit = frotz(nitfol, mf2.ptr, 1, 0);
@end example


@samp{git log -G"frotz\(nitfol"} はこのコミットを表示しますが、 @samp{git log -S"frotz\(nitfol"
--pickaxe-regex} は表示しません(その文字列の出現回数が変更されなかったため)。

@samp{--text} が提供されていない限り、 textconv フィルターのないバイナリファイルのパッチは無視されます。

詳細については gitdiffcore(7) の @emph{pickaxe} エントリを参照してください。

@item  @samp{--find-object=<object-id>} 
指定されたオブジェクトの出現回数を変更する違いを探します。 @samp{-S}
と同様に、引数だけが異なり、特定の文字列ではなく特定のオブジェクトIDを検索します。

オブジェクトは、ブロブまたはサブモジュールのコミットにすることができます。 これは、 @samp{git-log} の @samp{-t}
オプションがツリーも探すことを意味します。

@item  @samp{--pickaxe-all} 
@samp{-S} または @samp{-G} が変更を見つけたら、 <string>
の変更を含むファイルだけでなく、その変更セット(changeset)のすべての変更を表示します。

@item  @samp{--pickaxe-regex} 
@samp{-S} に指定した <string> を拡張POSIX正規表現として扱います。

@item  @samp{-O<orderfile>} 
ファイルが出力に表示される順序を制御します。これは @samp{diff.orderFile}
構成変数をオーバーライドします(git-config(1) 参照)。 @samp{diff.orderFile} をキャンセルするには、
@samp{-O/dev/null} を使用します。

出力順序は、 <orderfile>
内のglobパターンの順序によって決定されます。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力され、2番目のパターンに一致する(ただし最初のパターンには一致しない)パス名を持つすべてのファイルが次に出力されます。パス名がどのパターンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一致パターンがあるかのように、最後に出力されます。複数のパス名のランクが同じである場合(同じパターンに一致するが、以前のパターンには一致しない)、相互の出力順序は通常の順序です。

<orderfile> は以下のとおりパースされます:

@itemize 

@item
空白行は無視されるため、読みやすくするための区切りとして使用できます。

@item
ハッシュ ("@samp{#}") で始まる行は無視されるため、コメントに使用できます。
パターンがハッシュで始まる場合は、パターンの先頭にバックスラッシュ(訳注:日本では環境により円記号)("@samp{\}") を追加します。

@item
他の各行には、単一のパターンが含まれています。
@end itemize

パターンは、 FNM_PATHNAME フラグなしで fnmatch(3)
に使用されるパターンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポーネントをいくつも削除するとパターンと一致する場合、パス名もパターンと一致する点が異なります。
たとえば、パターン "@samp{foo*bar}" は、 "@samp{fooasdfbar}" および "@samp{foo/bar/baz/asdf}" と一致しますが、
"@samp{foobarx}" とは一致しません。

@item  @samp{--skip-to=<file>} 
@itemx  @samp{--rotate-to=<file>} 
名前付き <file> の前のファイルを出力から破棄するか(スキップして)、出力の最後に移動させます(ローテーションさせます)。 これらは主に @samp{git
difftool} コマンドを使用するために考案されたものであり、それ以外の場合はあまり役に立たない可能性があります。

@item  @samp{-R} 
2つの入力を交換します。 つまり、インデックスまたはディスク上のファイルとツリーの内容の違いを表示します。

@item  @samp{--relative[=<path>]} 
@itemx  @samp{--no-relative} 
プロジェクトのサブディレクトリから実行する場合、このオプションを使用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示するように指示できます。サブディレクトリ(ベアリポジトリなど)にいない場合は、引数として
<path> を指定することで、出力を作成するサブディレクトリに名前を付けることができます。 @samp{--no-relative`は、
`diff.relative} 設定オプションと以前の @samp{--relative} の両方を打ち消すために使用できます。

@item  @samp{-a} 
@itemx  @samp{--text} 
すべてのファイルをテキストとして扱います。

@item  @samp{--ignore-cr-at-eol} 
比較を行うときは、行末のキャリッジリターン(carriage-return)を無視します。

@item  @samp{--ignore-space-at-eol} 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  @samp{-b} 
@itemx  @samp{--ignore-space-change} 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  @samp{-w} 
@itemx  @samp{--ignore-all-space} 
行を比較するときは空白を無視します。 これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  @samp{--ignore-blank-lines} 
全て空白の行の変更は無視します。

@item  @samp{-I<regex>} 
@itemx  @samp{--ignore-matching-lines=<regex>} 
すべての行が <regex> にマッチする変更を無視します。このオプションは複数回指定できます。

@item  @samp{--inter-hunk-context=<lines>} 
指定された行数までの差分ハンク間のコンテキストを表示し、それによって互いに近いハンクを融合します。デフォルトは
@samp{diff.interHunkContext} で、設定オプションが設定されていない場合は0です。

@item  @samp{-W} 
@itemx  @samp{--function-context} 
関数全体を各変更のコンテキスト行として表示します。関数名は、 @samp{git diff}
がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の @emph{Defining a custom
hunk-header} を参照)。

@item  @samp{--exit-code} 
diff(1）と同様のコードでプログラムを終了させます。つまり、違いがあった場合は 1 で終了し、 0 は違いがないことを意味します。

@item  @samp{--quiet} 
プログラムのすべての出力を無効にします。 @samp{--exit-code} を意味します。

@item  @samp{--ext-diff} 
外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外部diffドライバーを設定する場合は、
git-log(1) およびその仲間と一緒にこのオプションを使用する必要があります。

@item  @samp{--no-ext-diff} 
外部diffドライバーを禁止します。

@item  @samp{--textconv} 
@itemx  @samp{--no-textconv} 
バイナリファイルを比較するときに、外部テキスト変換フィルターの実行を許可(または禁止)します。 詳細については、
gitattributes(5)
を参照してください。textconvフィルターは通常、一方向の変換であるため、結果のdiffは人間の消費に適していますが、適用(apply)することはできません。このため、textconvフィルターは、
git-diff(1) および git-log(1) に対してのみデフォルトで有効になりますが、
git-format-patch(1) またはdiff配管コマンドに対しては有効になりません。

@item  @samp{--ignore-submodules[=<when>]} 
diff生成のサブモジュールへの変更を無視します。 <when> は、
none・untracked・dirty・allのいずれかになります。これがデフォルトです。noneを使用すると、追跡されていないファイルまたは変更されたファイルが含まれている場合、またはそのHEADがスーパープロジェクトに記録されているコミットと異なる場合にサブモジュールが変更されたと見なされ、
git-config(1) または gitmodules(5) の
ignoreオプションの設定をオーバーライドするために使用できます。untrackedが使用されている場合、サブモジュールには追跡されていないコンテンツのみが含まれている場合、サブモジュールはダーティとは見なされません(ただし、変更されたコンテンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作業ツリーへのすべての変更が無視され、スーパープロジェクトに格納されているコミットへの変更のみが表示されます(これは1.7.0までの動作でした)。「all」を使用すると、サブモジュールへのすべての変更が非表示になります。

@item  @samp{--src-prefix=<prefix>} 
"a/" の代わりに、与えられたソースプレフィックス(source prefix)を表示します。

@item  @samp{--dst-prefix=<prefix>} 
"b/" の代わりに、指定された宛先プレフィックス(destination prefix)を表示します。

@item  @samp{--no-prefix} 
送信元(source)または宛先(destination)のプレフィックスを表示しません。

@item  @samp{--line-prefix=<prefix>} 
出力のすべての行に追加のプレフィックスを付加します。

@item  @samp{--ita-invisible-in-index} 
デフォルトでは、 "git add -N" によって追加されたエントリは、 "git diff" に既存の空のファイルとして表示され、 "git
diff --cached" に新しいファイルとして表示されます。このオプションを使用すると、エントリは "git diff"
では新しいファイルとして表示され、 "git diff --cached" では存在しません。このオプションは、
@samp{--ita-visible-in-index} で元に戻すことができます。どちらのオプションも実験的なものであり、将来削除される可能性があります。
@end table

これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照してください。

@table @asis

@item  @samp{-1 --base} 
@itemx  @samp{-2 --ours} 
@itemx  @samp{-3 --theirs} 
@itemx  @samp{-0} 
"base" バージョン または "our branch" または "their branch"
とそれぞれ異なります。これらのオプションを使用すると、マージされたエントリのdiffは表示されません。

デフォルトでは、 our branch (-2) とクリーンに解決されたパスに対してdiffを取ります。オプション -0
を指定すると、マージされていないエントリのdiff出力を省略し、 "Unmerged" と表示することができます。

@item  @samp{-c} 
@itemx  @samp{--cc} 
これは、ステージ2（ブランチ）、ステージ3（ブランチ）、および作業ツリーファイルを比較し、 @emph{diff-tree}
がこれらのフラグを使用してマージコミットを示すのと同様に、結合された差分を出力します。

@item  @samp{-q} 
存在しないファイルでも黙っています
@end table

@noindent

@chapheading Raw output format

@samp{git-diff-index} と @samp{git-diff-tree} と @samp{git-diff-files} と @samp{git diff --raw}
からの生の出力形式は非常に似ています。

これらのコマンドはすべて、2つのセットを比較します。なお、比較されるものは異なります:

@table @asis

@item  git-diff-index <tree-ish> 
<tree-ish> とファイルシステム上のファイルを比較します。

@item  git-diff-index --cached <tree-ish> 
<tree-ish> とインデックスを比較します。

@item  git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…] 
2つの引数で指定されたツリーを比較します。

@item  git-diff-files [<pattern>…] 
インデックスとファイルシステム上のファイルを比較します。
@end table

"git-diff-tree"
コマンドは、比較対象のハッシュ値を出力することで出力を開始します。その後、すべてのコマンドは、変更されたファイルごとに1つの出力行を出力します。

出力行は以下のようにフォーマットされます:

@example
in-place edit  :100644 100644 bcd1234 0123456 M file0
copy-edit      :100644 100644 abcd123 1234567 C68 file1 file2
rename-edit    :100644 100644 abcd123 1234567 R86 file1 file3
create         :000000 100644 0000000 1234567 A file4
delete         :100644 000000 1234567 0000000 D file5
unmerged       :000000 000000 0000000 0000000 U file6
@end example


つまり、左から右へ:

@enumerate 

@item
コロン(:)

@item
"src" のモード。作成(creation)またはマージされていない(unmerged)場合は 000000

@item
空白

@item
"dst" のモード。作成(creation)またはマージされていない(unmerged)場合は 000000

@item
空白

@item
"src" のsha1。作成(creation)またはマージされていない(unmerged)場合は 0@{40@}

@item
空白

@item
"dst" のsha1。作成(creation)またはマージされていない(unmerged)または作業ツリーにある場合は 0@{40@}

@item
空白

@item
ステータスの後に、オプションの「スコア数」("score" number)が続きます

@item
@samp{-z} オプションが使用されている場合はタブまたはNUL

@item
"src" のパス

@item
@samp{-z} オプションが使用されている場合タブまたはNUL。ステータスCまたはRにのみ存在します

@item
"dst" のパス。ステータスCまたはRにのみ存在します

@item
LFでレコードを終了します。 @samp{-z} オプションが使用されている場合はNULでレコードを終了します。
@end enumerate

ステータス文字の種類は以下のとおり:

@itemize 

@item
A: ファイルの追加

@item
C: ファイルを新しいファイルにコピー

@item
D: ファイルの削除

@item
M: ファイルの内容やモードの変更

@item
R: ファイル名の名前変更

@item
T: ファイルのタイプを変更

@item
U: ファイルはマージされていません(コミットする前にマージを完了する必要があります)

@item
X: 「不明な」変更タイプ(おそらくバグです。報告してください)
@end itemize

ステータス文字CとRの後には常にスコアが続きます(移動またはコピーのソースとターゲットの間の類似性のパーセンテージを示します)。ステータス文字Mの後には、ファイルの書き換えのスコア(非類似度のパーセンテージを示す)が続く場合があります。

<sha1> は、ファイルがファイルシステム上で新規で、インデックスと同期していない場合、すべて0として表示されます。

例:

@example
:100644 100644 5be4a4a 0000000 M file.c
@end example


@samp{-z`オプションを指定しない場合、構成変数 `core.quotePath} で説明されているように、通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。 @samp{-z}
を使用すると、ファイル名がそのまま出力され、行はNULバイトで終了します。

@noindent

@chapheading diff format for merges

"git-diff-tree" と "git-diff-files" と "git-diff --raw" は、 @samp{-c} または @samp{--cc}
オプションを使用して、マージコミットに対してもdiff出力を生成できます。出力は、以下の点で上記の形式とは異なります:

@enumerate 

@item
親ごとにコロン(:)があります

@item
より多くの "src" モードと "src" sha1があります

@item
statusは、各親のステータス文字を連結したものです

@item
オプションの「スコア数」はありません

@item
ファイルのタブ区切りのパス名
@end enumerate

@samp{-c} および ` -cc` の場合、履歴のいずれかの側でファイルの名前が変更された場合でも、宛先(dst)または最終パスのみが表示されます。
@samp{--combined-all-paths} を使用すると、各親のパスの名前が表示され、それに続いてマージコミットのパスの名前が表示されます。

例: @samp{--combined-all-paths} を使用しない @samp{-c} および @samp{--cc} の場合:

@example
::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c
::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       bar.sh
::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       phooey.c
@end example


例: @samp{-c} または @samp{--cc} のいずれかに @samp{--combined-all-paths} が追加された場合:

@example
::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c  desc.c  desc.c
::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       foo.sh  bar.sh  bar.sh
::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       fooey.c fuey.c  phooey.c
@end example


注意: 'combined diff’は、すべての親から変更されたファイルのみをリストすることに注意してください。

@noindent

@chapheading Generating patch text with -p

git-diff(1) 、 git-log(1) 、 git-show(1) 、
git-diff-index(1) 、 git-diff-tree(1) 、
git-diff-files(1) に @samp{-p} オプションを付けて実行するとパッチテキストを生成します。パッチテキストの作成は、
@samp{GIT_EXTERNAL_DIFF} と @samp{GIT_DIFF_OPTS} 環境変数( git(1) 参照)、および @samp{diff}
属性( gitattributes(5) 参照)を介してカスタマイズできます。

-pオプションが生成するものは、従来のdiff形式とは少々異なります:

@enumerate 

@item
先行して、以下のような "git diff" ヘッダーがあります:

@example
diff --git a/file1 b/file2
@end example

名前の変更/コピーが含まれない限り、 @samp{a/} と @samp{b/} のファイル名は同じです。 特に、作成または削除の場合でも、 @samp{a/} または @samp{b/}
ファイル名の代わりに @samp{/dev/ null} が使用されることはありません。

名前変更/コピーが含まれる場合、 @samp{file1} と`file2`
は、それぞれ名前変更/コピーのソースファイルの名前と、名前変更/コピーが生成するファイルの名前を示します。

@item
その後に、1つ以上の拡張ヘッダー行達が続きます:

@example
old mode <mode>
new mode <mode>
deleted file mode <mode>
new file mode <mode>
copy from <path>
copy to <path>
rename from <path>
rename to <path>
similarity index <number>
dissimilarity index <number>
index <hash>..<hash> <mode>
@end example

ファイルモードは、ファイルタイプとファイル許可ビットを含む6桁の8進数として出力されます。

拡張ヘッダーのパス名には、 @samp{a/} および @samp{b/} プレフィックスは含まれません。

類似インデックス(similarity index)は変更されていない行のパーセンテージであり、非類似インデックス(dissimilarity
index)は変更された行のパーセンテージです。これは切り捨てられた整数であり、その後にパーセント記号が続きます。したがって、100％の類似インデックス値は2つの等しいファイルを表し、100％の非類似性は古いファイルから新しいファイルに移行された行がないことを意味します。

インデックス行には、変更前後のブロブオブジェクト名が含まれます。 <mode>
は、ファイルモードが変更されない場合に含まれます。それ以外の場合、別々の行は古いモードと新しいモードを示します。

@item
通常の文字でないキャラクタ(\"unusual\" characters)を含むパス名は、構成変数 @samp{core.quotePath}
で説明されているように引用符で囲まれています( git-config(1)参照)。

@item
出力内のすべての @samp{file1} ファイルはコミット前のファイルを参照し、すべての @samp{file2}
ファイルはコミット後のファイルを参照します。各変更を各ファイルに順番に適用するのは誤りです。たとえば、以下のパッチはaとbを交換します:

@example
diff --git a/a b/b
rename from a
rename to b
diff --git a/b b/a
rename from b
rename to a
@end example

@item
ハンクのヘッダーには、ハンクが適用される関数の名前が記載されています。特定の言語に合わせてこれを調整する方法の詳細については、
gitattributes(5) の "Defining a custom hunk-header" を参照してください。
@end enumerate

@noindent

@chapheading Combined diff format

diffを生成するコマンドは、マージを表示するときに @samp{-c} または @samp{--cc} オプションを使用して「合成diff」(combined
diff)を生成できます。これは git-diff(1) または git-show(1)
でのマージを表示するときのデフォルトの形式です。 注意: これらのコマンドのいずれかに適切な @samp{--diff-merges}
オプションを指定して、特定の形式で差分を強制的に生成できることにも注意してください。

合成diff形式は以下のようになります:

@example
diff --combined describe.c
index fabadb8,cc95eb0..4866510
--- a/describe.c
+++ b/describe.c
@@@@@@ -98,20 -98,12 +98,20 @@@@@@
        return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
  @}

- static void describe(char *arg)
 -static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  @{
 +      unsigned char sha1[20];
 +      struct commit *cmit;
        struct commit_list *list;
        static int initialized = 0;
        struct commit_name *n;

 +      if (get_sha1(arg, sha1) < 0)
 +              usage(describe_usage);
 +      cmit = lookup_commit_reference(sha1);
 +      if (!cmit)
 +              usage(describe_usage);
 +
        if (!initialized) @{
                initialized = 1;
                for_each_ref(get_name);
@end example


@enumerate 

@item
まず "git diff"  ヘッダーがあり、以下のようになります( @samp{-c} オプションが使用されている場合):

@example
diff --combined file
@end example

または、以下のようになります( @samp{--cc} オプションが使用されている場合):

@example
diff --cc file
@end example

@item
その後に1つ以上の拡張ヘッダー行が続きます(以下の例は、2つの親とのマージを示しています):

@example
index <hash>,<hash>..<hash>
mode <mode>,<mode>..<mode>
new file mode <mode>
deleted file mode <mode>,<mode>
@end example

@samp{mode <mode>,<mode>..<mode>} 行は、<mode> の少なくとも1つが他の <mode>
と異なる場合にのみ表示されます。検出されたコンテンツの移動(名前の変更とコピーの検出)に関する情報を含む拡張ヘッダーは、2つの <tree-ish>
のdiffで機能するように設計されており、合成diff形式では使用されません。

@item
その後に2行の from-file/to-file ヘッダーが続きます

@example
--- a/file
+++ b/file
@end example

従来の統一diff形式の2行ヘッダーと同様に、 @samp{/dev/null} は、作成または削除されたファイルを通知するために使用されます。

ただし、 --combined-all-paths  オプションが指定されている場合、2行の from-file/to-file の代わりに、 N+1
行の from-file/to-file ヘッダーが取得されます。ここで、 N はマージコミットの親の数です。

@example
--- a/file
--- a/file
--- a/file
+++ b/file
@end example

この拡張形式は、名前変更またはコピー検出がアクティブな場合に役立ち、別の親のファイルの元の名前を確認できます。

@item
チャンクヘッダーの形式が変更され、誤って @samp{patch-p1}
にフィードされるのを防ぎます。合成差分形式は、マージコミットの変更を確認するために作成されたものであり、適用されることを意図したものではありません。この変更は、拡張された「インデックス」ヘッダーの変更に似ています:

@example
@@@@@@ <from-file-range> <from-file-range> <to-file-range> @@@@@@
@end example

合成diff形式のチャンクヘッダーには親の数+1の @samp{@@} 文字があります。
@end enumerate

従来の統一diff形式とは異なり、2つのファイルAとBが、 @samp{-} (マイナスはAに表示されますが、Bでは削除されます) または @samp{+}
(プラスはAにはありませんが、Bには追加されます)、または @samp{" "}（スペースは変更なし)
プレフィックスを持つ単一の列で表示される場合、この形式は2つ以上のファイル file1, file2,… を1つのファイルXと比較し、Xが各
fileN とどのように異なるかを示します。ファイルNごとに1つの列が出力行の前に追加され、Xの行が出力行とどのように異なるかを示します。

列Nの @samp{-} 文字は、その行が fileN に表示されているが、結果には表示されていないことを意味します。 列Nの @samp{+}
文字は、結果に行が表示され、 fileN にその行がないことを意味します(つまり、その親の観点から見て行が追加されたことを示す)。

上記の出力例では、関数のシグネチャが両方のファイルから見て変更されています(したがって、 file1 と file2 の両方から2つの @samp{-}
が削除され、さらに @samp{++} が追加されたため、 file1 と file2 のどちらにも表示されません)。また、他の8行は file1 と同じですが、
file2 には表示されません(したがって、接頭辞として @samp{+} が付けられます)。

@samp{git diff-tree -c} で表示される場合、マージコミットの親をマージ結果と比較します(つまり、 file1..fileN が親です)。
@samp{git diff-files -c} で表示される場合、2つの未解決のマージ親を作業ツリーファイルと比較します(つまり、 file1
はステージ2、別名「私たちのバージョン」、 file2 はステージ3、別名「彼らのバージョン」です)。

@noindent

@chapheading other diff formats

@samp{--summary} オプションは、新しく追加、削除、名前変更、およびコピーされたファイルを説明します。@samp{--stat} オプションは、
diffstat(1) グラフ を出力に追加します。これらのオプションは、 @samp{-p}
などの他のオプションと組み合わせることができ、人間が読むことを目的としています。

名前の変更またはコピーを伴う変更を表示する場合、 @samp{--stat}
出力は、パス名の共通のプレフィックスとサフィックスを組み合わせることにより、パス名をコンパクトにフォーマットします。
たとえば、4行を変更(modify)しながら @samp{arch/i386/Makefile} を @samp{arch/x86/Makefile}
に移動(move)する変更(change)は、次のように表示されます:

@example
arch/@{i386 => x86@}/Makefile    |   4 +--
@end example


@samp{--numstat} オプションは diffstat(1) 情報を提供しますが、人間ではなくソフトウェアで読むのを容易にするように設計されています。
@samp{--numstat} 出力のエントリは以下のようになります:

@example
1       2       README
3       1       arch/@{i386 => x86@}/Makefile
@end example


この形式は、左から右へ:

@enumerate 

@item
追加行数

@item
タブ

@item
削除行数

@item
タブ

@item
パス名(おそらく rename/copy 情報を含む)

@item
改行
@end enumerate

@samp{-z} 出力オプションが有効な場合、出力は以下のようにフォーマットされます:

@example
1       2       README NUL
3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL
@end example


これは:

@enumerate 

@item
追加行数

@item
タブ

@item
削除行数

@item
タブ

@item
NUL(rename/copy された場合のみ存在します)

@item
プリイメージのパス名

@item
NUL(rename/copy された場合のみ存在します)

@item
ポストイメージのパス名(rename/copy された場合のみ存在します)

@item
NUL
@end enumerate

名前が変更された場合のプリイメージパスの前の追加の @samp{NUL}
は、出力を読み取るスクリプトが、先読みせずに、読み取られている現在のレコードがシングルパスレコードであるか、名前変更/コピーレコードであるか、を判断できるようにするためです。追加および削除された行を読み取った後、
@samp{NUL} まで読み取るとパス名が生成されますが、それが @samp{NUL} の場合、レコードには2つのパスが表示されます。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-diff-index,,,Top
@chapheading Name

git-diff-index — Compare a tree to the working tree or index

@noindent

@chapheading Synopsis

@display
git diff-index [-m] [--cached] [--merge-base] [<common diff options>] <tree-ish> [<path>…]
@end display


@noindent

@chapheading DESCRIPTION

Compares the content and mode of the blobs found in a tree object with the
corresponding tracked files in the working tree, or with the corresponding
paths in the index.  When <path> arguments are present, compares only paths
matching those patterns.  Otherwise all tracked files are compared.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-p} 
@itemx  @samp{-u} 
@itemx  @samp{--patch} 
パッチを生成します(generating patches に関するセクションを参照)。

@item  @samp{-s} 
@itemx  @samp{--no-patch} 
diff出力を抑制します。デフォルトでパッチを表示する @samp{git show} のようなコマンド、または @samp{--patch}
の効果をキャンセルする場合に便利です。

@item  @samp{-U<n>} 
@itemx  @samp{--unified=<n>} 
通常の3行ではなく、<n> 行の内容でdiffを生成します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--output=<file>} 
stdout ではなく指定のファイルに出力します。

@item  @samp{--output-indicator-new=<char>} 
@itemx  @samp{--output-indicator-old=<char>} 
@itemx  @samp{--output-indicator-context=<char>} 
生成されたパッチの新しい行、古い行、またはコンテキスト行を示すために使用される文字を指定します。 通常、それらはそれぞれ @emph{+} 、 @emph{-} 、 ' '
です。

@item  @samp{--raw} 
生形式(raw format)でdiffを生成します。
これがデフォルトです。

@item  @samp{--patch-with-raw} 
@samp{-p --raw} の同義語。

@item  @samp{--indent-heuristic} 
diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッチを読みやすくします。 これがデフォルトです。

@item  @samp{--no-indent-heuristic} 
インデントヒューリスティック(indent heuristic)を無効にします。

@item  @samp{--minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{--patience} 
"patience diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--histogram} 
"histogram diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--anchored=<text>} 
"anchored diff" アルゴリズムを使用してdiffを生成します。

このオプションは複数回指定できます。

行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる場合、このアルゴリズムは、その行が出力に削除または追加として表示されないようにします。内部で
"patience diff" アルゴリズムを使用します。

@item  @samp{--diff-algorithm=@{patience|minimal|histogram|myers@}} 
diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

@table @asis

@item  @samp{default}, @samp{myers} 
基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、これがデフォルトです。

@item  @samp{minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{patience} 
パッチを生成する時に "patience diff" アルゴリズムを使います。

@item  @samp{histogram} 
このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張して、「発生率の低い共通要素をサポート」(support
low-occurrence common elements)します。
@end table

たとえば、 あなたが @samp{diff.algorithm}
変数をデフォルト以外の値に設定した上で、それでもデフォルト値を使用する場合は、@samp{--diff-algorithm=default}
オプションを使用する必要があります。

@item  @samp{--stat[=<width>[,<name-width>[,<count>]]]} 
diffstatを生成します。
デフォルトでは、必要なだけのスペースがファイル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォルトで端末幅、または端末に接続されていない場合は80桁であり、
@samp{<width>} で上書きできます。ファイル名部分の幅は、コンマの後に別の幅 @samp{<name-width>}
を指定することで制限できます。グラフ部分の幅は、 @samp{--stat-graph-width=<width>}
(統計グラフを生成するすべてのコマンドに影響します)を使用するか、 @samp{diff.statGraphWidth=<width>} ( @samp{git
format-patch} に影響しません)を設定することによって制限できます。3番目のパラメータ @samp{<count>}
を指定することにより、出力を最初の @samp{<count>} 行に制限し、それに @samp{...} が続く形にできます。

これらのパラメータは、 @samp{--stat-width=<width>} と @samp{--stat-name-width=<name-width>} と
@samp{--stat-count=<count>} を使用して個別に設定することもできます。

@item  @samp{--compact-summary} 
ファイルの作成や削除( "new" または "gone" 。オプションでシンボリックリンクの場合は "+l"
)、diffstatのモード変更(実行可能ビットを追加または削除する場合は、それぞれ "+x" または "-x"
)など、拡張ヘッダー情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置かれます。本機能は @samp{--stat} の機能を含んでいます。

@item  @samp{--numstat} 
@samp{--stat`に似ていますが、プログラムで処理しやすい(machine
friendly)ように、追加および削除された行数を10進表記とパス名で省略形なしで表示します。バイナリファイルの場合、 `0 0} の代わりに2つの
@samp{-} を出力します。

@item  @samp{--shortstat} 
変更されたファイルの総数と、追加および削除された行の数を含む @samp{--stat} 形式の最後の行のみを出力します。

@item  @samp{-X[<param1,param2,...>]} 
@itemx  @samp{--dirstat[=<param1,param2,...>]} 
各サブディレクトリの相対的な変更量の分布を出力します。 @samp{--dirstat}
の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズできます。デフォルトは、 @samp{diff.dirstat}
構成変数によって制御されます(git-config(1) 参照)。以下のパラメータを使用できます:

@table @asis

@item  @samp{changes} 
ソースから削除された、または宛先に追加された行をカウントして、dirstat数を計算します。これは、ファイル内の純粋なコード移動の量を無視します。つまり、ファイル内の行の再配置は、他の変更ほどカウントされません。これは、パラメーターが指定されていない場合のデフォルトの動作です。

@item  @samp{lines} 
通常の行ベースのdiff分析を実行し、削除/追加された行数を合計して、dirstat数を計算します。
(バイナリファイルの場合、バイナリファイルには行の概念がないため、代わりに64バイトのチャンクをカウントします)。 これは @samp{changes}
動作よりも高価な @samp{--dirstat} 動作ですが、他の変更と同じようにファイル内の再配置された行をカウントします。結果の出力は、他の
@samp{--*stat} オプションから得られるものと一致しています。

@item  @samp{files} 
変更されたファイルの数を数えて、dirstat数を計算します。変更された各ファイルは、dirstat分析で等しくカウントされます。これは、ファイルの内容をまったく調べる必要がないため、計算コストが最もかからない
@samp{--dirstat} の動作です。

@item  @samp{cumulative} 
親ディレクトリの子ディレクトリの変更も同様にカウントします。 @samp{cumulative}(累積的)
を使用する場合、報告されるパーセンテージの合計が100%を超える場合があることに注意してください。デフォルトの(非累積的な)動作は、@samp{noncumulative}
パラメーターで指定できます。

@item  <limit> 
整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指定します。指定の割合より少ないディレクトリは、出力に表示されません。
@end table

例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディレクトリに子ディレクトリの数を累積しながら、変更されたファイルをカウント:
@samp{--dirstat=files,10,cumulative}

@item  @samp{--cumulative} 
@samp{--dirstat=cumulative} と同義語

@item  @samp{--dirstat-by-file[=<param1,param2>...]} 
@samp{--dirstat=files,param1,param2...} と同義語

@item  @samp{--summary} 
作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約(condensed summary)を出力します。

@item  @samp{--patch-with-stat} 
@samp{-p --stat} と同義語。

@item  @samp{-z} 
@samp{--raw} または @samp{--numstat} または @samp{--name-only} または @samp{--name-status} が指定されている場合は
パス名を変更せず、出力フィールドターミネータとしてNULLを使用してください。

このオプションがないと、構成変数 @samp{core.quotePath} で説明されているように、 通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。

@item  @samp{--name-only} 
変更されたファイルの名前のみを表示します。 多くの場合、ファイル名はUTF-8でエンコードされます。 詳細については、
git-log(1) のマニュアルページにあるエンコーディングに関する議論(the discussion about
encoding)を参照してください。

@item  @samp{--name-status} 
変更されたファイルの名前とステータスのみを表示します。ステータス文字の意味については、 @samp{--diff-filter}
オプションの説明を参照してください。 @samp{--name-only} と同じように、ファイル名はしばしばUTF-8でエンコードされます。

@item  @samp{--submodule[=<format>]} 
サブモジュールの違いをどのように表示するかを指定します。 @samp{--submodule=short} を指定する場合、 @emph{short}
形式が使用されます。この形式は、範囲の最初と最後にコミットの名前を表示するだけです。 @samp{--submodule} または
@samp{--submodule=log} が指定されている場合、 @emph{log} 形式が使用されます。この形式では、
git-submodule(1) @samp{summary} のように範囲内のコミットが一覧表示されます。 @samp{--submodule=diff}
が指定されている場合、 @emph{diff}
形式が使用されます。この形式は、コミット範囲間のサブモジュールの内容の変更のインラインdiffを示します。configオプションが設定されていない場合、デフォルトは
@samp{diff.submodule} または @emph{short} 形式です。

@item  @samp{--color[=<when>]} 
色付きのdiffを表示します。 @samp{--color} (つまり、 @emph{=<when>} ) は @samp{--color=always} と同じです。
@emph{<when>} は、 @samp{always} または @samp{never} または @samp{auto} のいずれかになります。

@item  @samp{--no-color} 
カラーdiffをオフにします。
@samp{--color=never} と同じです。

@item  @samp{--color-moved[=<mode>]} 
ソースコードの移動した行を別の色にします。
<mode>は、オプションが指定されていない場合はデフォルトで @emph{no} になり、
モードが指定されていないオプションが指定されている場合は @emph{zebra} になります。
モードは以下のいずれかでなければなりません:

@table @asis

@item  no 
移動行をハイライトしません。

@item  default 
@samp{zebra} の同義語です。これは、将来、より賢明なモードに変更される可能性があります。

@item  plain 
ある場所で追加され、別の場所で削除された行は、 @emph{color.diff.newMoved} で色付けされます。 同様に、
@emph{color.diff.oldMoved}
は、差分の別の場所に追加された削除された行に使用されます。このモードは移動された行をピックアップしますが、コードのブロックが順列なしで移動されたかどうかを判断することはレビューではあまり役に立ちません。

@item  blocks 
少なくとも20文字の英数字の移動テキストのブロックが貪欲に検出されます。検出されたブロックは、 @emph{color.diff.@{old,new@}Moved}
色のいずれかを使用して色付けされます。隣接するブロックを区別することはできません。

@item  zebra 
移動されたテキストのブロックは、 @emph{blocks} モードの場合と同様に検出されます。 ブロックは、
@emph{color.diff.@{old,new@}Moved} 色または @emph{color.diff.@{old,new@}MovedAlternative}
色のいずれかを使用して色付けされます。2つの色の間の変化は、新しいブロックが検出されたことを示します。

@item  dimmed-zebra 
@emph{zebra}
に似ていますが、移動されたコードの重要でない部分の追加の調光(dimmed)が実行されます。隣接する2つのブロックの境界線は興味深いと見なされ、残りは興味深いものではありません。
@samp{dimmed_zebra} は非推奨の同義語です。
@end table

@item  @samp{--no-color-moved} 
移動検出をオフにします。 これは、構成設定を上書きするために使用できます。 @samp{--color-moved=no} と同じです。

@item  @samp{--color-moved-ws=<modes>} 
これは、 @samp{--color-moved} の移動検出を実行するときに空白を無視する方法を設定します。
これらのモードは、コンマ区切りのリストとして指定できます:

@table @asis

@item  no 
移動行検出を実行するときに、空白(whitespace)を無視しない。

@item  ignore-space-at-eol 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  ignore-space-change 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  ignore-all-space 
行を比較するときは空白(whitespace)を無視します。これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  allow-indentation-change 
最初に移動検出で空白(whitespace)を無視し、空白(whitespace)の変更が行ごとに同じである場合にのみ、移動されたコードブロックをブロックにグループ化します。
これは他のモードと互換性がありません。
@end table

@item  @samp{--no-color-moved-ws} 
移動検出を実行するときは、空白(whitespace)を無視しないでください。これは、構成設定を上書きするために使用できます。
@samp{--color-moved-ws=no} と同じです。

@item  @samp{--word-diff[=<mode>]} 
<mode> を使用して変更された単語を区切ることにより、単語のdiffを表示します。デフォルトでは、単語は空白で区切られます。 以下の
@samp{--word-diff-regex} を参照してください。 <mode> のデフォルトは 'plain’です。 <mode>
は以下のいずれかである必要があります:

@table @asis

@item  color 
変更された単語(word)を色のみを使用して強調表示します。 @samp{--color} を意味します。

@item  plain 
単語を @samp{[-removed-]} および @samp{@{+added+@}} として表示します。
区切り文字が入力に表示されている場合、区切り文字をエスケープしようとしないため、出力があいまいになる可能性があります。

@item  porcelain 
スクリプトの使用を目的とした特別な行ベースの形式を使用します。追加/削除/無変更については、通常の統一されたdiff形式で印刷され、行の先頭の
@samp{+}/@samp{-}/` ` 文字で始まり、行の終わりまで続きます。入力の改行は、それ自体の行のチルダ @samp{~} で表されます。

@item  none 
単語(word)のdiffを再度無効にします。
@end table

注意: 最初のモードの名前にもかかわらず、有効になっている場合、すべてのモードで変更された部分を強調するために色が使用されることに注意してください。

@item  @samp{--word-diff-regex=<regex>} 
空白以外を単語と見なす代わりに、 <regex> を使用して単語が何であるかを決定します。また、すでに有効になっていない限り、この機能は
@samp{--word-diff} の機能を含んでいます。

<regex> の重複しないマッチはすべて、単語と見なされます。これらのマッチの間のすべては空白と見なされ、違いを見つけるためとしては無視されます！
正規表現に @samp{|[^[:space:]]}
を追加して、空白以外のすべての文字とマッチすることを確認することをお勧めします。改行を含むマッチは、改行で黙って切り捨てられます！

たとえば、 @samp{--word-diff-regex=.} は各文字を単語として扱い、それに応じて文字ごとの違いを表示します。

正規表現は、diffドライバーまたは構成オプション(configuration option)を介して設定することもできます。
gitattributes(5) または git-config(1)
を参照してください。これを指定すると、diffドライバーまたは構成設定(configuration
settings)が明示的にオーバーライドされます。diffドライバーは構成設定を上書きします。

@item  @samp{--color-words[=<regex>]} 
@samp{--word-diff=color} に @samp{--word-diff-regex=<regex>}
を加えたものに相当します(正規表現が指定されている場合)。

@item  @samp{--no-renames} 
構成ファイルにデフォルトで指定されている場合でも、名前変更の検出をオフにします。

@item  @samp{--[no-]rename-empty} 
名前変更ソースとして空のブロブを使用するかどうか。

@item  @samp{--check} 
変更によって競合マーカーまたは空白エラーが発生した場合に警告します。空白エラーと見なされるものは、 @samp{core.whitespace}
構成によって制御されます。
デフォルトでは、末尾の空白(空白のみで構成される行を含む)と、行の最初のインデント内で直後にタブ文字が続くスペース文字は、空白エラーと見なされます。問題が見つかった場合は、ゼロ以外のステータスで終了します。なお、
--exit-code とは互換性がありません。

@item  @samp{--ws-error-highlight=<kind>} 
diffの @samp{context} または @samp{old} または @samp{new} 行の空白エラーを強調表示します。複数の値はコンマで区切られ、 @samp{none}
は前の値をリセットし、 @samp{default} はリストを @samp{new} にリセットし、 @samp{all} は old、new、context
の省略形です。このオプションが指定されておらず、構成変数 @samp{diff.wsErrorHighlight} が設定されていない場合、 @samp{new}
行の空白エラーのみが強調表示されます。空白エラーは @samp{color.diff.whitespace} で色分けされています。

@item  @samp{--full-index} 
パッチ形式の出力を生成するときは、最初の一握りの文字(first handful of
characters)の代わりに、「インデックス」行にイメージ前およびイメージ後の完全ブロブオブジェクト名を表示します。

@item  @samp{--binary} 
@samp{--full-index} に加えて、 @samp{git-apply} で適用できるバイナリ差分を出力します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--abbrev[=<n>]} 
完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくとも
@emph{<n>} 桁の16進数の長さの最短のプレフィックスを表示します。diffパッチ出力形式では、 @samp{--full-index} が優先されます。つまり、
@samp{--full-index} が指定されている場合、 @samp{--abbrev} に関係なく、完全なブロブ名が表示されます。デフォルト以外の桁数は、
@samp{--abbrev=<n>} で指定できます。

@item  @samp{-B[<n>][/<m>]} 
@itemx  @samp{--break-rewrites[=[<n>][/<m>]]} 
完全な書き換えの変更を削除と作成のペアに分割します。これには以下の2つの目的があります:

これは、ファイルの完全な書き換えに相当する変更が、コンテキストとしてテキストで一致する非常に少数の行と混合された一連の削除と挿入としてではなく、古いものすべての単一の削除とそれに続く
すべての新しいものを1回挿入し、数値 @samp{m} が -B オプションのこの側面を制御します(デフォルトは60%)。 @samp{-B/70%}
は、Gitがそれを完全な書き換えと見なすために、元の30%未満が結果に残る必要があることを指定します(つまり、結果のパッチは、コンテキスト行と混合された一連の削除と挿入になります)。

-M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソースと見なされ(通常、 -M
は、消えたファイルのみを名前変更のソースと見なします)、数 @samp{n} が -Bオプションのこの側面を制御します(デフォルトは50%)。 @samp{-B20%}
は、ファイルのサイズの20%以上と比較して、追加および削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取得される資格があることを指定します。

@item  @samp{-M[<n>]} 
@itemx  @samp{--find-renames[=<n>]} 
名前の変更(renames)を検知する。
@samp{n} が指定されている場合、それは類似性インデックスのしきい値です
(つまり、ファイルのサイズと比較した追加/削除の量)。
たとえば、 @samp{-M90%} は、ファイルの90%以上が変更されていない場合、
Gitが削除/追加のペアを名前変更と見なす必要があることを意味します。
@samp{%} 記号がない場合、数値は小数として読み取られ、その前に小数点が付きます。
つまり、 @samp{-M5} は0.5になるため、@samp{-M50%} と同じになります。
同様に、 @samp{-M05} は @samp{-M5%} と同じです。
検出を正確な名前変更に制限するには、 @samp{-M100%} を使用します。
デフォルトの類似性インデックスは50%です。

@item  @samp{-C[<n>]} 
@itemx  @samp{--find-copies[=<n>]} 
名前と同様コピーを検出します。 @samp{--find-copies-harder} @samp{も参照してください。 `n} を指定すると、 @samp{-M<n>}
と同じ意味になります。

@item  @samp{--find-copies-harder} 
パフォーマンス上の理由から、デフォルトでは、 @samp{-C}
オプションは、コピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピーを検索します。このフラグにより、コマンドは変更されていないファイルをコピー元の候補として検査します。これは大規模なプロジェクトでは非常にコストのかかる操作であるため、注意して使用してください。
複数の @samp{-C} オプションを指定しても同じ効果があります。

@item  @samp{-D} 
@itemx  @samp{--irreversible-delete} 
削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを出力し、プレイメージと @samp{/dev/null}
の差分は出力しません。結果のパッチは、 @samp{patch} または @samp{git apply}
で適用されることを意図していません。これは、変更後にテキストを確認することに集中したい人のためだけのものです。さらに、出力には明らかに、そのようなパッチを手動でも逆に適用するのに十分な情報が不足しているため、オプションの名前が付けられています。

@samp{-B} と併用する場合は、削除/作成ペアの削除部分のプリイメージ(preimage)も省略してください。

@item  @samp{-l<num>} 
@samp{-M} および @samp{-C}
オプションには、名前変更/コピーのサブセットを安価に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペアになっていない宛先をすべての関連ソースと比較する徹底的なフォールバック部分が続きます。(名前の変更の場合、残りのペアになっていないソースのみが関係します。コピーの場合、すべての元のソースが関係します)。Nのソースと宛先の場合、この徹底的なチェックのコストは
O(N^2)
です。このオプションは、関係するソース/宛先ファイルの数が指定された数を超えた場合に、名前変更/コピー検出の完全な部分が実行されないようにします。デフォルトは
diff.renameLimit です。 値0は無制限として扱われることに注意してください。

@item  @samp{--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]} 
追加(Add)・コピー(Copy)・削除(Delete)・変更(Modify)・名前変更(Rename)されたファイル、タイプが変更されたファイル(T)、マージされていないファイル(U)、不明なファイル(X)、またはペアリングが壊れているファイル(B)のみを選択します。フィルタ文字(無しも含む)の任意の組み合わせを使用できます。
組み合わせに @samp{*} (全てまたは無し)が追加されると、比較で他の基準に一致するファイルがある場合、すべてのパスが選択されます。
他の基準に一致するファイルがない場合、何も選択されません。

また、逆に、除外したい時はこれらの各大文字指定を小文字にして指定します。例えば @samp{--diff-filter=ad}
は、追加および削除されたパスを除外します。

注意:すべてのdiffがすべてのタイプを特徴とするわけではないことに注意してください。
たとえば、インデックスから作業ツリーへのdiffにエントリを追加することはできません(diffに含まれるパスのセットは、インデックスの内容によって制限されるため)。
同様に、これらのタイプの検出が無効になっている場合、コピーおよび名前変更されたエントリは表示されません。

@item  @samp{-S<string>} 
ファイル内の指定の文字列(つまり、 addition 、deletion)の出現回数の差分を調べます。スクリプターが使用することを目的としています。

(構造体など)コードの正確なブロックを探していて、そのブロックが最初に作成されてからの履歴を知りたい場合に便利です。この機能を繰り返し使用して、プリイメージ(preimage)内の興味深いブロックを
@samp{-S} にフィードバックし、そしてあなたはそれをブロックの最初のバージョンを取得するまで続けます。

バイナリファイルも検索されます。

@item  @samp{-G<regex>} 
パッチテキストに <regex> にマッチする 追加/削除 された行が含まれている差分を探します。

@samp{-S<regex>-pickaxe-regex} と @samp{-G<regex>}
の違いを説明するために、同じファイル内で以下のdiffを使用してコミットすることを検討してください:

@example
+    return frotz(nitfol, two->ptr, 1, 0);
...
-    hit = frotz(nitfol, mf2.ptr, 1, 0);
@end example


@samp{git log -G"frotz\(nitfol"} はこのコミットを表示しますが、 @samp{git log -S"frotz\(nitfol"
--pickaxe-regex} は表示しません(その文字列の出現回数が変更されなかったため)。

@samp{--text} が提供されていない限り、 textconv フィルターのないバイナリファイルのパッチは無視されます。

詳細については gitdiffcore(7) の @emph{pickaxe} エントリを参照してください。

@item  @samp{--find-object=<object-id>} 
指定されたオブジェクトの出現回数を変更する違いを探します。 @samp{-S}
と同様に、引数だけが異なり、特定の文字列ではなく特定のオブジェクトIDを検索します。

オブジェクトは、ブロブまたはサブモジュールのコミットにすることができます。 これは、 @samp{git-log} の @samp{-t}
オプションがツリーも探すことを意味します。

@item  @samp{--pickaxe-all} 
@samp{-S} または @samp{-G} が変更を見つけたら、 <string>
の変更を含むファイルだけでなく、その変更セット(changeset)のすべての変更を表示します。

@item  @samp{--pickaxe-regex} 
@samp{-S} に指定した <string> を拡張POSIX正規表現として扱います。

@item  @samp{-O<orderfile>} 
ファイルが出力に表示される順序を制御します。これは @samp{diff.orderFile}
構成変数をオーバーライドします(git-config(1) 参照)。 @samp{diff.orderFile} をキャンセルするには、
@samp{-O/dev/null} を使用します。

出力順序は、 <orderfile>
内のglobパターンの順序によって決定されます。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力され、2番目のパターンに一致する(ただし最初のパターンには一致しない)パス名を持つすべてのファイルが次に出力されます。パス名がどのパターンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一致パターンがあるかのように、最後に出力されます。複数のパス名のランクが同じである場合(同じパターンに一致するが、以前のパターンには一致しない)、相互の出力順序は通常の順序です。

<orderfile> は以下のとおりパースされます:

@itemize 

@item
空白行は無視されるため、読みやすくするための区切りとして使用できます。

@item
ハッシュ ("@samp{#}") で始まる行は無視されるため、コメントに使用できます。
パターンがハッシュで始まる場合は、パターンの先頭にバックスラッシュ(訳注:日本では環境により円記号)("@samp{\}") を追加します。

@item
他の各行には、単一のパターンが含まれています。
@end itemize

パターンは、 FNM_PATHNAME フラグなしで fnmatch(3)
に使用されるパターンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポーネントをいくつも削除するとパターンと一致する場合、パス名もパターンと一致する点が異なります。
たとえば、パターン "@samp{foo*bar}" は、 "@samp{fooasdfbar}" および "@samp{foo/bar/baz/asdf}" と一致しますが、
"@samp{foobarx}" とは一致しません。

@item  @samp{--skip-to=<file>} 
@itemx  @samp{--rotate-to=<file>} 
名前付き <file> の前のファイルを出力から破棄するか(スキップして)、出力の最後に移動させます(ローテーションさせます)。 これらは主に @samp{git
difftool} コマンドを使用するために考案されたものであり、それ以外の場合はあまり役に立たない可能性があります。

@item  @samp{-R} 
2つの入力を交換します。 つまり、インデックスまたはディスク上のファイルとツリーの内容の違いを表示します。

@item  @samp{--relative[=<path>]} 
@itemx  @samp{--no-relative} 
プロジェクトのサブディレクトリから実行する場合、このオプションを使用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示するように指示できます。サブディレクトリ(ベアリポジトリなど)にいない場合は、引数として
<path> を指定することで、出力を作成するサブディレクトリに名前を付けることができます。 @samp{--no-relative`は、
`diff.relative} 設定オプションと以前の @samp{--relative} の両方を打ち消すために使用できます。

@item  @samp{-a} 
@itemx  @samp{--text} 
すべてのファイルをテキストとして扱います。

@item  @samp{--ignore-cr-at-eol} 
比較を行うときは、行末のキャリッジリターン(carriage-return)を無視します。

@item  @samp{--ignore-space-at-eol} 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  @samp{-b} 
@itemx  @samp{--ignore-space-change} 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  @samp{-w} 
@itemx  @samp{--ignore-all-space} 
行を比較するときは空白を無視します。 これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  @samp{--ignore-blank-lines} 
全て空白の行の変更は無視します。

@item  @samp{-I<regex>} 
@itemx  @samp{--ignore-matching-lines=<regex>} 
すべての行が <regex> にマッチする変更を無視します。このオプションは複数回指定できます。

@item  @samp{--inter-hunk-context=<lines>} 
指定された行数までの差分ハンク間のコンテキストを表示し、それによって互いに近いハンクを融合します。デフォルトは
@samp{diff.interHunkContext} で、設定オプションが設定されていない場合は0です。

@item  @samp{-W} 
@itemx  @samp{--function-context} 
関数全体を各変更のコンテキスト行として表示します。関数名は、 @samp{git diff}
がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の @emph{Defining a custom
hunk-header} を参照)。

@item  @samp{--exit-code} 
diff(1）と同様のコードでプログラムを終了させます。つまり、違いがあった場合は 1 で終了し、 0 は違いがないことを意味します。

@item  @samp{--quiet} 
プログラムのすべての出力を無効にします。 @samp{--exit-code} を意味します。

@item  @samp{--ext-diff} 
外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外部diffドライバーを設定する場合は、
git-log(1) およびその仲間と一緒にこのオプションを使用する必要があります。

@item  @samp{--no-ext-diff} 
外部diffドライバーを禁止します。

@item  @samp{--textconv} 
@itemx  @samp{--no-textconv} 
バイナリファイルを比較するときに、外部テキスト変換フィルターの実行を許可(または禁止)します。 詳細については、
gitattributes(5)
を参照してください。textconvフィルターは通常、一方向の変換であるため、結果のdiffは人間の消費に適していますが、適用(apply)することはできません。このため、textconvフィルターは、
git-diff(1) および git-log(1) に対してのみデフォルトで有効になりますが、
git-format-patch(1) またはdiff配管コマンドに対しては有効になりません。

@item  @samp{--ignore-submodules[=<when>]} 
diff生成のサブモジュールへの変更を無視します。 <when> は、
none・untracked・dirty・allのいずれかになります。これがデフォルトです。noneを使用すると、追跡されていないファイルまたは変更されたファイルが含まれている場合、またはそのHEADがスーパープロジェクトに記録されているコミットと異なる場合にサブモジュールが変更されたと見なされ、
git-config(1) または gitmodules(5) の
ignoreオプションの設定をオーバーライドするために使用できます。untrackedが使用されている場合、サブモジュールには追跡されていないコンテンツのみが含まれている場合、サブモジュールはダーティとは見なされません(ただし、変更されたコンテンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作業ツリーへのすべての変更が無視され、スーパープロジェクトに格納されているコミットへの変更のみが表示されます(これは1.7.0までの動作でした)。「all」を使用すると、サブモジュールへのすべての変更が非表示になります。

@item  @samp{--src-prefix=<prefix>} 
"a/" の代わりに、与えられたソースプレフィックス(source prefix)を表示します。

@item  @samp{--dst-prefix=<prefix>} 
"b/" の代わりに、指定された宛先プレフィックス(destination prefix)を表示します。

@item  @samp{--no-prefix} 
送信元(source)または宛先(destination)のプレフィックスを表示しません。

@item  @samp{--line-prefix=<prefix>} 
出力のすべての行に追加のプレフィックスを付加します。

@item  @samp{--ita-invisible-in-index} 
デフォルトでは、 "git add -N" によって追加されたエントリは、 "git diff" に既存の空のファイルとして表示され、 "git
diff --cached" に新しいファイルとして表示されます。このオプションを使用すると、エントリは "git diff"
では新しいファイルとして表示され、 "git diff --cached" では存在しません。このオプションは、
@samp{--ita-visible-in-index} で元に戻すことができます。どちらのオプションも実験的なものであり、将来削除される可能性があります。
@end table

これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照してください。

@table @asis

@item  <tree-ish> 
The id of a tree object to diff against.

@item  @samp{--cached} 
Do not consider the on-disk file at all.

@item  @samp{--merge-base} 
Instead of comparing <tree-ish> directly, use the merge base between
<tree-ish> and HEAD instead.  <tree-ish> must be a commit.

@item  @samp{-m} 
By default, files recorded in the index but not checked out are reported as
deleted.  This flag makes @emph{git diff-index} say that all non-checked-out
files are up to date.
@end table

@noindent

@chapheading Raw output format

@samp{git-diff-index} と @samp{git-diff-tree} と @samp{git-diff-files} と @samp{git diff --raw}
からの生の出力形式は非常に似ています。

これらのコマンドはすべて、2つのセットを比較します。なお、比較されるものは異なります:

@table @asis

@item  git-diff-index <tree-ish> 
<tree-ish> とファイルシステム上のファイルを比較します。

@item  git-diff-index --cached <tree-ish> 
<tree-ish> とインデックスを比較します。

@item  git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…] 
2つの引数で指定されたツリーを比較します。

@item  git-diff-files [<pattern>…] 
インデックスとファイルシステム上のファイルを比較します。
@end table

"git-diff-tree"
コマンドは、比較対象のハッシュ値を出力することで出力を開始します。その後、すべてのコマンドは、変更されたファイルごとに1つの出力行を出力します。

出力行は以下のようにフォーマットされます:

@example
in-place edit  :100644 100644 bcd1234 0123456 M file0
copy-edit      :100644 100644 abcd123 1234567 C68 file1 file2
rename-edit    :100644 100644 abcd123 1234567 R86 file1 file3
create         :000000 100644 0000000 1234567 A file4
delete         :100644 000000 1234567 0000000 D file5
unmerged       :000000 000000 0000000 0000000 U file6
@end example


つまり、左から右へ:

@enumerate 

@item
コロン(:)

@item
"src" のモード。作成(creation)またはマージされていない(unmerged)場合は 000000

@item
空白

@item
"dst" のモード。作成(creation)またはマージされていない(unmerged)場合は 000000

@item
空白

@item
"src" のsha1。作成(creation)またはマージされていない(unmerged)場合は 0@{40@}

@item
空白

@item
"dst" のsha1。作成(creation)またはマージされていない(unmerged)または作業ツリーにある場合は 0@{40@}

@item
空白

@item
ステータスの後に、オプションの「スコア数」("score" number)が続きます

@item
@samp{-z} オプションが使用されている場合はタブまたはNUL

@item
"src" のパス

@item
@samp{-z} オプションが使用されている場合タブまたはNUL。ステータスCまたはRにのみ存在します

@item
"dst" のパス。ステータスCまたはRにのみ存在します

@item
LFでレコードを終了します。 @samp{-z} オプションが使用されている場合はNULでレコードを終了します。
@end enumerate

ステータス文字の種類は以下のとおり:

@itemize 

@item
A: ファイルの追加

@item
C: ファイルを新しいファイルにコピー

@item
D: ファイルの削除

@item
M: ファイルの内容やモードの変更

@item
R: ファイル名の名前変更

@item
T: ファイルのタイプを変更

@item
U: ファイルはマージされていません(コミットする前にマージを完了する必要があります)

@item
X: 「不明な」変更タイプ(おそらくバグです。報告してください)
@end itemize

ステータス文字CとRの後には常にスコアが続きます(移動またはコピーのソースとターゲットの間の類似性のパーセンテージを示します)。ステータス文字Mの後には、ファイルの書き換えのスコア(非類似度のパーセンテージを示す)が続く場合があります。

<sha1> は、ファイルがファイルシステム上で新規で、インデックスと同期していない場合、すべて0として表示されます。

例:

@example
:100644 100644 5be4a4a 0000000 M file.c
@end example


@samp{-z`オプションを指定しない場合、構成変数 `core.quotePath} で説明されているように、通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。 @samp{-z}
を使用すると、ファイル名がそのまま出力され、行はNULバイトで終了します。

@noindent

@chapheading diff format for merges

"git-diff-tree" と "git-diff-files" と "git-diff --raw" は、 @samp{-c} または @samp{--cc}
オプションを使用して、マージコミットに対してもdiff出力を生成できます。出力は、以下の点で上記の形式とは異なります:

@enumerate 

@item
親ごとにコロン(:)があります

@item
より多くの "src" モードと "src" sha1があります

@item
statusは、各親のステータス文字を連結したものです

@item
オプションの「スコア数」はありません

@item
ファイルのタブ区切りのパス名
@end enumerate

@samp{-c} および ` -cc` の場合、履歴のいずれかの側でファイルの名前が変更された場合でも、宛先(dst)または最終パスのみが表示されます。
@samp{--combined-all-paths} を使用すると、各親のパスの名前が表示され、それに続いてマージコミットのパスの名前が表示されます。

例: @samp{--combined-all-paths} を使用しない @samp{-c} および @samp{--cc} の場合:

@example
::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c
::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       bar.sh
::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       phooey.c
@end example


例: @samp{-c} または @samp{--cc} のいずれかに @samp{--combined-all-paths} が追加された場合:

@example
::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c  desc.c  desc.c
::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       foo.sh  bar.sh  bar.sh
::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       fooey.c fuey.c  phooey.c
@end example


注意: 'combined diff’は、すべての親から変更されたファイルのみをリストすることに注意してください。

@noindent

@chapheading Generating patch text with -p

git-diff(1) 、 git-log(1) 、 git-show(1) 、
git-diff-index(1) 、 git-diff-tree(1) 、
git-diff-files(1) に @samp{-p} オプションを付けて実行するとパッチテキストを生成します。パッチテキストの作成は、
@samp{GIT_EXTERNAL_DIFF} と @samp{GIT_DIFF_OPTS} 環境変数( git(1) 参照)、および @samp{diff}
属性( gitattributes(5) 参照)を介してカスタマイズできます。

-pオプションが生成するものは、従来のdiff形式とは少々異なります:

@enumerate 

@item
先行して、以下のような "git diff" ヘッダーがあります:

@example
diff --git a/file1 b/file2
@end example

名前の変更/コピーが含まれない限り、 @samp{a/} と @samp{b/} のファイル名は同じです。 特に、作成または削除の場合でも、 @samp{a/} または @samp{b/}
ファイル名の代わりに @samp{/dev/ null} が使用されることはありません。

名前変更/コピーが含まれる場合、 @samp{file1} と`file2`
は、それぞれ名前変更/コピーのソースファイルの名前と、名前変更/コピーが生成するファイルの名前を示します。

@item
その後に、1つ以上の拡張ヘッダー行達が続きます:

@example
old mode <mode>
new mode <mode>
deleted file mode <mode>
new file mode <mode>
copy from <path>
copy to <path>
rename from <path>
rename to <path>
similarity index <number>
dissimilarity index <number>
index <hash>..<hash> <mode>
@end example

ファイルモードは、ファイルタイプとファイル許可ビットを含む6桁の8進数として出力されます。

拡張ヘッダーのパス名には、 @samp{a/} および @samp{b/} プレフィックスは含まれません。

類似インデックス(similarity index)は変更されていない行のパーセンテージであり、非類似インデックス(dissimilarity
index)は変更された行のパーセンテージです。これは切り捨てられた整数であり、その後にパーセント記号が続きます。したがって、100％の類似インデックス値は2つの等しいファイルを表し、100％の非類似性は古いファイルから新しいファイルに移行された行がないことを意味します。

インデックス行には、変更前後のブロブオブジェクト名が含まれます。 <mode>
は、ファイルモードが変更されない場合に含まれます。それ以外の場合、別々の行は古いモードと新しいモードを示します。

@item
通常の文字でないキャラクタ(\"unusual\" characters)を含むパス名は、構成変数 @samp{core.quotePath}
で説明されているように引用符で囲まれています( git-config(1)参照)。

@item
出力内のすべての @samp{file1} ファイルはコミット前のファイルを参照し、すべての @samp{file2}
ファイルはコミット後のファイルを参照します。各変更を各ファイルに順番に適用するのは誤りです。たとえば、以下のパッチはaとbを交換します:

@example
diff --git a/a b/b
rename from a
rename to b
diff --git a/b b/a
rename from b
rename to a
@end example

@item
ハンクのヘッダーには、ハンクが適用される関数の名前が記載されています。特定の言語に合わせてこれを調整する方法の詳細については、
gitattributes(5) の "Defining a custom hunk-header" を参照してください。
@end enumerate

@noindent

@chapheading Combined diff format

diffを生成するコマンドは、マージを表示するときに @samp{-c} または @samp{--cc} オプションを使用して「合成diff」(combined
diff)を生成できます。これは git-diff(1) または git-show(1)
でのマージを表示するときのデフォルトの形式です。 注意: これらのコマンドのいずれかに適切な @samp{--diff-merges}
オプションを指定して、特定の形式で差分を強制的に生成できることにも注意してください。

合成diff形式は以下のようになります:

@example
diff --combined describe.c
index fabadb8,cc95eb0..4866510
--- a/describe.c
+++ b/describe.c
@@@@@@ -98,20 -98,12 +98,20 @@@@@@
        return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
  @}

- static void describe(char *arg)
 -static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  @{
 +      unsigned char sha1[20];
 +      struct commit *cmit;
        struct commit_list *list;
        static int initialized = 0;
        struct commit_name *n;

 +      if (get_sha1(arg, sha1) < 0)
 +              usage(describe_usage);
 +      cmit = lookup_commit_reference(sha1);
 +      if (!cmit)
 +              usage(describe_usage);
 +
        if (!initialized) @{
                initialized = 1;
                for_each_ref(get_name);
@end example


@enumerate 

@item
まず "git diff"  ヘッダーがあり、以下のようになります( @samp{-c} オプションが使用されている場合):

@example
diff --combined file
@end example

または、以下のようになります( @samp{--cc} オプションが使用されている場合):

@example
diff --cc file
@end example

@item
その後に1つ以上の拡張ヘッダー行が続きます(以下の例は、2つの親とのマージを示しています):

@example
index <hash>,<hash>..<hash>
mode <mode>,<mode>..<mode>
new file mode <mode>
deleted file mode <mode>,<mode>
@end example

@samp{mode <mode>,<mode>..<mode>} 行は、<mode> の少なくとも1つが他の <mode>
と異なる場合にのみ表示されます。検出されたコンテンツの移動(名前の変更とコピーの検出)に関する情報を含む拡張ヘッダーは、2つの <tree-ish>
のdiffで機能するように設計されており、合成diff形式では使用されません。

@item
その後に2行の from-file/to-file ヘッダーが続きます

@example
--- a/file
+++ b/file
@end example

従来の統一diff形式の2行ヘッダーと同様に、 @samp{/dev/null} は、作成または削除されたファイルを通知するために使用されます。

ただし、 --combined-all-paths  オプションが指定されている場合、2行の from-file/to-file の代わりに、 N+1
行の from-file/to-file ヘッダーが取得されます。ここで、 N はマージコミットの親の数です。

@example
--- a/file
--- a/file
--- a/file
+++ b/file
@end example

この拡張形式は、名前変更またはコピー検出がアクティブな場合に役立ち、別の親のファイルの元の名前を確認できます。

@item
チャンクヘッダーの形式が変更され、誤って @samp{patch-p1}
にフィードされるのを防ぎます。合成差分形式は、マージコミットの変更を確認するために作成されたものであり、適用されることを意図したものではありません。この変更は、拡張された「インデックス」ヘッダーの変更に似ています:

@example
@@@@@@ <from-file-range> <from-file-range> <to-file-range> @@@@@@
@end example

合成diff形式のチャンクヘッダーには親の数+1の @samp{@@} 文字があります。
@end enumerate

従来の統一diff形式とは異なり、2つのファイルAとBが、 @samp{-} (マイナスはAに表示されますが、Bでは削除されます) または @samp{+}
(プラスはAにはありませんが、Bには追加されます)、または @samp{" "}（スペースは変更なし)
プレフィックスを持つ単一の列で表示される場合、この形式は2つ以上のファイル file1, file2,… を1つのファイルXと比較し、Xが各
fileN とどのように異なるかを示します。ファイルNごとに1つの列が出力行の前に追加され、Xの行が出力行とどのように異なるかを示します。

列Nの @samp{-} 文字は、その行が fileN に表示されているが、結果には表示されていないことを意味します。 列Nの @samp{+}
文字は、結果に行が表示され、 fileN にその行がないことを意味します(つまり、その親の観点から見て行が追加されたことを示す)。

上記の出力例では、関数のシグネチャが両方のファイルから見て変更されています(したがって、 file1 と file2 の両方から2つの @samp{-}
が削除され、さらに @samp{++} が追加されたため、 file1 と file2 のどちらにも表示されません)。また、他の8行は file1 と同じですが、
file2 には表示されません(したがって、接頭辞として @samp{+} が付けられます)。

@samp{git diff-tree -c} で表示される場合、マージコミットの親をマージ結果と比較します(つまり、 file1..fileN が親です)。
@samp{git diff-files -c} で表示される場合、2つの未解決のマージ親を作業ツリーファイルと比較します(つまり、 file1
はステージ2、別名「私たちのバージョン」、 file2 はステージ3、別名「彼らのバージョン」です)。

@noindent

@chapheading other diff formats

@samp{--summary} オプションは、新しく追加、削除、名前変更、およびコピーされたファイルを説明します。@samp{--stat} オプションは、
diffstat(1) グラフ を出力に追加します。これらのオプションは、 @samp{-p}
などの他のオプションと組み合わせることができ、人間が読むことを目的としています。

名前の変更またはコピーを伴う変更を表示する場合、 @samp{--stat}
出力は、パス名の共通のプレフィックスとサフィックスを組み合わせることにより、パス名をコンパクトにフォーマットします。
たとえば、4行を変更(modify)しながら @samp{arch/i386/Makefile} を @samp{arch/x86/Makefile}
に移動(move)する変更(change)は、次のように表示されます:

@example
arch/@{i386 => x86@}/Makefile    |   4 +--
@end example


@samp{--numstat} オプションは diffstat(1) 情報を提供しますが、人間ではなくソフトウェアで読むのを容易にするように設計されています。
@samp{--numstat} 出力のエントリは以下のようになります:

@example
1       2       README
3       1       arch/@{i386 => x86@}/Makefile
@end example


この形式は、左から右へ:

@enumerate 

@item
追加行数

@item
タブ

@item
削除行数

@item
タブ

@item
パス名(おそらく rename/copy 情報を含む)

@item
改行
@end enumerate

@samp{-z} 出力オプションが有効な場合、出力は以下のようにフォーマットされます:

@example
1       2       README NUL
3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL
@end example


これは:

@enumerate 

@item
追加行数

@item
タブ

@item
削除行数

@item
タブ

@item
NUL(rename/copy された場合のみ存在します)

@item
プリイメージのパス名

@item
NUL(rename/copy された場合のみ存在します)

@item
ポストイメージのパス名(rename/copy された場合のみ存在します)

@item
NUL
@end enumerate

名前が変更された場合のプリイメージパスの前の追加の @samp{NUL}
は、出力を読み取るスクリプトが、先読みせずに、読み取られている現在のレコードがシングルパスレコードであるか、名前変更/コピーレコードであるか、を判断できるようにするためです。追加および削除された行を読み取った後、
@samp{NUL} まで読み取るとパス名が生成されますが、それが @samp{NUL} の場合、レコードには2つのパスが表示されます。

@noindent

@chapheading OPERATING MODES

You can choose whether you want to trust the index file entirely (using the
@samp{--cached} flag) or ask the diff logic to show any files that don’t match
the stat state as being "tentatively changed".  Both of these operations are
very useful indeed.

@noindent

@chapheading CACHED MODE

If @samp{--cached} is specified, it allows you to ask:

@example
show me the differences between HEAD and the current index
contents (the ones I'd write using 'git write-tree')
@end example

For example, let’s say that you have worked on your working directory,
updated some files in the index and are ready to commit. You want to see
exactly @strong{what} you are going to commit, without having to write a new tree
object and compare it that way, and to do that, you just do

@example
git diff-index --cached HEAD
@end example

Example: let’s say I had renamed @samp{commit.c} to @samp{git-commit.c}, and I had
done an @samp{update-index} to make that effective in the index file.  @samp{git
diff-files} wouldn’t show anything at all, since the index file matches my
working directory. But doing a @emph{git diff-index} does:

@example
torvalds@@ppc970:~/git> git diff-index --cached HEAD
-100644 blob    4161aecc6700a2eb579e842af0b7f22b98443f74        commit.c
+100644 blob    4161aecc6700a2eb579e842af0b7f22b98443f74        git-commit.c
@end example

You can see easily that the above is a rename.

In fact, @samp{git diff-index --cached} @strong{should} always be entirely equivalent to
actually doing a @emph{git write-tree} and comparing that. Except this one is
much nicer for the case where you just want to check where you are.

So doing a @samp{git diff-index --cached} is basically very useful when you are
asking yourself "what have I already marked for being committed, and what’s
the difference to a previous tree".

@noindent

@chapheading NON-CACHED MODE

The "non-cached" mode takes a different approach, and is potentially the
more useful of the two in that what it does can’t be emulated with a @emph{git
write-tree} + @emph{git diff-tree}. Thus that’s the default mode.  The non-cached
version asks the question:

@example
show me the differences between HEAD and the currently checked out
tree - index contents _and_ files that aren't up to date
@end example

which is obviously a very useful question too, since that tells you what you
@strong{could} commit. Again, the output matches the @emph{git diff-tree -r} output to a
tee, but with a twist.

The twist is that if some file doesn’t match the index, we don’t have a
backing store thing for it, and we use the magic "all-zero" sha1 to show
that. So let’s say that you have edited @samp{kernel/sched.c}, but have not
actually done a @emph{git update-index} on it yet - there is no "object"
associated with the new state, and you get:

@example
torvalds@@ppc970:~/v2.6/linux> git diff-index --abbrev HEAD
:100644 100664 7476bb... 000000...      kernel/sched.c
@end example

i.e., it shows that the tree has changed, and that @samp{kernel/sched.c} is not
up to date and may contain new stuff. The all-zero sha1 means that to get
the real diff, you need to look at the object in the working directory
directly rather than do an object-to-object diff.

@quotation

@strong{Note}

As with other commands of this type, @emph{git diff-index} does not actually look
at the contents of the file at all. So maybe @samp{kernel/sched.c} hasn’t
actually changed, and it’s just that you touched it. In either case, it’s a
note that you need to @emph{git update-index} it to make the index be in sync.
@end quotation

@quotation

@strong{Note}

You can have a mixture of files show up as "has been updated" and "is still
dirty in the working directory" together. You can always tell which file is
in which state, since the "has been updated" ones show a valid sha1, and the
"not in sync with the index" ones will always have the special all-zero
sha1.
@end quotation

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-diff-tree,,,Top
@chapheading Name

git-diff-tree — Compares the content and mode of blobs found via two tree objects

@noindent

@chapheading Synopsis

@display
git diff-tree [--stdin] [-m] [-s] [-v] [--no-commit-id] [--pretty]
              [-t] [-r] [-c | --cc] [--combined-all-paths] [--root] [--merge-base]
              [<common diff options>] <tree-ish> [<tree-ish>] [<path>…]
@end display


@noindent

@chapheading DESCRIPTION

Compares the content and mode of the blobs found via two tree objects.

If there is only one <tree-ish> given, the commit is compared with its
parents (see --stdin below).

Note that @emph{git diff-tree} can use the tree encapsulated in a commit object.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-p} 
@itemx  @samp{-u} 
@itemx  @samp{--patch} 
パッチを生成します(generating patches に関するセクションを参照)。

@item  @samp{-s} 
@itemx  @samp{--no-patch} 
diff出力を抑制します。デフォルトでパッチを表示する @samp{git show} のようなコマンド、または @samp{--patch}
の効果をキャンセルする場合に便利です。

@item  @samp{-U<n>} 
@itemx  @samp{--unified=<n>} 
通常の3行ではなく、<n> 行の内容でdiffを生成します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--output=<file>} 
stdout ではなく指定のファイルに出力します。

@item  @samp{--output-indicator-new=<char>} 
@itemx  @samp{--output-indicator-old=<char>} 
@itemx  @samp{--output-indicator-context=<char>} 
生成されたパッチの新しい行、古い行、またはコンテキスト行を示すために使用される文字を指定します。 通常、それらはそれぞれ @emph{+} 、 @emph{-} 、 ' '
です。

@item  @samp{--raw} 
生形式(raw format)でdiffを生成します。
これがデフォルトです。

@item  @samp{--patch-with-raw} 
@samp{-p --raw} の同義語。

@item  @samp{--indent-heuristic} 
diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッチを読みやすくします。 これがデフォルトです。

@item  @samp{--no-indent-heuristic} 
インデントヒューリスティック(indent heuristic)を無効にします。

@item  @samp{--minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{--patience} 
"patience diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--histogram} 
"histogram diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--anchored=<text>} 
"anchored diff" アルゴリズムを使用してdiffを生成します。

このオプションは複数回指定できます。

行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる場合、このアルゴリズムは、その行が出力に削除または追加として表示されないようにします。内部で
"patience diff" アルゴリズムを使用します。

@item  @samp{--diff-algorithm=@{patience|minimal|histogram|myers@}} 
diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

@table @asis

@item  @samp{default}, @samp{myers} 
基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、これがデフォルトです。

@item  @samp{minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{patience} 
パッチを生成する時に "patience diff" アルゴリズムを使います。

@item  @samp{histogram} 
このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張して、「発生率の低い共通要素をサポート」(support
low-occurrence common elements)します。
@end table

たとえば、 あなたが @samp{diff.algorithm}
変数をデフォルト以外の値に設定した上で、それでもデフォルト値を使用する場合は、@samp{--diff-algorithm=default}
オプションを使用する必要があります。

@item  @samp{--stat[=<width>[,<name-width>[,<count>]]]} 
diffstatを生成します。
デフォルトでは、必要なだけのスペースがファイル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォルトで端末幅、または端末に接続されていない場合は80桁であり、
@samp{<width>} で上書きできます。ファイル名部分の幅は、コンマの後に別の幅 @samp{<name-width>}
を指定することで制限できます。グラフ部分の幅は、 @samp{--stat-graph-width=<width>}
(統計グラフを生成するすべてのコマンドに影響します)を使用するか、 @samp{diff.statGraphWidth=<width>} ( @samp{git
format-patch} に影響しません)を設定することによって制限できます。3番目のパラメータ @samp{<count>}
を指定することにより、出力を最初の @samp{<count>} 行に制限し、それに @samp{...} が続く形にできます。

これらのパラメータは、 @samp{--stat-width=<width>} と @samp{--stat-name-width=<name-width>} と
@samp{--stat-count=<count>} を使用して個別に設定することもできます。

@item  @samp{--compact-summary} 
ファイルの作成や削除( "new" または "gone" 。オプションでシンボリックリンクの場合は "+l"
)、diffstatのモード変更(実行可能ビットを追加または削除する場合は、それぞれ "+x" または "-x"
)など、拡張ヘッダー情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置かれます。本機能は @samp{--stat} の機能を含んでいます。

@item  @samp{--numstat} 
@samp{--stat`に似ていますが、プログラムで処理しやすい(machine
friendly)ように、追加および削除された行数を10進表記とパス名で省略形なしで表示します。バイナリファイルの場合、 `0 0} の代わりに2つの
@samp{-} を出力します。

@item  @samp{--shortstat} 
変更されたファイルの総数と、追加および削除された行の数を含む @samp{--stat} 形式の最後の行のみを出力します。

@item  @samp{-X[<param1,param2,...>]} 
@itemx  @samp{--dirstat[=<param1,param2,...>]} 
各サブディレクトリの相対的な変更量の分布を出力します。 @samp{--dirstat}
の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズできます。デフォルトは、 @samp{diff.dirstat}
構成変数によって制御されます(git-config(1) 参照)。以下のパラメータを使用できます:

@table @asis

@item  @samp{changes} 
ソースから削除された、または宛先に追加された行をカウントして、dirstat数を計算します。これは、ファイル内の純粋なコード移動の量を無視します。つまり、ファイル内の行の再配置は、他の変更ほどカウントされません。これは、パラメーターが指定されていない場合のデフォルトの動作です。

@item  @samp{lines} 
通常の行ベースのdiff分析を実行し、削除/追加された行数を合計して、dirstat数を計算します。
(バイナリファイルの場合、バイナリファイルには行の概念がないため、代わりに64バイトのチャンクをカウントします)。 これは @samp{changes}
動作よりも高価な @samp{--dirstat} 動作ですが、他の変更と同じようにファイル内の再配置された行をカウントします。結果の出力は、他の
@samp{--*stat} オプションから得られるものと一致しています。

@item  @samp{files} 
変更されたファイルの数を数えて、dirstat数を計算します。変更された各ファイルは、dirstat分析で等しくカウントされます。これは、ファイルの内容をまったく調べる必要がないため、計算コストが最もかからない
@samp{--dirstat} の動作です。

@item  @samp{cumulative} 
親ディレクトリの子ディレクトリの変更も同様にカウントします。 @samp{cumulative}(累積的)
を使用する場合、報告されるパーセンテージの合計が100%を超える場合があることに注意してください。デフォルトの(非累積的な)動作は、@samp{noncumulative}
パラメーターで指定できます。

@item  <limit> 
整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指定します。指定の割合より少ないディレクトリは、出力に表示されません。
@end table

例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディレクトリに子ディレクトリの数を累積しながら、変更されたファイルをカウント:
@samp{--dirstat=files,10,cumulative}

@item  @samp{--cumulative} 
@samp{--dirstat=cumulative} と同義語

@item  @samp{--dirstat-by-file[=<param1,param2>...]} 
@samp{--dirstat=files,param1,param2...} と同義語

@item  @samp{--summary} 
作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約(condensed summary)を出力します。

@item  @samp{--patch-with-stat} 
@samp{-p --stat} と同義語。

@item  @samp{-z} 
@samp{--raw} または @samp{--numstat} または @samp{--name-only} または @samp{--name-status} が指定されている場合は
パス名を変更せず、出力フィールドターミネータとしてNULLを使用してください。

このオプションがないと、構成変数 @samp{core.quotePath} で説明されているように、 通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。

@item  @samp{--name-only} 
変更されたファイルの名前のみを表示します。 多くの場合、ファイル名はUTF-8でエンコードされます。 詳細については、
git-log(1) のマニュアルページにあるエンコーディングに関する議論(the discussion about
encoding)を参照してください。

@item  @samp{--name-status} 
変更されたファイルの名前とステータスのみを表示します。ステータス文字の意味については、 @samp{--diff-filter}
オプションの説明を参照してください。 @samp{--name-only} と同じように、ファイル名はしばしばUTF-8でエンコードされます。

@item  @samp{--submodule[=<format>]} 
サブモジュールの違いをどのように表示するかを指定します。 @samp{--submodule=short} を指定する場合、 @emph{short}
形式が使用されます。この形式は、範囲の最初と最後にコミットの名前を表示するだけです。 @samp{--submodule} または
@samp{--submodule=log} が指定されている場合、 @emph{log} 形式が使用されます。この形式では、
git-submodule(1) @samp{summary} のように範囲内のコミットが一覧表示されます。 @samp{--submodule=diff}
が指定されている場合、 @emph{diff}
形式が使用されます。この形式は、コミット範囲間のサブモジュールの内容の変更のインラインdiffを示します。configオプションが設定されていない場合、デフォルトは
@samp{diff.submodule} または @emph{short} 形式です。

@item  @samp{--color[=<when>]} 
色付きのdiffを表示します。 @samp{--color} (つまり、 @emph{=<when>} ) は @samp{--color=always} と同じです。
@emph{<when>} は、 @samp{always} または @samp{never} または @samp{auto} のいずれかになります。

@item  @samp{--no-color} 
カラーdiffをオフにします。
@samp{--color=never} と同じです。

@item  @samp{--color-moved[=<mode>]} 
ソースコードの移動した行を別の色にします。
<mode>は、オプションが指定されていない場合はデフォルトで @emph{no} になり、
モードが指定されていないオプションが指定されている場合は @emph{zebra} になります。
モードは以下のいずれかでなければなりません:

@table @asis

@item  no 
移動行をハイライトしません。

@item  default 
@samp{zebra} の同義語です。これは、将来、より賢明なモードに変更される可能性があります。

@item  plain 
ある場所で追加され、別の場所で削除された行は、 @emph{color.diff.newMoved} で色付けされます。 同様に、
@emph{color.diff.oldMoved}
は、差分の別の場所に追加された削除された行に使用されます。このモードは移動された行をピックアップしますが、コードのブロックが順列なしで移動されたかどうかを判断することはレビューではあまり役に立ちません。

@item  blocks 
少なくとも20文字の英数字の移動テキストのブロックが貪欲に検出されます。検出されたブロックは、 @emph{color.diff.@{old,new@}Moved}
色のいずれかを使用して色付けされます。隣接するブロックを区別することはできません。

@item  zebra 
移動されたテキストのブロックは、 @emph{blocks} モードの場合と同様に検出されます。 ブロックは、
@emph{color.diff.@{old,new@}Moved} 色または @emph{color.diff.@{old,new@}MovedAlternative}
色のいずれかを使用して色付けされます。2つの色の間の変化は、新しいブロックが検出されたことを示します。

@item  dimmed-zebra 
@emph{zebra}
に似ていますが、移動されたコードの重要でない部分の追加の調光(dimmed)が実行されます。隣接する2つのブロックの境界線は興味深いと見なされ、残りは興味深いものではありません。
@samp{dimmed_zebra} は非推奨の同義語です。
@end table

@item  @samp{--no-color-moved} 
移動検出をオフにします。 これは、構成設定を上書きするために使用できます。 @samp{--color-moved=no} と同じです。

@item  @samp{--color-moved-ws=<modes>} 
これは、 @samp{--color-moved} の移動検出を実行するときに空白を無視する方法を設定します。
これらのモードは、コンマ区切りのリストとして指定できます:

@table @asis

@item  no 
移動行検出を実行するときに、空白(whitespace)を無視しない。

@item  ignore-space-at-eol 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  ignore-space-change 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  ignore-all-space 
行を比較するときは空白(whitespace)を無視します。これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  allow-indentation-change 
最初に移動検出で空白(whitespace)を無視し、空白(whitespace)の変更が行ごとに同じである場合にのみ、移動されたコードブロックをブロックにグループ化します。
これは他のモードと互換性がありません。
@end table

@item  @samp{--no-color-moved-ws} 
移動検出を実行するときは、空白(whitespace)を無視しないでください。これは、構成設定を上書きするために使用できます。
@samp{--color-moved-ws=no} と同じです。

@item  @samp{--word-diff[=<mode>]} 
<mode> を使用して変更された単語を区切ることにより、単語のdiffを表示します。デフォルトでは、単語は空白で区切られます。 以下の
@samp{--word-diff-regex} を参照してください。 <mode> のデフォルトは 'plain’です。 <mode>
は以下のいずれかである必要があります:

@table @asis

@item  color 
変更された単語(word)を色のみを使用して強調表示します。 @samp{--color} を意味します。

@item  plain 
単語を @samp{[-removed-]} および @samp{@{+added+@}} として表示します。
区切り文字が入力に表示されている場合、区切り文字をエスケープしようとしないため、出力があいまいになる可能性があります。

@item  porcelain 
スクリプトの使用を目的とした特別な行ベースの形式を使用します。追加/削除/無変更については、通常の統一されたdiff形式で印刷され、行の先頭の
@samp{+}/@samp{-}/` ` 文字で始まり、行の終わりまで続きます。入力の改行は、それ自体の行のチルダ @samp{~} で表されます。

@item  none 
単語(word)のdiffを再度無効にします。
@end table

注意: 最初のモードの名前にもかかわらず、有効になっている場合、すべてのモードで変更された部分を強調するために色が使用されることに注意してください。

@item  @samp{--word-diff-regex=<regex>} 
空白以外を単語と見なす代わりに、 <regex> を使用して単語が何であるかを決定します。また、すでに有効になっていない限り、この機能は
@samp{--word-diff} の機能を含んでいます。

<regex> の重複しないマッチはすべて、単語と見なされます。これらのマッチの間のすべては空白と見なされ、違いを見つけるためとしては無視されます！
正規表現に @samp{|[^[:space:]]}
を追加して、空白以外のすべての文字とマッチすることを確認することをお勧めします。改行を含むマッチは、改行で黙って切り捨てられます！

たとえば、 @samp{--word-diff-regex=.} は各文字を単語として扱い、それに応じて文字ごとの違いを表示します。

正規表現は、diffドライバーまたは構成オプション(configuration option)を介して設定することもできます。
gitattributes(5) または git-config(1)
を参照してください。これを指定すると、diffドライバーまたは構成設定(configuration
settings)が明示的にオーバーライドされます。diffドライバーは構成設定を上書きします。

@item  @samp{--color-words[=<regex>]} 
@samp{--word-diff=color} に @samp{--word-diff-regex=<regex>}
を加えたものに相当します(正規表現が指定されている場合)。

@item  @samp{--no-renames} 
構成ファイルにデフォルトで指定されている場合でも、名前変更の検出をオフにします。

@item  @samp{--[no-]rename-empty} 
名前変更ソースとして空のブロブを使用するかどうか。

@item  @samp{--check} 
変更によって競合マーカーまたは空白エラーが発生した場合に警告します。空白エラーと見なされるものは、 @samp{core.whitespace}
構成によって制御されます。
デフォルトでは、末尾の空白(空白のみで構成される行を含む)と、行の最初のインデント内で直後にタブ文字が続くスペース文字は、空白エラーと見なされます。問題が見つかった場合は、ゼロ以外のステータスで終了します。なお、
--exit-code とは互換性がありません。

@item  @samp{--ws-error-highlight=<kind>} 
diffの @samp{context} または @samp{old} または @samp{new} 行の空白エラーを強調表示します。複数の値はコンマで区切られ、 @samp{none}
は前の値をリセットし、 @samp{default} はリストを @samp{new} にリセットし、 @samp{all} は old、new、context
の省略形です。このオプションが指定されておらず、構成変数 @samp{diff.wsErrorHighlight} が設定されていない場合、 @samp{new}
行の空白エラーのみが強調表示されます。空白エラーは @samp{color.diff.whitespace} で色分けされています。

@item  @samp{--full-index} 
パッチ形式の出力を生成するときは、最初の一握りの文字(first handful of
characters)の代わりに、「インデックス」行にイメージ前およびイメージ後の完全ブロブオブジェクト名を表示します。

@item  @samp{--binary} 
@samp{--full-index} に加えて、 @samp{git-apply} で適用できるバイナリ差分を出力します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--abbrev[=<n>]} 
完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくとも
@emph{<n>} 桁の16進数の長さの最短のプレフィックスを表示します。diffパッチ出力形式では、 @samp{--full-index} が優先されます。つまり、
@samp{--full-index} が指定されている場合、 @samp{--abbrev} に関係なく、完全なブロブ名が表示されます。デフォルト以外の桁数は、
@samp{--abbrev=<n>} で指定できます。

@item  @samp{-B[<n>][/<m>]} 
@itemx  @samp{--break-rewrites[=[<n>][/<m>]]} 
完全な書き換えの変更を削除と作成のペアに分割します。これには以下の2つの目的があります:

これは、ファイルの完全な書き換えに相当する変更が、コンテキストとしてテキストで一致する非常に少数の行と混合された一連の削除と挿入としてではなく、古いものすべての単一の削除とそれに続く
すべての新しいものを1回挿入し、数値 @samp{m} が -B オプションのこの側面を制御します(デフォルトは60%)。 @samp{-B/70%}
は、Gitがそれを完全な書き換えと見なすために、元の30%未満が結果に残る必要があることを指定します(つまり、結果のパッチは、コンテキスト行と混合された一連の削除と挿入になります)。

-M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソースと見なされ(通常、 -M
は、消えたファイルのみを名前変更のソースと見なします)、数 @samp{n} が -Bオプションのこの側面を制御します(デフォルトは50%)。 @samp{-B20%}
は、ファイルのサイズの20%以上と比較して、追加および削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取得される資格があることを指定します。

@item  @samp{-M[<n>]} 
@itemx  @samp{--find-renames[=<n>]} 
名前の変更(renames)を検知する。
@samp{n} が指定されている場合、それは類似性インデックスのしきい値です
(つまり、ファイルのサイズと比較した追加/削除の量)。
たとえば、 @samp{-M90%} は、ファイルの90%以上が変更されていない場合、
Gitが削除/追加のペアを名前変更と見なす必要があることを意味します。
@samp{%} 記号がない場合、数値は小数として読み取られ、その前に小数点が付きます。
つまり、 @samp{-M5} は0.5になるため、@samp{-M50%} と同じになります。
同様に、 @samp{-M05} は @samp{-M5%} と同じです。
検出を正確な名前変更に制限するには、 @samp{-M100%} を使用します。
デフォルトの類似性インデックスは50%です。

@item  @samp{-C[<n>]} 
@itemx  @samp{--find-copies[=<n>]} 
名前と同様コピーを検出します。 @samp{--find-copies-harder} @samp{も参照してください。 `n} を指定すると、 @samp{-M<n>}
と同じ意味になります。

@item  @samp{--find-copies-harder} 
パフォーマンス上の理由から、デフォルトでは、 @samp{-C}
オプションは、コピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピーを検索します。このフラグにより、コマンドは変更されていないファイルをコピー元の候補として検査します。これは大規模なプロジェクトでは非常にコストのかかる操作であるため、注意して使用してください。
複数の @samp{-C} オプションを指定しても同じ効果があります。

@item  @samp{-D} 
@itemx  @samp{--irreversible-delete} 
削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを出力し、プレイメージと @samp{/dev/null}
の差分は出力しません。結果のパッチは、 @samp{patch} または @samp{git apply}
で適用されることを意図していません。これは、変更後にテキストを確認することに集中したい人のためだけのものです。さらに、出力には明らかに、そのようなパッチを手動でも逆に適用するのに十分な情報が不足しているため、オプションの名前が付けられています。

@samp{-B} と併用する場合は、削除/作成ペアの削除部分のプリイメージ(preimage)も省略してください。

@item  @samp{-l<num>} 
@samp{-M} および @samp{-C}
オプションには、名前変更/コピーのサブセットを安価に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペアになっていない宛先をすべての関連ソースと比較する徹底的なフォールバック部分が続きます。(名前の変更の場合、残りのペアになっていないソースのみが関係します。コピーの場合、すべての元のソースが関係します)。Nのソースと宛先の場合、この徹底的なチェックのコストは
O(N^2)
です。このオプションは、関係するソース/宛先ファイルの数が指定された数を超えた場合に、名前変更/コピー検出の完全な部分が実行されないようにします。デフォルトは
diff.renameLimit です。 値0は無制限として扱われることに注意してください。

@item  @samp{--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]} 
追加(Add)・コピー(Copy)・削除(Delete)・変更(Modify)・名前変更(Rename)されたファイル、タイプが変更されたファイル(T)、マージされていないファイル(U)、不明なファイル(X)、またはペアリングが壊れているファイル(B)のみを選択します。フィルタ文字(無しも含む)の任意の組み合わせを使用できます。
組み合わせに @samp{*} (全てまたは無し)が追加されると、比較で他の基準に一致するファイルがある場合、すべてのパスが選択されます。
他の基準に一致するファイルがない場合、何も選択されません。

また、逆に、除外したい時はこれらの各大文字指定を小文字にして指定します。例えば @samp{--diff-filter=ad}
は、追加および削除されたパスを除外します。

注意:すべてのdiffがすべてのタイプを特徴とするわけではないことに注意してください。
たとえば、インデックスから作業ツリーへのdiffにエントリを追加することはできません(diffに含まれるパスのセットは、インデックスの内容によって制限されるため)。
同様に、これらのタイプの検出が無効になっている場合、コピーおよび名前変更されたエントリは表示されません。

@item  @samp{-S<string>} 
ファイル内の指定の文字列(つまり、 addition 、deletion)の出現回数の差分を調べます。スクリプターが使用することを目的としています。

(構造体など)コードの正確なブロックを探していて、そのブロックが最初に作成されてからの履歴を知りたい場合に便利です。この機能を繰り返し使用して、プリイメージ(preimage)内の興味深いブロックを
@samp{-S} にフィードバックし、そしてあなたはそれをブロックの最初のバージョンを取得するまで続けます。

バイナリファイルも検索されます。

@item  @samp{-G<regex>} 
パッチテキストに <regex> にマッチする 追加/削除 された行が含まれている差分を探します。

@samp{-S<regex>-pickaxe-regex} と @samp{-G<regex>}
の違いを説明するために、同じファイル内で以下のdiffを使用してコミットすることを検討してください:

@example
+    return frotz(nitfol, two->ptr, 1, 0);
...
-    hit = frotz(nitfol, mf2.ptr, 1, 0);
@end example


@samp{git log -G"frotz\(nitfol"} はこのコミットを表示しますが、 @samp{git log -S"frotz\(nitfol"
--pickaxe-regex} は表示しません(その文字列の出現回数が変更されなかったため)。

@samp{--text} が提供されていない限り、 textconv フィルターのないバイナリファイルのパッチは無視されます。

詳細については gitdiffcore(7) の @emph{pickaxe} エントリを参照してください。

@item  @samp{--find-object=<object-id>} 
指定されたオブジェクトの出現回数を変更する違いを探します。 @samp{-S}
と同様に、引数だけが異なり、特定の文字列ではなく特定のオブジェクトIDを検索します。

オブジェクトは、ブロブまたはサブモジュールのコミットにすることができます。 これは、 @samp{git-log} の @samp{-t}
オプションがツリーも探すことを意味します。

@item  @samp{--pickaxe-all} 
@samp{-S} または @samp{-G} が変更を見つけたら、 <string>
の変更を含むファイルだけでなく、その変更セット(changeset)のすべての変更を表示します。

@item  @samp{--pickaxe-regex} 
@samp{-S} に指定した <string> を拡張POSIX正規表現として扱います。

@item  @samp{-O<orderfile>} 
ファイルが出力に表示される順序を制御します。これは @samp{diff.orderFile}
構成変数をオーバーライドします(git-config(1) 参照)。 @samp{diff.orderFile} をキャンセルするには、
@samp{-O/dev/null} を使用します。

出力順序は、 <orderfile>
内のglobパターンの順序によって決定されます。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力され、2番目のパターンに一致する(ただし最初のパターンには一致しない)パス名を持つすべてのファイルが次に出力されます。パス名がどのパターンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一致パターンがあるかのように、最後に出力されます。複数のパス名のランクが同じである場合(同じパターンに一致するが、以前のパターンには一致しない)、相互の出力順序は通常の順序です。

<orderfile> は以下のとおりパースされます:

@itemize 

@item
空白行は無視されるため、読みやすくするための区切りとして使用できます。

@item
ハッシュ ("@samp{#}") で始まる行は無視されるため、コメントに使用できます。
パターンがハッシュで始まる場合は、パターンの先頭にバックスラッシュ(訳注:日本では環境により円記号)("@samp{\}") を追加します。

@item
他の各行には、単一のパターンが含まれています。
@end itemize

パターンは、 FNM_PATHNAME フラグなしで fnmatch(3)
に使用されるパターンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポーネントをいくつも削除するとパターンと一致する場合、パス名もパターンと一致する点が異なります。
たとえば、パターン "@samp{foo*bar}" は、 "@samp{fooasdfbar}" および "@samp{foo/bar/baz/asdf}" と一致しますが、
"@samp{foobarx}" とは一致しません。

@item  @samp{--skip-to=<file>} 
@itemx  @samp{--rotate-to=<file>} 
名前付き <file> の前のファイルを出力から破棄するか(スキップして)、出力の最後に移動させます(ローテーションさせます)。 これらは主に @samp{git
difftool} コマンドを使用するために考案されたものであり、それ以外の場合はあまり役に立たない可能性があります。

@item  @samp{-R} 
2つの入力を交換します。 つまり、インデックスまたはディスク上のファイルとツリーの内容の違いを表示します。

@item  @samp{--relative[=<path>]} 
@itemx  @samp{--no-relative} 
プロジェクトのサブディレクトリから実行する場合、このオプションを使用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示するように指示できます。サブディレクトリ(ベアリポジトリなど)にいない場合は、引数として
<path> を指定することで、出力を作成するサブディレクトリに名前を付けることができます。 @samp{--no-relative`は、
`diff.relative} 設定オプションと以前の @samp{--relative} の両方を打ち消すために使用できます。

@item  @samp{-a} 
@itemx  @samp{--text} 
すべてのファイルをテキストとして扱います。

@item  @samp{--ignore-cr-at-eol} 
比較を行うときは、行末のキャリッジリターン(carriage-return)を無視します。

@item  @samp{--ignore-space-at-eol} 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  @samp{-b} 
@itemx  @samp{--ignore-space-change} 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  @samp{-w} 
@itemx  @samp{--ignore-all-space} 
行を比較するときは空白を無視します。 これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  @samp{--ignore-blank-lines} 
全て空白の行の変更は無視します。

@item  @samp{-I<regex>} 
@itemx  @samp{--ignore-matching-lines=<regex>} 
すべての行が <regex> にマッチする変更を無視します。このオプションは複数回指定できます。

@item  @samp{--inter-hunk-context=<lines>} 
指定された行数までの差分ハンク間のコンテキストを表示し、それによって互いに近いハンクを融合します。デフォルトは
@samp{diff.interHunkContext} で、設定オプションが設定されていない場合は0です。

@item  @samp{-W} 
@itemx  @samp{--function-context} 
関数全体を各変更のコンテキスト行として表示します。関数名は、 @samp{git diff}
がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の @emph{Defining a custom
hunk-header} を参照)。

@item  @samp{--exit-code} 
diff(1）と同様のコードでプログラムを終了させます。つまり、違いがあった場合は 1 で終了し、 0 は違いがないことを意味します。

@item  @samp{--quiet} 
プログラムのすべての出力を無効にします。 @samp{--exit-code} を意味します。

@item  @samp{--ext-diff} 
外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外部diffドライバーを設定する場合は、
git-log(1) およびその仲間と一緒にこのオプションを使用する必要があります。

@item  @samp{--no-ext-diff} 
外部diffドライバーを禁止します。

@item  @samp{--textconv} 
@itemx  @samp{--no-textconv} 
バイナリファイルを比較するときに、外部テキスト変換フィルターの実行を許可(または禁止)します。 詳細については、
gitattributes(5)
を参照してください。textconvフィルターは通常、一方向の変換であるため、結果のdiffは人間の消費に適していますが、適用(apply)することはできません。このため、textconvフィルターは、
git-diff(1) および git-log(1) に対してのみデフォルトで有効になりますが、
git-format-patch(1) またはdiff配管コマンドに対しては有効になりません。

@item  @samp{--ignore-submodules[=<when>]} 
diff生成のサブモジュールへの変更を無視します。 <when> は、
none・untracked・dirty・allのいずれかになります。これがデフォルトです。noneを使用すると、追跡されていないファイルまたは変更されたファイルが含まれている場合、またはそのHEADがスーパープロジェクトに記録されているコミットと異なる場合にサブモジュールが変更されたと見なされ、
git-config(1) または gitmodules(5) の
ignoreオプションの設定をオーバーライドするために使用できます。untrackedが使用されている場合、サブモジュールには追跡されていないコンテンツのみが含まれている場合、サブモジュールはダーティとは見なされません(ただし、変更されたコンテンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作業ツリーへのすべての変更が無視され、スーパープロジェクトに格納されているコミットへの変更のみが表示されます(これは1.7.0までの動作でした)。「all」を使用すると、サブモジュールへのすべての変更が非表示になります。

@item  @samp{--src-prefix=<prefix>} 
"a/" の代わりに、与えられたソースプレフィックス(source prefix)を表示します。

@item  @samp{--dst-prefix=<prefix>} 
"b/" の代わりに、指定された宛先プレフィックス(destination prefix)を表示します。

@item  @samp{--no-prefix} 
送信元(source)または宛先(destination)のプレフィックスを表示しません。

@item  @samp{--line-prefix=<prefix>} 
出力のすべての行に追加のプレフィックスを付加します。

@item  @samp{--ita-invisible-in-index} 
デフォルトでは、 "git add -N" によって追加されたエントリは、 "git diff" に既存の空のファイルとして表示され、 "git
diff --cached" に新しいファイルとして表示されます。このオプションを使用すると、エントリは "git diff"
では新しいファイルとして表示され、 "git diff --cached" では存在しません。このオプションは、
@samp{--ita-visible-in-index} で元に戻すことができます。どちらのオプションも実験的なものであり、将来削除される可能性があります。
@end table

これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照してください。

@table @asis

@item  <tree-ish> 
The id of a tree object.

@item  <path>… 
If provided, the results are limited to a subset of files matching one of
the provided pathspecs.

@item  @samp{-r} 
recurse into sub-trees

@item  @samp{-t} 
show tree entry itself as well as subtrees.  Implies -r.

@item  @samp{--root} 
When @samp{--root} is specified the initial commit will be shown as a big
creation event. This is equivalent to a diff against the NULL tree.

@item  @samp{--merge-base} 
Instead of comparing the <tree-ish>s directly, use the merge base between
the two <tree-ish>s as the "before" side.  There must be two <tree-ish>s
given and they must both be commits.

@item  @samp{--stdin} 
When @samp{--stdin} is specified, the command does not take <tree-ish> arguments
from the command line.  Instead, it reads lines containing either two
<tree>, one <commit>, or a list of <commit> from its standard input.  (Use a
single space as separator.)

When two trees are given, it compares the first tree with the second.  When
a single commit is given, it compares the commit with its parents.  The
remaining commits, when given, are used as if they are parents of the first
commit.

When comparing two trees, the ID of both trees (separated by a space and
terminated by a newline) is printed before the difference.  When comparing
commits, the ID of the first (or only) commit, followed by a newline, is
printed.

The following flags further affect the behavior when comparing commits (but
not trees).

@item  @samp{-m} 
By default, @emph{git diff-tree --stdin} does not show differences for merge
commits.  With this flag, it shows differences to that commit from all of
its parents. See also @samp{-c}.

@item  @samp{-s} 
By default, @emph{git diff-tree --stdin} shows differences, either in
machine-readable form (without @samp{-p}) or in patch form (with @samp{-p}).  This
output can be suppressed.  It is only useful with @samp{-v} flag.

@item  @samp{-v} 
This flag causes @emph{git diff-tree --stdin} to also show the commit message
before the differences.

@item  @samp{--pretty[=<format>]} 
@itemx  @samp{--format=<format>} 
コミットログの内容を指定された形式できれいに印刷(pretty-print)します。 @emph{<format>} は
oneline・short・medium・full・fuller・reference・email・raw・format:<string>・tformat:<string>
のいずれかになります。 @emph{<format>} が上記のいずれでもなく、 @emph{%placeholder} が含まれている場合、
@emph{--pretty=tformat:<format>} が指定されたかのように動作します。

各フォーマットの詳細については、 "PRETTY FORMATS" セクションを参照してください。 @emph{=<format>}
の部分を省略すると、デフォルトで @emph{medium} になります。

注意: リポジトリー構成でデフォルトのpretty formatを指定できます(git-config(1) 参照)。

@item  @samp{--abbrev-commit} 
40バイトの16進コミットオブジェクト名全体を表示する代わりに、オブジェクトに一意の名前を付けるプレフィックスを表示します。
"--abbrev=<n>" (表示されている場合はdiff出力も変更します)オプションを使用して、プレフィックスの最小長を指定できます。

これにより、80桁幅の端末を使用している人にとって "--pretty=oneline" がずっと読みやすくなるはずです。

@item  @samp{--no-abbrev-commit} 
完全な40バイトの16進コミットオブジェクト名を表示します。 これにより、明示的または "--oneline"
などの他のオプションによって暗黙的に示される @samp{--abbrev-commit} が無効になります。また、 @samp{log.abbrevCommit}
変数をオーバーライドします。

@item  @samp{--oneline} 
これは、 "--pretty=oneline --abbrev-commit" を一緒に使用するための省略形です。

@item  @samp{--encoding=<encoding>} 
コミットオブジェクトは、ログメッセージに使用される文字エンコードをエンコードヘッダーに記録します。このオプションを使用して、ユーザーが好むエンコーディングでコミットログメッセージを再コーディングするようにコマンドに指示できます。配管以外のコマンドの場合、これはデフォルトでUTF-8になります。オブジェクトが
@samp{X} でエンコードされていると主張し、 @samp{X}
で出力している場合、オブジェクトをそのまま出力することに注意してください。これは、元のコミットの無効なシーケンスが出力にコピーされる可能性があることを意味します。同様に、
iconv(3) コミットの変換に失敗した場合、警告とともに元のオブジェクトをそのまま出力します。

@item  @samp{--expand-tabs=<n>} 
@itemx  @samp{--expand-tabs} 
@itemx  @samp{--no-expand-tabs} 
出力に表示する前に、ログメッセージでタブ展開を実行します(タブ幅を <n> とみなして <n> 境界に揃うように空白で調整する)。
@samp{--expand-tabs} は @samp{--expand-tabs=8} の省略形であり、 @samp{--no-expand-tabs} は
@samp{--expand-tabs=0} の省略形です。タブの展開を無効にします。

デフォルトでは、タブはログメッセージを4つのスペースでインデントするきれいな形式(pretty formats)で展開されます(つまり、デフォルトの
@emph{medium} と’full' と @emph{fuller})。

@item  @samp{--notes[=<ref>]} 
コミットログメッセージを表示するときに、コミットに注釈を付けるnotes(git-notes(1)
参照)を表示します。これは、コマンドラインに @samp{--pretty} 、@samp{--format} または @samp{--oneline}
オプションが指定されていない場合の、 @samp{git log} と @samp{git show} と ` git whatchanged` コマンドのデフォルトです。

デフォルトでは、表示されるnotesは、 @samp{core.notesRef} および @samp{notes.displayRef}
変数(または対応する環境変数オーバーライド)にリストされているnote refからのものです。詳細については git-config(1)
を参照してください。

オプションの @emph{<ref>} 引数を使用して、refを使用して表示するnotesを検索します。 refは、 @samp{refs/notes/}
で始まる完全なrefnameを指定できます。 @samp{notes/} で始まるか、 @samp{refs/} で始まるか、それ以外で始まる場合、
@samp{refs/notes/} が接頭辞として付けられ、refのフルネームを形成します。

複数の --notes オプションを組み合わせて、表示するノートを制御できます。 例: "--notes=foo" は "refs/notes/foo"
からのnotesのみを表示します。 "--notes=foo --notes" は、 "refs/notes/foo" とデフォルトのnotes
ref(s) の両方のnotesを表示します。

@item  @samp{--no-notes} 
notesを表示しないでください。 これは、notesが表示されるnotes refのリストをリセットすることにより、上記の @samp{--notes}
オプションを無効にします。 オプションは、コマンドラインで指定された順序で解析されます。 "--notes --notes=foo --no-notes
--notes=bar" は、 "refs/notes/bar" からのnotesのみを表示します。

@item  @samp{--show-notes[=<ref>]} 
@itemx  @samp{--[no-]standard-notes} 
これらのオプションは非推奨です。 代わりに、上記の --notes/--no-notes オプションを使用してください。

@item  @samp{--show-signature} 
署名を @samp{gpg --verify} に渡して、署名されたコミットオブジェクトの有効性を確認し、出力を表示します。

@item  @samp{--no-commit-id} 
@emph{git diff-tree} outputs a line with the commit ID when applicable.  This
flag suppressed the commit ID output.

@item  @samp{-c} 
This flag changes the way a merge commit is displayed (which means it is
useful only when the command is given one <tree-ish>, or @samp{--stdin}).  It
shows the differences from each of the parents to the merge result
simultaneously instead of showing pairwise diff between a parent and the
result one at a time (which is what the @samp{-m} option does).  Furthermore, it
lists only files which were modified from all parents.

@item  @samp{--cc} 
This flag changes the way a merge commit patch is displayed, in a similar
way to the @samp{-c} option. It implies the @samp{-c} and @samp{-p} options and further
compresses the patch output by omitting uninteresting hunks whose the
contents in the parents have only two variants and the merge result picks
one of them without modification.  When all hunks are uninteresting, the
commit itself and the commit log message is not shown, just like in any
other "empty diff" case.

@item  @samp{--combined-all-paths} 
This flag causes combined diffs (used for merge commits) to list the name of
the file from all parents.  It thus only has effect when -c or --cc are
specified, and is likely only useful if filename changes are detected
(i.e. when either rename or copy detection have been requested).

@item  @samp{--always} 
Show the commit itself and the commit log message even if the diff itself is
empty.
@end table

@noindent

@chapheading PRETTY FORMATS

コミットがマージであり、 pretty-format が @emph{oneline} または @emph{email} または @emph{raw} でない場合、
@emph{Author:} 行の前に追加の行が挿入されます。この行は "Merge: "
で始まり、先祖のコミットのハッシュがスペースで区切られて出力されます。履歴の表示を制限している場合、たとえば、特定のディレクトリまたはファイルに関連する変更のみに関心がある場合、リストされたコミットは必ずしも
@strong{直接} の親コミットのリストではない可能性があることに注意してください。

いくつかの組み込みフォーマットがあります。そして以下で説明するように、 pretty.<name> 構成オプション(config
option)を別のフォーマット名または @emph{format:}
文字列に設定することで、追加のフォーマットを定義できます(git-config(1)
参照)。組み込みフォーマットの詳細は以下のとおりです:

@itemize 

@item
@emph{oneline}

@example
<hash> <title line>
@end example

これは、可能な限りコンパクトになるように設計されています。

@item
@emph{short}

@example
commit <hash>
Author: <author>
@end example

@example
<title line>
@end example

@item
@emph{medium}

@example
commit <hash>
Author: <author>
Date:   <author date>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{full}

@example
commit <hash>
Author: <author>
Commit: <committer>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{fuller}

@example
commit <hash>
Author:     <author>
AuthorDate: <author date>
Commit:     <committer>
CommitDate: <committer date>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{reference}

@example
<abbrev hash> (<title line>, <short author date>)
@end example

この形式は、コミットメッセージ内の別のコミットを参照するために使用され、 @samp{--pretty='format:%C(auto)%h (%s,
%ad)'} と同じです。 デフォルトでは、別の @samp{--date} オプションが明示的に指定されていない限り、日付は @samp{--date=short}
でフォーマットされます。formatプレースホルダーを使用する他の @samp{format:} と同様に、その出力は、 @samp{--decorate} や
@samp{--walk-reflogs} などの他のオプションの影響を受けません。

@item
@emph{email}

@example
From <hash> <date>
From: <author>
Date: <author date>
Subject: [PATCH] <title line>
@end example

@example
<full commit message>
@end example

@item
@emph{mboxrd}

@emph{email} と同様ですが、コミットメッセージの "From " で始まる行(前に0個以上の ">" が付いている)は ">"
でクォートされているため、新しいコミットの開始と混同されることはありません。

@item
@emph{raw}

@emph{raw} 形式は、コミットオブジェクトに格納されているとおりにコミット全体を正確に表示します。とりわけ --abbrev または
--no-abbrev
のどちらが使用されているかに関係なく、ハッシュは完全に表示され、「親」(parents)情報は、移植や履歴の単純化を考慮せずに、真の親のコミットを示します。この形式は、コミットの表示方法に影響しますが、いわゆる
@samp{git log --raw} の差分の表示方法ではありません。生のdiff形式で完全なオブジェクト名を取得するには、 @samp{--no-abbrev}
を使用します。

@item
@emph{format:<string>}

@emph{format:<string>} 形式を使用すると、表示する情報を指定できます。注意: これはprintf書式に少し似ていますが、 @emph{\n}
の代わりに @emph{%n} を使用して改行を取得するという例外に注意してください。

例:  @emph{format:"The author of %h was %an, %ar%nThe title was >>%s<<%n"}
は以下のように表示されます:

@example
The author of fe6e0ee was Junio C Hamano, 23 hours ago
The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<
@end example


さて、以下がプレースホルダー達です:

@itemize 

@item
単一のリテラル文字に展開されるプレースホルダー:

@table @asis

@item  @emph{%n} 
改行(newline)

@item  @emph{%%} 
'%'そのもの

@item  @emph{%x00} 
16進数のバイト値を出力
@end table

@item
うしろのプレースホルダーのフォーマッティングに影響するプレースホルダー:

@table @asis

@item  @emph{%Cred} 
赤色に切り替える

@item  @emph{%Cgreen} 
緑色に切り替える

@item  @emph{%Cblue} 
青色に切り替える。

@item  @emph{%Creset} 
色をリセットする

@item  @emph{%C(…)} 
git-config(1) の "CONFIGURATION FILE" 節の Values で説明されている色の指定。
デフォルトでは、色はログ出力が有効になっている場合にのみ表示されます（ @samp{color.diff} または ` color.ui` または
@samp{--color`によって、ターミナルに行く場合は前者の `auto} 設定を尊重します)。 @samp{%C(auto,...)} は、 default
の歴史的同義語として受け入れられます(例: @samp{%C(auto,red)})。 @samp{%C(always,...)}
を指定すると、色が有効になっていない場合でも色が表示されます(この形式やgitが色付けする可能性のある他のすべてのものを含め、出力全体の色を有効にするために
@samp{--color = always} の使用を検討してください)。 @samp{auto} のみ(つまり、 @samp{%C(auto)}
)は、色が再び切り替わるまで、続くプレースホルダーで自動色付けをオンにします。

@item  @emph{%m} 
左(@samp{<}) または 右(@samp{>}) または 境界 (@samp{-}) の印

@item  @emph{%w([<w>[,<i1>[,<i2>]]])} 
git-shortlog(1) の -w オプションのように、
行の折り返しを切り替えます。

@item  @emph{%<(<N>[,trunc|ltrunc|mtrunc])} 
次のプレースホルダーに少なくともN列を使用させ、
必要に応じて右側にスペースを埋め込みます。オプションで、出力がN列より長い場合は、先頭(ltrunc)または中間(mtrunc)または末尾(trunc)で切り捨てます。注意:
切り捨ては、 N >= 2 でのみ正しく機能することに注意してください。

@item  @emph{%<|(<N>)} 
次のプレースホルダーを少なくともN番目の列まで取得し、
必要に応じて右側にスペースを埋め込みます

@item  @emph{%>(<N>)}, @emph{%>|(<N>)} 
それぞれ @emph{%<(<N>)} 、 @emph{%<|(<N>)} に似ていますが、
左側にスペースが埋め込まれています

@item  @emph{%>>(<N>)}, @emph{%>>|(<N>)} 
@emph{%>(<N>)} 、 @emph{%>|(<N>)} とそれぞれ似ていますが、
次のプレースホルダーが指定されたよりも多くのスペースを取り、その左側にスペースがある場合は、それらのスペースを使用します。

@item  @emph{%><(<N>)}, @emph{%><|(<N>)} 
それぞれ @emph{%<(<N>)} 、 @emph{%<|(<N>)} に似ていますが、
両側にパディングがあります(つまり、テキストが中央に配置されます)
@end table

@item
コミットから抽出された情報に展開するプレースホルダー:

@table @asis

@item  @emph{%H} 
コミットハッシュ

@item  @emph{%h} 
省略されたコミットハッシュ

@item  @emph{%T} 
ツリーハッシュ

@item  @emph{%t} 
省略されたツリーハッシュ

@item  @emph{%P} 
親のハッシュ達

@item  @emph{%p} 
省略された親のハッシュ達

@item  @emph{%an} 
作者名

@item  @emph{%aN} 
作者名( .mailmap に関しては、git-shortlog(1) または
git-blame(1) を参照)

@item  @emph{%ae} 
作者電子メールアドレス

@item  @emph{%aE} 
作者電子メールアドレス(.mailmap に関しては git-shortlog(1) または
git-blame(1) を参照)

@item  @emph{%al} 
作者電子メールアドレスアカウント名(local-part)( @emph{@@} の前の部分)

@item  @emph{%aL} 
作者電子メールアドレスアカウント名(local-part)(@emph{%al} 参照) .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ad} 
作成日(フォーマットに関しては --date= オプション参照)

@item  @emph{%aD} 
作成日 RFC2822形式

@item  @emph{%ar} 
作成日 相対(relative)形式

@item  @emph{%at} 
作成日 UNIXタイムスタンプ形式

@item  @emph{%ai} 
作成日 ISO 8601風形式

@item  @emph{%aI} 
作成日 厳密なISO 8601形式

@item  @emph{%as} 
作成日 短い形式(@samp{YYYY-MM-DD})

@item  @emph{%ah} 
作成日 human形式( git-rev-list(1) の @samp{--date=human}
オプションのようなかんじ)

@item  @emph{%cn} 
コミッター名

@item  @emph{%cN} 
コミッター名( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ce} 
コミッター電子メールアドレス

@item  @emph{%cE} 
コミッター電子メールアドレス(.mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%cl} 
コミッター電子メールアドレスアカウント名(local-part)( @emph{@@} の前の部分)

@item  @emph{%cL} 
コミッター電子メールアドレスアカウント名(local-part)( @emph{%cl} 参照) .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%cd} 
コミッター日付(フォーマットに関しては --date= オプション参照)

@item  @emph{%cD} 
コミッター日付 RFC2822形式

@item  @emph{%cr} 
コミッター日付 相対(relative)形式

@item  @emph{%ct} 
コミッター日付 UNIXタイムスタンプ形式

@item  @emph{%ci} 
コミッター日付 ISO 8601風形式

@item  @emph{%cI} 
コミッター日付 厳密なISO 8601形式

@item  @emph{%cs} 
コミッター日付 短い形式(@samp{YYYY-MM-DD})

@item  @emph{%ch} 
コミッター日付 human形式(git-rev-list(1) の @samp{--date=human}
オプションのようなかんじ)

@item  @emph{%d} 
ref名 git-log(1) の --decorate オプションみたいなの

@item  @emph{%D} 
" (", ")" で囲ってないref名

@item  @emph{%(describe[:options])} 
git-describe(1) のような人間が読める名前。
説明できないコミットの場合は空の文字列。 @samp{describe}
文字列の後には、コロンと0個以上のカンマ区切りオプションを続けることができます。タグが同時に追加または削除されると、説明に一貫性がなくなる可能性があります。

@itemize 

@item
@emph{match=<pattern>}:  "refs/tags/" プレフィックスを除いて、指定された @samp{glob(7)}
パターンに一致するタグのみを考慮します。

@item
@emph{exclude=<pattern>}: "refs/tags/" プレフィックスを除いて、指定された @samp{glob(7)}
パターンに一致するタグを考慮しないでください。
@end itemize

@item  @emph{%S} 
コミットに到達したコマンドラインで指定されたref名
( @samp{git log --source} など)は、 @samp{git log} でのみ機能します

@item  @emph{%e} 
エンコーディング

@item  @emph{%s} 
件名(subject)

@item  @emph{%f} 
ファイル名に適した、サニタイズされた件名

@item  @emph{%b} 
本文(body)

@item  @emph{%B} 
生本文(raw body)(ラップされてない件名と本文)

@item  @emph{%N} 
コミットノート(commit notes)

@item  @emph{%GG} 
署名されたコミットの為のGPSからの生の検証メッセージ

@item  @emph{%G?} 
良い(good)な(有効な)署名の場合は "G" 、
悪い(bad)な署名の場合は "B" 、有効性が不明(unknown)な良い署名の場合は "U" 、期限切れ(eXpired)の良い署名の場合は "X"
、期限切れのキーで作成された良い署名の場合は "Y" 、取り消されたキーによって作成された良い署名の場合は "R"
、署名を確認できない場合(キーの欠落など)は "E" 、署名がない場合は "N" を表示します。

@item  @emph{%GS} 
署名されたコミットの署名者の名前を表示する

@item  @emph{%GK} 
署名されたコミットに署名するために使用されるキーを表示する

@item  @emph{%GF} 
署名されたコミットに署名するために使用されるキーのフィンガープリントを表示する

@item  @emph{%GP} 
署名されたコミットに署名するためにサブキーが使用された
主キーのフィンガープリントを表示します

@item  @emph{%GT} 
署名されたコミットに署名するために使用されるキーの信頼レベル(trust level)を表示します

@item  @emph{%gD} 
reflogセレクター(例:@samp{refs/stash@@@{1@}} or @samp{refs/stash@@@{2 minutes ago@}})
この形式は、 @samp{-g} オプションで説明されている規則に従います。 @samp{@@} の前の部分は、コマンドラインで指定されたrefnameです(したがって、
@samp{git log -g refs/heads/master} は @samp{refs/heads/master@@@{0@}} を生成します)。

@item  @emph{%gd} 
短縮されたreflogセレクター。 @samp{%gD} と同じですが、
人間が読みやすいようにrefname部分が短縮されています(したがって、 @samp{refs/heads/master} は単に @samp{master}
になります)。

@item  @emph{%gn} 
reflog ID名

@item  @emph{%gN} 
reflog ID名( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ge} 
reflog ID 電子メールアドレス

@item  @emph{%gE} 
reflog ID 電子メールアドレス( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%gs} 
reflog 件名

@item  @emph{%(trailers[:options])} 
git-interpret-trailers(1) によって解釈されるようにボディのトレーラーを表示します。
@samp{trailers}
文字列の後には、コロンと0個以上のカンマ区切りオプションを続けることができます。いずれかのオプションが複数回提供された場合、それぞれ最後のものが優先されます。

ブール値オプションは、オプションの値 @samp{[=<BOOL>]} を受け入れます。 値 @samp{true} 、@samp{false} 、 @samp{on} 、@samp{off}
などはすべて受け入れられます。 git-config(1) の "EXAMPLES" の "boolean"
サブセクションを参照してください。ブール値オプションが値なしで指定された場合、それは有効を指定した事になります。

@itemize 

@item
@emph{key=<K>}
は指定されたキーを持つトレーラーのみを表示します。マッチングは大文字と小文字を区別せずに行われ、末尾のコロンはオプションです。オプションが複数回指定されている場合、いずれかのキーに一致するトレーラー行が表示されます。このオプションは自動的に
@samp{only} オプションを有効にして、トレーラーブロック内の非トレーラー行が非表示になるようにします。それが望ましくない場合は、
@samp{only=false} で無効にすることができます。 たとえば、 @samp{%(trailers:key=Reviewed-by)} は、キーが
`Reviewed-by`のトレーラー行を表示します。

@item
@emph{only[=<BOOL>]} はトレーラーブロックに非トレーラー行を含めるかどうかを選択します。

@item
@emph{separator=<SEP>}
はトレーラー行の間に挿入される区切り文字を指定します。このオプションが指定されていない場合、各トレーラー行は改行文字で終了します。文字列SEPには、上記のリテラルフォーマットコードが含まれる場合があります。区切り文字としてコンマを使用するには、次のオプションとして解析されないよう
@samp{%x2C} を使用する必要があります。 たとえば、 %(trailers:key=Ticket,separator=%x2C )` は、キーが
"Ticket" であるすべてのトレーラー行をカンマとスペースで区切って表示します。

@item
@emph{unfold[=<BOOL>]} は interpret-trailer の @samp{--unfold}
オプションが指定されたかのように動作させます。たとえば、 @samp{%(trailers:only,unfold=true)}
が展開され、すべてのトレーラー行が表示されます。

@item
@emph{keyonly[=<BOOL>]} トレーラーのキー部分のみを表示。

@item
@emph{valueonly[=<BOOL>]} トレーラーの値部分のみ表示。

@item
@emph{key_value_separator=<SEP>}
トレーラー行の間に挿入される区切り文字を指定します。このオプションが指定されていない場合、各トレーラーのキーと値のペアは ": " で区切られます。
それ以外の場合は、上記の @emph{separator=<SEP>} と同じセマンティクスを共有します。
@end itemize
@end table
@end itemize
@end itemize

@quotation

@strong{Note}

一部のプレースホルダーは、リビジョントラバーサルエンジンに指定された他のオプションに依存する場合があります。 たとえば、 @samp{%g*}
reflogオプションは、reflogエントリをトラバースしない限り(たとえば、 @samp{git log
-g`によって)空の文字列を挿入します。コマンドラインで `--decorate} がまだ指定されていない場合、 @samp{%d} と @samp{%D}
プレースホルダーは「短い」(short)装飾形式を使用します。
@end quotation

プレースホルダーの @emph{%} の後に @samp{+}
(プラス記号)を追加すると、プレースホルダーが空でない文字列に展開される場合に限り、展開の直前に改行が挿入されます。

プレースホルダーの @emph{%} の後に @samp{-}
(マイナス記号)を追加すると、プレースホルダーが空の文字列に展開された場合にのみ、展開の直前の連続するすべての改行が削除されます。

プレースホルダーの @emph{%} の後に ` `
(スペース)を追加すると、プレースホルダーが空でない文字列に展開される場合に限り、展開の直前にスペースが挿入されます。

@itemize 

@item
@emph{tformat:}

@emph{tformat:} 形式は、 "separator" セマンティクスの代わりに "terminator" セマンティクスを提供することを除いて、
@emph{format:} とまったく同じように機能します。
つまり、各コミットには、エントリ間に区切り文字を配置するのではなく、メッセージターミネータ文字(通常は改行)が追加されます。
これは、「1行」形式と同様に、1行形式の最終エントリが新しい行で適切に終了することを意味します。 例えば:

@example
$ git log -2 --pretty=format:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973 -- NO NEWLINE

$ git log -2 --pretty=tformat:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973
@end example


加えて、 @samp{%} が含まれている認識されない文字列は、その前に @samp{tformat:} があるかのように解釈(interpret)されます。
たとえば、以下の2つは同等です:

@example
$ git log -2 --pretty=tformat:%h 4da45bef
$ git log -2 --pretty=%h 4da45bef
@end example

@end itemize

@noindent

@chapheading Raw output format

@samp{git-diff-index} と @samp{git-diff-tree} と @samp{git-diff-files} と @samp{git diff --raw}
からの生の出力形式は非常に似ています。

これらのコマンドはすべて、2つのセットを比較します。なお、比較されるものは異なります:

@table @asis

@item  git-diff-index <tree-ish> 
<tree-ish> とファイルシステム上のファイルを比較します。

@item  git-diff-index --cached <tree-ish> 
<tree-ish> とインデックスを比較します。

@item  git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…] 
2つの引数で指定されたツリーを比較します。

@item  git-diff-files [<pattern>…] 
インデックスとファイルシステム上のファイルを比較します。
@end table

"git-diff-tree"
コマンドは、比較対象のハッシュ値を出力することで出力を開始します。その後、すべてのコマンドは、変更されたファイルごとに1つの出力行を出力します。

出力行は以下のようにフォーマットされます:

@example
in-place edit  :100644 100644 bcd1234 0123456 M file0
copy-edit      :100644 100644 abcd123 1234567 C68 file1 file2
rename-edit    :100644 100644 abcd123 1234567 R86 file1 file3
create         :000000 100644 0000000 1234567 A file4
delete         :100644 000000 1234567 0000000 D file5
unmerged       :000000 000000 0000000 0000000 U file6
@end example


つまり、左から右へ:

@enumerate 

@item
コロン(:)

@item
"src" のモード。作成(creation)またはマージされていない(unmerged)場合は 000000

@item
空白

@item
"dst" のモード。作成(creation)またはマージされていない(unmerged)場合は 000000

@item
空白

@item
"src" のsha1。作成(creation)またはマージされていない(unmerged)場合は 0@{40@}

@item
空白

@item
"dst" のsha1。作成(creation)またはマージされていない(unmerged)または作業ツリーにある場合は 0@{40@}

@item
空白

@item
ステータスの後に、オプションの「スコア数」("score" number)が続きます

@item
@samp{-z} オプションが使用されている場合はタブまたはNUL

@item
"src" のパス

@item
@samp{-z} オプションが使用されている場合タブまたはNUL。ステータスCまたはRにのみ存在します

@item
"dst" のパス。ステータスCまたはRにのみ存在します

@item
LFでレコードを終了します。 @samp{-z} オプションが使用されている場合はNULでレコードを終了します。
@end enumerate

ステータス文字の種類は以下のとおり:

@itemize 

@item
A: ファイルの追加

@item
C: ファイルを新しいファイルにコピー

@item
D: ファイルの削除

@item
M: ファイルの内容やモードの変更

@item
R: ファイル名の名前変更

@item
T: ファイルのタイプを変更

@item
U: ファイルはマージされていません(コミットする前にマージを完了する必要があります)

@item
X: 「不明な」変更タイプ(おそらくバグです。報告してください)
@end itemize

ステータス文字CとRの後には常にスコアが続きます(移動またはコピーのソースとターゲットの間の類似性のパーセンテージを示します)。ステータス文字Mの後には、ファイルの書き換えのスコア(非類似度のパーセンテージを示す)が続く場合があります。

<sha1> は、ファイルがファイルシステム上で新規で、インデックスと同期していない場合、すべて0として表示されます。

例:

@example
:100644 100644 5be4a4a 0000000 M file.c
@end example


@samp{-z`オプションを指定しない場合、構成変数 `core.quotePath} で説明されているように、通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。 @samp{-z}
を使用すると、ファイル名がそのまま出力され、行はNULバイトで終了します。

@noindent

@chapheading diff format for merges

"git-diff-tree" と "git-diff-files" と "git-diff --raw" は、 @samp{-c} または @samp{--cc}
オプションを使用して、マージコミットに対してもdiff出力を生成できます。出力は、以下の点で上記の形式とは異なります:

@enumerate 

@item
親ごとにコロン(:)があります

@item
より多くの "src" モードと "src" sha1があります

@item
statusは、各親のステータス文字を連結したものです

@item
オプションの「スコア数」はありません

@item
ファイルのタブ区切りのパス名
@end enumerate

@samp{-c} および ` -cc` の場合、履歴のいずれかの側でファイルの名前が変更された場合でも、宛先(dst)または最終パスのみが表示されます。
@samp{--combined-all-paths} を使用すると、各親のパスの名前が表示され、それに続いてマージコミットのパスの名前が表示されます。

例: @samp{--combined-all-paths} を使用しない @samp{-c} および @samp{--cc} の場合:

@example
::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c
::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       bar.sh
::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       phooey.c
@end example


例: @samp{-c} または @samp{--cc} のいずれかに @samp{--combined-all-paths} が追加された場合:

@example
::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c  desc.c  desc.c
::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       foo.sh  bar.sh  bar.sh
::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       fooey.c fuey.c  phooey.c
@end example


注意: 'combined diff’は、すべての親から変更されたファイルのみをリストすることに注意してください。

@noindent

@chapheading Generating patch text with -p

git-diff(1) 、 git-log(1) 、 git-show(1) 、
git-diff-index(1) 、 git-diff-tree(1) 、
git-diff-files(1) に @samp{-p} オプションを付けて実行するとパッチテキストを生成します。パッチテキストの作成は、
@samp{GIT_EXTERNAL_DIFF} と @samp{GIT_DIFF_OPTS} 環境変数( git(1) 参照)、および @samp{diff}
属性( gitattributes(5) 参照)を介してカスタマイズできます。

-pオプションが生成するものは、従来のdiff形式とは少々異なります:

@enumerate 

@item
先行して、以下のような "git diff" ヘッダーがあります:

@example
diff --git a/file1 b/file2
@end example

名前の変更/コピーが含まれない限り、 @samp{a/} と @samp{b/} のファイル名は同じです。 特に、作成または削除の場合でも、 @samp{a/} または @samp{b/}
ファイル名の代わりに @samp{/dev/ null} が使用されることはありません。

名前変更/コピーが含まれる場合、 @samp{file1} と`file2`
は、それぞれ名前変更/コピーのソースファイルの名前と、名前変更/コピーが生成するファイルの名前を示します。

@item
その後に、1つ以上の拡張ヘッダー行達が続きます:

@example
old mode <mode>
new mode <mode>
deleted file mode <mode>
new file mode <mode>
copy from <path>
copy to <path>
rename from <path>
rename to <path>
similarity index <number>
dissimilarity index <number>
index <hash>..<hash> <mode>
@end example

ファイルモードは、ファイルタイプとファイル許可ビットを含む6桁の8進数として出力されます。

拡張ヘッダーのパス名には、 @samp{a/} および @samp{b/} プレフィックスは含まれません。

類似インデックス(similarity index)は変更されていない行のパーセンテージであり、非類似インデックス(dissimilarity
index)は変更された行のパーセンテージです。これは切り捨てられた整数であり、その後にパーセント記号が続きます。したがって、100％の類似インデックス値は2つの等しいファイルを表し、100％の非類似性は古いファイルから新しいファイルに移行された行がないことを意味します。

インデックス行には、変更前後のブロブオブジェクト名が含まれます。 <mode>
は、ファイルモードが変更されない場合に含まれます。それ以外の場合、別々の行は古いモードと新しいモードを示します。

@item
通常の文字でないキャラクタ(\"unusual\" characters)を含むパス名は、構成変数 @samp{core.quotePath}
で説明されているように引用符で囲まれています( git-config(1)参照)。

@item
出力内のすべての @samp{file1} ファイルはコミット前のファイルを参照し、すべての @samp{file2}
ファイルはコミット後のファイルを参照します。各変更を各ファイルに順番に適用するのは誤りです。たとえば、以下のパッチはaとbを交換します:

@example
diff --git a/a b/b
rename from a
rename to b
diff --git a/b b/a
rename from b
rename to a
@end example

@item
ハンクのヘッダーには、ハンクが適用される関数の名前が記載されています。特定の言語に合わせてこれを調整する方法の詳細については、
gitattributes(5) の "Defining a custom hunk-header" を参照してください。
@end enumerate

@noindent

@chapheading Combined diff format

diffを生成するコマンドは、マージを表示するときに @samp{-c} または @samp{--cc} オプションを使用して「合成diff」(combined
diff)を生成できます。これは git-diff(1) または git-show(1)
でのマージを表示するときのデフォルトの形式です。 注意: これらのコマンドのいずれかに適切な @samp{--diff-merges}
オプションを指定して、特定の形式で差分を強制的に生成できることにも注意してください。

合成diff形式は以下のようになります:

@example
diff --combined describe.c
index fabadb8,cc95eb0..4866510
--- a/describe.c
+++ b/describe.c
@@@@@@ -98,20 -98,12 +98,20 @@@@@@
        return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
  @}

- static void describe(char *arg)
 -static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  @{
 +      unsigned char sha1[20];
 +      struct commit *cmit;
        struct commit_list *list;
        static int initialized = 0;
        struct commit_name *n;

 +      if (get_sha1(arg, sha1) < 0)
 +              usage(describe_usage);
 +      cmit = lookup_commit_reference(sha1);
 +      if (!cmit)
 +              usage(describe_usage);
 +
        if (!initialized) @{
                initialized = 1;
                for_each_ref(get_name);
@end example


@enumerate 

@item
まず "git diff"  ヘッダーがあり、以下のようになります( @samp{-c} オプションが使用されている場合):

@example
diff --combined file
@end example

または、以下のようになります( @samp{--cc} オプションが使用されている場合):

@example
diff --cc file
@end example

@item
その後に1つ以上の拡張ヘッダー行が続きます(以下の例は、2つの親とのマージを示しています):

@example
index <hash>,<hash>..<hash>
mode <mode>,<mode>..<mode>
new file mode <mode>
deleted file mode <mode>,<mode>
@end example

@samp{mode <mode>,<mode>..<mode>} 行は、<mode> の少なくとも1つが他の <mode>
と異なる場合にのみ表示されます。検出されたコンテンツの移動(名前の変更とコピーの検出)に関する情報を含む拡張ヘッダーは、2つの <tree-ish>
のdiffで機能するように設計されており、合成diff形式では使用されません。

@item
その後に2行の from-file/to-file ヘッダーが続きます

@example
--- a/file
+++ b/file
@end example

従来の統一diff形式の2行ヘッダーと同様に、 @samp{/dev/null} は、作成または削除されたファイルを通知するために使用されます。

ただし、 --combined-all-paths  オプションが指定されている場合、2行の from-file/to-file の代わりに、 N+1
行の from-file/to-file ヘッダーが取得されます。ここで、 N はマージコミットの親の数です。

@example
--- a/file
--- a/file
--- a/file
+++ b/file
@end example

この拡張形式は、名前変更またはコピー検出がアクティブな場合に役立ち、別の親のファイルの元の名前を確認できます。

@item
チャンクヘッダーの形式が変更され、誤って @samp{patch-p1}
にフィードされるのを防ぎます。合成差分形式は、マージコミットの変更を確認するために作成されたものであり、適用されることを意図したものではありません。この変更は、拡張された「インデックス」ヘッダーの変更に似ています:

@example
@@@@@@ <from-file-range> <from-file-range> <to-file-range> @@@@@@
@end example

合成diff形式のチャンクヘッダーには親の数+1の @samp{@@} 文字があります。
@end enumerate

従来の統一diff形式とは異なり、2つのファイルAとBが、 @samp{-} (マイナスはAに表示されますが、Bでは削除されます) または @samp{+}
(プラスはAにはありませんが、Bには追加されます)、または @samp{" "}（スペースは変更なし)
プレフィックスを持つ単一の列で表示される場合、この形式は2つ以上のファイル file1, file2,… を1つのファイルXと比較し、Xが各
fileN とどのように異なるかを示します。ファイルNごとに1つの列が出力行の前に追加され、Xの行が出力行とどのように異なるかを示します。

列Nの @samp{-} 文字は、その行が fileN に表示されているが、結果には表示されていないことを意味します。 列Nの @samp{+}
文字は、結果に行が表示され、 fileN にその行がないことを意味します(つまり、その親の観点から見て行が追加されたことを示す)。

上記の出力例では、関数のシグネチャが両方のファイルから見て変更されています(したがって、 file1 と file2 の両方から2つの @samp{-}
が削除され、さらに @samp{++} が追加されたため、 file1 と file2 のどちらにも表示されません)。また、他の8行は file1 と同じですが、
file2 には表示されません(したがって、接頭辞として @samp{+} が付けられます)。

@samp{git diff-tree -c} で表示される場合、マージコミットの親をマージ結果と比較します(つまり、 file1..fileN が親です)。
@samp{git diff-files -c} で表示される場合、2つの未解決のマージ親を作業ツリーファイルと比較します(つまり、 file1
はステージ2、別名「私たちのバージョン」、 file2 はステージ3、別名「彼らのバージョン」です)。

@noindent

@chapheading other diff formats

@samp{--summary} オプションは、新しく追加、削除、名前変更、およびコピーされたファイルを説明します。@samp{--stat} オプションは、
diffstat(1) グラフ を出力に追加します。これらのオプションは、 @samp{-p}
などの他のオプションと組み合わせることができ、人間が読むことを目的としています。

名前の変更またはコピーを伴う変更を表示する場合、 @samp{--stat}
出力は、パス名の共通のプレフィックスとサフィックスを組み合わせることにより、パス名をコンパクトにフォーマットします。
たとえば、4行を変更(modify)しながら @samp{arch/i386/Makefile} を @samp{arch/x86/Makefile}
に移動(move)する変更(change)は、次のように表示されます:

@example
arch/@{i386 => x86@}/Makefile    |   4 +--
@end example


@samp{--numstat} オプションは diffstat(1) 情報を提供しますが、人間ではなくソフトウェアで読むのを容易にするように設計されています。
@samp{--numstat} 出力のエントリは以下のようになります:

@example
1       2       README
3       1       arch/@{i386 => x86@}/Makefile
@end example


この形式は、左から右へ:

@enumerate 

@item
追加行数

@item
タブ

@item
削除行数

@item
タブ

@item
パス名(おそらく rename/copy 情報を含む)

@item
改行
@end enumerate

@samp{-z} 出力オプションが有効な場合、出力は以下のようにフォーマットされます:

@example
1       2       README NUL
3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL
@end example


これは:

@enumerate 

@item
追加行数

@item
タブ

@item
削除行数

@item
タブ

@item
NUL(rename/copy された場合のみ存在します)

@item
プリイメージのパス名

@item
NUL(rename/copy された場合のみ存在します)

@item
ポストイメージのパス名(rename/copy された場合のみ存在します)

@item
NUL
@end enumerate

名前が変更された場合のプリイメージパスの前の追加の @samp{NUL}
は、出力を読み取るスクリプトが、先読みせずに、読み取られている現在のレコードがシングルパスレコードであるか、名前変更/コピーレコードであるか、を判断できるようにするためです。追加および削除された行を読み取った後、
@samp{NUL} まで読み取るとパス名が生成されますが、それが @samp{NUL} の場合、レコードには2つのパスが表示されます。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-diff,,,Top
@chapheading Name

git-diff — Show changes between commits, commit and working tree, etc

@noindent

@chapheading Synopsis

@display
git diff [<options>] [<commit>] [--] [<path>…]
git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>…]
git diff [<options>] [--merge-base] <commit> [<commit>…] <commit> [--] [<path>…]
git diff [<options>] <commit>…<commit> [--] [<path>…]
git diff [<options>] <blob> <blob>
git diff [<options>] --no-index [--] <path> <path>
@end display


@noindent

@chapheading DESCRIPTION

Show changes between the working tree and the index or a tree, changes
between the index and a tree, changes between two trees, changes resulting
from a merge, changes between two blob objects, or changes between two files
on disk.

@table @asis

@item  @emph{git diff} [<options>] [--] [<path>…] 
This form is to view the changes you made relative to the index (staging
area for the next commit).  In other words, the differences are what you
@emph{could} tell Git to further add to the index but you still haven’t.  You can
stage these changes by using git-add(1).

@item  @emph{git diff} [<options>] --no-index [--] <path> <path> 
This form is to compare the given two paths on the filesystem.  You can omit
the @samp{--no-index} option when running the command in a working tree
controlled by Git and at least one of the paths points outside the working
tree, or when running the command outside a working tree controlled by
Git. This form implies @samp{--exit-code}.

@item  @emph{git diff} [<options>] --cached [--merge-base] [<commit>] [--] [<path>…] 
This form is to view the changes you staged for the next commit relative to
the named <commit>.  Typically you would want comparison with the latest
commit, so if you do not give <commit>, it defaults to HEAD.  If HEAD does
not exist (e.g. unborn branches) and <commit> is not given, it shows all
staged changes.  --staged is a synonym of --cached.

If --merge-base is given, instead of using <commit>, use the merge base of
<commit> and HEAD.  @samp{git diff --cached --merge-base A} is equivalent to @samp{git
diff --cached $(git merge-base A HEAD)}.

@item  @emph{git diff} [<options>] [--merge-base] <commit> [--] [<path>…] 
This form is to view the changes you have in your working tree relative to
the named <commit>.  You can use HEAD to compare it with the latest commit,
or a branch name to compare with the tip of a different branch.

If --merge-base is given, instead of using <commit>, use the merge base of
<commit> and HEAD.  @samp{git diff --merge-base A} is equivalent to @samp{git diff
$(git merge-base A HEAD)}.

@item  @emph{git diff} [<options>] [--merge-base] <commit> <commit> [--] [<path>…] 
This is to view the changes between two arbitrary <commit>.

If --merge-base is given, use the merge base of the two commits for the
"before" side.  @samp{git diff --merge-base A B} is equivalent to @samp{git diff $(git
merge-base A B) B}.

@item  @emph{git diff} [<options>] <commit> <commit>… <commit> [--] [<path>…] 
This form is to view the results of a merge commit.  The first listed
<commit> must be the merge itself; the remaining two or more commits should
be its parents.  A convenient way to produce the desired set of revisions is
to use the @samp{^@@} suffix.  For instance, if @samp{master} names a merge commit,
@samp{git diff master master^@@} gives the same combined diff as @samp{git show
master}.

@item  @emph{git diff} [<options>] <commit>..<commit> [--] [<path>…] 
This is synonymous to the earlier form (without the @samp{..}) for viewing the
changes between two arbitrary <commit>.  If <commit> on one side is omitted,
it will have the same effect as using HEAD instead.

@item  @emph{git diff} [<options>] <commit>...<commit> [--] [<path>…] 
This form is to view the changes on the branch containing and up to the
second <commit>, starting at a common ancestor of both <commit>.  @samp{git diff
A...B} is equivalent to @samp{git diff $(git merge-base A B) B}.  You can omit
any one of <commit>, which has the same effect as using HEAD instead.
@end table

Just in case you are doing something exotic, it should be noted that all of
the <commit> in the above description, except in the @samp{--merge-base} case and
in the last two forms that use @samp{..} notations, can be any <tree>.

For a more complete list of ways to spell <commit>, see "SPECIFYING
REVISIONS" section in gitrevisions(7).  However, "diff" is about
comparing two @emph{endpoints}, not ranges, and the range notations
(@samp{<commit>..<commit>} and @samp{<commit>...<commit>}) do not mean a range as
defined in the "SPECIFYING RANGES" section in gitrevisions(7).

@table @asis

@item  @emph{git diff} [<options>] <blob> <blob> 
This form is to view the differences between the raw contents of two blob
objects.
@end table

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-p} 
@itemx  @samp{-u} 
@itemx  @samp{--patch} 
パッチを生成します(generating patches に関するセクションを参照)。
これがデフォルトです。

@item  @samp{-s} 
@itemx  @samp{--no-patch} 
diff出力を抑制します。デフォルトでパッチを表示する @samp{git show} のようなコマンド、または @samp{--patch}
の効果をキャンセルする場合に便利です。

@item  @samp{-U<n>} 
@itemx  @samp{--unified=<n>} 
通常の3行ではなく、<n> 行の内容でdiffを生成します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--output=<file>} 
stdout ではなく指定のファイルに出力します。

@item  @samp{--output-indicator-new=<char>} 
@itemx  @samp{--output-indicator-old=<char>} 
@itemx  @samp{--output-indicator-context=<char>} 
生成されたパッチの新しい行、古い行、またはコンテキスト行を示すために使用される文字を指定します。 通常、それらはそれぞれ @emph{+} 、 @emph{-} 、 ' '
です。

@item  @samp{--raw} 
生形式(raw format)でdiffを生成します。

@item  @samp{--patch-with-raw} 
@samp{-p --raw} の同義語。

@item  @samp{--indent-heuristic} 
diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッチを読みやすくします。 これがデフォルトです。

@item  @samp{--no-indent-heuristic} 
インデントヒューリスティック(indent heuristic)を無効にします。

@item  @samp{--minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{--patience} 
"patience diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--histogram} 
"histogram diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--anchored=<text>} 
"anchored diff" アルゴリズムを使用してdiffを生成します。

このオプションは複数回指定できます。

行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる場合、このアルゴリズムは、その行が出力に削除または追加として表示されないようにします。内部で
"patience diff" アルゴリズムを使用します。

@item  @samp{--diff-algorithm=@{patience|minimal|histogram|myers@}} 
diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

@table @asis

@item  @samp{default}, @samp{myers} 
基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、これがデフォルトです。

@item  @samp{minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{patience} 
パッチを生成する時に "patience diff" アルゴリズムを使います。

@item  @samp{histogram} 
このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張して、「発生率の低い共通要素をサポート」(support
low-occurrence common elements)します。
@end table

たとえば、 あなたが @samp{diff.algorithm}
変数をデフォルト以外の値に設定した上で、それでもデフォルト値を使用する場合は、@samp{--diff-algorithm=default}
オプションを使用する必要があります。

@item  @samp{--stat[=<width>[,<name-width>[,<count>]]]} 
diffstatを生成します。
デフォルトでは、必要なだけのスペースがファイル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォルトで端末幅、または端末に接続されていない場合は80桁であり、
@samp{<width>} で上書きできます。ファイル名部分の幅は、コンマの後に別の幅 @samp{<name-width>}
を指定することで制限できます。グラフ部分の幅は、 @samp{--stat-graph-width=<width>}
(統計グラフを生成するすべてのコマンドに影響します)を使用するか、 @samp{diff.statGraphWidth=<width>} ( @samp{git
format-patch} に影響しません)を設定することによって制限できます。3番目のパラメータ @samp{<count>}
を指定することにより、出力を最初の @samp{<count>} 行に制限し、それに @samp{...} が続く形にできます。

これらのパラメータは、 @samp{--stat-width=<width>} と @samp{--stat-name-width=<name-width>} と
@samp{--stat-count=<count>} を使用して個別に設定することもできます。

@item  @samp{--compact-summary} 
ファイルの作成や削除( "new" または "gone" 。オプションでシンボリックリンクの場合は "+l"
)、diffstatのモード変更(実行可能ビットを追加または削除する場合は、それぞれ "+x" または "-x"
)など、拡張ヘッダー情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置かれます。本機能は @samp{--stat} の機能を含んでいます。

@item  @samp{--numstat} 
@samp{--stat`に似ていますが、プログラムで処理しやすい(machine
friendly)ように、追加および削除された行数を10進表記とパス名で省略形なしで表示します。バイナリファイルの場合、 `0 0} の代わりに2つの
@samp{-} を出力します。

@item  @samp{--shortstat} 
変更されたファイルの総数と、追加および削除された行の数を含む @samp{--stat} 形式の最後の行のみを出力します。

@item  @samp{-X[<param1,param2,...>]} 
@itemx  @samp{--dirstat[=<param1,param2,...>]} 
各サブディレクトリの相対的な変更量の分布を出力します。 @samp{--dirstat}
の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズできます。デフォルトは、 @samp{diff.dirstat}
構成変数によって制御されます(git-config(1) 参照)。以下のパラメータを使用できます:

@table @asis

@item  @samp{changes} 
ソースから削除された、または宛先に追加された行をカウントして、dirstat数を計算します。これは、ファイル内の純粋なコード移動の量を無視します。つまり、ファイル内の行の再配置は、他の変更ほどカウントされません。これは、パラメーターが指定されていない場合のデフォルトの動作です。

@item  @samp{lines} 
通常の行ベースのdiff分析を実行し、削除/追加された行数を合計して、dirstat数を計算します。
(バイナリファイルの場合、バイナリファイルには行の概念がないため、代わりに64バイトのチャンクをカウントします)。 これは @samp{changes}
動作よりも高価な @samp{--dirstat} 動作ですが、他の変更と同じようにファイル内の再配置された行をカウントします。結果の出力は、他の
@samp{--*stat} オプションから得られるものと一致しています。

@item  @samp{files} 
変更されたファイルの数を数えて、dirstat数を計算します。変更された各ファイルは、dirstat分析で等しくカウントされます。これは、ファイルの内容をまったく調べる必要がないため、計算コストが最もかからない
@samp{--dirstat} の動作です。

@item  @samp{cumulative} 
親ディレクトリの子ディレクトリの変更も同様にカウントします。 @samp{cumulative}(累積的)
を使用する場合、報告されるパーセンテージの合計が100%を超える場合があることに注意してください。デフォルトの(非累積的な)動作は、@samp{noncumulative}
パラメーターで指定できます。

@item  <limit> 
整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指定します。指定の割合より少ないディレクトリは、出力に表示されません。
@end table

例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディレクトリに子ディレクトリの数を累積しながら、変更されたファイルをカウント:
@samp{--dirstat=files,10,cumulative}

@item  @samp{--cumulative} 
@samp{--dirstat=cumulative} と同義語

@item  @samp{--dirstat-by-file[=<param1,param2>...]} 
@samp{--dirstat=files,param1,param2...} と同義語

@item  @samp{--summary} 
作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約(condensed summary)を出力します。

@item  @samp{--patch-with-stat} 
@samp{-p --stat} と同義語。

@item  @samp{-z} 
@samp{--raw} または @samp{--numstat} または @samp{--name-only} または @samp{--name-status} が指定されている場合は
パス名を変更せず、出力フィールドターミネータとしてNULLを使用してください。

このオプションがないと、構成変数 @samp{core.quotePath} で説明されているように、 通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。

@item  @samp{--name-only} 
変更されたファイルの名前のみを表示します。 多くの場合、ファイル名はUTF-8でエンコードされます。 詳細については、
git-log(1) のマニュアルページにあるエンコーディングに関する議論(the discussion about
encoding)を参照してください。

@item  @samp{--name-status} 
変更されたファイルの名前とステータスのみを表示します。ステータス文字の意味については、 @samp{--diff-filter}
オプションの説明を参照してください。 @samp{--name-only} と同じように、ファイル名はしばしばUTF-8でエンコードされます。

@item  @samp{--submodule[=<format>]} 
サブモジュールの違いをどのように表示するかを指定します。 @samp{--submodule=short} を指定する場合、 @emph{short}
形式が使用されます。この形式は、範囲の最初と最後にコミットの名前を表示するだけです。 @samp{--submodule} または
@samp{--submodule=log} が指定されている場合、 @emph{log} 形式が使用されます。この形式では、
git-submodule(1) @samp{summary} のように範囲内のコミットが一覧表示されます。 @samp{--submodule=diff}
が指定されている場合、 @emph{diff}
形式が使用されます。この形式は、コミット範囲間のサブモジュールの内容の変更のインラインdiffを示します。configオプションが設定されていない場合、デフォルトは
@samp{diff.submodule} または @emph{short} 形式です。

@item  @samp{--color[=<when>]} 
色付きのdiffを表示します。 @samp{--color} (つまり、 @emph{=<when>} ) は @samp{--color=always} と同じです。
@emph{<when>} は、 @samp{always} または @samp{never} または @samp{auto} のいずれかになります。
@samp{color.ui} と @samp{color.diff} 構成設定で
変更できます。

@item  @samp{--no-color} 
カラーdiffをオフにします。
これは、構成設定(configuration settings)を上書きするために使用できます。
@samp{--color=never} と同じです。

@item  @samp{--color-moved[=<mode>]} 
ソースコードの移動した行を別の色にします。
これは、 @samp{diff.colorMoved} 構成設定によって変更できます。
<mode>は、オプションが指定されていない場合はデフォルトで @emph{no} になり、
モードが指定されていないオプションが指定されている場合は @emph{zebra} になります。
モードは以下のいずれかでなければなりません:

@table @asis

@item  no 
移動行をハイライトしません。

@item  default 
@samp{zebra} の同義語です。これは、将来、より賢明なモードに変更される可能性があります。

@item  plain 
ある場所で追加され、別の場所で削除された行は、 @emph{color.diff.newMoved} で色付けされます。 同様に、
@emph{color.diff.oldMoved}
は、差分の別の場所に追加された削除された行に使用されます。このモードは移動された行をピックアップしますが、コードのブロックが順列なしで移動されたかどうかを判断することはレビューではあまり役に立ちません。

@item  blocks 
少なくとも20文字の英数字の移動テキストのブロックが貪欲に検出されます。検出されたブロックは、 @emph{color.diff.@{old,new@}Moved}
色のいずれかを使用して色付けされます。隣接するブロックを区別することはできません。

@item  zebra 
移動されたテキストのブロックは、 @emph{blocks} モードの場合と同様に検出されます。 ブロックは、
@emph{color.diff.@{old,new@}Moved} 色または @emph{color.diff.@{old,new@}MovedAlternative}
色のいずれかを使用して色付けされます。2つの色の間の変化は、新しいブロックが検出されたことを示します。

@item  dimmed-zebra 
@emph{zebra}
に似ていますが、移動されたコードの重要でない部分の追加の調光(dimmed)が実行されます。隣接する2つのブロックの境界線は興味深いと見なされ、残りは興味深いものではありません。
@samp{dimmed_zebra} は非推奨の同義語です。
@end table

@item  @samp{--no-color-moved} 
移動検出をオフにします。 これは、構成設定を上書きするために使用できます。 @samp{--color-moved=no} と同じです。

@item  @samp{--color-moved-ws=<modes>} 
これは、 @samp{--color-moved} の移動検出を実行するときに空白を無視する方法を設定します。
@samp{diff.colorMovedWS} 構成設定で設定できます。
これらのモードは、コンマ区切りのリストとして指定できます:

@table @asis

@item  no 
移動行検出を実行するときに、空白(whitespace)を無視しない。

@item  ignore-space-at-eol 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  ignore-space-change 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  ignore-all-space 
行を比較するときは空白(whitespace)を無視します。これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  allow-indentation-change 
最初に移動検出で空白(whitespace)を無視し、空白(whitespace)の変更が行ごとに同じである場合にのみ、移動されたコードブロックをブロックにグループ化します。
これは他のモードと互換性がありません。
@end table

@item  @samp{--no-color-moved-ws} 
移動検出を実行するときは、空白(whitespace)を無視しないでください。これは、構成設定を上書きするために使用できます。
@samp{--color-moved-ws=no} と同じです。

@item  @samp{--word-diff[=<mode>]} 
<mode> を使用して変更された単語を区切ることにより、単語のdiffを表示します。デフォルトでは、単語は空白で区切られます。 以下の
@samp{--word-diff-regex} を参照してください。 <mode> のデフォルトは 'plain’です。 <mode>
は以下のいずれかである必要があります:

@table @asis

@item  color 
変更された単語(word)を色のみを使用して強調表示します。 @samp{--color} を意味します。

@item  plain 
単語を @samp{[-removed-]} および @samp{@{+added+@}} として表示します。
区切り文字が入力に表示されている場合、区切り文字をエスケープしようとしないため、出力があいまいになる可能性があります。

@item  porcelain 
スクリプトの使用を目的とした特別な行ベースの形式を使用します。追加/削除/無変更については、通常の統一されたdiff形式で印刷され、行の先頭の
@samp{+}/@samp{-}/` ` 文字で始まり、行の終わりまで続きます。入力の改行は、それ自体の行のチルダ @samp{~} で表されます。

@item  none 
単語(word)のdiffを再度無効にします。
@end table

注意: 最初のモードの名前にもかかわらず、有効になっている場合、すべてのモードで変更された部分を強調するために色が使用されることに注意してください。

@item  @samp{--word-diff-regex=<regex>} 
空白以外を単語と見なす代わりに、 <regex> を使用して単語が何であるかを決定します。また、すでに有効になっていない限り、この機能は
@samp{--word-diff} の機能を含んでいます。

<regex> の重複しないマッチはすべて、単語と見なされます。これらのマッチの間のすべては空白と見なされ、違いを見つけるためとしては無視されます！
正規表現に @samp{|[^[:space:]]}
を追加して、空白以外のすべての文字とマッチすることを確認することをお勧めします。改行を含むマッチは、改行で黙って切り捨てられます！

たとえば、 @samp{--word-diff-regex=.} は各文字を単語として扱い、それに応じて文字ごとの違いを表示します。

正規表現は、diffドライバーまたは構成オプション(configuration option)を介して設定することもできます。
gitattributes(5) または git-config(1)
を参照してください。これを指定すると、diffドライバーまたは構成設定(configuration
settings)が明示的にオーバーライドされます。diffドライバーは構成設定を上書きします。

@item  @samp{--color-words[=<regex>]} 
@samp{--word-diff=color} に @samp{--word-diff-regex=<regex>}
を加えたものに相当します(正規表現が指定されている場合)。

@item  @samp{--no-renames} 
構成ファイルにデフォルトで指定されている場合でも、名前変更の検出をオフにします。

@item  @samp{--[no-]rename-empty} 
名前変更ソースとして空のブロブを使用するかどうか。

@item  @samp{--check} 
変更によって競合マーカーまたは空白エラーが発生した場合に警告します。空白エラーと見なされるものは、 @samp{core.whitespace}
構成によって制御されます。
デフォルトでは、末尾の空白(空白のみで構成される行を含む)と、行の最初のインデント内で直後にタブ文字が続くスペース文字は、空白エラーと見なされます。問題が見つかった場合は、ゼロ以外のステータスで終了します。なお、
--exit-code とは互換性がありません。

@item  @samp{--ws-error-highlight=<kind>} 
diffの @samp{context} または @samp{old} または @samp{new} 行の空白エラーを強調表示します。複数の値はコンマで区切られ、 @samp{none}
は前の値をリセットし、 @samp{default} はリストを @samp{new} にリセットし、 @samp{all} は old、new、context
の省略形です。このオプションが指定されておらず、構成変数 @samp{diff.wsErrorHighlight} が設定されていない場合、 @samp{new}
行の空白エラーのみが強調表示されます。空白エラーは @samp{color.diff.whitespace} で色分けされています。

@item  @samp{--full-index} 
パッチ形式の出力を生成するときは、最初の一握りの文字(first handful of
characters)の代わりに、「インデックス」行にイメージ前およびイメージ後の完全ブロブオブジェクト名を表示します。

@item  @samp{--binary} 
@samp{--full-index} に加えて、 @samp{git-apply} で適用できるバイナリ差分を出力します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--abbrev[=<n>]} 
完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくとも
@emph{<n>} 桁の16進数の長さの最短のプレフィックスを表示します。diffパッチ出力形式では、 @samp{--full-index} が優先されます。つまり、
@samp{--full-index} が指定されている場合、 @samp{--abbrev} に関係なく、完全なブロブ名が表示されます。デフォルト以外の桁数は、
@samp{--abbrev=<n>} で指定できます。

@item  @samp{-B[<n>][/<m>]} 
@itemx  @samp{--break-rewrites[=[<n>][/<m>]]} 
完全な書き換えの変更を削除と作成のペアに分割します。これには以下の2つの目的があります:

これは、ファイルの完全な書き換えに相当する変更が、コンテキストとしてテキストで一致する非常に少数の行と混合された一連の削除と挿入としてではなく、古いものすべての単一の削除とそれに続く
すべての新しいものを1回挿入し、数値 @samp{m} が -B オプションのこの側面を制御します(デフォルトは60%)。 @samp{-B/70%}
は、Gitがそれを完全な書き換えと見なすために、元の30%未満が結果に残る必要があることを指定します(つまり、結果のパッチは、コンテキスト行と混合された一連の削除と挿入になります)。

-M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソースと見なされ(通常、 -M
は、消えたファイルのみを名前変更のソースと見なします)、数 @samp{n} が -Bオプションのこの側面を制御します(デフォルトは50%)。 @samp{-B20%}
は、ファイルのサイズの20%以上と比較して、追加および削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取得される資格があることを指定します。

@item  @samp{-M[<n>]} 
@itemx  @samp{--find-renames[=<n>]} 
名前の変更(renames)を検知する。
@samp{n} が指定されている場合、それは類似性インデックスのしきい値です
(つまり、ファイルのサイズと比較した追加/削除の量)。
たとえば、 @samp{-M90%} は、ファイルの90%以上が変更されていない場合、
Gitが削除/追加のペアを名前変更と見なす必要があることを意味します。
@samp{%} 記号がない場合、数値は小数として読み取られ、その前に小数点が付きます。
つまり、 @samp{-M5} は0.5になるため、@samp{-M50%} と同じになります。
同様に、 @samp{-M05} は @samp{-M5%} と同じです。
検出を正確な名前変更に制限するには、 @samp{-M100%} を使用します。
デフォルトの類似性インデックスは50%です。

@item  @samp{-C[<n>]} 
@itemx  @samp{--find-copies[=<n>]} 
名前と同様コピーを検出します。 @samp{--find-copies-harder} @samp{も参照してください。 `n} を指定すると、 @samp{-M<n>}
と同じ意味になります。

@item  @samp{--find-copies-harder} 
パフォーマンス上の理由から、デフォルトでは、 @samp{-C}
オプションは、コピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピーを検索します。このフラグにより、コマンドは変更されていないファイルをコピー元の候補として検査します。これは大規模なプロジェクトでは非常にコストのかかる操作であるため、注意して使用してください。
複数の @samp{-C} オプションを指定しても同じ効果があります。

@item  @samp{-D} 
@itemx  @samp{--irreversible-delete} 
削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを出力し、プレイメージと @samp{/dev/null}
の差分は出力しません。結果のパッチは、 @samp{patch} または @samp{git apply}
で適用されることを意図していません。これは、変更後にテキストを確認することに集中したい人のためだけのものです。さらに、出力には明らかに、そのようなパッチを手動でも逆に適用するのに十分な情報が不足しているため、オプションの名前が付けられています。

@samp{-B} と併用する場合は、削除/作成ペアの削除部分のプリイメージ(preimage)も省略してください。

@item  @samp{-l<num>} 
@samp{-M} および @samp{-C}
オプションには、名前変更/コピーのサブセットを安価に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペアになっていない宛先をすべての関連ソースと比較する徹底的なフォールバック部分が続きます。(名前の変更の場合、残りのペアになっていないソースのみが関係します。コピーの場合、すべての元のソースが関係します)。Nのソースと宛先の場合、この徹底的なチェックのコストは
O(N^2)
です。このオプションは、関係するソース/宛先ファイルの数が指定された数を超えた場合に、名前変更/コピー検出の完全な部分が実行されないようにします。デフォルトは
diff.renameLimit です。 値0は無制限として扱われることに注意してください。

@item  @samp{--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]} 
追加(Add)・コピー(Copy)・削除(Delete)・変更(Modify)・名前変更(Rename)されたファイル、タイプが変更されたファイル(T)、マージされていないファイル(U)、不明なファイル(X)、またはペアリングが壊れているファイル(B)のみを選択します。フィルタ文字(無しも含む)の任意の組み合わせを使用できます。
組み合わせに @samp{*} (全てまたは無し)が追加されると、比較で他の基準に一致するファイルがある場合、すべてのパスが選択されます。
他の基準に一致するファイルがない場合、何も選択されません。

また、逆に、除外したい時はこれらの各大文字指定を小文字にして指定します。例えば @samp{--diff-filter=ad}
は、追加および削除されたパスを除外します。

注意:すべてのdiffがすべてのタイプを特徴とするわけではないことに注意してください。
たとえば、インデックスから作業ツリーへのdiffにエントリを追加することはできません(diffに含まれるパスのセットは、インデックスの内容によって制限されるため)。
同様に、これらのタイプの検出が無効になっている場合、コピーおよび名前変更されたエントリは表示されません。

@item  @samp{-S<string>} 
ファイル内の指定の文字列(つまり、 addition 、deletion)の出現回数の差分を調べます。スクリプターが使用することを目的としています。

(構造体など)コードの正確なブロックを探していて、そのブロックが最初に作成されてからの履歴を知りたい場合に便利です。この機能を繰り返し使用して、プリイメージ(preimage)内の興味深いブロックを
@samp{-S} にフィードバックし、そしてあなたはそれをブロックの最初のバージョンを取得するまで続けます。

バイナリファイルも検索されます。

@item  @samp{-G<regex>} 
パッチテキストに <regex> にマッチする 追加/削除 された行が含まれている差分を探します。

@samp{-S<regex>-pickaxe-regex} と @samp{-G<regex>}
の違いを説明するために、同じファイル内で以下のdiffを使用してコミットすることを検討してください:

@example
+    return frotz(nitfol, two->ptr, 1, 0);
...
-    hit = frotz(nitfol, mf2.ptr, 1, 0);
@end example


@samp{git log -G"frotz\(nitfol"} はこのコミットを表示しますが、 @samp{git log -S"frotz\(nitfol"
--pickaxe-regex} は表示しません(その文字列の出現回数が変更されなかったため)。

@samp{--text} が提供されていない限り、 textconv フィルターのないバイナリファイルのパッチは無視されます。

詳細については gitdiffcore(7) の @emph{pickaxe} エントリを参照してください。

@item  @samp{--find-object=<object-id>} 
指定されたオブジェクトの出現回数を変更する違いを探します。 @samp{-S}
と同様に、引数だけが異なり、特定の文字列ではなく特定のオブジェクトIDを検索します。

オブジェクトは、ブロブまたはサブモジュールのコミットにすることができます。 これは、 @samp{git-log} の @samp{-t}
オプションがツリーも探すことを意味します。

@item  @samp{--pickaxe-all} 
@samp{-S} または @samp{-G} が変更を見つけたら、 <string>
の変更を含むファイルだけでなく、その変更セット(changeset)のすべての変更を表示します。

@item  @samp{--pickaxe-regex} 
@samp{-S} に指定した <string> を拡張POSIX正規表現として扱います。

@item  @samp{-O<orderfile>} 
ファイルが出力に表示される順序を制御します。これは @samp{diff.orderFile}
構成変数をオーバーライドします(git-config(1) 参照)。 @samp{diff.orderFile} をキャンセルするには、
@samp{-O/dev/null} を使用します。

出力順序は、 <orderfile>
内のglobパターンの順序によって決定されます。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力され、2番目のパターンに一致する(ただし最初のパターンには一致しない)パス名を持つすべてのファイルが次に出力されます。パス名がどのパターンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一致パターンがあるかのように、最後に出力されます。複数のパス名のランクが同じである場合(同じパターンに一致するが、以前のパターンには一致しない)、相互の出力順序は通常の順序です。

<orderfile> は以下のとおりパースされます:

@itemize 

@item
空白行は無視されるため、読みやすくするための区切りとして使用できます。

@item
ハッシュ ("@samp{#}") で始まる行は無視されるため、コメントに使用できます。
パターンがハッシュで始まる場合は、パターンの先頭にバックスラッシュ(訳注:日本では環境により円記号)("@samp{\}") を追加します。

@item
他の各行には、単一のパターンが含まれています。
@end itemize

パターンは、 FNM_PATHNAME フラグなしで fnmatch(3)
に使用されるパターンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポーネントをいくつも削除するとパターンと一致する場合、パス名もパターンと一致する点が異なります。
たとえば、パターン "@samp{foo*bar}" は、 "@samp{fooasdfbar}" および "@samp{foo/bar/baz/asdf}" と一致しますが、
"@samp{foobarx}" とは一致しません。

@item  @samp{--skip-to=<file>} 
@itemx  @samp{--rotate-to=<file>} 
名前付き <file> の前のファイルを出力から破棄するか(スキップして)、出力の最後に移動させます(ローテーションさせます)。 これらは主に @samp{git
difftool} コマンドを使用するために考案されたものであり、それ以外の場合はあまり役に立たない可能性があります。

@item  @samp{-R} 
2つの入力を交換します。 つまり、インデックスまたはディスク上のファイルとツリーの内容の違いを表示します。

@item  @samp{--relative[=<path>]} 
@itemx  @samp{--no-relative} 
プロジェクトのサブディレクトリから実行する場合、このオプションを使用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示するように指示できます。サブディレクトリ(ベアリポジトリなど)にいない場合は、引数として
<path> を指定することで、出力を作成するサブディレクトリに名前を付けることができます。 @samp{--no-relative`は、
`diff.relative} 設定オプションと以前の @samp{--relative} の両方を打ち消すために使用できます。

@item  @samp{-a} 
@itemx  @samp{--text} 
すべてのファイルをテキストとして扱います。

@item  @samp{--ignore-cr-at-eol} 
比較を行うときは、行末のキャリッジリターン(carriage-return)を無視します。

@item  @samp{--ignore-space-at-eol} 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  @samp{-b} 
@itemx  @samp{--ignore-space-change} 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  @samp{-w} 
@itemx  @samp{--ignore-all-space} 
行を比較するときは空白を無視します。 これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  @samp{--ignore-blank-lines} 
全て空白の行の変更は無視します。

@item  @samp{-I<regex>} 
@itemx  @samp{--ignore-matching-lines=<regex>} 
すべての行が <regex> にマッチする変更を無視します。このオプションは複数回指定できます。

@item  @samp{--inter-hunk-context=<lines>} 
指定された行数までの差分ハンク間のコンテキストを表示し、それによって互いに近いハンクを融合します。デフォルトは
@samp{diff.interHunkContext} で、設定オプションが設定されていない場合は0です。

@item  @samp{-W} 
@itemx  @samp{--function-context} 
関数全体を各変更のコンテキスト行として表示します。関数名は、 @samp{git diff}
がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の @emph{Defining a custom
hunk-header} を参照)。

@item  @samp{--exit-code} 
diff(1）と同様のコードでプログラムを終了させます。つまり、違いがあった場合は 1 で終了し、 0 は違いがないことを意味します。

@item  @samp{--quiet} 
プログラムのすべての出力を無効にします。 @samp{--exit-code} を意味します。

@item  @samp{--ext-diff} 
外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外部diffドライバーを設定する場合は、
git-log(1) およびその仲間と一緒にこのオプションを使用する必要があります。

@item  @samp{--no-ext-diff} 
外部diffドライバーを禁止します。

@item  @samp{--textconv} 
@itemx  @samp{--no-textconv} 
バイナリファイルを比較するときに、外部テキスト変換フィルターの実行を許可(または禁止)します。 詳細については、
gitattributes(5)
を参照してください。textconvフィルターは通常、一方向の変換であるため、結果のdiffは人間の消費に適していますが、適用(apply)することはできません。このため、textconvフィルターは、
git-diff(1) および git-log(1) に対してのみデフォルトで有効になりますが、
git-format-patch(1) またはdiff配管コマンドに対しては有効になりません。

@item  @samp{--ignore-submodules[=<when>]} 
diff生成のサブモジュールへの変更を無視します。 <when> は、
none・untracked・dirty・allのいずれかになります。これがデフォルトです。noneを使用すると、追跡されていないファイルまたは変更されたファイルが含まれている場合、またはそのHEADがスーパープロジェクトに記録されているコミットと異なる場合にサブモジュールが変更されたと見なされ、
git-config(1) または gitmodules(5) の
ignoreオプションの設定をオーバーライドするために使用できます。untrackedが使用されている場合、サブモジュールには追跡されていないコンテンツのみが含まれている場合、サブモジュールはダーティとは見なされません(ただし、変更されたコンテンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作業ツリーへのすべての変更が無視され、スーパープロジェクトに格納されているコミットへの変更のみが表示されます(これは1.7.0までの動作でした)。「all」を使用すると、サブモジュールへのすべての変更が非表示になります。

@item  @samp{--src-prefix=<prefix>} 
"a/" の代わりに、与えられたソースプレフィックス(source prefix)を表示します。

@item  @samp{--dst-prefix=<prefix>} 
"b/" の代わりに、指定された宛先プレフィックス(destination prefix)を表示します。

@item  @samp{--no-prefix} 
送信元(source)または宛先(destination)のプレフィックスを表示しません。

@item  @samp{--line-prefix=<prefix>} 
出力のすべての行に追加のプレフィックスを付加します。

@item  @samp{--ita-invisible-in-index} 
デフォルトでは、 "git add -N" によって追加されたエントリは、 "git diff" に既存の空のファイルとして表示され、 "git
diff --cached" に新しいファイルとして表示されます。このオプションを使用すると、エントリは "git diff"
では新しいファイルとして表示され、 "git diff --cached" では存在しません。このオプションは、
@samp{--ita-visible-in-index} で元に戻すことができます。どちらのオプションも実験的なものであり、将来削除される可能性があります。
@end table

これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照してください。

@table @asis

@item  @samp{-1 --base} 
@itemx  @samp{-2 --ours} 
@itemx  @samp{-3 --theirs} 
Compare the working tree with the "base" version (stage #1), "our branch"
(stage #2) or "their branch" (stage #3).  The index contains these stages
only for unmerged entries i.e.  while resolving conflicts.  See
git-read-tree(1) section "3-Way Merge" for detailed information.

@item  @samp{-0} 
Omit diff output for unmerged entries and just show "Unmerged".  Can be used
only when comparing the working tree with the index.

@item  <path>… 
The <paths> parameters, when given, are used to limit the diff to the named
paths (you can give directory names and get diff for all files under them).
@end table

@noindent

@chapheading Raw output format

@samp{git-diff-index} と @samp{git-diff-tree} と @samp{git-diff-files} と @samp{git diff --raw}
からの生の出力形式は非常に似ています。

これらのコマンドはすべて、2つのセットを比較します。なお、比較されるものは異なります:

@table @asis

@item  git-diff-index <tree-ish> 
<tree-ish> とファイルシステム上のファイルを比較します。

@item  git-diff-index --cached <tree-ish> 
<tree-ish> とインデックスを比較します。

@item  git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…] 
2つの引数で指定されたツリーを比較します。

@item  git-diff-files [<pattern>…] 
インデックスとファイルシステム上のファイルを比較します。
@end table

"git-diff-tree"
コマンドは、比較対象のハッシュ値を出力することで出力を開始します。その後、すべてのコマンドは、変更されたファイルごとに1つの出力行を出力します。

出力行は以下のようにフォーマットされます:

@example
in-place edit  :100644 100644 bcd1234 0123456 M file0
copy-edit      :100644 100644 abcd123 1234567 C68 file1 file2
rename-edit    :100644 100644 abcd123 1234567 R86 file1 file3
create         :000000 100644 0000000 1234567 A file4
delete         :100644 000000 1234567 0000000 D file5
unmerged       :000000 000000 0000000 0000000 U file6
@end example


つまり、左から右へ:

@enumerate 

@item
コロン(:)

@item
"src" のモード。作成(creation)またはマージされていない(unmerged)場合は 000000

@item
空白

@item
"dst" のモード。作成(creation)またはマージされていない(unmerged)場合は 000000

@item
空白

@item
"src" のsha1。作成(creation)またはマージされていない(unmerged)場合は 0@{40@}

@item
空白

@item
"dst" のsha1。作成(creation)またはマージされていない(unmerged)または作業ツリーにある場合は 0@{40@}

@item
空白

@item
ステータスの後に、オプションの「スコア数」("score" number)が続きます

@item
@samp{-z} オプションが使用されている場合はタブまたはNUL

@item
"src" のパス

@item
@samp{-z} オプションが使用されている場合タブまたはNUL。ステータスCまたはRにのみ存在します

@item
"dst" のパス。ステータスCまたはRにのみ存在します

@item
LFでレコードを終了します。 @samp{-z} オプションが使用されている場合はNULでレコードを終了します。
@end enumerate

ステータス文字の種類は以下のとおり:

@itemize 

@item
A: ファイルの追加

@item
C: ファイルを新しいファイルにコピー

@item
D: ファイルの削除

@item
M: ファイルの内容やモードの変更

@item
R: ファイル名の名前変更

@item
T: ファイルのタイプを変更

@item
U: ファイルはマージされていません(コミットする前にマージを完了する必要があります)

@item
X: 「不明な」変更タイプ(おそらくバグです。報告してください)
@end itemize

ステータス文字CとRの後には常にスコアが続きます(移動またはコピーのソースとターゲットの間の類似性のパーセンテージを示します)。ステータス文字Mの後には、ファイルの書き換えのスコア(非類似度のパーセンテージを示す)が続く場合があります。

<sha1> は、ファイルがファイルシステム上で新規で、インデックスと同期していない場合、すべて0として表示されます。

例:

@example
:100644 100644 5be4a4a 0000000 M file.c
@end example


@samp{-z`オプションを指定しない場合、構成変数 `core.quotePath} で説明されているように、通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。 @samp{-z}
を使用すると、ファイル名がそのまま出力され、行はNULバイトで終了します。

@noindent

@chapheading diff format for merges

"git-diff-tree" と "git-diff-files" と "git-diff --raw" は、 @samp{-c} または @samp{--cc}
オプションを使用して、マージコミットに対してもdiff出力を生成できます。出力は、以下の点で上記の形式とは異なります:

@enumerate 

@item
親ごとにコロン(:)があります

@item
より多くの "src" モードと "src" sha1があります

@item
statusは、各親のステータス文字を連結したものです

@item
オプションの「スコア数」はありません

@item
ファイルのタブ区切りのパス名
@end enumerate

@samp{-c} および ` -cc` の場合、履歴のいずれかの側でファイルの名前が変更された場合でも、宛先(dst)または最終パスのみが表示されます。
@samp{--combined-all-paths} を使用すると、各親のパスの名前が表示され、それに続いてマージコミットのパスの名前が表示されます。

例: @samp{--combined-all-paths} を使用しない @samp{-c} および @samp{--cc} の場合:

@example
::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c
::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       bar.sh
::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       phooey.c
@end example


例: @samp{-c} または @samp{--cc} のいずれかに @samp{--combined-all-paths} が追加された場合:

@example
::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c  desc.c  desc.c
::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       foo.sh  bar.sh  bar.sh
::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       fooey.c fuey.c  phooey.c
@end example


注意: 'combined diff’は、すべての親から変更されたファイルのみをリストすることに注意してください。

@noindent

@chapheading Generating patch text with -p

git-diff(1) 、 git-log(1) 、 git-show(1) 、
git-diff-index(1) 、 git-diff-tree(1) 、
git-diff-files(1) に @samp{-p} オプションを付けて実行するとパッチテキストを生成します。パッチテキストの作成は、
@samp{GIT_EXTERNAL_DIFF} と @samp{GIT_DIFF_OPTS} 環境変数( git(1) 参照)、および @samp{diff}
属性( gitattributes(5) 参照)を介してカスタマイズできます。

-pオプションが生成するものは、従来のdiff形式とは少々異なります:

@enumerate 

@item
先行して、以下のような "git diff" ヘッダーがあります:

@example
diff --git a/file1 b/file2
@end example

名前の変更/コピーが含まれない限り、 @samp{a/} と @samp{b/} のファイル名は同じです。 特に、作成または削除の場合でも、 @samp{a/} または @samp{b/}
ファイル名の代わりに @samp{/dev/ null} が使用されることはありません。

名前変更/コピーが含まれる場合、 @samp{file1} と`file2`
は、それぞれ名前変更/コピーのソースファイルの名前と、名前変更/コピーが生成するファイルの名前を示します。

@item
その後に、1つ以上の拡張ヘッダー行達が続きます:

@example
old mode <mode>
new mode <mode>
deleted file mode <mode>
new file mode <mode>
copy from <path>
copy to <path>
rename from <path>
rename to <path>
similarity index <number>
dissimilarity index <number>
index <hash>..<hash> <mode>
@end example

ファイルモードは、ファイルタイプとファイル許可ビットを含む6桁の8進数として出力されます。

拡張ヘッダーのパス名には、 @samp{a/} および @samp{b/} プレフィックスは含まれません。

類似インデックス(similarity index)は変更されていない行のパーセンテージであり、非類似インデックス(dissimilarity
index)は変更された行のパーセンテージです。これは切り捨てられた整数であり、その後にパーセント記号が続きます。したがって、100％の類似インデックス値は2つの等しいファイルを表し、100％の非類似性は古いファイルから新しいファイルに移行された行がないことを意味します。

インデックス行には、変更前後のブロブオブジェクト名が含まれます。 <mode>
は、ファイルモードが変更されない場合に含まれます。それ以外の場合、別々の行は古いモードと新しいモードを示します。

@item
通常の文字でないキャラクタ(\"unusual\" characters)を含むパス名は、構成変数 @samp{core.quotePath}
で説明されているように引用符で囲まれています( git-config(1)参照)。

@item
出力内のすべての @samp{file1} ファイルはコミット前のファイルを参照し、すべての @samp{file2}
ファイルはコミット後のファイルを参照します。各変更を各ファイルに順番に適用するのは誤りです。たとえば、以下のパッチはaとbを交換します:

@example
diff --git a/a b/b
rename from a
rename to b
diff --git a/b b/a
rename from b
rename to a
@end example

@item
ハンクのヘッダーには、ハンクが適用される関数の名前が記載されています。特定の言語に合わせてこれを調整する方法の詳細については、
gitattributes(5) の "Defining a custom hunk-header" を参照してください。
@end enumerate

@noindent

@chapheading Combined diff format

diffを生成するコマンドは、マージを表示するときに @samp{-c} または @samp{--cc} オプションを使用して「合成diff」(combined
diff)を生成できます。これは git-diff(1) または git-show(1)
でのマージを表示するときのデフォルトの形式です。 注意: これらのコマンドのいずれかに適切な @samp{--diff-merges}
オプションを指定して、特定の形式で差分を強制的に生成できることにも注意してください。

合成diff形式は以下のようになります:

@example
diff --combined describe.c
index fabadb8,cc95eb0..4866510
--- a/describe.c
+++ b/describe.c
@@@@@@ -98,20 -98,12 +98,20 @@@@@@
        return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
  @}

- static void describe(char *arg)
 -static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  @{
 +      unsigned char sha1[20];
 +      struct commit *cmit;
        struct commit_list *list;
        static int initialized = 0;
        struct commit_name *n;

 +      if (get_sha1(arg, sha1) < 0)
 +              usage(describe_usage);
 +      cmit = lookup_commit_reference(sha1);
 +      if (!cmit)
 +              usage(describe_usage);
 +
        if (!initialized) @{
                initialized = 1;
                for_each_ref(get_name);
@end example


@enumerate 

@item
まず "git diff"  ヘッダーがあり、以下のようになります( @samp{-c} オプションが使用されている場合):

@example
diff --combined file
@end example

または、以下のようになります( @samp{--cc} オプションが使用されている場合):

@example
diff --cc file
@end example

@item
その後に1つ以上の拡張ヘッダー行が続きます(以下の例は、2つの親とのマージを示しています):

@example
index <hash>,<hash>..<hash>
mode <mode>,<mode>..<mode>
new file mode <mode>
deleted file mode <mode>,<mode>
@end example

@samp{mode <mode>,<mode>..<mode>} 行は、<mode> の少なくとも1つが他の <mode>
と異なる場合にのみ表示されます。検出されたコンテンツの移動(名前の変更とコピーの検出)に関する情報を含む拡張ヘッダーは、2つの <tree-ish>
のdiffで機能するように設計されており、合成diff形式では使用されません。

@item
その後に2行の from-file/to-file ヘッダーが続きます

@example
--- a/file
+++ b/file
@end example

従来の統一diff形式の2行ヘッダーと同様に、 @samp{/dev/null} は、作成または削除されたファイルを通知するために使用されます。

ただし、 --combined-all-paths  オプションが指定されている場合、2行の from-file/to-file の代わりに、 N+1
行の from-file/to-file ヘッダーが取得されます。ここで、 N はマージコミットの親の数です。

@example
--- a/file
--- a/file
--- a/file
+++ b/file
@end example

この拡張形式は、名前変更またはコピー検出がアクティブな場合に役立ち、別の親のファイルの元の名前を確認できます。

@item
チャンクヘッダーの形式が変更され、誤って @samp{patch-p1}
にフィードされるのを防ぎます。合成差分形式は、マージコミットの変更を確認するために作成されたものであり、適用されることを意図したものではありません。この変更は、拡張された「インデックス」ヘッダーの変更に似ています:

@example
@@@@@@ <from-file-range> <from-file-range> <to-file-range> @@@@@@
@end example

合成diff形式のチャンクヘッダーには親の数+1の @samp{@@} 文字があります。
@end enumerate

従来の統一diff形式とは異なり、2つのファイルAとBが、 @samp{-} (マイナスはAに表示されますが、Bでは削除されます) または @samp{+}
(プラスはAにはありませんが、Bには追加されます)、または @samp{" "}（スペースは変更なし)
プレフィックスを持つ単一の列で表示される場合、この形式は2つ以上のファイル file1, file2,… を1つのファイルXと比較し、Xが各
fileN とどのように異なるかを示します。ファイルNごとに1つの列が出力行の前に追加され、Xの行が出力行とどのように異なるかを示します。

列Nの @samp{-} 文字は、その行が fileN に表示されているが、結果には表示されていないことを意味します。 列Nの @samp{+}
文字は、結果に行が表示され、 fileN にその行がないことを意味します(つまり、その親の観点から見て行が追加されたことを示す)。

上記の出力例では、関数のシグネチャが両方のファイルから見て変更されています(したがって、 file1 と file2 の両方から2つの @samp{-}
が削除され、さらに @samp{++} が追加されたため、 file1 と file2 のどちらにも表示されません)。また、他の8行は file1 と同じですが、
file2 には表示されません(したがって、接頭辞として @samp{+} が付けられます)。

@samp{git diff-tree -c} で表示される場合、マージコミットの親をマージ結果と比較します(つまり、 file1..fileN が親です)。
@samp{git diff-files -c} で表示される場合、2つの未解決のマージ親を作業ツリーファイルと比較します(つまり、 file1
はステージ2、別名「私たちのバージョン」、 file2 はステージ3、別名「彼らのバージョン」です)。

@noindent

@chapheading other diff formats

@samp{--summary} オプションは、新しく追加、削除、名前変更、およびコピーされたファイルを説明します。@samp{--stat} オプションは、
diffstat(1) グラフ を出力に追加します。これらのオプションは、 @samp{-p}
などの他のオプションと組み合わせることができ、人間が読むことを目的としています。

名前の変更またはコピーを伴う変更を表示する場合、 @samp{--stat}
出力は、パス名の共通のプレフィックスとサフィックスを組み合わせることにより、パス名をコンパクトにフォーマットします。
たとえば、4行を変更(modify)しながら @samp{arch/i386/Makefile} を @samp{arch/x86/Makefile}
に移動(move)する変更(change)は、次のように表示されます:

@example
arch/@{i386 => x86@}/Makefile    |   4 +--
@end example


@samp{--numstat} オプションは diffstat(1) 情報を提供しますが、人間ではなくソフトウェアで読むのを容易にするように設計されています。
@samp{--numstat} 出力のエントリは以下のようになります:

@example
1       2       README
3       1       arch/@{i386 => x86@}/Makefile
@end example


この形式は、左から右へ:

@enumerate 

@item
追加行数

@item
タブ

@item
削除行数

@item
タブ

@item
パス名(おそらく rename/copy 情報を含む)

@item
改行
@end enumerate

@samp{-z} 出力オプションが有効な場合、出力は以下のようにフォーマットされます:

@example
1       2       README NUL
3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL
@end example


これは:

@enumerate 

@item
追加行数

@item
タブ

@item
削除行数

@item
タブ

@item
NUL(rename/copy された場合のみ存在します)

@item
プリイメージのパス名

@item
NUL(rename/copy された場合のみ存在します)

@item
ポストイメージのパス名(rename/copy された場合のみ存在します)

@item
NUL
@end enumerate

名前が変更された場合のプリイメージパスの前の追加の @samp{NUL}
は、出力を読み取るスクリプトが、先読みせずに、読み取られている現在のレコードがシングルパスレコードであるか、名前変更/コピーレコードであるか、を判断できるようにするためです。追加および削除された行を読み取った後、
@samp{NUL} まで読み取るとパス名が生成されますが、それが @samp{NUL} の場合、レコードには2つのパスが表示されます。

@noindent

@chapheading EXAMPLES

@table @asis

@item  Various ways to check your working tree 
@example
$ git diff            (1)
$ git diff --cached   (2)
$ git diff HEAD       (3)
@end example


@table @asis

@item @pxref{CO1-1,,(1)}
Changes in the working tree not yet staged for the next commit.

@item @pxref{CO1-2,,(2)}
Changes between the index and your last commit; what you would be committing
if you run @samp{git commit} without @samp{-a} option.

@item @pxref{CO1-3,,(3)}
Changes in the working tree since your last commit; what you would be
committing if you run @samp{git commit -a}
@end table

@item  Comparing with arbitrary commits 
@example
$ git diff test            (1)
$ git diff HEAD -- ./test  (2)
$ git diff HEAD^ HEAD      (3)
@end example


@table @asis

@item @pxref{CO2-1,,(1)}
Instead of using the tip of the current branch, compare with the tip of
"test" branch.

@item @pxref{CO2-2,,(2)}
Instead of comparing with the tip of "test" branch, compare with the tip of
the current branch, but limit the comparison to the file "test".

@item @pxref{CO2-3,,(3)}
Compare the version before the last commit and the last commit.
@end table

@item  Comparing branches 
@example
$ git diff topic master    (1)
$ git diff topic..master   (2)
$ git diff topic...master  (3)
@end example


@table @asis

@item @pxref{CO3-1,,(1)}
Changes between the tips of the topic and the master branches.

@item @pxref{CO3-2,,(2)}
Same as above.

@item @pxref{CO3-3,,(3)}
Changes that occurred on the master branch since when the topic branch was
started off it.
@end table

@item  Limiting the diff output 
@example
$ git diff --diff-filter=MRC            (1)
$ git diff --name-status                (2)
$ git diff arch/i386 include/asm-i386   (3)
@end example


@table @asis

@item @pxref{CO4-1,,(1)}
Show only modification, rename, and copy, but not addition or deletion.

@item @pxref{CO4-2,,(2)}
Show only names and the nature of change, but not actual diff output.

@item @pxref{CO4-3,,(3)}
Limit diff output to named subtrees.
@end table

@item  Munging the diff output 
@example
$ git diff --find-copies-harder -B -C  (1)
$ git diff -R                          (2)
@end example


@table @asis

@item @pxref{CO5-1,,(1)}
Spend extra cycles to find renames, copies and complete rewrites (very
expensive).

@item @pxref{CO5-2,,(2)}
Output diff in reverse.
@end table
@end table

@noindent

@chapheading SEE ALSO

diff(1), git-difftool(1), git-log(1),
gitdiffcore(7), git-format-patch(1), git-apply(1),
git-show(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-difftool,,,Top
@chapheading Name

git-difftool — Show changes using common diff tools

@noindent

@chapheading Synopsis

@display
git difftool [<options>] [<commit> [<commit>]] [--] [<path>…]
@end display


@noindent

@chapheading DESCRIPTION

@emph{git difftool} is a Git command that allows you to compare and edit files
between revisions using common diff tools.  @emph{git difftool} is a frontend to
@emph{git diff} and accepts the same options and arguments. See
git-diff(1).

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-d} 
@itemx  @samp{--dir-diff} 
Copy the modified files to a temporary location and perform a directory diff
on them. This mode never prompts before launching the diff tool.

@item  @samp{-y} 
@itemx  @samp{--no-prompt} 
Do not prompt before launching a diff tool.

@item  @samp{--prompt} 
Prompt before each invocation of the diff tool.  This is the default
behaviour; the option is provided to override any configuration settings.

@item  @samp{--rotate-to=<file>} 
Start showing the diff for the given path, the paths before it will move to
end and output.

@item  @samp{--skip-to=<file>} 
Start showing the diff for the given path, skipping all the paths before it.

@item  @samp{-t <tool>} 
@itemx  @samp{--tool=<tool>} 
Use the diff tool specified by <tool>.  Valid values include emerge,
kompare, meld, and vimdiff. Run @samp{git difftool --tool-help} for the list of
valid <tool> settings.

If a diff tool is not specified, @emph{git difftool} will use the configuration
variable @samp{diff.tool}.  If the configuration variable @samp{diff.tool} is not set,
@emph{git difftool} will pick a suitable default.

You can explicitly provide a full path to the tool by setting the
configuration variable @samp{difftool.<tool>.path}. For example, you can
configure the absolute path to kdiff3 by setting
@samp{difftool.kdiff3.path}. Otherwise, @emph{git difftool} assumes the tool is
available in PATH.

Instead of running one of the known diff tools, @emph{git difftool} can be
customized to run an alternative program by specifying the command line to
invoke in a configuration variable @samp{difftool.<tool>.cmd}.

When @emph{git difftool} is invoked with this tool (either through the @samp{-t} or
@samp{--tool} option or the @samp{diff.tool} configuration variable)  the configured
command line will be invoked with the following variables available:
@samp{$LOCAL} is set to the name of the temporary file containing the contents of
the diff pre-image and @samp{$REMOTE} is set to the name of the temporary file
containing the contents of the diff post-image.  @samp{$MERGED} is the name of
the file which is being compared. @samp{$BASE} is provided for compatibility with
custom merge tool commands and has the same value as @samp{$MERGED}.

@item  @samp{--tool-help} 
Print a list of diff tools that may be used with @samp{--tool}.

@item  @samp{--[no-]symlinks} 
@emph{git difftool}'s default behavior is create symlinks to the working tree
when run in @samp{--dir-diff} mode and the right-hand side of the comparison
yields the same content as the file in the working tree.

Specifying @samp{--no-symlinks} instructs @emph{git difftool} to create copies
instead.  @samp{--no-symlinks} is the default on Windows.

@item  @samp{-x <command>} 
@itemx  @samp{--extcmd=<command>} 
Specify a custom command for viewing diffs.  @emph{git-difftool} ignores the
configured defaults and runs @samp{$command $LOCAL $REMOTE} when this option is
specified.  Additionally, @samp{$BASE} is set in the environment.

@item  @samp{-g} 
@itemx  @samp{--[no-]gui} 
When @emph{git-difftool} is invoked with the @samp{-g} or @samp{--gui} option the default
diff tool will be read from the configured @samp{diff.guitool} variable instead
of @samp{diff.tool}. The @samp{--no-gui} option can be used to override this
setting. If @samp{diff.guitool} is not set, we will fallback in the order of
@samp{merge.guitool}, @samp{diff.tool}, @samp{merge.tool} until a tool is found.

@item  @samp{--[no-]trust-exit-code} 
@emph{git-difftool} invokes a diff tool individually on each file.  Errors
reported by the diff tool are ignored by default.  Use @samp{--trust-exit-code}
to make @emph{git-difftool} exit when an invoked diff tool returns a non-zero
exit code.

@emph{git-difftool} will forward the exit code of the invoked tool when
@samp{--trust-exit-code} is used.
@end table

See git-diff(1) for the full list of supported options.

@noindent

@chapheading CONFIG VARIABLES

@emph{git difftool} falls back to @emph{git mergetool} config variables when the
difftool equivalents have not been defined.

@table @asis

@item  diff.tool 
The default diff tool to use.

@item  diff.guitool 
The default diff tool to use when @samp{--gui} is specified.

@item  difftool.<tool>.path 
Override the path for the given tool.  This is useful in case your tool is
not in the PATH.

@item  difftool.<tool>.cmd 
Specify the command to invoke the specified diff tool.

See the @samp{--tool=<tool>} option above for more details.

@item  difftool.prompt 
Prompt before each invocation of the diff tool.

@item  difftool.trustExitCode 
Exit difftool if the invoked diff tool returns a non-zero exit status.

See the @samp{--trust-exit-code} option above for more details.
@end table

@noindent

@chapheading SEE ALSO

@table @asis

@item  git-diff(1) 
Show changes between commits, commit and working tree, etc

@item  git-mergetool(1) 
Run merge conflict resolution tools to resolve merge conflicts

@item  git-config(1) 
Get and set repository or global options
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-fast-export,,,Top
@chapheading Name

git-fast-export — Git data exporter

@noindent

@chapheading Synopsis

@display
git fast-export [<options>] | git fast-import
@end display


@noindent

@chapheading DESCRIPTION

This program dumps the given revisions in a form suitable to be piped into
@emph{git fast-import}.

You can use it as a human-readable bundle replacement (see
git-bundle(1)), or as a format that can be edited before being fed
to @emph{git fast-import} in order to do history rewrites (an ability relied on
by tools like @emph{git filter-repo}).

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--progress=<n>} 
Insert @emph{progress} statements every <n> objects, to be shown by @emph{git
fast-import} during import.

@item  @samp{--signed-tags=(verbatim|warn|warn-strip|strip|abort)} 
Specify how to handle signed tags.  Since any transformation after the
export can change the tag names (which can also happen when excluding
revisions) the signatures will not match.

When asking to @emph{abort} (which is the default), this program will die when
encountering a signed tag.  With @emph{strip}, the tags will silently be made
unsigned, with @emph{warn-strip} they will be made unsigned but a warning will be
displayed, with @emph{verbatim}, they will be silently exported and with @emph{warn},
they will be exported, but you will see a warning.

@item  @samp{--tag-of-filtered-object=(abort|drop|rewrite)} 
Specify how to handle tags whose tagged object is filtered out.  Since
revisions and files to export can be limited by path, tagged objects may be
filtered completely.

When asking to @emph{abort} (which is the default), this program will die when
encountering such a tag.  With @emph{drop} it will omit such tags from the
output.  With @emph{rewrite}, if the tagged object is a commit, it will rewrite
the tag to tag an ancestor commit (via parent rewriting; see
git-rev-list(1))

@item  @samp{-M} 
@itemx  @samp{-C} 
Perform move and/or copy detection, as described in the git-diff(1)
manual page, and use it to generate rename and copy commands in the output
dump.

Note that earlier versions of this command did not complain and produced
incorrect results if you gave these options.

@item  @samp{--export-marks=<file>} 
Dumps the internal marks table to <file> when complete.  Marks are written
one per line as @samp{:markid SHA-1}. Only marks for revisions are dumped; marks
for blobs are ignored.  Backends can use this file to validate imports after
they have been completed, or to save the marks table across incremental
runs.  As <file> is only opened and truncated at completion, the same path
can also be safely given to --import-marks.  The file will not be written if
no new object has been marked/exported.

@item  @samp{--import-marks=<file>} 
Before processing any input, load the marks specified in <file>.  The input
file must exist, must be readable, and must use the same format as produced
by --export-marks.

@item  @samp{--mark-tags} 
In addition to labelling blobs and commits with mark ids, also label tags.
This is useful in conjunction with @samp{--export-marks} and @samp{--import-marks},
and is also useful (and necessary) for exporting of nested tags.  It does
not hurt other cases and would be the default, but many fast-import
frontends are not prepared to accept tags with mark identifiers.

Any commits (or tags) that have already been marked will not be exported
again.  If the backend uses a similar --import-marks file, this allows for
incremental bidirectional exporting of the repository by keeping the marks
the same across runs.

@item  @samp{--fake-missing-tagger} 
Some old repositories have tags without a tagger.  The fast-import protocol
was pretty strict about that, and did not allow that.  So fake a tagger to
be able to fast-import the output.

@item  @samp{--use-done-feature} 
Start the stream with a @emph{feature done} stanza, and terminate it with a
@emph{done} command.

@item  @samp{--no-data} 
Skip output of blob objects and instead refer to blobs via their original
SHA-1 hash.  This is useful when rewriting the directory structure or
history of a repository without touching the contents of individual files.
Note that the resulting stream can only be used by a repository which
already contains the necessary objects.

@item  @samp{--full-tree} 
This option will cause fast-export to issue a "deleteall" directive for each
commit followed by a full list of all files in the commit (as opposed to
just listing the files which are different from the commit’s first parent).

@item  @samp{--anonymize} 
Anonymize the contents of the repository while still retaining the shape of
the history and stored tree.  See the section on @samp{ANONYMIZING} below.

@item  @samp{--anonymize-map=<from>[:<to>]} 
Convert token @samp{<from>} to @samp{<to>} in the anonymized output. If @samp{<to>} is
omitted, map @samp{<from>} to itself (i.e., do not anonymize it). See the section
on @samp{ANONYMIZING} below.

@item  @samp{--reference-excluded-parents} 
By default, running a command such as @samp{git fast-export master~5..master}
will not include the commit master~5 and will make master~4 no
longer have master~5 as a parent (though both the old master~4
and new master~4 will have all the same files).  Use
--reference-excluded-parents to instead have the stream refer to commits in
the excluded range of history by their sha1sum.  Note that the resulting
stream can only be used by a repository which already contains the necessary
parent commits.

@item  @samp{--show-original-ids} 
Add an extra directive to the output for commits and blobs, @samp{original-oid
<SHA1SUM>}.  While such directives will likely be ignored by importers such
as git-fast-import, it may be useful for intermediary filters (e.g. for
rewriting commit messages which refer to older commits, or for stripping
blobs by id).

@item  @samp{--reencode=(yes|no|abort)} 
Specify how to handle @samp{encoding} header in commit objects.  When asking to
@emph{abort} (which is the default), this program will die when encountering such
a commit object.  With @emph{yes}, the commit message will be re-encoded into
UTF-8.  With @emph{no}, the original encoding will be preserved.

@item  @samp{--refspec} 
Apply the specified refspec to each ref exported. Multiple of them can be
specified.

@item  [<git-rev-list-args>…] 
A list of arguments, acceptable to @emph{git rev-parse} and @emph{git rev-list}, that
specifies the specific objects and references to export.  For example,
@samp{master~10..master} causes the current master reference to be exported along
with all objects added since its 10th ancestor commit and (unless the
--reference-excluded-parents option is specified) all files common to
master~9 and master~10.
@end table

@noindent

@chapheading EXAMPLES

@example
$ git fast-export --all | (cd /empty/repository && git fast-import)
@end example


This will export the whole repository and import it into the existing empty
repository.  Except for reencoding commits that are not in UTF-8, it would
be a one-to-one mirror.

@example
$ git fast-export master~5..master |
        sed "s|refs/heads/master|refs/heads/other|" |
        git fast-import
@end example


This makes a new branch called @emph{other} from @emph{master~5..master} (i.e. if
@emph{master} has linear history, it will take the last 5 commits).

Note that this assumes that none of the blobs and commit messages referenced
by that revision range contains the string @emph{refs/heads/master}.

@noindent

@chapheading ANONYMIZING

If the @samp{--anonymize} option is given, git will attempt to remove all
identifying information from the repository while still retaining enough of
the original tree and history patterns to reproduce some bugs. The goal is
that a git bug which is found on a private repository will persist in the
anonymized repository, and the latter can be shared with git developers to
help solve the bug.

With this option, git will replace all refnames, paths, blob contents,
commit and tag messages, names, and email addresses in the output with
anonymized data.  Two instances of the same string will be replaced
equivalently (e.g., two commits with the same author will have the same
anonymized author in the output, but bear no resemblance to the original
author string). The relationship between commits, branches, and tags is
retained, as well as the commit timestamps (but the commit messages and
refnames bear no resemblance to the originals). The relative makeup of the
tree is retained (e.g., if you have a root tree with 10 files and 3 trees,
so will the output), but their names and the contents of the files will be
replaced.

If you think you have found a git bug, you can start by exporting an
anonymized stream of the whole repository:

@example
$ git fast-export --anonymize --all >anon-stream
@end example


Then confirm that the bug persists in a repository created from that stream
(many bugs will not, as they really do depend on the exact repository
contents):

@example
$ git init anon-repo
$ cd anon-repo
$ git fast-import <../anon-stream
$ ... test your bug ...
@end example


If the anonymized repository shows the bug, it may be worth sharing
@samp{anon-stream} along with a regular bug report. Note that the anonymized
stream compresses very well, so gzipping it is encouraged. If you want to
examine the stream to see that it does not contain any private data, you can
peruse it directly before sending. You may also want to try:

@example
$ perl -pe 's/\d+/X/g' <anon-stream | sort -u | less
@end example


which shows all of the unique lines (with numbers converted to "X", to
collapse "User 0", "User 1", etc into "User X"). This produces a much
smaller output, and it is usually easy to quickly confirm that there is no
private data in the stream.

Reproducing some bugs may require referencing particular commits or paths,
which becomes challenging after refnames and paths have been anonymized. You
can ask for a particular token to be left as-is or mapped to a new
value. For example, if you have a bug which reproduces with @samp{git rev-list
sensitive -- secret.c}, you can run:

@example
$ git fast-export --anonymize --all \
      --anonymize-map=sensitive:foo \
      --anonymize-map=secret.c:bar.c \
      >stream
@end example


After importing the stream, you can then run @samp{git rev-list foo -- bar.c} in
the anonymized repository.

Note that paths and refnames are split into tokens at slash boundaries.  The
command above would anonymize @samp{subdir/secret.c} as something like
@samp{path123/bar.c}; you could then search for @samp{bar.c} in the anonymized
repository to determine the final pathname.

To make referencing the final pathname simpler, you can map each path
component; so if you also anonymize @samp{subdir} to @samp{publicdir}, then the final
pathname would be @samp{publicdir/bar.c}.

@noindent

@chapheading LIMITATIONS

Since @emph{git fast-import} cannot tag trees, you will not be able to export the
linux.git repository completely, as it contains a tag referencing a tree
instead of a commit.

@noindent

@chapheading SEE ALSO

git-fast-import(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-fast-import,,,Top
@chapheading Name

git-fast-import — Backend for fast Git data importers

@noindent

@chapheading Synopsis

@display
frontend | git fast-import [<options>]
@end display


@noindent

@chapheading DESCRIPTION

This program is usually not what the end user wants to run directly.  Most
end users want to use one of the existing frontend programs, which parses a
specific type of foreign source and feeds the contents stored there to @emph{git
fast-import}.

fast-import reads a mixed command/data stream from standard input and writes
one or more packfiles directly into the current repository.  When EOF is
received on standard input, fast import writes out updated branch and tag
refs, fully updating the current repository with the newly imported data.

The fast-import backend itself can import into an empty repository (one that
has already been initialized by @emph{git init}) or incrementally update an
existing populated repository.  Whether or not incremental imports are
supported from a particular foreign source depends on the frontend program
in use.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--force} 
Force updating modified existing branches, even if doing so would cause
commits to be lost (as the new commit does not contain the old commit).

@item  @samp{--quiet} 
Disable the output shown by --stats, making fast-import usually be silent
when it is successful.  However, if the import stream has directives
intended to show user output (e.g. @samp{progress} directives), the corresponding
messages will still be shown.

@item  @samp{--stats} 
Display some basic statistics about the objects fast-import has created, the
packfiles they were stored into, and the memory used by fast-import during
this run.  Showing this output is currently the default, but can be disabled
with --quiet.

@item  @samp{--allow-unsafe-features} 
Many command-line options can be provided as part of the fast-import stream
itself by using the @samp{feature} or @samp{option} commands. However, some of these
options are unsafe (e.g., allowing fast-import to access the filesystem
outside of the repository). These options are disabled by default, but can
be allowed by providing this option on the command line.  This currently
impacts only the @samp{export-marks}, @samp{import-marks}, and
@samp{import-marks-if-exists} feature commands.

@example
Only enable this option if you trust the program generating the fast-import
stream! This option is enabled automatically for remote-helpers that use the
`import` capability, as they are already trusted to run their own code.
@end example
@end table

@noindent

@heading Options for Frontends

@table @asis

@item  @samp{--cat-blob-fd=<fd>} 
Write responses to @samp{get-mark}, @samp{cat-blob}, and @samp{ls} queries to the file
descriptor <fd> instead of @samp{stdout}.  Allows @samp{progress} output intended for
the end-user to be separated from other output.

@item  @samp{--date-format=<fmt>} 
Specify the type of dates the frontend will supply to fast-import within
@samp{author}, @samp{committer} and @samp{tagger} commands.  See “Date Formats” below for
details about which formats are supported, and their syntax.

@item  @samp{--done} 
Terminate with error if there is no @samp{done} command at the end of the
stream.  This option might be useful for detecting errors that cause the
frontend to terminate before it has started to write a stream.
@end table

@noindent

@heading Locations of Marks Files

@table @asis

@item  @samp{--export-marks=<file>} 
Dumps the internal marks table to <file> when complete.  Marks are written
one per line as @samp{:markid SHA-1}.  Frontends can use this file to validate
imports after they have been completed, or to save the marks table across
incremental runs.  As <file> is only opened and truncated at checkpoint (or
completion) the same path can also be safely given to --import-marks.

@item  @samp{--import-marks=<file>} 
Before processing any input, load the marks specified in <file>.  The input
file must exist, must be readable, and must use the same format as produced
by --export-marks.  Multiple options may be supplied to import more than one
set of marks.  If a mark is defined to different values, the last file wins.

@item  @samp{--import-marks-if-exists=<file>} 
Like --import-marks but instead of erroring out, silently skips the file if
it does not exist.

@item  @samp{--[no-]relative-marks} 
After specifying --relative-marks the paths specified with --import-marks=
and --export-marks= are relative to an internal directory in the current
repository.  In git-fast-import this means that the paths are relative to
the .git/info/fast-import directory. However, other importers may use a
different location.

Relative and non-relative marks may be combined by interweaving
--(no-)-relative-marks with the --(import|export)-marks= options.
@end table

@noindent

@heading Submodule Rewriting

@table @asis

@item  @samp{--rewrite-submodules-from=<name>:<file>} 
@itemx  @samp{--rewrite-submodules-to=<name>:<file>} 
Rewrite the object IDs for the submodule specified by <name> from the values
used in the from <file> to those used in the to <file>. The from marks
should have been created by @samp{git fast-export}, and the to marks should have
been created by @samp{git fast-import} when importing that same submodule.

<name> may be any arbitrary string not containing a colon character, but the
same value must be used with both options when specifying corresponding
marks.  Multiple submodules may be specified with different values for
<name>. It is an error not to use these options in corresponding pairs.

These options are primarily useful when converting a repository from one
hash algorithm to another; without them, fast-import will fail if it
encounters a submodule because it has no way of writing the object ID into
the new hash algorithm.
@end table

@noindent

@heading Performance and Compression Tuning

@table @asis

@item  @samp{--active-branches=<n>} 
Maximum number of branches to maintain active at once.  See “Memory
Utilization” below for details.  Default is 5.

@item  @samp{--big-file-threshold=<n>} 
Maximum size of a blob that fast-import will attempt to create a delta for,
expressed in bytes.  The default is 512m (512 MiB).  Some importers may wish
to lower this on systems with constrained memory.

@item  @samp{--depth=<n>} 
Maximum delta depth, for blob and tree deltification.  Default is 50.

@item  @samp{--export-pack-edges=<file>} 
After creating a packfile, print a line of data to <file> listing the
filename of the packfile and the last commit on each branch that was written
to that packfile.  This information may be useful after importing projects
whose total object set exceeds the 4 GiB packfile limit, as these commits
can be used as edge points during calls to @emph{git pack-objects}.

@item  @samp{--max-pack-size=<n>} 
Maximum size of each output packfile.  The default is unlimited.

@item  fastimport.unpackLimit 
See git-config(1)
@end table

@noindent

@chapheading PERFORMANCE

The design of fast-import allows it to import large projects in a minimum
amount of memory usage and processing time.  Assuming the frontend is able
to keep up with fast-import and feed it a constant stream of data, import
times for projects holding 10+ years of history and containing 100,000+
individual commits are generally completed in just 1-2 hours on quite modest
(~$2,000 USD) hardware.

Most bottlenecks appear to be in foreign source data access (the source just
cannot extract revisions fast enough) or disk IO (fast-import writes as fast
as the disk will take the data).  Imports will run faster if the source data
is stored on a different drive than the destination Git repository (due to
less IO contention).

@noindent

@chapheading DEVELOPMENT COST

A typical frontend for fast-import tends to weigh in at approximately 200
lines of Perl/Python/Ruby code.  Most developers have been able to create
working importers in just a couple of hours, even though it is their first
exposure to fast-import, and sometimes even to Git.  This is an ideal
situation, given that most conversion tools are throw-away (use once, and
never look back).

@noindent

@chapheading PARALLEL OPERATION

Like @emph{git push} or @emph{git fetch}, imports handled by fast-import are safe to
run alongside parallel @samp{git repack -a -d} or @samp{git gc} invocations, or any
other Git operation (including @emph{git prune}, as loose objects are never used
by fast-import).

fast-import does not lock the branch or tag refs it is actively importing.
After the import, during its ref update phase, fast-import tests each
existing branch ref to verify the update will be a fast-forward update (the
commit stored in the ref is contained in the new history of the commit to be
written).  If the update is not a fast-forward update, fast-import will skip
updating that ref and instead prints a warning message.  fast-import will
always attempt to update all branch refs, and does not stop on the first
failure.

Branch updates can be forced with --force, but it’s recommended that this
only be used on an otherwise quiet repository.  Using --force is not
necessary for an initial import into an empty repository.

@noindent

@chapheading TECHNICAL DISCUSSION

fast-import tracks a set of branches in memory.  Any branch can be created
or modified at any point during the import process by sending a @samp{commit}
command on the input stream.  This design allows a frontend program to
process an unlimited number of branches simultaneously, generating commits
in the order they are available from the source data.  It also simplifies
the frontend programs considerably.

fast-import does not use or alter the current working directory, or any file
within it.  (It does however update the current Git repository, as
referenced by @samp{GIT_DIR}.)  Therefore an import frontend may use the working
directory for its own purposes, such as extracting file revisions from the
foreign source.  This ignorance of the working directory also allows
fast-import to run very quickly, as it does not need to perform any costly
file update operations when switching between branches.

@noindent

@chapheading INPUT FORMAT

With the exception of raw file data (which Git does not interpret)  the
fast-import input format is text (ASCII) based.  This text based format
simplifies development and debugging of frontend programs, especially when a
higher level language such as Perl, Python or Ruby is being used.

fast-import is very strict about its input.  Where we say SP below we mean
@strong{exactly} one space.  Likewise LF means one (and only one) linefeed and HT
one (and only one) horizontal tab.  Supplying additional whitespace
characters will cause unexpected results, such as branch names or file names
with leading or trailing spaces in their name, or early termination of
fast-import when it encounters unexpected input.

@noindent

@heading Stream Comments

To aid in debugging frontends fast-import ignores any line that begins with
@samp{#} (ASCII pound/hash) up to and including the line ending @samp{LF}.  A comment
line may contain any sequence of bytes that does not contain an LF and
therefore may be used to include any detailed debugging information that
might be specific to the frontend and useful when inspecting a fast-import
data stream.

@noindent

@heading Date Formats

The following date formats are supported.  A frontend should select the
format it will use for this import by passing the format name in the
--date-format=<fmt> command-line option.

@table @asis

@item  @samp{raw} 
This is the Git native format and is @samp{<time> SP <offutc>}.  It is also
fast-import’s default format, if --date-format was not specified.

The time of the event is specified by @samp{<time>} as the number of seconds
since the UNIX epoch (midnight, Jan 1, 1970, UTC) and is written as an ASCII
decimal integer.

The local offset is specified by @samp{<offutc>} as a positive or negative offset
from UTC.  For example EST (which is 5 hours behind UTC)  would be expressed
in @samp{<tz>} by “-0500” while UTC is “+0000”.  The local offset does not
affect @samp{<time>}; it is used only as an advisement to help formatting
routines display the timestamp.

If the local offset is not available in the source material, use “+0000”,
or the most common local offset.  For example many organizations have a CVS
repository which has only ever been accessed by users who are located in the
same location and time zone.  In this case a reasonable offset from UTC
could be assumed.

Unlike the @samp{rfc2822} format, this format is very strict.  Any variation in
formatting will cause fast-import to reject the value, and some sanity
checks on the numeric values may also be performed.

@item  @samp{raw-permissive} 
This is the same as @samp{raw} except that no sanity checks on the numeric epoch
and local offset are performed.  This can be useful when trying to filter or
import an existing history with e.g. bogus timezone values.

@item  @samp{rfc2822} 
This is the standard email format as described by RFC 2822.

An example value is “Tue Feb 6 11:22:18 2007 -0500”.  The Git parser is
accurate, but a little on the lenient side.  It is the same parser used by
@emph{git am} when applying patches received from email.

Some malformed strings may be accepted as valid dates.  In some of these
cases Git will still be able to obtain the correct date from the malformed
string.  There are also some types of malformed strings which Git will parse
wrong, and yet consider valid.  Seriously malformed strings will be
rejected.

Unlike the @samp{raw} format above, the time zone/UTC offset information
contained in an RFC 2822 date string is used to adjust the date value to UTC
prior to storage.  Therefore it is important that this information be as
accurate as possible.

If the source material uses RFC 2822 style dates, the frontend should let
fast-import handle the parsing and conversion (rather than attempting to do
it itself) as the Git parser has been well tested in the wild.

Frontends should prefer the @samp{raw} format if the source material already uses
UNIX-epoch format, can be coaxed to give dates in that format, or its format
is easily convertible to it, as there is no ambiguity in parsing.

@item  @samp{now} 
Always use the current time and time zone.  The literal @samp{now} must always be
supplied for @samp{<when>}.

This is a toy format.  The current time and time zone of this system is
always copied into the identity string at the time it is being created by
fast-import.  There is no way to specify a different time or time zone.

This particular format is supplied as it’s short to implement and may be
useful to a process that wants to create a new commit right now, without
needing to use a working directory or @emph{git update-index}.

If separate @samp{author} and @samp{committer} commands are used in a @samp{commit} the
timestamps may not match, as the system clock will be polled twice (once for
each command).  The only way to ensure that both author and committer
identity information has the same timestamp is to omit @samp{author} (thus
copying from @samp{committer}) or to use a date format other than @samp{now}.
@end table

@noindent

@heading Commands

fast-import accepts several commands to update the current repository and
control the current import process.  More detailed discussion (with
examples) of each command follows later.

@table @asis

@item  @samp{commit} 
Creates a new branch or updates an existing branch by creating a new commit
and updating the branch to point at the newly created commit.

@item  @samp{tag} 
Creates an annotated tag object from an existing commit or branch.
Lightweight tags are not supported by this command, as they are not
recommended for recording meaningful points in time.

@item  @samp{reset} 
Reset an existing branch (or a new branch) to a specific revision.  This
command must be used to change a branch to a specific revision without
making a commit on it.

@item  @samp{blob} 
Convert raw file data into a blob, for future use in a @samp{commit} command.
This command is optional and is not needed to perform an import.

@item  @samp{alias} 
Record that a mark refers to a given object without first creating any new
object.  Using --import-marks and referring to missing marks will cause
fast-import to fail, so aliases can provide a way to set otherwise pruned
commits to a valid value (e.g. the nearest non-pruned ancestor).

@item  @samp{checkpoint} 
Forces fast-import to close the current packfile, generate its unique SHA-1
checksum and index, and start a new packfile.  This command is optional and
is not needed to perform an import.

@item  @samp{progress} 
Causes fast-import to echo the entire line to its own standard output.  This
command is optional and is not needed to perform an import.

@item  @samp{done} 
Marks the end of the stream. This command is optional unless the @samp{done}
feature was requested using the @samp{--done} command-line option or @samp{feature
done} command.

@item  @samp{get-mark} 
Causes fast-import to print the SHA-1 corresponding to a mark to the file
descriptor set with @samp{--cat-blob-fd}, or @samp{stdout} if unspecified.

@item  @samp{cat-blob} 
Causes fast-import to print a blob in @emph{cat-file --batch} format to the file
descriptor set with @samp{--cat-blob-fd} or @samp{stdout} if unspecified.

@item  @samp{ls} 
Causes fast-import to print a line describing a directory entry in @emph{ls-tree}
format to the file descriptor set with @samp{--cat-blob-fd} or @samp{stdout} if
unspecified.

@item  @samp{feature} 
Enable the specified feature. This requires that fast-import supports the
specified feature, and aborts if it does not.

@item  @samp{option} 
Specify any of the options listed under OPTIONS that do not change stream
semantic to suit the frontend’s needs. This command is optional and is not
needed to perform an import.
@end table

@noindent

@heading commit

Create or update a branch with a new commit, recording one logical change to
the project.

@example
        'commit' SP <ref> LF
        mark?
        original-oid?
        ('author' (SP <name>)? SP LT <email> GT SP <when> LF)?
        'committer' (SP <name>)? SP LT <email> GT SP <when> LF
        ('encoding' SP <encoding>)?
        data
        ('from' SP <commit-ish> LF)?
        ('merge' SP <commit-ish> LF)*
        (filemodify | filedelete | filecopy | filerename | filedeleteall | notemodify)*
        LF?
@end example

where @samp{<ref>} is the name of the branch to make the commit on.  Typically
branch names are prefixed with @samp{refs/heads/} in Git, so importing the CVS
branch symbol @samp{RELENG-1_0} would use @samp{refs/heads/RELENG-1_0} for the value
of @samp{<ref>}.  The value of @samp{<ref>} must be a valid refname in Git.  As @samp{LF}
is not valid in a Git refname, no quoting or escaping syntax is supported
here.

A @samp{mark} command may optionally appear, requesting fast-import to save a
reference to the newly created commit for future use by the frontend (see
below for format).  It is very common for frontends to mark every commit
they create, thereby allowing future branch creation from any imported
commit.

The @samp{data} command following @samp{committer} must supply the commit message (see
below for @samp{data} command syntax).  To import an empty commit message use a 0
length data.  Commit messages are free-form and are not interpreted by Git.
Currently they must be encoded in UTF-8, as fast-import does not permit
other encodings to be specified.

Zero or more @samp{filemodify}, @samp{filedelete}, @samp{filecopy}, @samp{filerename},
@samp{filedeleteall} and @samp{notemodify} commands may be included to update the
contents of the branch prior to creating the commit.  These commands may be
supplied in any order.  However it is recommended that a @samp{filedeleteall}
command precede all @samp{filemodify}, @samp{filecopy}, @samp{filerename} and @samp{notemodify}
commands in the same commit, as @samp{filedeleteall} wipes the branch clean (see
below).

The @samp{LF} after the command is optional (it used to be required).  Note that
for reasons of backward compatibility, if the commit ends with a @samp{data}
command (i.e. it has no @samp{from}, @samp{merge}, @samp{filemodify}, @samp{filedelete},
@samp{filecopy}, @samp{filerename}, @samp{filedeleteall} or @samp{notemodify} commands) then two
@samp{LF} commands may appear at the end of the command instead of just one.

@noindent

@subheading author

An @samp{author} command may optionally appear, if the author information might
differ from the committer information.  If @samp{author} is omitted then
fast-import will automatically use the committer’s information for the
author portion of the commit.  See below for a description of the fields in
@samp{author}, as they are identical to @samp{committer}.

@noindent

@subheading committer

The @samp{committer} command indicates who made this commit, and when they made
it.

Here @samp{<name>} is the person’s display name (for example “Com M Itter”) and
@samp{<email>} is the person’s email address (“cm@@example.com”).  @samp{LT} and
@samp{GT} are the literal less-than (\x3c)  and greater-than (\x3e) symbols.
These are required to delimit the email address from the other fields in the
line.  Note that @samp{<name>} and @samp{<email>} are free-form and may contain any
sequence of bytes, except @samp{LT}, @samp{GT} and @samp{LF}.  @samp{<name>} is typically UTF-8
encoded.

The time of the change is specified by @samp{<when>} using the date format that
was selected by the --date-format=<fmt> command-line option.  See “Date
Formats” above for the set of supported formats, and their syntax.

@noindent

@subheading encoding

The optional @samp{encoding} command indicates the encoding of the commit
message.  Most commits are UTF-8 and the encoding is omitted, but this
allows importing commit messages into git without first reencoding them.

@noindent

@subheading from

The @samp{from} command is used to specify the commit to initialize this branch
from.  This revision will be the first ancestor of the new commit.  The
state of the tree built at this commit will begin with the state at the
@samp{from} commit, and be altered by the content modifications in this commit.

Omitting the @samp{from} command in the first commit of a new branch will cause
fast-import to create that commit with no ancestor. This tends to be desired
only for the initial commit of a project.  If the frontend creates all files
from scratch when making a new branch, a @samp{merge} command may be used instead
of @samp{from} to start the commit with an empty tree.  Omitting the @samp{from}
command on existing branches is usually desired, as the current commit on
that branch is automatically assumed to be the first ancestor of the new
commit.

As @samp{LF} is not valid in a Git refname or SHA-1 expression, no quoting or
escaping syntax is supported within @samp{<commit-ish>}.

Here @samp{<commit-ish>} is any of the following:

@itemize 

@item
The name of an existing branch already in fast-import’s internal branch
table.  If fast-import doesn’t know the name, it’s treated as a SHA-1
expression.

@item
A mark reference, @samp{:<idnum>}, where @samp{<idnum>} is the mark number.

The reason fast-import uses @samp{:} to denote a mark reference is this character
is not legal in a Git branch name.  The leading @samp{:} makes it easy to
distinguish between the mark 42 (@samp{:42}) and the branch 42 (@samp{42} or
@samp{refs/heads/42}), or an abbreviated SHA-1 which happened to consist only of
base-10 digits.

Marks must be declared (via @samp{mark}) before they can be used.

@item
A complete 40 byte or abbreviated commit SHA-1 in hex.

@item
Any valid Git SHA-1 expression that resolves to a commit.  See “SPECIFYING
REVISIONS” in gitrevisions(7) for details.

@item
The special null SHA-1 (40 zeros) specifies that the branch is to be
removed.
@end itemize

The special case of restarting an incremental import from the current branch
value should be written as:

@example
        from refs/heads/branch^0
@end example


The @samp{^0} suffix is necessary as fast-import does not permit a branch to
start from itself, and the branch is created in memory before the @samp{from}
command is even read from the input.  Adding @samp{^0} will force fast-import to
resolve the commit through Git’s revision parsing library, rather than its
internal branch table, thereby loading in the existing value of the branch.

@noindent

@subheading merge

Includes one additional ancestor commit.  The additional ancestry link does
not change the way the tree state is built at this commit.  If the @samp{from}
command is omitted when creating a new branch, the first @samp{merge} commit will
be the first ancestor of the current commit, and the branch will start out
with no files.  An unlimited number of @samp{merge} commands per commit are
permitted by fast-import, thereby establishing an n-way merge.

Here @samp{<commit-ish>} is any of the commit specification expressions also
accepted by @samp{from} (see above).

@noindent

@subheading filemodify

Included in a @samp{commit} command to add a new file or change the content of an
existing file.  This command has two different means of specifying the
content of the file.

@table @asis

@item  External data format 
The data content for the file was already supplied by a prior @samp{blob}
command.  The frontend just needs to connect it.

@example
        'M' SP <mode> SP <dataref> SP <path> LF
@end example

Here usually @samp{<dataref>} must be either a mark reference (@samp{:<idnum>})  set
by a prior @samp{blob} command, or a full 40-byte SHA-1 of an existing Git blob
object.  If @samp{<mode>} is @samp{040000`} then @samp{<dataref>} must be the full 40-byte
SHA-1 of an existing Git tree object or a mark reference set with
@samp{--import-marks}.

@item  Inline data format 
The data content for the file has not been supplied yet.  The frontend wants
to supply it as part of this modify command.

@example
        'M' SP <mode> SP 'inline' SP <path> LF
        data
@end example

See below for a detailed description of the @samp{data} command.
@end table

In both formats @samp{<mode>} is the type of file entry, specified in octal.  Git
only supports the following modes:

@itemize 

@item
@samp{100644} or @samp{644}: A normal (not-executable) file.  The majority of files in
most projects use this mode.  If in doubt, this is what you want.

@item
@samp{100755} or @samp{755}: A normal, but executable, file.

@item
@samp{120000}: A symlink, the content of the file will be the link target.

@item
@samp{160000}: A gitlink, SHA-1 of the object refers to a commit in another
repository. Git links can only be specified by SHA or through a commit
mark. They are used to implement submodules.

@item
@samp{040000}: A subdirectory.  Subdirectories can only be specified by SHA or
through a tree mark set with @samp{--import-marks}.
@end itemize

In both formats @samp{<path>} is the complete path of the file to be added (if
not already existing) or modified (if already existing).

A @samp{<path>} string must use UNIX-style directory separators (forward slash
@samp{/}), may contain any byte other than @samp{LF}, and must not start with double
quote (@samp{"}).

A path can use C-style string quoting; this is accepted in all cases and
mandatory if the filename starts with double quote or contains @samp{LF}. In
C-style quoting, the complete name should be surrounded with double quotes,
and any @samp{LF}, backslash, or double quote characters must be escaped by
preceding them with a backslash (e.g., @samp{"path/with\n, \\ and \" in it"}).

The value of @samp{<path>} must be in canonical form. That is it must not:

@itemize 

@item
contain an empty directory component (e.g. @samp{foo//bar} is invalid),

@item
end with a directory separator (e.g. @samp{foo/} is invalid),

@item
start with a directory separator (e.g. @samp{/foo} is invalid),

@item
contain the special component @samp{.} or @samp{..} (e.g. @samp{foo/./bar} and @samp{foo/../bar}
are invalid).
@end itemize

The root of the tree can be represented by an empty string as @samp{<path>}.

It is recommended that @samp{<path>} always be encoded using UTF-8.

@noindent

@subheading filedelete

Included in a @samp{commit} command to remove a file or recursively delete an
entire directory from the branch.  If the file or directory removal makes
its parent directory empty, the parent directory will be automatically
removed too.  This cascades up the tree until the first non-empty directory
or the root is reached.

@example
        'D' SP <path> LF
@end example

here @samp{<path>} is the complete path of the file or subdirectory to be removed
from the branch.  See @samp{filemodify} above for a detailed description of
@samp{<path>}.

@noindent

@subheading filecopy

Recursively copies an existing file or subdirectory to a different location
within the branch.  The existing file or directory must exist.  If the
destination exists it will be completely replaced by the content copied from
the source.

@example
        'C' SP <path> SP <path> LF
@end example

here the first @samp{<path>} is the source location and the second @samp{<path>} is
the destination.  See @samp{filemodify} above for a detailed description of what
@samp{<path>} may look like.  To use a source path that contains SP the path must
be quoted.

A @samp{filecopy} command takes effect immediately.  Once the source location has
been copied to the destination any future commands applied to the source
location will not impact the destination of the copy.

@noindent

@subheading filerename

Renames an existing file or subdirectory to a different location within the
branch.  The existing file or directory must exist. If the destination
exists it will be replaced by the source directory.

@example
        'R' SP <path> SP <path> LF
@end example

here the first @samp{<path>} is the source location and the second @samp{<path>} is
the destination.  See @samp{filemodify} above for a detailed description of what
@samp{<path>} may look like.  To use a source path that contains SP the path must
be quoted.

A @samp{filerename} command takes effect immediately.  Once the source location
has been renamed to the destination any future commands applied to the
source location will create new files there and not impact the destination
of the rename.

Note that a @samp{filerename} is the same as a @samp{filecopy} followed by a
@samp{filedelete} of the source location.  There is a slight performance
advantage to using @samp{filerename}, but the advantage is so small that it is
never worth trying to convert a delete/add pair in source material into a
rename for fast-import.  This @samp{filerename} command is provided just to
simplify frontends that already have rename information and don’t want
bother with decomposing it into a @samp{filecopy} followed by a @samp{filedelete}.

@noindent

@subheading filedeleteall

Included in a @samp{commit} command to remove all files (and also all
directories) from the branch.  This command resets the internal branch
structure to have no files in it, allowing the frontend to subsequently add
all interesting files from scratch.

@example
        'deleteall' LF
@end example

This command is extremely useful if the frontend does not know (or does not
care to know) what files are currently on the branch, and therefore cannot
generate the proper @samp{filedelete} commands to update the content.

Issuing a @samp{filedeleteall} followed by the needed @samp{filemodify} commands to
set the correct content will produce the same results as sending only the
needed @samp{filemodify} and @samp{filedelete} commands.  The @samp{filedeleteall} approach
may however require fast-import to use slightly more memory per active
branch (less than 1 MiB for even most large projects); so frontends that can
easily obtain only the affected paths for a commit are encouraged to do so.

@noindent

@subheading notemodify

Included in a @samp{commit} @samp{<notes_ref>} command to add a new note annotating a
@samp{<commit-ish>} or change this annotation contents.  Internally it is similar
to filemodify 100644 on @samp{<commit-ish>} path (maybe split into
subdirectories). It’s not advised to use any other commands to write to the
@samp{<notes_ref>} tree except @samp{filedeleteall} to delete all existing notes in
this tree.  This command has two different means of specifying the content
of the note.

@table @asis

@item  External data format 
The data content for the note was already supplied by a prior @samp{blob}
command.  The frontend just needs to connect it to the commit that is to be
annotated.

@example
        'N' SP <dataref> SP <commit-ish> LF
@end example

Here @samp{<dataref>} can be either a mark reference (@samp{:<idnum>})  set by a prior
@samp{blob} command, or a full 40-byte SHA-1 of an existing Git blob object.

@item  Inline data format 
The data content for the note has not been supplied yet.  The frontend wants
to supply it as part of this modify command.

@example
        'N' SP 'inline' SP <commit-ish> LF
        data
@end example

See below for a detailed description of the @samp{data} command.
@end table

In both formats @samp{<commit-ish>} is any of the commit specification
expressions also accepted by @samp{from} (see above).

@noindent

@heading mark

Arranges for fast-import to save a reference to the current object, allowing
the frontend to recall this object at a future point in time, without
knowing its SHA-1.  Here the current object is the object creation command
the @samp{mark} command appears within.  This can be @samp{commit}, @samp{tag}, and @samp{blob},
but @samp{commit} is the most common usage.

@example
        'mark' SP ':' <idnum> LF
@end example

where @samp{<idnum>} is the number assigned by the frontend to this mark.  The
value of @samp{<idnum>} is expressed as an ASCII decimal integer.  The value 0 is
reserved and cannot be used as a mark.  Only values greater than or equal to
1 may be used as marks.

New marks are created automatically.  Existing marks can be moved to another
object simply by reusing the same @samp{<idnum>} in another @samp{mark} command.

@noindent

@heading original-oid

Provides the name of the object in the original source control system.
fast-import will simply ignore this directive, but filter processes which
operate on and modify the stream before feeding to fast-import may have uses
for this information

@example
        'original-oid' SP <object-identifier> LF
@end example

where @samp{<object-identifier>} is any string not containing LF.

@noindent

@heading tag

Creates an annotated tag referring to a specific commit.  To create
lightweight (non-annotated) tags see the @samp{reset} command below.

@example
        'tag' SP <name> LF
        mark?
        'from' SP <commit-ish> LF
        original-oid?
        'tagger' (SP <name>)? SP LT <email> GT SP <when> LF
        data
@end example

where @samp{<name>} is the name of the tag to create.

Tag names are automatically prefixed with @samp{refs/tags/} when stored in Git,
so importing the CVS branch symbol @samp{RELENG-1_0-FINAL} would use just
@samp{RELENG-1_0-FINAL} for @samp{<name>}, and fast-import will write the
corresponding ref as @samp{refs/tags/RELENG-1_0-FINAL}.

The value of @samp{<name>} must be a valid refname in Git and therefore may
contain forward slashes.  As @samp{LF} is not valid in a Git refname, no quoting
or escaping syntax is supported here.

The @samp{from} command is the same as in the @samp{commit} command; see above for
details.

The @samp{tagger} command uses the same format as @samp{committer} within @samp{commit};
again see above for details.

The @samp{data} command following @samp{tagger} must supply the annotated tag message
(see below for @samp{data} command syntax).  To import an empty tag message use a
0 length data.  Tag messages are free-form and are not interpreted by Git.
Currently they must be encoded in UTF-8, as fast-import does not permit
other encodings to be specified.

Signing annotated tags during import from within fast-import is not
supported.  Trying to include your own PGP/GPG signature is not recommended,
as the frontend does not (easily) have access to the complete set of bytes
which normally goes into such a signature.  If signing is required, create
lightweight tags from within fast-import with @samp{reset}, then create the
annotated versions of those tags offline with the standard @emph{git tag}
process.

@noindent

@heading reset

Creates (or recreates) the named branch, optionally starting from a specific
revision.  The reset command allows a frontend to issue a new @samp{from} command
for an existing branch, or to create a new branch from an existing commit
without creating a new commit.

@example
        'reset' SP <ref> LF
        ('from' SP <commit-ish> LF)?
        LF?
@end example

For a detailed description of @samp{<ref>} and @samp{<commit-ish>} see above under
@samp{commit} and @samp{from}.

The @samp{LF} after the command is optional (it used to be required).

The @samp{reset} command can also be used to create lightweight (non-annotated)
tags.  For example:

@example
reset refs/tags/938
from :938
@end example

would create the lightweight tag @samp{refs/tags/938} referring to whatever
commit mark @samp{:938} references.

@noindent

@heading blob

Requests writing one file revision to the packfile.  The revision is not
connected to any commit; this connection must be formed in a subsequent
@samp{commit} command by referencing the blob through an assigned mark.

@example
        'blob' LF
        mark?
        original-oid?
        data
@end example

The mark command is optional here as some frontends have chosen to generate
the Git SHA-1 for the blob on their own, and feed that directly to
@samp{commit}.  This is typically more work than it’s worth however, as marks are
inexpensive to store and easy to use.

@noindent

@heading data

Supplies raw data (for use as blob/file content, commit messages, or
annotated tag messages) to fast-import.  Data can be supplied using an exact
byte count or delimited with a terminating line.  Real frontends intended
for production-quality conversions should always use the exact byte count
format, as it is more robust and performs better.  The delimited format is
intended primarily for testing fast-import.

Comment lines appearing within the @samp{<raw>} part of @samp{data} commands are
always taken to be part of the body of the data and are therefore never
ignored by fast-import.  This makes it safe to import any file/message
content whose lines might start with @samp{#}.

@table @asis

@item  Exact byte count format 
The frontend must specify the number of bytes of data.

@example
        'data' SP <count> LF
        <raw> LF?
@end example

where @samp{<count>} is the exact number of bytes appearing within @samp{<raw>}.  The
value of @samp{<count>} is expressed as an ASCII decimal integer.  The @samp{LF} on
either side of @samp{<raw>} is not included in @samp{<count>} and will not be included
in the imported data.

The @samp{LF} after @samp{<raw>} is optional (it used to be required) but
recommended.  Always including it makes debugging a fast-import stream
easier as the next command always starts in column 0 of the next line, even
if @samp{<raw>} did not end with an @samp{LF}.

@item  Delimited format 
A delimiter string is used to mark the end of the data.  fast-import will
compute the length by searching for the delimiter.  This format is primarily
useful for testing and is not recommended for real data.

@example
        'data' SP '<<' <delim> LF
        <raw> LF
        <delim> LF
        LF?
@end example

where @samp{<delim>} is the chosen delimiter string.  The string @samp{<delim>} must
not appear on a line by itself within @samp{<raw>}, as otherwise fast-import will
think the data ends earlier than it really does.  The @samp{LF} immediately
trailing @samp{<raw>} is part of @samp{<raw>}.  This is one of the limitations of the
delimited format, it is impossible to supply a data chunk which does not
have an LF as its last byte.

The @samp{LF} after @samp{<delim> LF} is optional (it used to be required).
@end table

@noindent

@heading alias

Record that a mark refers to a given object without first creating any new
object.

@example
        'alias' LF
        mark
        'to' SP <commit-ish> LF
        LF?
@end example

For a detailed description of @samp{<commit-ish>} see above under @samp{from}.

@noindent

@heading checkpoint

Forces fast-import to close the current packfile, start a new one, and to
save out all current branch refs, tags and marks.

@example
        'checkpoint' LF
        LF?
@end example

Note that fast-import automatically switches packfiles when the current
packfile reaches --max-pack-size, or 4 GiB, whichever limit is smaller.
During an automatic packfile switch fast-import does not update the branch
refs, tags or marks.

As a @samp{checkpoint} can require a significant amount of CPU time and disk IO
(to compute the overall pack SHA-1 checksum, generate the corresponding
index file, and update the refs) it can easily take several minutes for a
single @samp{checkpoint} command to complete.

Frontends may choose to issue checkpoints during extremely large and long
running imports, or when they need to allow another Git process access to a
branch.  However given that a 30 GiB Subversion repository can be loaded
into Git through fast-import in about 3 hours, explicit checkpointing may
not be necessary.

The @samp{LF} after the command is optional (it used to be required).

@noindent

@heading progress

Causes fast-import to print the entire @samp{progress} line unmodified to its
standard output channel (file descriptor 1) when the command is processed
from the input stream.  The command otherwise has no impact on the current
import, or on any of fast-import’s internal state.

@example
        'progress' SP <any> LF
        LF?
@end example

The @samp{<any>} part of the command may contain any sequence of bytes that does
not contain @samp{LF}.  The @samp{LF} after the command is optional.  Callers may wish
to process the output through a tool such as sed to remove the leading part
of the line, for example:

@example
frontend | git fast-import | sed 's/^progress //'
@end example

Placing a @samp{progress} command immediately after a @samp{checkpoint} will inform
the reader when the @samp{checkpoint} has been completed and it can safely access
the refs that fast-import updated.

@noindent

@heading get-mark

Causes fast-import to print the SHA-1 corresponding to a mark to stdout or
to the file descriptor previously arranged with the @samp{--cat-blob-fd}
argument. The command otherwise has no impact on the current import; its
purpose is to retrieve SHA-1s that later commits might want to refer to in
their commit messages.

@example
        'get-mark' SP ':' <idnum> LF
@end example

See “Responses To Commands” below for details about how to read this
output safely.

@noindent

@heading cat-blob

Causes fast-import to print a blob to a file descriptor previously arranged
with the @samp{--cat-blob-fd} argument.  The command otherwise has no impact on
the current import; its main purpose is to retrieve blobs that may be in
fast-import’s memory but not accessible from the target repository.

@example
        'cat-blob' SP <dataref> LF
@end example

The @samp{<dataref>} can be either a mark reference (@samp{:<idnum>})  set previously
or a full 40-byte SHA-1 of a Git blob, preexisting or ready to be written.

Output uses the same format as @samp{git cat-file --batch}:

@example
<sha1> SP 'blob' SP <size> LF
<contents> LF
@end example

This command can be used where a @samp{filemodify} directive can appear, allowing
it to be used in the middle of a commit.  For a @samp{filemodify} using an inline
directive, it can also appear right before the @samp{data} directive.

See “Responses To Commands” below for details about how to read this
output safely.

@noindent

@heading ls

Prints information about the object at a path to a file descriptor
previously arranged with the @samp{--cat-blob-fd} argument.  This allows printing
a blob from the active commit (with @samp{cat-blob}) or copying a blob or tree
from a previous commit for use in the current one (with @samp{filemodify}).

The @samp{ls} command can also be used where a @samp{filemodify} directive can appear,
allowing it to be used in the middle of a commit.

@table @asis

@item  Reading from the active commit 
This form can only be used in the middle of a @samp{commit}.  The path names a
directory entry within fast-import’s active commit.  The path must be quoted
in this case.

@example
        'ls' SP <path> LF
@end example

@item  Reading from a named tree 
The @samp{<dataref>} can be a mark reference (@samp{:<idnum>}) or the full 40-byte
SHA-1 of a Git tag, commit, or tree object, preexisting or waiting to be
written.  The path is relative to the top level of the tree named by
@samp{<dataref>}.

@example
        'ls' SP <dataref> SP <path> LF
@end example
@end table

See @samp{filemodify} above for a detailed description of @samp{<path>}.

Output uses the same format as @samp{git ls-tree <tree> -- <path>}:

@example
<mode> SP ('blob' | 'tree' | 'commit') SP <dataref> HT <path> LF
@end example

The <dataref> represents the blob, tree, or commit object at <path> and can
be used in later @emph{get-mark}, @emph{cat-blob}, @emph{filemodify}, or @emph{ls} commands.

If there is no file or subtree at that path, @emph{git fast-import} will instead
report

@example
missing SP <path> LF
@end example

See “Responses To Commands” below for details about how to read this
output safely.

@noindent

@heading feature

Require that fast-import supports the specified feature, or abort if it does
not.

@example
        'feature' SP <feature> ('=' <argument>)? LF
@end example

The <feature> part of the command may be any one of the following:

@table @asis

@item  date-format 
@itemx  export-marks 
@itemx  relative-marks 
@itemx  no-relative-marks 
@itemx  force 
Act as though the corresponding command-line option with a leading @samp{--} was
passed on the command line (see OPTIONS, above).

@item  import-marks 
@itemx  import-marks-if-exists 
Like --import-marks except in two respects: first, only one "feature
import-marks" or "feature import-marks-if-exists" command is allowed per
stream; second, an --import-marks= or --import-marks-if-exists command-line
option overrides any of these "feature" commands in the stream; third,
"feature import-marks-if-exists" like a corresponding command-line option
silently skips a nonexistent file.

@item  get-mark 
@itemx  cat-blob 
@itemx  ls 
Require that the backend support the @emph{get-mark}, @emph{cat-blob}, or @emph{ls} command
respectively.  Versions of fast-import not supporting the specified command
will exit with a message indicating so.  This lets the import error out
early with a clear message, rather than wasting time on the early part of an
import before the unsupported command is detected.

@item  notes 
Require that the backend support the @emph{notemodify} (N)  subcommand to the
@emph{commit} command.  Versions of fast-import not supporting notes will exit
with a message indicating so.

@item  done 
Error out if the stream ends without a @emph{done} command.  Without this
feature, errors causing the frontend to end abruptly at a convenient point
in the stream can go undetected.  This may occur, for example, if an import
front end dies in mid-operation without emitting SIGTERM or SIGKILL at its
subordinate git fast-import instance.
@end table

@noindent

@heading option

Processes the specified option so that git fast-import behaves in a way that
suits the frontend’s needs.  Note that options specified by the frontend are
overridden by any options the user may specify to git fast-import itself.

@example
    'option' SP <option> LF
@end example

The @samp{<option>} part of the command may contain any of the options listed in
the OPTIONS section that do not change import semantics, without the leading
@samp{--} and is treated in the same way.

Option commands must be the first commands on the input (not counting
feature commands), to give an option command after any non-option command is
an error.

The following command-line options change import semantics and may therefore
not be passed as option:

@itemize 

@item
date-format

@item
import-marks

@item
export-marks

@item
cat-blob-fd

@item
force
@end itemize

@noindent

@heading done

If the @samp{done} feature is not in use, treated as if EOF was read.  This can
be used to tell fast-import to finish early.

If the @samp{--done} command-line option or @samp{feature done} command is in use, the
@samp{done} command is mandatory and marks the end of the stream.

@noindent

@chapheading RESPONSES TO COMMANDS

New objects written by fast-import are not available immediately.  Most
fast-import commands have no visible effect until the next checkpoint (or
completion).  The frontend can send commands to fill fast-import’s input
pipe without worrying about how quickly they will take effect, which
improves performance by simplifying scheduling.

For some frontends, though, it is useful to be able to read back data from
the current repository as it is being updated (for example when the source
material describes objects in terms of patches to be applied to previously
imported objects).  This can be accomplished by connecting the frontend and
fast-import via bidirectional pipes:

@example
mkfifo fast-import-output
frontend <fast-import-output |
git fast-import >fast-import-output
@end example

A frontend set up this way can use @samp{progress}, @samp{get-mark}, @samp{ls}, and
@samp{cat-blob} commands to read information from the import in progress.

To avoid deadlock, such frontends must completely consume any pending output
from @samp{progress}, @samp{ls}, @samp{get-mark}, and @samp{cat-blob} before performing writes
to fast-import that might block.

@noindent

@chapheading CRASH REPORTS

If fast-import is supplied invalid input it will terminate with a non-zero
exit status and create a crash report in the top level of the Git repository
it was importing into.  Crash reports contain a snapshot of the internal
fast-import state as well as the most recent commands that lead up to the
crash.

All recent commands (including stream comments, file changes and progress
commands) are shown in the command history within the crash report, but raw
file data and commit messages are excluded from the crash report.  This
exclusion saves space within the report file and reduces the amount of
buffering that fast-import must perform during execution.

After writing a crash report fast-import will close the current packfile and
export the marks table.  This allows the frontend developer to inspect the
repository state and resume the import from the point where it crashed.  The
modified branches and tags are not updated during a crash, as the import did
not complete successfully.  Branch and tag information can be found in the
crash report and must be applied manually if the update is needed.

An example crash:

@example
$ cat >in <<END_OF_INPUT
# my very first test commit
commit refs/heads/master
committer Shawn O. Pearce <spearce> 19283 -0400
# who is that guy anyway?
data <<EOF
this is my commit
EOF
M 644 inline .gitignore
data <<EOF
.gitignore
EOF
M 777 inline bob
END_OF_INPUT
@end example

@example
$ git fast-import <in
fatal: Corrupt mode: M 777 inline bob
fast-import: dumping crash report to .git/fast_import_crash_8434
@end example

@example
$ cat .git/fast_import_crash_8434
fast-import crash report:
    fast-import process: 8434
    parent process     : 1391
    at Sat Sep 1 00:58:12 2007
@end example

@example
fatal: Corrupt mode: M 777 inline bob
@end example

@example
Most Recent Commands Before Crash
---------------------------------
  # my very first test commit
  commit refs/heads/master
  committer Shawn O. Pearce <spearce> 19283 -0400
  # who is that guy anyway?
  data <<EOF
  M 644 inline .gitignore
  data <<EOF
* M 777 inline bob
@end example

@example
Active Branch LRU
-----------------
    active_branches = 1 cur, 5 max
@end example

@example
pos clock name ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1)      0 refs/heads/master
@end example

@example
Inactive Branches
-----------------
refs/heads/master:
  status      : active loaded dirty
  tip commit  : 0000000000000000000000000000000000000000
  old tree    : 0000000000000000000000000000000000000000
  cur tree    : 0000000000000000000000000000000000000000
  commit clock: 0
  last pack   :
@end example

@example
------------------- END OF CRASH REPORT
@end example

@noindent

@chapheading TIPS AND TRICKS

The following tips and tricks have been collected from various users of
fast-import, and are offered here as suggestions.

@noindent

@heading Use One Mark Per Commit

When doing a repository conversion, use a unique mark per commit (@samp{mark
:<n>}) and supply the --export-marks option on the command line.
fast-import will dump a file which lists every mark and the Git object SHA-1
that corresponds to it.  If the frontend can tie the marks back to the
source repository, it is easy to verify the accuracy and completeness of the
import by comparing each Git commit to the corresponding source revision.

Coming from a system such as Perforce or Subversion this should be quite
simple, as the fast-import mark can also be the Perforce changeset number or
the Subversion revision number.

@noindent

@heading Freely Skip Around Branches

Don’t bother trying to optimize the frontend to stick to one branch at a
time during an import.  Although doing so might be slightly faster for
fast-import, it tends to increase the complexity of the frontend code
considerably.

The branch LRU builtin to fast-import tends to behave very well, and the
cost of activating an inactive branch is so low that bouncing around between
branches has virtually no impact on import performance.

@noindent

@heading Handling Renames

When importing a renamed file or directory, simply delete the old name(s)
and modify the new name(s) during the corresponding commit.  Git performs
rename detection after-the-fact, rather than explicitly during a commit.

@noindent

@heading Use Tag Fixup Branches

Some other SCM systems let the user create a tag from multiple files which
are not from the same commit/changeset.  Or to create tags which are a
subset of the files available in the repository.

Importing these tags as-is in Git is impossible without making at least one
commit which “fixes up” the files to match the content of the tag.  Use
fast-import’s @samp{reset} command to reset a dummy branch outside of your normal
branch space to the base commit for the tag, then commit one or more file
fixup commits, and finally tag the dummy branch.

For example since all normal branches are stored under @samp{refs/heads/} name
the tag fixup branch @samp{TAG_FIXUP}.  This way it is impossible for the fixup
branch used by the importer to have namespace conflicts with real branches
imported from the source (the name @samp{TAG_FIXUP} is not
@samp{refs/heads/TAG_FIXUP}).

When committing fixups, consider using @samp{merge} to connect the commit(s)
which are supplying file revisions to the fixup branch.  Doing so will allow
tools such as @emph{git blame} to track through the real commit history and
properly annotate the source files.

After fast-import terminates the frontend will need to do @samp{rm
.git/TAG_FIXUP} to remove the dummy branch.

@noindent

@heading Import Now, Repack Later

As soon as fast-import completes the Git repository is completely valid and
ready for use.  Typically this takes only a very short time, even for
considerably large projects (100,000+ commits).

However repacking the repository is necessary to improve data locality and
access performance.  It can also take hours on extremely large projects
(especially if -f and a large --window parameter is used).  Since repacking
is safe to run alongside readers and writers, run the repack in the
background and let it finish when it finishes.  There is no reason to wait
to explore your new Git project!

If you choose to wait for the repack, don’t try to run benchmarks or
performance tests until repacking is completed.  fast-import outputs
suboptimal packfiles that are simply never seen in real use situations.

@noindent

@heading Repacking Historical Data

If you are repacking very old imported data (e.g. older than the last year),
consider expending some extra CPU time and supplying --window=50 (or higher)
when you run @emph{git repack}.  This will take longer, but will also produce a
smaller packfile.  You only need to expend the effort once, and everyone
using your project will benefit from the smaller repository.

@noindent

@heading Include Some Progress Messages

Every once in a while have your frontend emit a @samp{progress} message to
fast-import.  The contents of the messages are entirely free-form, so one
suggestion would be to output the current month and year each time the
current commit date moves into the next month.  Your users will feel better
knowing how much of the data stream has been processed.

@noindent

@chapheading PACKFILE OPTIMIZATION

When packing a blob fast-import always attempts to deltify against the last
blob written.  Unless specifically arranged for by the frontend, this will
probably not be a prior version of the same file, so the generated delta
will not be the smallest possible.  The resulting packfile will be
compressed, but will not be optimal.

Frontends which have efficient access to all revisions of a single file (for
example reading an RCS/CVS ,v file) can choose to supply all revisions of
that file as a sequence of consecutive @samp{blob} commands.  This allows
fast-import to deltify the different file revisions against each other,
saving space in the final packfile.  Marks can be used to later identify
individual file revisions during a sequence of @samp{commit} commands.

The packfile(s) created by fast-import do not encourage good disk access
patterns.  This is caused by fast-import writing the data in the order it is
received on standard input, while Git typically organizes data within
packfiles to make the most recent (current tip) data appear before
historical data.  Git also clusters commits together, speeding up revision
traversal through better cache locality.

For this reason it is strongly recommended that users repack the repository
with @samp{git repack -a -d} after fast-import completes, allowing Git to
reorganize the packfiles for faster data access.  If blob deltas are
suboptimal (see above) then also adding the @samp{-f} option to force
recomputation of all deltas can significantly reduce the final packfile size
(30-50% smaller can be quite typical).

Instead of running @samp{git repack} you can also run @samp{git gc --aggressive},
which will also optimize other things after an import (e.g. pack loose
refs). As noted in the "AGGRESSIVE" section in git-gc(1) the
@samp{--aggressive} option will find new deltas with the @samp{-f} option to
git-repack(1). For the reasons elaborated on above using
@samp{--aggressive} after a fast-import is one of the few cases where it’s known
to be worthwhile.

@noindent

@chapheading MEMORY UTILIZATION

There are a number of factors which affect how much memory fast-import
requires to perform an import.  Like critical sections of core Git,
fast-import uses its own memory allocators to amortize any overheads
associated with malloc.  In practice fast-import tends to amortize any
malloc overheads to 0, due to its use of large block allocations.

@noindent

@heading per object

fast-import maintains an in-memory structure for every object written in
this execution.  On a 32 bit system the structure is 32 bytes, on a 64 bit
system the structure is 40 bytes (due to the larger pointer sizes).  Objects
in the table are not deallocated until fast-import terminates.  Importing 2
million objects on a 32 bit system will require approximately 64 MiB of
memory.

The object table is actually a hashtable keyed on the object name (the
unique SHA-1).  This storage configuration allows fast-import to reuse an
existing or already written object and avoid writing duplicates to the
output packfile.  Duplicate blobs are surprisingly common in an import,
typically due to branch merges in the source.

@noindent

@heading per mark

Marks are stored in a sparse array, using 1 pointer (4 bytes or 8 bytes,
depending on pointer size) per mark.  Although the array is sparse,
frontends are still strongly encouraged to use marks between 1 and n, where
n is the total number of marks required for this import.

@noindent

@heading per branch

Branches are classified as active and inactive.  The memory usage of the two
classes is significantly different.

Inactive branches are stored in a structure which uses 96 or 120 bytes (32
bit or 64 bit systems, respectively), plus the length of the branch name
(typically under 200 bytes), per branch.  fast-import will easily handle as
many as 10,000 inactive branches in under 2 MiB of memory.

Active branches have the same overhead as inactive branches, but also
contain copies of every tree that has been recently modified on that
branch.  If subtree @samp{include} has not been modified since the branch became
active, its contents will not be loaded into memory, but if subtree @samp{src}
has been modified by a commit since the branch became active, then its
contents will be loaded in memory.

As active branches store metadata about the files contained on that branch,
their in-memory storage size can grow to a considerable size (see below).

fast-import automatically moves active branches to inactive status based on
a simple least-recently-used algorithm.  The LRU chain is updated on each
@samp{commit} command.  The maximum number of active branches can be increased or
decreased on the command line with --active-branches=.

@noindent

@heading per active tree

Trees (aka directories) use just 12 bytes of memory on top of the memory
required for their entries (see “per active file” below).  The cost of a
tree is virtually 0, as its overhead amortizes out over the individual file
entries.

@noindent

@heading per active file entry

Files (and pointers to subtrees) within active trees require 52 or 64 bytes
(32/64 bit platforms) per entry.  To conserve space, file and tree names are
pooled in a common string table, allowing the filename “Makefile” to use
just 16 bytes (after including the string header overhead) no matter how
many times it occurs within the project.

The active branch LRU, when coupled with the filename string pool and lazy
loading of subtrees, allows fast-import to efficiently import projects with
2,000+ branches and 45,114+ files in a very limited memory footprint (less
than 2.7 MiB per active branch).

@noindent

@chapheading SIGNALS

Sending @strong{SIGUSR1} to the @emph{git fast-import} process ends the current packfile
early, simulating a @samp{checkpoint} command.  The impatient operator can use
this facility to peek at the objects and refs from an import in progress, at
the cost of some added running time and worse compression.

@noindent

@chapheading SEE ALSO

git-fast-export(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-fetch-pack,,,Top
@chapheading Name

git-fetch-pack — Receive missing objects from another repository

@noindent

@chapheading Synopsis

@display
git fetch-pack [--all] [--quiet|-q] [--keep|-k] [--thin] [--include-tag]
        [--upload-pack=<git-upload-pack>]
        [--depth=<n>] [--no-progress]
        [-v] <repository> [<refs>…]
@end display


@noindent

@chapheading DESCRIPTION

Usually you would want to use @emph{git fetch}, which is a higher level wrapper
of this command, instead.

Invokes @emph{git-upload-pack} on a possibly remote repository and asks it to
send objects missing from this repository, to update the named heads.  The
list of commits available locally is found out by scanning the local refs/
hierarchy and sent to @emph{git-upload-pack} running on the other end.

This command degenerates to download everything to complete the asked refs
from the remote side when the local side does not have a common ancestor
commit.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--all} 
Fetch all remote refs.

@item  @samp{--stdin} 
Take the list of refs from stdin, one per line. If there are refs specified
on the command line in addition to this option, then the refs from stdin are
processed after those on the command line.

If @samp{--stateless-rpc} is specified together with this option then the list of
refs must be in packet format (pkt-line). Each ref must be in a separate
packet, and the list must end with a flush packet.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Pass @samp{-q} flag to @emph{git unpack-objects}; this makes the cloning process less
verbose.

@item  @samp{-k} 
@itemx  @samp{--keep} 
Do not invoke @emph{git unpack-objects} on received data, but create a single
packfile out of it instead, and store it in the object database. If provided
twice then the pack is locked against repacking.

@item  @samp{--thin} 
Fetch a "thin" pack, which records objects in deltified form based on
objects not included in the pack to reduce network traffic.

@item  @samp{--include-tag} 
If the remote side supports it, annotated tags objects will be downloaded on
the same connection as the other objects if the object the tag references is
downloaded.  The caller must otherwise determine the tags this option made
available.

@item  @samp{--upload-pack=<git-upload-pack>} 
Use this to specify the path to @emph{git-upload-pack} on the remote side, if is
not found on your $PATH.  Installations of sshd ignores the user’s
environment setup scripts for login shells (e.g. .bash_profile) and your
privately installed git may not be found on the system default $PATH.
Another workaround suggested is to set up your $PATH in ".bashrc", but this
flag is for people who do not want to pay the overhead for non-interactive
shells by having a lean .bashrc file (they set most of the things up in
.bash_profile).

@item  @samp{--exec=<git-upload-pack>} 
Same as --upload-pack=<git-upload-pack>.

@item  @samp{--depth=<n>} 
Limit fetching to ancestor-chains not longer than n.  @emph{git-upload-pack}
treats the special depth 2147483647 as infinite even if there is an
ancestor-chain that long.

@item  @samp{--shallow-since=<date>} 
Deepen or shorten the history of a shallow repository to include all
reachable commits after <date>.

@item  @samp{--shallow-exclude=<revision>} 
Deepen or shorten the history of a shallow repository to exclude commits
reachable from a specified remote branch or tag.  This option can be
specified multiple times.

@item  @samp{--deepen-relative} 
Argument --depth specifies the number of commits from the current shallow
boundary instead of from the tip of each remote branch history.

@item  @samp{--no-progress} 
Do not show the progress.

@item  @samp{--check-self-contained-and-connected} 
Output "connectivity-ok" if the received pack is self-contained and
connected.

@item  @samp{-v} 
Run verbosely.

@item  <repository> 
The URL to the remote repository.

@item  <refs>… 
The remote heads to update from. This is relative to $GIT_DIR (e.g. "HEAD",
"refs/heads/master").  When unspecified, update from all heads the remote
side has.

If the remote has enabled the options @samp{uploadpack.allowTipSHA1InWant},
@samp{uploadpack.allowReachableSHA1InWant}, or @samp{uploadpack.allowAnySHA1InWant},
they may alternatively be 40-hex sha1s present on the remote.
@end table

@noindent

@chapheading SEE ALSO

git-fetch(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-fetch,,,Top
@chapheading Name

git-fetch — Download objects and refs from another repository

@noindent

@chapheading Synopsis

@display
git fetch [<options>] [<repository> [<refspec>…]]
git fetch [<options>] <group>
git fetch --multiple [<options>] [(<repository> | <group>)…]
git fetch --all [<options>]
@end display


@noindent

@chapheading DESCRIPTION

Fetch branches and/or tags (collectively, "refs") from one or more other
repositories, along with the objects necessary to complete their histories.
Remote-tracking branches are updated (see the description of <refspec> below
for ways to control this behavior).

By default, any tag that points into the histories being fetched is also
fetched; the effect is to fetch tags that point at branches that you are
interested in.  This default behavior can be changed by using the --tags or
--no-tags options or by configuring remote.<name>.tagOpt.  By using a
refspec that fetches tags explicitly, you can fetch tags that do not point
into branches you are interested in as well.

@emph{git fetch} can fetch from either a single named repository or URL, or from
several repositories at once if <group> is given and there is a
remotes.<group> entry in the configuration file.  (See
git-config(1)).

When no remote is specified, by default the @samp{origin} remote will be used,
unless there’s an upstream branch configured for the current branch.

The names of refs that are fetched, together with the object names they
point at, are written to @samp{.git/FETCH_HEAD}.  This information may be used by
scripts or other git commands, such as git-pull(1).

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--all} 
Fetch all remotes.

@item  @samp{-a} 
@itemx  @samp{--append} 
Append ref names and object names of fetched refs to the existing contents
of @samp{.git/FETCH_HEAD}.  Without this option old data in @samp{.git/FETCH_HEAD}
will be overwritten.

@item  @samp{--atomic} 
Use an atomic transaction to update local refs. Either all refs are updated,
or on error, no refs are updated.

@item  @samp{--depth=<depth>} 
Limit fetching to the specified number of commits from the tip of each
remote branch history. If fetching to a @emph{shallow} repository created by @samp{git
clone} with @samp{--depth=<depth>} option (see git-clone(1)), deepen or
shorten the history to the specified number of commits. Tags for the
deepened commits are not fetched.

@item  @samp{--deepen=<depth>} 
Similar to --depth, except it specifies the number of commits from the
current shallow boundary instead of from the tip of each remote branch
history.

@item  @samp{--shallow-since=<date>} 
Deepen or shorten the history of a shallow repository to include all
reachable commits after <date>.

@item  @samp{--shallow-exclude=<revision>} 
Deepen or shorten the history of a shallow repository to exclude commits
reachable from a specified remote branch or tag.  This option can be
specified multiple times.

@item  @samp{--unshallow} 
If the source repository is complete, convert a shallow repository to a
complete one, removing all the limitations imposed by shallow repositories.

If the source repository is shallow, fetch as much as possible so that the
current repository has the same history as the source repository.

@item  @samp{--update-shallow} 
By default when fetching from a shallow repository, @samp{git fetch} refuses refs
that require updating .git/shallow. This option updates .git/shallow and
accept such refs.

@item  @samp{--negotiation-tip=<commit|glob>} 
By default, Git will report, to the server, commits reachable from all local
refs to find common commits in an attempt to reduce the size of the
to-be-received packfile. If specified, Git will only report commits
reachable from the given tips.  This is useful to speed up fetches when the
user knows which local ref is likely to have commits in common with the
upstream ref being fetched.

This option may be specified more than once; if so, Git will report commits
reachable from any of the given commits.

The argument to this option may be a glob on ref names, a ref, or the
(possibly abbreviated) SHA-1 of a commit. Specifying a glob is equivalent to
specifying this option multiple times, one for each matching ref name.

See also the @samp{fetch.negotiationAlgorithm} and @samp{push.negotiate} configuration
variables documented in git-config(1), and the @samp{--negotiate-only}
option below.

@item  @samp{--negotiate-only} 
Do not fetch anything from the server, and instead print the ancestors of
the provided @samp{--negotiation-tip=*} arguments, which we have in common with
the server.

Internally this is used to implement the @samp{push.negotiate} option, see
git-config(1).

@item  @samp{--dry-run} 
Show what would be done, without making any changes.

@item  @samp{--[no-]write-fetch-head} 
Write the list of remote refs fetched in the @samp{FETCH_HEAD} file directly
under @samp{$GIT_DIR}.  This is the default.  Passing @samp{--no-write-fetch-head}
from the command line tells Git not to write the file.  Under @samp{--dry-run}
option, the file is never written.

@item  @samp{-f} 
@itemx  @samp{--force} 
When @emph{git fetch} is used with @samp{<src>:<dst>} refspec it may refuse to update
the local branch as discussed
in the @samp{<refspec>} part below.
This option overrides that check.

@item  @samp{-k} 
@itemx  @samp{--keep} 
Keep downloaded pack.

@item  @samp{--multiple} 
Allow several <repository> and <group> arguments to be specified. No
<refspec>s may be specified.

@item  @samp{--[no-]auto-maintenance} 
@itemx  @samp{--[no-]auto-gc} 
Run @samp{git maintenance run --auto} at the end to perform automatic repository
maintenance if needed. (@samp{--[no-]auto-gc} is a synonym.)  This is enabled by
default.

@item  @samp{--[no-]write-commit-graph} 
Write a commit-graph after fetching. This overrides the config setting
@samp{fetch.writeCommitGraph}.

@item  @samp{--prefetch} 
Modify the configured refspec to place all refs into the @samp{refs/prefetch/}
namespace. See the @samp{prefetch} task in git-maintenance(1).

@item  @samp{-p} 
@itemx  @samp{--prune} 
Before fetching, remove any remote-tracking references that no longer exist
on the remote.  Tags are not subject to pruning if they are fetched only
because of the default tag auto-following or due to a --tags option.
However, if tags are fetched due to an explicit refspec (either on the
command line or in the remote configuration, for example if the remote was
cloned with the --mirror option), then they are also subject to
pruning. Supplying @samp{--prune-tags} is a shorthand for providing the tag
refspec.

See the PRUNING section below for more details.

@item  @samp{-P} 
@itemx  @samp{--prune-tags} 
Before fetching, remove any local tags that no longer exist on the remote if
@samp{--prune} is enabled. This option should be used more carefully, unlike
@samp{--prune} it will remove any local references (local tags) that have been
created. This option is a shorthand for providing the explicit tag refspec
along with @samp{--prune}, see the discussion about that in its documentation.

See the PRUNING section below for more details.

@item  @samp{-n} 
@itemx  @samp{--no-tags} 
By default, tags that point at objects that are downloaded from the remote
repository are fetched and stored locally.  This option disables this
automatic tag following. The default behavior for a remote may be specified
with the remote.<name>.tagOpt setting. See git-config(1).

@item  @samp{--refmap=<refspec>} 
When fetching refs listed on the command line, use the specified refspec
(can be given more than once) to map the refs to remote-tracking branches,
instead of the values of @samp{remote.*.fetch} configuration variables for the
remote repository.  Providing an empty @samp{<refspec>} to the @samp{--refmap} option
causes Git to ignore the configured refspecs and rely entirely on the
refspecs supplied as command-line arguments. See section on "Configured
Remote-tracking Branches" for details.

@item  @samp{-t} 
@itemx  @samp{--tags} 
Fetch all tags from the remote (i.e., fetch remote tags @samp{refs/tags/*} into
local tags with the same name), in addition to whatever else would otherwise
be fetched.  Using this option alone does not subject tags to pruning, even
if --prune is used (though tags may be pruned anyway if they are also the
destination of an explicit refspec; see @samp{--prune}).

@item  @samp{--recurse-submodules[=yes|on-demand|no]} 
This option controls if and under what conditions new commits of populated
submodules should be fetched too. It can be used as a boolean option to
completely disable recursion when set to @emph{no} or to unconditionally recurse
into all populated submodules when set to @emph{yes}, which is the default when
this option is used without any value. Use @emph{on-demand} to only recurse into
a populated submodule when the superproject retrieves a commit that updates
the submodule’s reference to a commit that isn’t already in the local
submodule clone. By default, @emph{on-demand} is used, unless
@samp{fetch.recurseSubmodules} is set (see git-config(1)).

@item  @samp{-j} 
@itemx  @samp{--jobs=<n>} 
Number of parallel children to be used for all forms of fetching.

If the @samp{--multiple} option was specified, the different remotes will be
fetched in parallel. If multiple submodules are fetched, they will be
fetched in parallel. To control them independently, use the config settings
@samp{fetch.parallel} and @samp{submodule.fetchJobs} (see git-config(1)).

Typically, parallel recursive and multi-remote fetches will be faster. By
default fetches are performed sequentially, not in parallel.

@item  @samp{--no-recurse-submodules} 
Disable recursive fetching of submodules (this has the same effect as using
the @samp{--recurse-submodules=no} option).

@item  @samp{--set-upstream} 
If the remote is fetched successfully, add upstream (tracking) reference,
used by argument-less git-pull(1) and other commands. For more
information, see @samp{branch.<name>.merge} and @samp{branch.<name>.remote} in
git-config(1).

@item  @samp{--submodule-prefix=<path>} 
Prepend <path> to paths printed in informative messages such as "Fetching
submodule foo".  This option is used internally when recursing over
submodules.

@item  @samp{--recurse-submodules-default=[yes|on-demand]} 
This option is used internally to temporarily provide a non-negative default
value for the --recurse-submodules option.  All other methods of configuring
fetch’s submodule recursion (such as settings in gitmodules(5) and
git-config(1)) override this option, as does specifying
--[no-]recurse-submodules directly.

@item  @samp{-u} 
@itemx  @samp{--update-head-ok} 
By default @emph{git fetch} refuses to update the head which corresponds to the
current branch.  This flag disables the check.  This is purely for the
internal use for @emph{git pull} to communicate with @emph{git fetch}, and unless you
are implementing your own Porcelain you are not supposed to use it.

@item  @samp{--upload-pack <upload-pack>} 
When given, and the repository to fetch from is handled by @emph{git fetch-pack},
@samp{--exec=<upload-pack>} is passed to the command to specify non-default path
for the command run on the other end.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Pass --quiet to git-fetch-pack and silence any other internally used git
commands. Progress is not reported to the standard error stream.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Be verbose.

@item  @samp{--progress} 
Progress status is reported on the standard error stream by default when it
is attached to a terminal, unless -q is specified. This flag forces progress
status even if the standard error stream is not directed to a terminal.

@item  @samp{-o <option>} 
@itemx  @samp{--server-option=<option>} 
Transmit the given string to the server when communicating using protocol
version 2.  The given string must not contain a NUL or LF character.  The
server’s handling of server options, including unknown ones, is
server-specific.  When multiple @samp{--server-option=<option>} are given, they
are all sent to the other side in the order listed on the command line.

@item  @samp{--show-forced-updates} 
By default, git checks if a branch is force-updated during fetch. This can
be disabled through fetch.showForcedUpdates, but the --show-forced-updates
option guarantees this check occurs.  See git-config(1).

@item  @samp{--no-show-forced-updates} 
By default, git checks if a branch is force-updated during fetch. Pass
--no-show-forced-updates or set fetch.showForcedUpdates to false to skip
this check for performance reasons. If used during @emph{git-pull} the --ff-only
option will still check for forced updates before attempting a fast-forward
update. See git-config(1).

@item  @samp{-4} 
@itemx  @samp{--ipv4} 
Use IPv4 addresses only, ignoring IPv6 addresses.

@item  @samp{-6} 
@itemx  @samp{--ipv6} 
Use IPv6 addresses only, ignoring IPv4 addresses.

@item  <repository> 
The "remote" repository that is the source of a fetch or pull operation.
This parameter can be either a URL (see the section GIT URLS  below)
or the name of a remote (see the section REMOTES  below).

@item  <group> 
A name referring to a list of repositories as the value of remotes.<group>
in the configuration file.  (See git-config(1)).

@item  <refspec> 
Specifies which refs to fetch and which local refs to update.  When no
<refspec>s appear on the command line, the refs to fetch are read from
@samp{remote.<repository>.fetch} variables instead
(see CONFIGURED REMOTE-TRACKING BRANCHES (@pxref{[CRTB]}) below).

The format of a <refspec> parameter is an optional plus @samp{+}, followed by the
source <src>, followed by a colon @samp{:}, followed by the destination ref
<dst>.  The colon can be omitted when <dst> is empty.  <src> is typically a
ref, but it can also be a fully spelled hex object name.

A <refspec> may contain a @samp{*} in its <src> to indicate a simple pattern
match. Such a refspec functions like a glob that matches any ref with the
same prefix. A pattern <refspec> must have a @samp{*} in both the <src> and
<dst>. It will map refs to the destination by replacing the @samp{*} with the
contents matched from the source.

If a refspec is prefixed by @samp{^}, it will be interpreted as a negative
refspec. Rather than specifying which refs to fetch or which local refs to
update, such a refspec will instead specify refs to exclude. A ref will be
considered to match if it matches at least one positive refspec, and does
not match any negative refspec. Negative refspecs can be useful to restrict
the scope of a pattern refspec so that it will not include specific refs.
Negative refspecs can themselves be pattern refspecs. However, they may only
contain a <src> and do not specify a <dst>. Fully spelled out hex object
names are also not supported.

@samp{tag <tag>} means the same as @samp{refs/tags/<tag>:refs/tags/<tag>}; it requests
fetching everything up to the given tag.

The remote ref that matches <src> is fetched, and if <dst> is not an empty
string, an attempt is made to update the local ref that matches it.

Whether that update is allowed without @samp{--force} depends on the ref
namespace it’s being fetched to, the type of object being fetched, and
whether the update is considered to be a fast-forward. Generally, the same
rules apply for fetching as when pushing, see the @samp{<refspec>...} section of
git-push(1) for what those are. Exceptions to those rules particular
to @emph{git fetch} are noted below.

Until Git version 2.20, and unlike when pushing with git-push(1),
any updates to @samp{refs/tags/*} would be accepted without @samp{+} in the refspec
(or @samp{--force}). When fetching, we promiscuously considered all tag updates
from a remote to be forced fetches.  Since Git version 2.20, fetching to
update @samp{refs/tags/*} works the same way as when pushing. I.e. any updates
will be rejected without @samp{+} in the refspec (or @samp{--force}).

Unlike when pushing with git-push(1), any updates outside of
@samp{refs/@{tags,heads@}/*} will be accepted without @samp{+} in the refspec (or
@samp{--force}), whether that’s swapping e.g. a tree object for a blob, or a
commit for another commit that’s doesn’t have the previous commit as an
ancestor etc.

Unlike when pushing with git-push(1), there is no configuration
which’ll amend these rules, and nothing like a @samp{pre-fetch} hook analogous to
the @samp{pre-receive} hook.

As with pushing with git-push(1), all of the rules described above
about what’s not allowed as an update can be overridden by adding an the
optional leading @samp{+} to a refspec (or using @samp{--force} command line
option). The only exception to this is that no amount of forcing will make
the @samp{refs/heads/*} namespace accept a non-commit object.

@quotation

@strong{Note}

When the remote branch you want to fetch is known to be rewound and rebased
regularly, it is expected that its new tip will not be descendant of its
previous tip (as stored in your remote-tracking branch the last time you
fetched).  You would want to use the @samp{+} sign to indicate non-fast-forward
updates will be needed for such branches.  There is no way to determine or
declare that a branch will be made available in a repository with this
behavior; the pulling user simply must know this is the expected usage
pattern for a branch.
@end quotation

@item  @samp{--stdin} 
Read refspecs, one per line, from stdin in addition to those provided as
arguments. The "tag <name>" format is not supported.
@end table

@noindent

@chapheading GIT URLS

一般に、URLには、トランスポートプロトコル、リモートサーバーのアドレス、およびリポジトリへのパスに関する情報が含まれています。トランスポートプロトコルによっては、一部の情報が欠落している場合があります。

Gitはsshとgitとhttpとhttpsプロトコルをサポートします(さらにftpとftpsをフェッチに使用できますが、これは非効率的で非推奨です。使用しないでください)。

ネイティブトランスポート(つまり、 git://
URL)は認証を行わないため、セキュリティで保護されていないネットワークでは注意して使用する必要があります。

以下の構文を使用できます:

@itemize 

@item
ssh://[user@@]host.xz[:port]/path/to/repo.git/

@item
git://host.xz[:port]/path/to/repo.git/

@item
http[s]://host.xz[:port]/path/to/repo.git/

@item
ftp[s]://host.xz[:port]/path/to/repo.git/
@end itemize

代替のscpのような構文をsshプロトコルで使用することもできます:

@itemize 

@item
[user@@]host.xz:path/to/repo.git/
@end itemize

この構文は、最初のコロン(:)の前にスラッシュがない場合にのみ認識されます。これは、コロンを含むローカルパスを区別するのに役立ちます。たとえば、ローカルパス
@samp{foo:bar} を、絶対パスまたは @samp{./foo:bar} として指定して、 ssh url として誤って解釈されないようにすることができます。

sshおよびgitプロトコルは、さらに ~username 拡張をサポートします:

@itemize 

@item
ssh://[user@@]host.xz[:port]/~[user]/path/to/repo.git/

@item
git://host.xz[:port]/~[user]/path/to/repo.git/

@item
[user@@]host.xz:/~[user]/path/to/repo.git/
@end itemize

Gitでもネイティブにサポートされているローカルリポジトリの場合、以下の構文を使用できます:

@itemize 

@item
/path/to/repo.git/

@item
file:///path/to/repo.git/
@end itemize

これらの2つの構文は、前者が @samp{--local} オプションの機能を含むクローン作成の場合を除いて、ほとんど同等です。 詳細については、
git-clone(1) を参照してください。

「git clone」と「git fetch」と「git pull」は、「git push」と違って適切なバンドルファイルを受け入れます。
git-bundle(1) を参照してください。

Gitが特定のトランスポートプロトコルを処理する方法を知らない場合、Gitは @emph{remote-<transport>}
リモートヘルパー(存在する場合)を使用しようとします。リモートヘルパーを明示的に要求するには、以下の構文を使用できます:

@itemize 

@item
<transport>::<address>
@end itemize

ここで、 <address>
は、パス、サーバーとパス、または呼び出されている特定のリモートヘルパーによって認識される任意のURLのような文字列です。詳細については、
gitremote-helpers(7) を参照してください。

同じ名前のリモートリポジトリが多数あり、それらに異なる形式を使用する場合(あなたの使用するURLが機能するURLに書き換えられるように)、以下の形式の構成セクションを作成できます:

@example
        [url "<actual url base>"]
                insteadOf = <other url base>
@end example


例えば、以下のようになります:

@example
        [url "git://git.host.xz/"]
                insteadOf = host.xz:/path/to/
                insteadOf = work:
@end example


"work:repo.git" や "host.xz:/path/to/repo.git"
のようなURLは、任意のコンテキストで、"git://git.host.xz/repo.git" に書き換えられます。

プッシュ専用のURLを書き換えたい場合は、以下の形式の構成セクションを作成できます:

@example
        [url "<actual url base>"]
                pushInsteadOf = <other url base>
@end example


例えば、以下のようになります:

@example
        [url "ssh://example.org/"]
                pushInsteadOf = git://example.org/
@end example


"git://example.org/path/to/repo.git" のようなURLは、プッシュの場合は
"ssh://example.org/path/to/repo.git" に書き換えられますが、プルは引き続き元のURLのままです。

@noindent

@chapheading REMOTES

@samp{<repository>} 引数として、URLの代わりに以下のいずれかの名前を使用できます:

@itemize 

@item
Git構成ファイル(configuration file)内のリモート(remote)として、 @samp{$GIT_DIR/config} または

@item
@samp{$GIT_DIR/remotes} ディレクトリ内のファイル または

@item
@samp{$GIT_DIR/branches} ディレクトリ内のファイル
@end itemize

これらはすべて、gitがデフォルトで使用するrefspecをそれぞれ含んでいるため、コマンドラインからrefspecを省略できます。

@noindent

@heading Named remote in configuration file

あなたは、 git-remote(1) を使うか、または git-config(1) を使うか、または
@samp{$GIT_DIR/config}
ファイルを手動で編集して、これ以前に構成したリモートの名前から選択できます。このリモートのURLは、リポジトリへのアクセスに使用されます。コマンドラインでrefspecを指定しない場合、このリモートのrefspecがデフォルトで使用されます。構成ファイルのエントリは以下のようになります:

@example
        [remote "<name>"]
                url = <url>
                pushurl = <pushurl>
                push = <refspec>
                fetch = <refspec>
@end example


@samp{<pushurl>} はプッシュにのみ使用されます。 これはオプションであり、デフォルトは @samp{<url>} です。

@noindent

@heading Named file in $GIT_DIR/remotes

あなたは、 @samp{$GIT_DIR/remotes}
でファイル名を指定できます。このファイルのURLは、リポジトリへのアクセスに使用されます。コマンドラインでrefspecを指定しない場合、このファイルのrefspecがデフォルトとして使用されます。このファイルの形式は以下のとおりです:

@example
        URL: one of the above URL format
        Push: <refspec>
        Pull: <refspec>
@end example


@samp{Push:} 行は @emph{git push} で使用され、 @samp{Pull:} 行は @emph{git pull} と @emph{git fetch}
で使用されます。追加のブランチマッピングのために、複数の @samp{Push:} および @samp{Pull:} 行を指定できます。

@noindent

@heading Named file in $GIT_DIR/branches

@samp{$GIT_DIR/branches} でファイル名を指定できます。このファイルのURLは、リポジトリへのアクセスに使用されます。
このファイルの形式は以下のとおりです:

@example
        <url>#<head>
@end example


@samp{<url>} は必須です。 @samp{#<head>} はオプションです。

コマンドラインで指定しない場合、操作に応じて、gitは以下のrefspecのいずれかを使用します。 @samp{<branch>} は
@samp{$GIT_DIR/branchs} 内のこのファイルの名前であり、 @samp{<head>`はデフォルトで `master} になります。

git fetch は以下を使用します:

@example
        refs/heads/<head>:refs/heads/<branch>
@end example


git push は以下を使用します:

@example
        HEAD:refs/heads/<head>
@end example


@noindent

@chapheading CONFIGURED REMOTE-TRACKING BRANCHES

You often interact with the same remote repository by regularly and
repeatedly fetching from it.  In order to keep track of the progress of such
a remote repository, @samp{git fetch} allows you to configure
@samp{remote.<repository>.fetch} configuration variables.

Typically such a variable may look like this:

@example
[remote "origin"]
        fetch = +refs/heads/*:refs/remotes/origin/*
@end example


This configuration is used in two ways:

@itemize 

@item
When @samp{git fetch} is run without specifying what branches and/or tags to
fetch on the command line, e.g. @samp{git fetch origin} or @samp{git fetch},
@samp{remote.<repository>.fetch} values are used as the refspecs—they specify
which refs to fetch and which local refs to update.  The example above will
fetch all branches that exist in the @samp{origin} (i.e. any ref that matches the
left-hand side of the value, @samp{refs/heads/*}) and update the corresponding
remote-tracking branches in the @samp{refs/remotes/origin/*} hierarchy.

@item
When @samp{git fetch} is run with explicit branches and/or tags to fetch on the
command line, e.g. @samp{git fetch origin master}, the <refspec>s given on the
command line determine what are to be fetched (e.g. @samp{master} in the example,
which is a short-hand for @samp{master:}, which in turn means "fetch the @emph{master}
branch but I do not explicitly say what remote-tracking branch to update
with it from the command line"), and the example command will fetch @emph{only}
the @emph{master} branch.  The @samp{remote.<repository>.fetch} values determine which
remote-tracking branch, if any, is updated.  When used in this way, the
@samp{remote.<repository>.fetch} values do not have any effect in deciding @emph{what}
gets fetched (i.e. the values are not used as refspecs when the command-line
lists refspecs); they are only used to decide @emph{where} the refs that are
fetched are stored by acting as a mapping.
@end itemize

The latter use of the @samp{remote.<repository>.fetch} values can be overridden
by giving the @samp{--refmap=<refspec>} parameter(s) on the command line.

@noindent

@chapheading PRUNING

Git has a default disposition of keeping data unless it’s explicitly thrown
away; this extends to holding onto local references to branches on remotes
that have themselves deleted those branches.

If left to accumulate, these stale references might make performance worse
on big and busy repos that have a lot of branch churn, and e.g. make the
output of commands like @samp{git branch -a --contains <commit>} needlessly
verbose, as well as impacting anything else that’ll work with the complete
set of known references.

These remote-tracking references can be deleted as a one-off with either of:

@example
# While fetching
$ git fetch --prune <name>

# Only prune, don't fetch
$ git remote prune <name>
@end example


To prune references as part of your normal workflow without needing to
remember to run that, set @samp{fetch.prune} globally, or @samp{remote.<name>.prune}
per-remote in the config. See git-config(1).

Here’s where things get tricky and more specific. The pruning feature
doesn’t actually care about branches, instead it’ll prune local ←→
remote-references as a function of the refspec of the remote (see
@samp{<refspec>} and CONFIGURED REMOTE-TRACKING BRANCHES (@pxref{[CRTB]}) above).

Therefore if the refspec for the remote includes
e.g. @samp{refs/tags/*:refs/tags/*}, or you manually run e.g. @samp{git fetch --prune
<name> "refs/tags/*:refs/tags/*"} it won’t be stale remote tracking branches
that are deleted, but any local tag that doesn’t exist on the remote.

This might not be what you expect, i.e. you want to prune remote @samp{<name>},
but also explicitly fetch tags from it, so when you fetch from it you delete
all your local tags, most of which may not have come from the @samp{<name>}
remote in the first place.

So be careful when using this with a refspec like @samp{refs/tags/*:refs/tags/*},
or any other refspec which might map references from multiple remotes to the
same local namespace.

Since keeping up-to-date with both branches and tags on the remote is a
common use-case the @samp{--prune-tags} option can be supplied along with
@samp{--prune} to prune local tags that don’t exist on the remote, and
force-update those tags that differ. Tag pruning can also be enabled with
@samp{fetch.pruneTags} or @samp{remote.<name>.pruneTags} in the config. See
git-config(1).

The @samp{--prune-tags} option is equivalent to having @samp{refs/tags/*:refs/tags/*}
declared in the refspecs of the remote. This can lead to some seemingly
strange interactions:

@example
# These both fetch tags
$ git fetch --no-tags origin 'refs/tags/*:refs/tags/*'
$ git fetch --no-tags --prune-tags origin
@end example


The reason it doesn’t error out when provided without @samp{--prune} or its
config versions is for flexibility of the configured versions, and to
maintain a 1=1 mapping between what the command line flags do, and what the
configuration versions do.

It’s reasonable to e.g. configure @samp{fetch.pruneTags=true} in @samp{~/.gitconfig}
to have tags pruned whenever @samp{git fetch --prune} is run, without making
every invocation of @samp{git fetch} without @samp{--prune} an error.

Pruning tags with @samp{--prune-tags} also works when fetching a URL instead of a
named remote. These will all prune tags not found on origin:

@example
$ git fetch origin --prune --prune-tags
$ git fetch origin --prune 'refs/tags/*:refs/tags/*'
$ git fetch <url of origin> --prune --prune-tags
$ git fetch <url of origin> --prune 'refs/tags/*:refs/tags/*'
@end example


@noindent

@chapheading OUTPUT

The output of "git fetch" depends on the transport method used; this section
describes the output when fetching over the Git protocol (either locally or
via ssh) and Smart HTTP protocol.

The status of the fetch is output in tabular form, with each line
representing the status of a single ref. Each line is of the form:

@example
 <flag> <summary> <from> -> <to> [<reason>]
@end example


The status of up-to-date refs is shown only if the --verbose option is used.

In compact output mode, specified with configuration variable fetch.output,
if either entire @samp{<from>} or @samp{<to>} is found in the other string, it will be
substituted with @samp{*} in the other string. For example, @samp{master ->
origin/master} becomes @samp{master -> origin/*}.

@table @asis

@item  flag 
A single character indicating the status of the ref:

@table @asis

@item  (space) 
for a successfully fetched fast-forward;

@item  @samp{+} 
for a successful forced update;

@item  @samp{-} 
for a successfully pruned ref;

@item  @samp{t} 
for a successful tag update;

@item  @samp{*} 
for a successfully fetched new ref;

@item  @samp{!} 
for a ref that was rejected or failed to update; and

@item  @samp{=} 
for a ref that was up to date and did not need fetching.
@end table

@item  summary 
For a successfully fetched ref, the summary shows the old and new values of
the ref in a form suitable for using as an argument to @samp{git log} (this is
@samp{<old>..<new>} in most cases, and @samp{<old>...<new>} for forced
non-fast-forward updates).

@item  from 
The name of the remote ref being fetched from, minus its @samp{refs/<type>/}
prefix. In the case of deletion, the name of the remote ref is "(none)".

@item  to 
The name of the local ref being updated, minus its @samp{refs/<type>/} prefix.

@item  reason 
A human-readable explanation. In the case of successfully fetched refs, no
explanation is needed. For a failed ref, the reason for failure is
described.
@end table

@noindent

@chapheading EXAMPLES

@itemize 

@item
Update the remote-tracking branches:

@example
$ git fetch origin
@end example


The above command copies all branches from the remote refs/heads/ namespace
and stores them to the local refs/remotes/origin/ namespace, unless the
branch.<name>.fetch option is used to specify a non-default refspec.

@item
Using refspecs explicitly:

@example
$ git fetch origin +seen:seen maint:tmp
@end example


This updates (or creates, as necessary) branches @samp{seen} and @samp{tmp} in the
local repository by fetching from the branches (respectively)  @samp{seen} and
@samp{maint} from the remote repository.

The @samp{seen} branch will be updated even if it does not fast-forward, because
it is prefixed with a plus sign; @samp{tmp} will not be.

@item
Peek at a remote’s branch, without configuring the remote in your local
repository:

@example
$ git fetch git://git.kernel.org/pub/scm/git/git.git maint
$ git log FETCH_HEAD
@end example


The first command fetches the @samp{maint} branch from the repository at
@samp{git://git.kernel.org/pub/scm/git/git.git} and the second command uses
@samp{FETCH_HEAD} to examine the branch with git-log(1).  The fetched
objects will eventually be removed by git’s built-in housekeeping (see
git-gc(1)).
@end itemize

@noindent

@chapheading SECURITY

フェッチおよびプッシュプロトコルは、共有することを意図していない一方の側が他方のリポジトリからデータを盗むのを防ぐようには設計されていません。悪意のある者から保護する必要のあるプライベートデータがある場合、最善のオプションはそれを別のリポジトリに保存することです。これは、クライアントとサーバーの両方に適用されます。特に、サーバー上の名前空間は、読み取りアクセス制御には効果的ではありません。リポジトリ全体への読み取りアクセスで信頼できるクライアントにのみ、名前空間への読み取りアクセスを許可する必要があります。

既知の攻撃ベクトル(attack vectors)は以下のとおりです:

@enumerate 

@item
被害者は、明示的に共有することを意図していないオブジェクトのIDをアドバタイズする "have"
行を送信しますが、他にもIDを持っている者が居る場合は、転送を最適化するために使用できます。攻撃者はオブジェクトID
Xを選択して盗み、refをXに送信しますが、被害者はすでにXのコンテンツを持っているため、Xのコンテンツを送信する必要はありません。
これで、被害者は攻撃者がXを持っていると信じ、Xのコンテンツを後で攻撃者に送り返します。
(この攻撃は、クライアントがアクセスできる名前空間にXへのrefを作成してフェッチすることにより、クライアントがサーバー上で実行するのが最も簡単です。サーバーがクライアント上で実行する最も可能性の高い方法は、Xをパブリックブランチにマージし、ユーザーがこのブランチで追加の作業を行い、マージに気付かずにサーバーにプッシュバックすることを期待します。)

@item
#1 と同様に、攻撃者は盗むオブジェクトID
Xを選択します。被害者は、攻撃者がすでに持っているオブジェクトYを送信し、攻撃者はYではなくXを持っていると誤って主張するため、被害者はYをXに対するデルタとして送信します。デルタは、攻撃者にYに類似したXの領域を明らかにします。
@end enumerate

@noindent

@chapheading BUGS

Using --recurse-submodules can only fetch new commits in already checked out
submodules right now. When e.g. upstream added a new submodule in the just
fetched commits of the superproject the submodule itself cannot be fetched,
making it impossible to check out that submodule later without having to do
a fetch again. This is expected to be fixed in a future Git version.

@noindent

@chapheading SEE ALSO

git-pull(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-filter-branch,,,Top
@chapheading Name

git-filter-branch — Rewrite branches

@noindent

@chapheading Synopsis

@display
git filter-branch [--setup <command>] [--subdirectory-filter <directory>]
        [--env-filter <command>] [--tree-filter <command>]
        [--index-filter <command>] [--parent-filter <command>]
        [--msg-filter <command>] [--commit-filter <command>]
        [--tag-name-filter <command>] [--prune-empty]
        [--original <namespace>] [-d <directory>] [-f | --force]
        [--state-branch <branch>] [--] [<rev-list options>…]
@end display


@noindent

@chapheading WARNING

@emph{git filter-branch} has a plethora of pitfalls that can produce non-obvious
manglings of the intended history rewrite (and can leave you with little
time to investigate such problems since it has such abysmal performance).
These safety and performance issues cannot be backward compatibly fixed and
as such, its use is not recommended.  Please use an alternative history
filtering tool such as @uref{https://github.com/newren/git-filter-repo/,git filter-repo}.  If you still need to use @emph{git filter-branch}, please
carefully read @ref{SAFETY} (and @ref{PERFORMANCE}) to learn about the land
mines of filter-branch, and then vigilantly avoid as many of the hazards
listed there as reasonably possible.

@noindent

@chapheading DESCRIPTION

Lets you rewrite Git revision history by rewriting the branches mentioned in
the <rev-list options>, applying custom filters on each revision.  Those
filters can modify each tree (e.g. removing a file or running a perl rewrite
on all files) or information about each commit.  Otherwise, all information
(including original commit times or merge information) will be preserved.

The command will only rewrite the @emph{positive} refs mentioned in the command
line (e.g. if you pass @emph{a..b}, only @emph{b} will be rewritten).  If you specify
no filters, the commits will be recommitted without any changes, which would
normally have no effect.  Nevertheless, this may be useful in the future for
compensating for some Git bugs or such, therefore such a usage is permitted.

@strong{NOTE}: This command honors @samp{.git/info/grafts} file and refs in
the @samp{refs/replace/} namespace.
If you have any grafts or replacement refs defined, running this command
will make them permanent.

@strong{WARNING}! The rewritten history will have different object names for all
the objects and will not converge with the original branch.  You will not
be able to easily push and distribute the rewritten branch on top of the
original branch.  Please do not use this command if you do not know the
full implications, and avoid using it anyway, if a simple single commit
would suffice to fix your problem.  (See the "RECOVERING FROM UPSTREAM
REBASE" section in git-rebase(1) for further information about
rewriting published history.)

Always verify that the rewritten version is correct: The original refs, if
different from the rewritten ones, will be stored in the namespace
@emph{refs/original/}.

Note that since this operation is very I/O expensive, it might be a good
idea to redirect the temporary directory off-disk with the @samp{-d} option,
e.g. on tmpfs.  Reportedly the speedup is very noticeable.

@noindent

@heading Filters

The filters are applied in the order as listed below.  The <command>
argument is always evaluated in the shell context using the @emph{eval} command
(with the notable exception of the commit filter, for technical reasons).
Prior to that, the @samp{$GIT_COMMIT} environment variable will be set to contain
the id of the commit being rewritten.  Also, GIT_AUTHOR_NAME,
GIT_AUTHOR_EMAIL, GIT_AUTHOR_DATE, GIT_COMMITTER_NAME, GIT_COMMITTER_EMAIL,
and GIT_COMMITTER_DATE are taken from the current commit and exported to the
environment, in order to affect the author and committer identities of the
replacement commit created by git-commit-tree(1) after the filters
have run.

If any evaluation of <command> returns a non-zero exit status, the whole
operation will be aborted.

A @emph{map} function is available that takes an "original sha1 id" argument and
outputs a "rewritten sha1 id" if the commit has been already rewritten, and
"original sha1 id" otherwise; the @emph{map} function can return several ids on
separate lines if your commit filter emitted multiple commits.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--setup <command>} 
This is not a real filter executed for each commit but a one time setup just
before the loop. Therefore no commit-specific variables are defined yet.
Functions or variables defined here can be used or modified in the following
filter steps except the commit filter, for technical reasons.

@item  @samp{--subdirectory-filter <directory>} 
Only look at the history which touches the given subdirectory.  The result
will contain that directory (and only that) as its project root. Implies
@ref{Remap to ancestor}.

@item  @samp{--env-filter <command>} 
This filter may be used if you only need to modify the environment in which
the commit will be performed.  Specifically, you might want to rewrite the
author/committer name/email/time environment variables (see
git-commit-tree(1) for details).

@item  @samp{--tree-filter <command>} 
This is the filter for rewriting the tree and its contents.  The argument is
evaluated in shell with the working directory set to the root of the checked
out tree.  The new tree is then used as-is (new files are auto-added,
disappeared files are auto-removed - neither .gitignore files nor any other
ignore rules @strong{HAVE ANY EFFECT}!).

@item  @samp{--index-filter <command>} 
This is the filter for rewriting the index.  It is similar to the tree
filter but does not check out the tree, which makes it much faster.
Frequently used with @samp{git rm --cached --ignore-unmatch ...}, see EXAMPLES
below.  For hairy cases, see git-update-index(1).

@item  @samp{--parent-filter <command>} 
This is the filter for rewriting the commit’s parent list.  It will receive
the parent string on stdin and shall output the new parent string on
stdout.  The parent string is in the format described in
git-commit-tree(1): empty for the initial commit, "-p parent" for a
normal commit and "-p parent1 -p parent2 -p parent3 …" for a merge commit.

@item  @samp{--msg-filter <command>} 
This is the filter for rewriting the commit messages.  The argument is
evaluated in the shell with the original commit message on standard input;
its standard output is used as the new commit message.

@item  @samp{--commit-filter <command>} 
This is the filter for performing the commit.  If this filter is specified,
it will be called instead of the @emph{git commit-tree} command, with arguments
of the form "<TREE_ID> [(-p <PARENT_COMMIT_ID>)…]" and the log message on
stdin.  The commit id is expected on stdout.

As a special extension, the commit filter may emit multiple commit ids; in
that case, the rewritten children of the original commit will have all of
them as parents.

You can use the @emph{map} convenience function in this filter, and other
convenience functions, too.  For example, calling @emph{skip_commit "$@@"} will
leave out the current commit (but not its changes! If you want that, use
@emph{git rebase} instead).

You can also use the @samp{git_commit_non_empty_tree "$@@"} instead of @samp{git
commit-tree "$@@"} if you don’t wish to keep commits with a single parent and
that makes no change to the tree.

@item  @samp{--tag-name-filter <command>} 
This is the filter for rewriting tag names. When passed, it will be called
for every tag ref that points to a rewritten object (or to a tag object
which points to a rewritten object).  The original tag name is passed via
standard input, and the new tag name is expected on standard output.

The original tags are not deleted, but can be overwritten; use
"--tag-name-filter cat" to simply update the tags.  In this case, be very
careful and make sure you have the old tags backed up in case the conversion
has run afoul.

Nearly proper rewriting of tag objects is supported. If the tag has a
message attached, a new tag object will be created with the same message,
author, and timestamp. If the tag has a signature attached, the signature
will be stripped. It is by definition impossible to preserve signatures. The
reason this is "nearly" proper, is because ideally if the tag did not change
(points to the same object, has the same name, etc.)  it should retain any
signature. That is not the case, signatures will always be removed, buyer
beware. There is also no support for changing the author or timestamp (or
the tag message for that matter). Tags which point to other tags will be
rewritten to point to the underlying commit.

@item  @samp{--prune-empty} 
Some filters will generate empty commits that leave the tree untouched.
This option instructs git-filter-branch to remove such commits if they have
exactly one or zero non-pruned parents; merge commits will therefore remain
intact.  This option cannot be used together with @samp{--commit-filter}, though
the same effect can be achieved by using the provided
@samp{git_commit_non_empty_tree} function in a commit filter.

@item  @samp{--original <namespace>} 
Use this option to set the namespace where the original commits will be
stored. The default value is @emph{refs/original}.

@item  @samp{-d <directory>} 
Use this option to set the path to the temporary directory used for
rewriting.  When applying a tree filter, the command needs to temporarily
check out the tree to some directory, which may consume considerable space
in case of large projects.  By default it does this in the @samp{.git-rewrite/}
directory but you can override that choice by this parameter.

@item  @samp{-f} 
@itemx  @samp{--force} 
@emph{git filter-branch} refuses to start with an existing temporary directory or
when there are already refs starting with @emph{refs/original/}, unless forced.

@item  @samp{--state-branch <branch>} 
This option will cause the mapping from old to new objects to be loaded from
named branch upon startup and saved as a new commit to that branch upon
exit, enabling incremental of large trees. If @emph{<branch>} does not exist it
will be created.

@item  <rev-list options>… 
Arguments for @emph{git rev-list}.  All positive refs included by these options
are rewritten.  You may also specify options such as @samp{--all}, but you must
use @samp{--} to separate them from the @emph{git filter-branch} options. Implies
@ref{Remap to ancestor}.
@end table

@noindent

@heading Remap to ancestor

By using git-rev-list(1) arguments, e.g., path limiters, you can
limit the set of revisions which get rewritten. However, positive refs on
the command line are distinguished: we don’t let them be excluded by such
limiters. For this purpose, they are instead rewritten to point at the
nearest ancestor that was not excluded.

@noindent

@chapheading EXIT STATUS

On success, the exit status is @samp{0}.  If the filter can’t find any commits to
rewrite, the exit status is @samp{2}.  On any other error, the exit status may be
any other non-zero value.

@noindent

@chapheading EXAMPLES

Suppose you want to remove a file (containing confidential information or
copyright violation) from all commits:

@example
git filter-branch --tree-filter 'rm filename' HEAD
@end example


However, if the file is absent from the tree of some commit, a simple @samp{rm
filename} will fail for that tree and commit.  Thus you may instead want to
use @samp{rm -f filename} as the script.

Using @samp{--index-filter} with @emph{git rm} yields a significantly faster version.
Like with using @samp{rm filename}, @samp{git rm --cached filename} will fail if the
file is absent from the tree of a commit.  If you want to "completely
forget" a file, it does not matter when it entered history, so we also add
@samp{--ignore-unmatch}:

@example
git filter-branch --index-filter 'git rm --cached --ignore-unmatch filename' HEAD
@end example


Now, you will get the rewritten history saved in HEAD.

To rewrite the repository to look as if @samp{foodir/} had been its project root,
and discard all other history:

@example
git filter-branch --subdirectory-filter foodir -- --all
@end example


Thus you can, e.g., turn a library subdirectory into a repository of its
own.  Note the @samp{--} that separates @emph{filter-branch} options from revision
options, and the @samp{--all} to rewrite all branches and tags.

To set a commit (which typically is at the tip of another history) to be the
parent of the current initial commit, in order to paste the other history
behind the current history:

@example
git filter-branch --parent-filter 'sed "s/^\$/-p <graft-id>/"' HEAD
@end example


(if the parent string is empty - which happens when we are dealing with the
initial commit - add graftcommit as a parent).  Note that this assumes
history with a single root (that is, no merge without common ancestors
happened).  If this is not the case, use:

@example
git filter-branch --parent-filter \
        'test $GIT_COMMIT = <commit-id> && echo "-p <graft-id>" || cat' HEAD
@end example


or even simpler:

@example
git replace --graft $commit-id $graft-id
git filter-branch $graft-id..HEAD
@end example


To remove commits authored by "Darl McBribe" from the history:

@example
git filter-branch --commit-filter '
        if [ "$GIT_AUTHOR_NAME" = "Darl McBribe" ];
        then
                skip_commit "$@@";
        else
                git commit-tree "$@@";
        fi' HEAD
@end example


The function @emph{skip_commit} is defined as follows:

@example
skip_commit()
@{
        shift;
        while [ -n "$1" ];
        do
                shift;
                map "$1";
                shift;
        done;
@}
@end example


The shift magic first throws away the tree id and then the -p parameters.
Note that this handles merges properly! In case Darl committed a merge
between P1 and P2, it will be propagated properly and all children of the
merge will become merge commits with P1,P2 as their parents instead of the
merge commit.

@strong{NOTE} the changes introduced by the commits, and which are not reverted
by subsequent commits, will still be in the rewritten branch. If you want
to throw out @emph{changes} together with the commits, you should use the
interactive mode of @emph{git rebase}.

You can rewrite the commit log messages using @samp{--msg-filter}.  For example,
@emph{git svn-id} strings in a repository created by @emph{git svn} can be removed
this way:

@example
git filter-branch --msg-filter '
        sed -e "/^git-svn-id:/d"
'
@end example


If you need to add @emph{Acked-by} lines to, say, the last 10 commits (none of
which is a merge), use this command:

@example
git filter-branch --msg-filter '
        cat &&
        echo "Acked-by: Bugs Bunny <bunny@@bugzilla.org>"
' HEAD~10..HEAD
@end example


The @samp{--env-filter} option can be used to modify committer and/or author
identity.  For example, if you found out that your commits have the wrong
identity due to a misconfigured user.email, you can make a correction,
before publishing the project, like this:

@example
git filter-branch --env-filter '
        if test "$GIT_AUTHOR_EMAIL" = "root@@localhost"
        then
                GIT_AUTHOR_EMAIL=john@@example.com
        fi
        if test "$GIT_COMMITTER_EMAIL" = "root@@localhost"
        then
                GIT_COMMITTER_EMAIL=john@@example.com
        fi
' -- --all
@end example


To restrict rewriting to only part of the history, specify a revision range
in addition to the new branch name.  The new branch name will point to the
top-most revision that a @emph{git rev-list} of this range will print.

Consider this history:

@example
     D--E--F--G--H
    /     /
A--B-----C
@end example


To rewrite only commits D,E,F,G,H, but leave A, B and C alone, use:

@example
git filter-branch ... C..H
@end example


To rewrite commits E,F,G,H, use one of these:

@example
git filter-branch ... C..H --not D
git filter-branch ... D..H --not C
@end example


To move the whole tree into a subdirectory, or remove it from there:

@example
git filter-branch --index-filter \
        'git ls-files -s | sed "s-\t\"*-&newsubdir/-" |
                GIT_INDEX_FILE=$GIT_INDEX_FILE.new \
                        git update-index --index-info &&
         mv "$GIT_INDEX_FILE.new" "$GIT_INDEX_FILE"' HEAD
@end example


@noindent

@chapheading CHECKLIST FOR SHRINKING A REPOSITORY

git-filter-branch can be used to get rid of a subset of files, usually with
some combination of @samp{--index-filter} and @samp{--subdirectory-filter}.  People
expect the resulting repository to be smaller than the original, but you
need a few more steps to actually make it smaller, because Git tries hard
not to lose your objects until you tell it to.  First make sure that:

@itemize 

@item
You really removed all variants of a filename, if a blob was moved over its
lifetime.  @samp{git log --name-only --follow --all -- filename} can help you
find renames.

@item
You really filtered all refs: use @samp{--tag-name-filter cat -- --all} when
calling git-filter-branch.
@end itemize

Then there are two ways to get a smaller repository.  A safer way is to
clone, that keeps your original intact.

@itemize 

@item
Clone it with @samp{git clone file:///path/to/repo}.  The clone will not have the
removed objects.  See git-clone(1).  (Note that cloning with a plain
path just hardlinks everything!)
@end itemize

If you really don’t want to clone it, for whatever reasons, check the
following points instead (in this order).  This is a very destructive
approach, so @strong{make a backup} or go back to cloning it.  You have been
warned.

@itemize 

@item
Remove the original refs backed up by git-filter-branch: say @samp{git
for-each-ref --format="%(refname)" refs/original/ | xargs -n 1 git
update-ref -d}.

@item
Expire all reflogs with @samp{git reflog expire --expire=now --all}.

@item
Garbage collect all unreferenced objects with @samp{git gc --prune=now} (or if
your git-gc is not new enough to support arguments to @samp{--prune}, use @samp{git
repack -ad; git prune} instead).
@end itemize

@noindent

@chapheading PERFORMANCE

The performance of git-filter-branch is glacially slow; its design makes it
impossible for a backward-compatible implementation to ever be fast:

@itemize 

@item
In editing files, git-filter-branch by design checks out each and every
commit as it existed in the original repo.  If your repo has @samp{10^5} files
and @samp{10^5} commits, but each commit only modifies five files, then
git-filter-branch will make you do @samp{10^10} modifications, despite only
having (at most) @samp{5*10^5} unique blobs.

@item
If you try and cheat and try to make git-filter-branch only work on files
modified in a commit, then two things happen

@itemize 

@item
you run into problems with deletions whenever the user is simply trying to
rename files (because attempting to delete files that don’t exist looks like
a no-op; it takes some chicanery to remap deletes across file renames when
the renames happen via arbitrary user-provided shell)

@item
even if you succeed at the map-deletes-for-renames chicanery, you still
technically violate backward compatibility because users are allowed to
filter files in ways that depend upon topology of commits instead of
filtering solely based on file contents or names (though this has not been
observed in the wild).
@end itemize

@item
Even if you don’t need to edit files but only want to e.g. rename or remove
some and thus can avoid checking out each file (i.e. you can use
--index-filter), you still are passing shell snippets for your filters.
This means that for every commit, you have to have a prepared git repo where
those filters can be run.  That’s a significant setup.

@item
Further, several additional files are created or updated per commit by
git-filter-branch.  Some of these are for supporting the convenience
functions provided by git-filter-branch (such as map()), while others are
for keeping track of internal state (but could have also been accessed by
user filters; one of git-filter-branch’s regression tests does so).  This
essentially amounts to using the filesystem as an IPC mechanism between
git-filter-branch and the user-provided filters.  Disks tend to be a slow
IPC mechanism, and writing these files also effectively represents a forced
synchronization point between separate processes that we hit with every
commit.

@item
The user-provided shell commands will likely involve a pipeline of commands,
resulting in the creation of many processes per commit.  Creating and
running another process takes a widely varying amount of time between
operating systems, but on any platform it is very slow relative to invoking
a function.

@item
git-filter-branch itself is written in shell, which is kind of slow.  This
is the one performance issue that could be backward-compatibly fixed, but
compared to the above problems that are intrinsic to the design of
git-filter-branch, the language of the tool itself is a relatively minor
issue.

@itemize 

@item
Side note: Unfortunately, people tend to fixate on the written-in-shell
aspect and periodically ask if git-filter-branch could be rewritten in
another language to fix the performance issues.  Not only does that ignore
the bigger intrinsic problems with the design, it’d help less than you’d
expect: if git-filter-branch itself were not shell, then the convenience
functions (map(), skip_commit(), etc) and the @samp{--setup} argument could no
longer be executed once at the beginning of the program but would instead
need to be prepended to every user filter (and thus re-executed with every
commit).
@end itemize
@end itemize

The @uref{https://github.com/newren/git-filter-repo/,git filter-repo} tool is an
alternative to git-filter-branch which does not suffer from these
performance problems or the safety problems (mentioned below). For those
with existing tooling which relies upon git-filter-branch, @emph{git filter-repo}
also provides
@uref{https://github.com/newren/git-filter-repo/blob/master/contrib/filter-repo-demos/filter-lamely,filter-lamely},
a drop-in git-filter-branch replacement (with a few caveats).  While
filter-lamely suffers from all the same safety issues as git-filter-branch,
it at least ameliorates the performance issues a little.

@noindent

@chapheading SAFETY

git-filter-branch is riddled with gotchas resulting in various ways to
easily corrupt repos or end up with a mess worse than what you started with:

@itemize 

@item
Someone can have a set of "working and tested filters" which they document
or provide to a coworker, who then runs them on a different OS where the
same commands are not working/tested (some examples in the git-filter-branch
manpage are also affected by this).  BSD vs. GNU userland differences can
really bite.  If lucky, error messages are spewed.  But just as likely, the
commands either don’t do the filtering requested, or silently corrupt by
making some unwanted change.  The unwanted change may only affect a few
commits, so it’s not necessarily obvious either.  (The fact that problems
won’t necessarily be obvious means they are likely to go unnoticed until the
rewritten history is in use for quite a while, at which point it’s really
hard to justify another flag-day for another rewrite.)

@item
Filenames with spaces are often mishandled by shell snippets since they
cause problems for shell pipelines.  Not everyone is familiar with find
-print0, xargs -0, git-ls-files -z, etc.  Even people who are familiar with
these may assume such flags are not relevant because someone else renamed
any such files in their repo back before the person doing the filtering
joined the project.  And often, even those familiar with handling arguments
with spaces may not do so just because they aren’t in the mindset of
thinking about everything that could possibly go wrong.

@item
Non-ascii filenames can be silently removed despite being in a desired
directory.  Keeping only wanted paths is often done using pipelines like
@samp{git ls-files | grep -v ^WANTED_DIR/ | xargs git rm}.  ls-files will only
quote filenames if needed, so folks may not notice that one of the files
didn’t match the regex (at least not until it’s much too late).  Yes,
someone who knows about core.quotePath can avoid this (unless they have
other special characters like \t, \n, or "), and people who use ls-files -z
with something other than grep can avoid this, but that doesn’t mean they
will.

@item
Similarly, when moving files around, one can find that filenames with
non-ascii or special characters end up in a different directory, one that
includes a double quote character.  (This is technically the same issue as
above with quoting, but perhaps an interesting different way that it can and
has manifested as a problem.)

@item
It’s far too easy to accidentally mix up old and new history.  It’s still
possible with any tool, but git-filter-branch almost invites it.  If lucky,
the only downside is users getting frustrated that they don’t know how to
shrink their repo and remove the old stuff.  If unlucky, they merge old and
new history and end up with multiple "copies" of each commit, some of which
have unwanted or sensitive files and others which don’t.  This comes about
in multiple different ways:

@itemize 

@item
the default to only doing a partial history rewrite (@emph{--all} is not the
default and few examples show it)

@item
the fact that there’s no automatic post-run cleanup

@item
the fact that --tag-name-filter (when used to rename tags) doesn’t remove
the old tags but just adds new ones with the new name

@item
the fact that little educational information is provided to inform users of
the ramifications of a rewrite and how to avoid mixing old and new history.
For example, this man page discusses how users need to understand that they
need to rebase their changes for all their branches on top of new history
(or delete and reclone), but that’s only one of multiple concerns to
consider.  See the "DISCUSSION" section of the git filter-repo manual page
for more details.
@end itemize

@item
Annotated tags can be accidentally converted to lightweight tags, due to
either of two issues:

@itemize 

@item
Someone can do a history rewrite, realize they messed up, restore from the
backups in refs/original/, and then redo their git-filter-branch command.
(The backup in refs/original/ is not a real backup; it dereferences tags
first.)

@item
Running git-filter-branch with either --tags or --all in your <rev-list
options>.  In order to retain annotated tags as annotated, you must use
--tag-name-filter (and must not have restored from refs/original/ in a
previously botched rewrite).
@end itemize

@item
Any commit messages that specify an encoding will become corrupted by the
rewrite; git-filter-branch ignores the encoding, takes the original bytes,
and feeds it to commit-tree without telling it the proper encoding.  (This
happens whether or not --msg-filter is used.)

@item
Commit messages (even if they are all UTF-8) by default become corrupted due
to not being updated — any references to other commit hashes in commit
messages will now refer to no-longer-extant commits.

@item
There are no facilities for helping users find what unwanted crud they
should delete, which means they are much more likely to have incomplete or
partial cleanups that sometimes result in confusion and people wasting time
trying to understand.  (For example, folks tend to just look for big files
to delete instead of big directories or extensions, and once they do so,
then sometime later folks using the new repository who are going through
history will notice a build artifact directory that has some files but not
others, or a cache of dependencies (node_modules or similar) which couldn’t
have ever been functional since it’s missing some files.)

@item
If --prune-empty isn’t specified, then the filtering process can create
hoards of confusing empty commits

@item
If --prune-empty is specified, then intentionally placed empty commits from
before the filtering operation are also pruned instead of just pruning
commits that became empty due to filtering rules.

@item
If --prune-empty is specified, sometimes empty commits are missed and left
around anyway (a somewhat rare bug, but it happens…)

@item
A minor issue, but users who have a goal to update all names and emails in a
repository may be led to --env-filter which will only update authors and
committers, missing taggers.

@item
If the user provides a --tag-name-filter that maps multiple tags to the same
name, no warning or error is provided; git-filter-branch simply overwrites
each tag in some undocumented pre-defined order resulting in only one tag at
the end.  (A git-filter-branch regression test requires this surprising
behavior.)
@end itemize

Also, the poor performance of git-filter-branch often leads to safety
issues:

@itemize 

@item
Coming up with the correct shell snippet to do the filtering you want is
sometimes difficult unless you’re just doing a trivial modification such as
deleting a couple files.  Unfortunately, people often learn if the snippet
is right or wrong by trying it out, but the rightness or wrongness can vary
depending on special circumstances (spaces in filenames, non-ascii
filenames, funny author names or emails, invalid timezones, presence of
grafts or replace objects, etc.), meaning they may have to wait a long time,
hit an error, then restart.  The performance of git-filter-branch is so bad
that this cycle is painful, reducing the time available to carefully
re-check (to say nothing about what it does to the patience of the person
doing the rewrite even if they do technically have more time available).
This problem is extra compounded because errors from broken filters may not
be shown for a long time and/or get lost in a sea of output.  Even worse,
broken filters often just result in silent incorrect rewrites.

@item
To top it all off, even when users finally find working commands, they
naturally want to share them.  But they may be unaware that their repo
didn’t have some special cases that someone else’s does.  So, when someone
else with a different repository runs the same commands, they get hit by the
problems above.  Or, the user just runs commands that really were vetted for
special cases, but they run it on a different OS where it doesn’t work, as
noted above.
@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-fmt-merge-msg,,,Top
@chapheading Name

git-fmt-merge-msg — git-fmt-merge-msg-マージコミットメッセージを生成します

@noindent

@chapheading Synopsis

@display
git fmt-merge-msg [-m <message>] [--log[=<n>] | --no-log]
git fmt-merge-msg [-m <message>] [--log[=<n>] | --no-log] -F <file>
@end display


@noindent

@chapheading DESCRIPTION

標準入力からマージされたオブジェクトのリストを取得し、マージコミットに使用される適切なコミットメッセージを生成します。通常は、 @emph{git merge}
の @emph{<merge-message>} 引数として渡されます。

このコマンドは主に、 @emph{git merge} を自動的に呼び出すスクリプトによる内部使用を目的としています。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--log[=<n>]} 
ブランチ名に加えて、マージされている実際のコミットからの1行説明をログメッセージに入力します。各マージ親からの最大で <n>
のコミットが使用されます(<n> が省略されている場合は20)。これは、 @samp{merge.log} 構成変数をオーバーライドします。

@item  @samp{--no-log} 
マージされる実際のコミットからの1行説明をリストしません。

@item  @samp{--[no-]summary} 
@samp{--log} や @samp{--no-log} の同義語。これは非推奨であり、将来削除される予定です。

@item  @samp{-m <message>} 
@itemx  @samp{--message <message>} 
ログメッセージの最初の行に、ブランチ名の代わりに <message> を使用します。 @samp{--log} で使用します。

@item  @samp{-F <file>} 
@itemx  @samp{--file <file>} 
標準入力の代わりに <file> からマージされたオブジェクトのリストを取得します。
@end table

@noindent

@chapheading CONFIGURATION

@table @asis

@item  merge.branchdesc 
ブランチ名に加えて、それらに関連付けられたブランチの説明テキストをログメッセージに入力します。デフォルトはfalseです。

@item  merge.log 
ブランチ名に加えて、マージされる実際のコミットからの最大「指定の数」の親コミットの1行説明をログメッセージに入力します。デフォルトはfalseで、trueは20の同義語です。

@item  merge.suppressDest 
統合ブランチの名前に一致するグロブをこの複数値の構成変数(multi-valued configuration
variable)に追加することにより、これらの統合ブランチへのマージに対して計算されるデフォルトのマージメッセージは、タイトルから「into
<branch name>」を省略します。

空の値を持つ要素を使用して、以前の構成エントリから蓄積されたグロブのリストをクリアできます。 @samp{merge.suppressDest}
変数が定義されていない場合、下位互換性のためにデフォルト値の @samp{master} が使用されます。

@item  merge.summary 
@samp{merge.log} の同義語。これは非推奨であり、将来削除される予定です。
@end table

@noindent

@chapheading EXAMPLES

@example
$ git fetch origin master
$ git fmt-merge-msg --log <$GIT_DIR/FETCH_HEAD
@end example


「origin」リモートからの「master」ブランチのマージを説明するログメッセージを出力します。

@noindent

@chapheading SEE ALSO

git-merge(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-for-each-ref,,,Top
@chapheading Name

git-for-each-ref — Output information on each ref

@noindent

@chapheading Synopsis

@display
git for-each-ref [--count=<count>] [--shell|--perl|--python|--tcl]
                   [(--sort=<key>)…] [--format=<format>] [<pattern>…]
                   [--points-at=<object>]
                   [--merged[=<object>]] [--no-merged[=<object>]]
                   [--contains[=<object>]] [--no-contains[=<object>]]
@end display


@noindent

@chapheading DESCRIPTION

Iterate over all refs that match @samp{<pattern>} and show them according to the
given @samp{<format>}, after sorting them according to the given set of @samp{<key>}.
If @samp{<count>} is given, stop after showing that many refs.  The interpolated
values in @samp{<format>} can optionally be quoted as string literals in the
specified host language allowing their direct evaluation in that language.

@noindent

@chapheading OPTIONS

@table @asis

@item  <pattern>… 
If one or more patterns are given, only refs are shown that match against at
least one pattern, either using fnmatch(3) or literally, in the latter case
matching completely or from the beginning up to a slash.

@item  @samp{--count=<count>} 
By default the command shows all refs that match @samp{<pattern>}.  This option
makes it stop after showing that many refs.

@item  @samp{--sort=<key>} 
A field name to sort on.  Prefix @samp{-} to sort in descending order of the
value.  When unspecified, @samp{refname} is used.  You may use the --sort=<key>
option multiple times, in which case the last key becomes the primary key.

@item  @samp{--format=<format>} 
A string that interpolates @samp{%(fieldname)} from a ref being shown and the
object it points at.  If @samp{fieldname} is prefixed with an asterisk (@samp{*}) and
the ref points at a tag object, use the value for the field in the object
which the tag object refers to (instead of the field in the tag object).
When unspecified, @samp{<format>} defaults to @samp{%(objectname) SPC %(objecttype)
TAB %(refname)}.  It also interpolates @samp{%%} to @samp{%}, and @samp{%xx} where @samp{xx} are
hex digits interpolates to character with hex code @samp{xx}; for example @samp{%00}
interpolates to @samp{\0} (NUL), @samp{%09} to @samp{\t} (TAB) and @samp{%0a} to @samp{\n} (LF).

@item  @samp{--color[=<when>]} 
Respect any colors specified in the @samp{--format} option. The @samp{<when>} field
must be one of @samp{always}, @samp{never}, or @samp{auto} (if @samp{<when>} is absent, behave
as if @samp{always} was given).

@item  @samp{--shell} 
@itemx  @samp{--perl} 
@itemx  @samp{--python} 
@itemx  @samp{--tcl} 
If given, strings that substitute @samp{%(fieldname)} placeholders are quoted as
string literals suitable for the specified host language.  This is meant to
produce a scriptlet that can directly be `eval`ed.

@item  @samp{--points-at=<object>} 
Only list refs which points at the given object.

@item  @samp{--merged[=<object>]} 
Only list refs whose tips are reachable from the specified commit (HEAD if
not specified).

@item  @samp{--no-merged[=<object>]} 
Only list refs whose tips are not reachable from the specified commit (HEAD
if not specified).

@item  @samp{--contains[=<object>]} 
Only list refs which contain the specified commit (HEAD if not specified).

@item  @samp{--no-contains[=<object>]} 
Only list refs which don’t contain the specified commit (HEAD if not
specified).

@item  @samp{--ignore-case} 
Sorting and filtering refs are case insensitive.
@end table

@noindent

@chapheading FIELD NAMES

Various values from structured fields in referenced objects can be used to
interpolate into the resulting output, or as sort keys.

For all objects, the following names can be used:

@table @asis

@item  refname 
The name of the ref (the part after $GIT_DIR/).  For a non-ambiguous short
name of the ref append @samp{:short}.  The option core.warnAmbiguousRefs is used
to select the strict abbreviation mode. If @samp{lstrip=<N>} (@samp{rstrip=<N>}) is
appended, strips @samp{<N>} slash-separated path components from the front (back)
of the refname (e.g. @samp{%(refname:lstrip=2)} turns @samp{refs/tags/foo} into @samp{foo}
and @samp{%(refname:rstrip=2)} turns @samp{refs/tags/foo} into @samp{refs}).  If @samp{<N>} is a
negative number, strip as many path components as necessary from the
specified end to leave @samp{-<N>} path components (e.g. @samp{%(refname:lstrip=-2)}
turns @samp{refs/tags/foo} into @samp{tags/foo} and @samp{%(refname:rstrip=-1)} turns
@samp{refs/tags/foo} into @samp{refs}). When the ref does not have enough components,
the result becomes an empty string if stripping with positive <N>, or it
becomes the full refname if stripping with negative <N>.  Neither is an
error.

@samp{strip} can be used as a synonym to @samp{lstrip}.

@item  objecttype 
The type of the object (@samp{blob}, @samp{tree}, @samp{commit}, @samp{tag}).

@item  objectsize 
The size of the object (the same as @emph{git cat-file -s} reports).  Append
@samp{:disk} to get the size, in bytes, that the object takes up on disk. See the
note about on-disk sizes in the @samp{CAVEATS} section below.

@item  objectname 
The object name (aka SHA-1).  For a non-ambiguous abbreviation of the object
name append @samp{:short}.  For an abbreviation of the object name with desired
length append @samp{:short=<length>}, where the minimum length is
MINIMUM_ABBREV. The length may be exceeded to ensure unique object names.

@item  deltabase 
This expands to the object name of the delta base for the given object, if
it is stored as a delta.  Otherwise it expands to the null object name (all
zeroes).

@item  upstream 
The name of a local ref which can be considered “upstream” from the
displayed ref. Respects @samp{:short}, @samp{:lstrip} and @samp{:rstrip} in the same way as
@samp{refname} above.  Additionally respects @samp{:track} to show "[ahead N, behind
M]" and @samp{:trackshort} to show the terse version: ">" (ahead), "<" (behind),
"<>" (ahead and behind), or "=" (in sync). @samp{:track} also prints "[gone]"
whenever unknown upstream ref is encountered. Append @samp{:track,nobracket} to
show tracking information without brackets (i.e "ahead N, behind M").

For any remote-tracking branch @samp{%(upstream)}, @samp{%(upstream:remotename)} and
@samp{%(upstream:remoteref)} refer to the name of the remote and the name of the
tracked remote ref, respectively. In other words, the remote-tracking branch
can be updated explicitly and individually by using the refspec
@samp{%(upstream:remoteref):%(upstream)} to fetch from @samp{%(upstream:remotename)}.

Has no effect if the ref does not have tracking information associated with
it.  All the options apart from @samp{nobracket} are mutually exclusive, but if
used together the last option is selected.

@item  push 
The name of a local ref which represents the @samp{@@@{push@}} location for the
displayed ref. Respects @samp{:short}, @samp{:lstrip}, @samp{:rstrip}, @samp{:track},
@samp{:trackshort}, @samp{:remotename}, and @samp{:remoteref} options as @samp{upstream}
does. Produces an empty string if no @samp{@@@{push@}} ref is configured.

@item  HEAD 
@emph{*} if HEAD matches current ref (the checked out branch), ' ' otherwise.

@item  color 
Change output color. Followed by @samp{:<colorname>}, where color names are
described under Values in the "CONFIGURATION FILE" section of
git-config(1).  For example, @samp{%(color:bold red)}.

@item  align 
Left-, middle-, or right-align the content between %(align:…) and
%(end). The "align:" is followed by @samp{width=<width>} and
@samp{position=<position>} in any order separated by a comma, where the
@samp{<position>} is either left, right or middle, default being left and
@samp{<width>} is the total length of the content with alignment. For brevity,
the "width=" and/or "position=" prefixes may be omitted, and bare <width>
and <position> used instead.  For instance,
@samp{%(align:<width>,<position>)}. If the contents length is more than the width
then no alignment is performed. If used with @samp{--quote} everything in between
%(align:…) and %(end) is quoted, but if nested then only the topmost level
performs quoting.

@item  if 
Used as %(if)…%(then)…%(end) or %(if)…%(then)…%(else)…%(end).  If
there is an atom with value or string literal after the %(if) then
everything after the %(then) is printed, else if the %(else) atom is used,
then everything after %(else) is printed. We ignore space when evaluating
the string before %(then), this is useful when we use the %(HEAD) atom which
prints either "*" or " " and we want to apply the @emph{if} condition only on the
@emph{HEAD} ref.  Append ":equals=<string>" or ":notequals=<string>" to compare
the value between the %(if:…) and %(then) atoms with the given string.

@item  symref 
The ref which the given symbolic ref refers to. If not a symbolic ref,
nothing is printed. Respects the @samp{:short}, @samp{:lstrip} and @samp{:rstrip} options
in the same way as @samp{refname} above.

@item  worktreepath 
The absolute path to the worktree in which the ref is checked out, if it is
checked out in any linked worktree. Empty string otherwise.
@end table

In addition to the above, for commit and tag objects, the header field names
(@samp{tree}, @samp{parent}, @samp{object}, @samp{type}, and @samp{tag}) can be used to specify the
value in the header field.  Fields @samp{tree} and @samp{parent} can also be used with
modifier @samp{:short} and @samp{:short=<length>} just like @samp{objectname}.

For commit and tag objects, the special @samp{creatordate} and @samp{creator} fields
will correspond to the appropriate date or name-email-date tuple from the
@samp{committer} or @samp{tagger} fields depending on the object type.  These are
intended for working on a mix of annotated and lightweight tags.

Fields that have name-email-date tuple as its value (@samp{author}, @samp{committer},
and @samp{tagger}) can be suffixed with @samp{name}, @samp{email}, and @samp{date} to extract
the named component.  For email fields (@samp{authoremail}, @samp{committeremail} and
@samp{taggeremail}), @samp{:trim} can be appended to get the email without angle
brackets, and @samp{:localpart} to get the part before the @samp{@@} symbol out of the
trimmed email.

The raw data in an object is @samp{raw}.

@table @asis

@item  raw:size 
The raw data size of the object.
@end table

Note that @samp{--format=%(raw)} can not be used with @samp{--python}, @samp{--shell},
@samp{--tcl}, because such language may not support arbitrary binary data in
their string variable type.

The message in a commit or a tag object is @samp{contents}, from which
@samp{contents:<part>} can be used to extract various parts out of:

@table @asis

@item  contents:size 
The size in bytes of the commit or tag message.

@item  contents:subject 
The first paragraph of the message, which typically is a single line, is
taken as the "subject" of the commit or the tag message.  Instead of
@samp{contents:subject}, field @samp{subject} can also be used to obtain same
results. @samp{:sanitize} can be appended to @samp{subject} for subject line suitable
for filename.

@item  contents:body 
The remainder of the commit or the tag message that follows the "subject".

@item  contents:signature 
The optional GPG signature of the tag.

@item  contents:lines=N 
The first @samp{N} lines of the message.
@end table

Additionally, the trailers as interpreted by
git-interpret-trailers(1) are obtained as @samp{trailers[:options]} (or
by using the historical alias @samp{contents:trailers[:options]}). For valid
[:option] values see @samp{trailers} section of git-log(1).

For sorting purposes, fields with numeric values sort in numeric order
(@samp{objectsize}, @samp{authordate}, @samp{committerdate}, @samp{creatordate}, @samp{taggerdate}).
All other fields are used to sort in their byte-value order.

There is also an option to sort by versions, this can be done by using the
fieldname @samp{version:refname} or its alias @samp{v:refname}.

In any case, a field name that refers to a field inapplicable to the object
referred by the ref does not cause an error.  It returns an empty string
instead.

As a special case for the date-type fields, you may specify a format for the
date by adding @samp{:} followed by date format name (see the values the @samp{--date}
option to git-rev-list(1) takes).

Some atoms like %(align) and %(if) always require a matching %(end).  We
call them "opening atoms" and sometimes denote them as %($open).

When a scripting language specific quoting is in effect, everything between
a top-level opening atom and its matching %(end) is evaluated according to
the semantics of the opening atom and only its result from the top-level is
quoted.

@noindent

@chapheading EXAMPLES

An example directly producing formatted text.  Show the most recent 3 tagged
commits:

@example
#!/bin/sh

git for-each-ref --count=3 --sort='-*authordate' \
--format='From: %(*authorname) %(*authoremail)
Subject: %(*subject)
Date: %(*authordate)
Ref: %(*refname)

%(*body)
' 'refs/tags'
@end example


A simple example showing the use of shell eval on the output, demonstrating
the use of --shell.  List the prefixes of all heads:

@example
#!/bin/sh

git for-each-ref --shell --format="ref=%(refname)" refs/heads | \
while read entry
do
        eval "$entry"
        echo `dirname $ref`
done
@end example


A bit more elaborate report on tags, demonstrating that the format may be an
entire script:

@example
#!/bin/sh

fmt='
        r=%(refname)
        t=%(*objecttype)
        T=$@{r#refs/tags/@}

        o=%(*objectname)
        n=%(*authorname)
        e=%(*authoremail)
        s=%(*subject)
        d=%(*authordate)
        b=%(*body)

        kind=Tag
        if test "z$t" = z
        then
                # could be a lightweight tag
                t=%(objecttype)
                kind="Lightweight tag"
                o=%(objectname)
                n=%(authorname)
                e=%(authoremail)
                s=%(subject)
                d=%(authordate)
                b=%(body)
        fi
        echo "$kind $T points at a $t object $o"
        if test "z$t" = zcommit
        then
                echo "The commit was authored by $n $e
at $d, and titled

    $s

Its message reads as:
"
                echo "$b" | sed -e "s/^/    /"
                echo
        fi
'

eval=`git for-each-ref --shell --format="$fmt" \
        --sort='*objecttype' \
        --sort=-taggerdate \
        refs/tags`
eval "$eval"
@end example


An example to show the usage of %(if)…%(then)…%(else)…%(end).  This
prefixes the current branch with a star.

@example
git for-each-ref --format="%(if)%(HEAD)%(then)* %(else)  %(end)%(refname:short)" refs/heads/
@end example


An example to show the usage of %(if)…%(then)…%(end).  This prints the
authorname, if present.

@example
git for-each-ref --format="%(refname)%(if)%(authorname)%(then) Authored by: %(authorname)%(end)"
@end example


@noindent

@chapheading CAVEATS

Note that the sizes of objects on disk are reported accurately, but care
should be taken in drawing conclusions about which refs or objects are
responsible for disk usage. The size of a packed non-delta object may be
much larger than the size of objects which delta against it, but the choice
of which object is the base and which is the delta is arbitrary and is
subject to change during a repack.

Note also that multiple copies of an object may be present in the object
database; in this case, it is undefined which copy’s size or delta base will
be reported.

@noindent

@chapheading NOTES

複数の @samp{--contains} フィルターと @samp{--no-contains} フィルターを組み合わせる場合、少なくとも1つの @samp{--contains}
コミットを含み、 @samp{--no-contains} コミットを含まない参照のみが表示されます。

複数の @samp{--merged} フィルターと @samp{--no-merged} フィルターを組み合わせると、少なくとも1つの @samp{--merged}
コミットから到達可能で、 @samp{--no-merged} コミットのいずれからも到達できない参照のみが表示されます。

@noindent

@chapheading SEE ALSO

git-show-ref(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-for-each-repo,,,Top
@chapheading Name

git-for-each-repo — リポジトリのリストでGitコマンドを実行します

@noindent

@chapheading Synopsis

@display
git for-each-repo --config=<config> [--] <arguments>
@end display


@noindent

@chapheading DESCRIPTION

リポジトリのリストでGitコマンドを実行します。既知のオプションや @samp{--} の、後ろの引数は、Gitサブプロセスの引数として使用されます。

！！このコマンドは実験的なものです！！動作が変わる可能性があります！！

たとえば、以下を使用して、 @samp{maintenance.repo} 構成変数に格納されているリポジトリのリストのそれぞれに対して maintenance
を実行できます。

@example
git for-each-repo --config=maintenance.repo maintenance run
@end example


これにより、複数値の構成変数である @samp{maintenance.repo} の各値である @samp{<repo>} ごとに @samp{git -C <repo>
maintenance run} が実行されます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--config=<config>} 
指定された構成変数を、絶対パス名を格納する複数値リストとして使用します。そのパスのリストを繰り返して(iterate)、指定された引数を実行します。

これらの構成値は、利用可能な場合、システム、グローバル、およびローカルのGit構成からロードされます。 @samp{git for-each-repo}
がGitリポジトリではないディレクトリで実行される場合、システムとグローバル設定のみが使用されます。
@end table

@noindent

@chapheading SUBPROCESS BEHAVIOR

@samp{git -C <repo> <arguments>} サブプロセスがゼロ以外の終了コードを返す場合、 @samp{git for-each-repo}
プロセスはそれ以上のサブプロセスを実行せずにその終了コードを返します。

各 @samp{git -C <repo> <arguments>} サブプロセスは、標準のファイルデスクリプタ @samp{stdin} と @samp{stdout} と
@samp{stderr} を継承します。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-format-patch,,,Top
@chapheading Name

git-format-patch — Prepare patches for e-mail submission

@noindent

@chapheading Synopsis

@display
git format-patch [-k] [(-o|--output-directory) <dir> | --stdout]
                   [--no-thread | --thread[=<style>]]
                   [(--attach|--inline)[=<boundary>] | --no-attach]
                   [-s | --signoff]
                   [--signature=<signature> | --no-signature]
                   [--signature-file=<file>]
                   [-n | --numbered | -N | --no-numbered]
                   [--start-number <n>] [--numbered-files]
                   [--in-reply-to=<message id>] [--suffix=.<sfx>]
                   [--ignore-if-in-upstream]
                   [--cover-from-description=<mode>]
                   [--rfc] [--subject-prefix=<subject prefix>]
                   [(--reroll-count|-v) <n>]
                   [--to=<email>] [--cc=<email>]
                   [--[no-]cover-letter] [--quiet]
                   [--[no-]encode-email-headers]
                   [--no-notes | --notes[=<ref>]]
                   [--interdiff=<previous>]
                   [--range-diff=<previous> [--creation-factor=<percent>]]
                   [--filename-max-length=<n>]
                   [--progress]
                   [<common diff options>]
                   [ <since> | <revision range> ]
@end display


@noindent

@chapheading DESCRIPTION

Prepare each non-merge commit with its "patch" in one "message" per commit,
formatted to resemble a UNIX mailbox.  The output of this command is
convenient for e-mail submission or for use with @emph{git am}.

A "message" generated by the command consists of three parts:

@itemize 

@item
A brief metadata header that begins with @samp{From <commit>} with a fixed @samp{Mon
Sep 17 00:00:00 2001} datestamp to help programs like "file(1)" to recognize
that the file is an output from this command, fields that record the author
identity, the author date, and the title of the change (taken from the first
paragraph of the commit log message).

@item
The second and subsequent paragraphs of the commit log message.

@item
The "patch", which is the "diff -p --stat" output (see git-diff(1))
between the commit and its parent.
@end itemize

The log message and the patch is separated by a line with a three-dash line.

There are two ways to specify which commits to operate on.

@enumerate 

@item
A single commit, <since>, specifies that the commits leading to the tip of
the current branch that are not in the history that leads to the <since> to
be output.

@item
Generic <revision range> expression (see "SPECIFYING REVISIONS" section in
gitrevisions(7)) means the commits in the specified range.
@end enumerate

The first rule takes precedence in the case of a single <commit>.  To apply
the second rule, i.e., format everything since the beginning of history up
until <commit>, use the @samp{--root} option: @samp{git format-patch --root
<commit>}.  If you want to format only <commit> itself, you can do this with
@samp{git format-patch -1 <commit>}.

By default, each output file is numbered sequentially from 1, and uses the
first line of the commit message (massaged for pathname safety) as the
filename. With the @samp{--numbered-files} option, the output file names will
only be numbers, without the first line of the commit appended.  The names
of the output files are printed to standard output, unless the @samp{--stdout}
option is specified.

If @samp{-o} is specified, output files are created in <dir>.  Otherwise they are
created in the current working directory. The default path can be set with
the @samp{format.outputDirectory} configuration option.  The @samp{-o} option takes
precedence over @samp{format.outputDirectory}.  To store patches in the current
working directory even when @samp{format.outputDirectory} points elsewhere, use
@samp{-o .}. All directory components will be created.

By default, the subject of a single patch is "[PATCH] " followed by the
concatenation of lines from the commit message up to the first blank line
(see the DISCUSSION section of git-commit(1)).

When multiple patches are output, the subject prefix will instead be "[PATCH
n/m] ".  To force 1/1 to be added for a single patch, use @samp{-n}.  To omit
patch numbers from the subject, use @samp{-N}.

If given @samp{--thread}, @samp{git-format-patch} will generate @samp{In-Reply-To} and
@samp{References} headers to make the second and subsequent patch mails appear as
replies to the first mail; this also generates a @samp{Message-Id} header to
reference.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-p} 
@itemx  @samp{--no-stat} 
diffstatsなしでプレーンパッチを生成します。

@item  @samp{-U<n>} 
@itemx  @samp{--unified=<n>} 
通常の3行ではなく、<n> 行の内容でdiffを生成します。

@item  @samp{--output=<file>} 
stdout ではなく指定のファイルに出力します。

@item  @samp{--output-indicator-new=<char>} 
@itemx  @samp{--output-indicator-old=<char>} 
@itemx  @samp{--output-indicator-context=<char>} 
生成されたパッチの新しい行、古い行、またはコンテキスト行を示すために使用される文字を指定します。 通常、それらはそれぞれ @emph{+} 、 @emph{-} 、 ' '
です。

@item  @samp{--indent-heuristic} 
diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッチを読みやすくします。 これがデフォルトです。

@item  @samp{--no-indent-heuristic} 
インデントヒューリスティック(indent heuristic)を無効にします。

@item  @samp{--minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{--patience} 
"patience diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--histogram} 
"histogram diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--anchored=<text>} 
"anchored diff" アルゴリズムを使用してdiffを生成します。

このオプションは複数回指定できます。

行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる場合、このアルゴリズムは、その行が出力に削除または追加として表示されないようにします。内部で
"patience diff" アルゴリズムを使用します。

@item  @samp{--diff-algorithm=@{patience|minimal|histogram|myers@}} 
diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

@table @asis

@item  @samp{default}, @samp{myers} 
基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、これがデフォルトです。

@item  @samp{minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{patience} 
パッチを生成する時に "patience diff" アルゴリズムを使います。

@item  @samp{histogram} 
このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張して、「発生率の低い共通要素をサポート」(support
low-occurrence common elements)します。
@end table

たとえば、 あなたが @samp{diff.algorithm}
変数をデフォルト以外の値に設定した上で、それでもデフォルト値を使用する場合は、@samp{--diff-algorithm=default}
オプションを使用する必要があります。

@item  @samp{--stat[=<width>[,<name-width>[,<count>]]]} 
diffstatを生成します。
デフォルトでは、必要なだけのスペースがファイル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォルトで端末幅、または端末に接続されていない場合は80桁であり、
@samp{<width>} で上書きできます。ファイル名部分の幅は、コンマの後に別の幅 @samp{<name-width>}
を指定することで制限できます。グラフ部分の幅は、 @samp{--stat-graph-width=<width>}
(統計グラフを生成するすべてのコマンドに影響します)を使用するか、 @samp{diff.statGraphWidth=<width>} ( @samp{git
format-patch} に影響しません)を設定することによって制限できます。3番目のパラメータ @samp{<count>}
を指定することにより、出力を最初の @samp{<count>} 行に制限し、それに @samp{...} が続く形にできます。

これらのパラメータは、 @samp{--stat-width=<width>} と @samp{--stat-name-width=<name-width>} と
@samp{--stat-count=<count>} を使用して個別に設定することもできます。

@item  @samp{--compact-summary} 
ファイルの作成や削除( "new" または "gone" 。オプションでシンボリックリンクの場合は "+l"
)、diffstatのモード変更(実行可能ビットを追加または削除する場合は、それぞれ "+x" または "-x"
)など、拡張ヘッダー情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置かれます。本機能は @samp{--stat} の機能を含んでいます。

@item  @samp{--numstat} 
@samp{--stat`に似ていますが、プログラムで処理しやすい(machine
friendly)ように、追加および削除された行数を10進表記とパス名で省略形なしで表示します。バイナリファイルの場合、 `0 0} の代わりに2つの
@samp{-} を出力します。

@item  @samp{--shortstat} 
変更されたファイルの総数と、追加および削除された行の数を含む @samp{--stat} 形式の最後の行のみを出力します。

@item  @samp{-X[<param1,param2,...>]} 
@itemx  @samp{--dirstat[=<param1,param2,...>]} 
各サブディレクトリの相対的な変更量の分布を出力します。 @samp{--dirstat}
の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズできます。デフォルトは、 @samp{diff.dirstat}
構成変数によって制御されます(git-config(1) 参照)。以下のパラメータを使用できます:

@table @asis

@item  @samp{changes} 
ソースから削除された、または宛先に追加された行をカウントして、dirstat数を計算します。これは、ファイル内の純粋なコード移動の量を無視します。つまり、ファイル内の行の再配置は、他の変更ほどカウントされません。これは、パラメーターが指定されていない場合のデフォルトの動作です。

@item  @samp{lines} 
通常の行ベースのdiff分析を実行し、削除/追加された行数を合計して、dirstat数を計算します。
(バイナリファイルの場合、バイナリファイルには行の概念がないため、代わりに64バイトのチャンクをカウントします)。 これは @samp{changes}
動作よりも高価な @samp{--dirstat} 動作ですが、他の変更と同じようにファイル内の再配置された行をカウントします。結果の出力は、他の
@samp{--*stat} オプションから得られるものと一致しています。

@item  @samp{files} 
変更されたファイルの数を数えて、dirstat数を計算します。変更された各ファイルは、dirstat分析で等しくカウントされます。これは、ファイルの内容をまったく調べる必要がないため、計算コストが最もかからない
@samp{--dirstat} の動作です。

@item  @samp{cumulative} 
親ディレクトリの子ディレクトリの変更も同様にカウントします。 @samp{cumulative}(累積的)
を使用する場合、報告されるパーセンテージの合計が100%を超える場合があることに注意してください。デフォルトの(非累積的な)動作は、@samp{noncumulative}
パラメーターで指定できます。

@item  <limit> 
整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指定します。指定の割合より少ないディレクトリは、出力に表示されません。
@end table

例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディレクトリに子ディレクトリの数を累積しながら、変更されたファイルをカウント:
@samp{--dirstat=files,10,cumulative}

@item  @samp{--cumulative} 
@samp{--dirstat=cumulative} と同義語

@item  @samp{--dirstat-by-file[=<param1,param2>...]} 
@samp{--dirstat=files,param1,param2...} と同義語

@item  @samp{--summary} 
作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約(condensed summary)を出力します。

@item  @samp{--no-renames} 
構成ファイルにデフォルトで指定されている場合でも、名前変更の検出をオフにします。

@item  @samp{--[no-]rename-empty} 
名前変更ソースとして空のブロブを使用するかどうか。

@item  @samp{--full-index} 
パッチ形式の出力を生成するときは、最初の一握りの文字(first handful of
characters)の代わりに、「インデックス」行にイメージ前およびイメージ後の完全ブロブオブジェクト名を表示します。

@item  @samp{--binary} 
@samp{--full-index} に加えて、 @samp{git-apply} で適用できるバイナリ差分を出力します。

@item  @samp{--abbrev[=<n>]} 
完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくとも
@emph{<n>} 桁の16進数の長さの最短のプレフィックスを表示します。diffパッチ出力形式では、 @samp{--full-index} が優先されます。つまり、
@samp{--full-index} が指定されている場合、 @samp{--abbrev} に関係なく、完全なブロブ名が表示されます。デフォルト以外の桁数は、
@samp{--abbrev=<n>} で指定できます。

@item  @samp{-B[<n>][/<m>]} 
@itemx  @samp{--break-rewrites[=[<n>][/<m>]]} 
完全な書き換えの変更を削除と作成のペアに分割します。これには以下の2つの目的があります:

これは、ファイルの完全な書き換えに相当する変更が、コンテキストとしてテキストで一致する非常に少数の行と混合された一連の削除と挿入としてではなく、古いものすべての単一の削除とそれに続く
すべての新しいものを1回挿入し、数値 @samp{m} が -B オプションのこの側面を制御します(デフォルトは60%)。 @samp{-B/70%}
は、Gitがそれを完全な書き換えと見なすために、元の30%未満が結果に残る必要があることを指定します(つまり、結果のパッチは、コンテキスト行と混合された一連の削除と挿入になります)。

-M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソースと見なされ(通常、 -M
は、消えたファイルのみを名前変更のソースと見なします)、数 @samp{n} が -Bオプションのこの側面を制御します(デフォルトは50%)。 @samp{-B20%}
は、ファイルのサイズの20%以上と比較して、追加および削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取得される資格があることを指定します。

@item  @samp{-M[<n>]} 
@itemx  @samp{--find-renames[=<n>]} 
名前の変更(renames)を検知する。
@samp{n} が指定されている場合、それは類似性インデックスのしきい値です
(つまり、ファイルのサイズと比較した追加/削除の量)。
たとえば、 @samp{-M90%} は、ファイルの90%以上が変更されていない場合、
Gitが削除/追加のペアを名前変更と見なす必要があることを意味します。
@samp{%} 記号がない場合、数値は小数として読み取られ、その前に小数点が付きます。
つまり、 @samp{-M5} は0.5になるため、@samp{-M50%} と同じになります。
同様に、 @samp{-M05} は @samp{-M5%} と同じです。
検出を正確な名前変更に制限するには、 @samp{-M100%} を使用します。
デフォルトの類似性インデックスは50%です。

@item  @samp{-C[<n>]} 
@itemx  @samp{--find-copies[=<n>]} 
名前と同様コピーを検出します。 @samp{--find-copies-harder} @samp{も参照してください。 `n} を指定すると、 @samp{-M<n>}
と同じ意味になります。

@item  @samp{--find-copies-harder} 
パフォーマンス上の理由から、デフォルトでは、 @samp{-C}
オプションは、コピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピーを検索します。このフラグにより、コマンドは変更されていないファイルをコピー元の候補として検査します。これは大規模なプロジェクトでは非常にコストのかかる操作であるため、注意して使用してください。
複数の @samp{-C} オプションを指定しても同じ効果があります。

@item  @samp{-D} 
@itemx  @samp{--irreversible-delete} 
削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを出力し、プレイメージと @samp{/dev/null}
の差分は出力しません。結果のパッチは、 @samp{patch} または @samp{git apply}
で適用されることを意図していません。これは、変更後にテキストを確認することに集中したい人のためだけのものです。さらに、出力には明らかに、そのようなパッチを手動でも逆に適用するのに十分な情報が不足しているため、オプションの名前が付けられています。

@samp{-B} と併用する場合は、削除/作成ペアの削除部分のプリイメージ(preimage)も省略してください。

@item  @samp{-l<num>} 
@samp{-M} および @samp{-C}
オプションには、名前変更/コピーのサブセットを安価に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペアになっていない宛先をすべての関連ソースと比較する徹底的なフォールバック部分が続きます。(名前の変更の場合、残りのペアになっていないソースのみが関係します。コピーの場合、すべての元のソースが関係します)。Nのソースと宛先の場合、この徹底的なチェックのコストは
O(N^2)
です。このオプションは、関係するソース/宛先ファイルの数が指定された数を超えた場合に、名前変更/コピー検出の完全な部分が実行されないようにします。デフォルトは
diff.renameLimit です。 値0は無制限として扱われることに注意してください。

@item  @samp{-O<orderfile>} 
ファイルが出力に表示される順序を制御します。これは @samp{diff.orderFile}
構成変数をオーバーライドします(git-config(1) 参照)。 @samp{diff.orderFile} をキャンセルするには、
@samp{-O/dev/null} を使用します。

出力順序は、 <orderfile>
内のglobパターンの順序によって決定されます。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力され、2番目のパターンに一致する(ただし最初のパターンには一致しない)パス名を持つすべてのファイルが次に出力されます。パス名がどのパターンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一致パターンがあるかのように、最後に出力されます。複数のパス名のランクが同じである場合(同じパターンに一致するが、以前のパターンには一致しない)、相互の出力順序は通常の順序です。

<orderfile> は以下のとおりパースされます:

@itemize 

@item
空白行は無視されるため、読みやすくするための区切りとして使用できます。

@item
ハッシュ ("@samp{#}") で始まる行は無視されるため、コメントに使用できます。
パターンがハッシュで始まる場合は、パターンの先頭にバックスラッシュ(訳注:日本では環境により円記号)("@samp{\}") を追加します。

@item
他の各行には、単一のパターンが含まれています。
@end itemize

パターンは、 FNM_PATHNAME フラグなしで fnmatch(3)
に使用されるパターンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポーネントをいくつも削除するとパターンと一致する場合、パス名もパターンと一致する点が異なります。
たとえば、パターン "@samp{foo*bar}" は、 "@samp{fooasdfbar}" および "@samp{foo/bar/baz/asdf}" と一致しますが、
"@samp{foobarx}" とは一致しません。

@item  @samp{--skip-to=<file>} 
@itemx  @samp{--rotate-to=<file>} 
名前付き <file> の前のファイルを出力から破棄するか(スキップして)、出力の最後に移動させます(ローテーションさせます)。 これらは主に @samp{git
difftool} コマンドを使用するために考案されたものであり、それ以外の場合はあまり役に立たない可能性があります。

@item  @samp{--relative[=<path>]} 
@itemx  @samp{--no-relative} 
プロジェクトのサブディレクトリから実行する場合、このオプションを使用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示するように指示できます。サブディレクトリ(ベアリポジトリなど)にいない場合は、引数として
<path> を指定することで、出力を作成するサブディレクトリに名前を付けることができます。 @samp{--no-relative`は、
`diff.relative} 設定オプションと以前の @samp{--relative} の両方を打ち消すために使用できます。

@item  @samp{-a} 
@itemx  @samp{--text} 
すべてのファイルをテキストとして扱います。

@item  @samp{--ignore-cr-at-eol} 
比較を行うときは、行末のキャリッジリターン(carriage-return)を無視します。

@item  @samp{--ignore-space-at-eol} 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  @samp{-b} 
@itemx  @samp{--ignore-space-change} 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  @samp{-w} 
@itemx  @samp{--ignore-all-space} 
行を比較するときは空白を無視します。 これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  @samp{--ignore-blank-lines} 
全て空白の行の変更は無視します。

@item  @samp{-I<regex>} 
@itemx  @samp{--ignore-matching-lines=<regex>} 
すべての行が <regex> にマッチする変更を無視します。このオプションは複数回指定できます。

@item  @samp{--inter-hunk-context=<lines>} 
指定された行数までの差分ハンク間のコンテキストを表示し、それによって互いに近いハンクを融合します。デフォルトは
@samp{diff.interHunkContext} で、設定オプションが設定されていない場合は0です。

@item  @samp{-W} 
@itemx  @samp{--function-context} 
関数全体を各変更のコンテキスト行として表示します。関数名は、 @samp{git diff}
がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の @emph{Defining a custom
hunk-header} を参照)。

@item  @samp{--ext-diff} 
外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外部diffドライバーを設定する場合は、
git-log(1) およびその仲間と一緒にこのオプションを使用する必要があります。

@item  @samp{--no-ext-diff} 
外部diffドライバーを禁止します。

@item  @samp{--textconv} 
@itemx  @samp{--no-textconv} 
バイナリファイルを比較するときに、外部テキスト変換フィルターの実行を許可(または禁止)します。 詳細については、
gitattributes(5)
を参照してください。textconvフィルターは通常、一方向の変換であるため、結果のdiffは人間の消費に適していますが、適用(apply)することはできません。このため、textconvフィルターは、
git-diff(1) および git-log(1) に対してのみデフォルトで有効になりますが、
git-format-patch(1) またはdiff配管コマンドに対しては有効になりません。

@item  @samp{--ignore-submodules[=<when>]} 
diff生成のサブモジュールへの変更を無視します。 <when> は、
none・untracked・dirty・allのいずれかになります。これがデフォルトです。noneを使用すると、追跡されていないファイルまたは変更されたファイルが含まれている場合、またはそのHEADがスーパープロジェクトに記録されているコミットと異なる場合にサブモジュールが変更されたと見なされ、
git-config(1) または gitmodules(5) の
ignoreオプションの設定をオーバーライドするために使用できます。untrackedが使用されている場合、サブモジュールには追跡されていないコンテンツのみが含まれている場合、サブモジュールはダーティとは見なされません(ただし、変更されたコンテンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作業ツリーへのすべての変更が無視され、スーパープロジェクトに格納されているコミットへの変更のみが表示されます(これは1.7.0までの動作でした)。「all」を使用すると、サブモジュールへのすべての変更が非表示になります。

@item  @samp{--src-prefix=<prefix>} 
"a/" の代わりに、与えられたソースプレフィックス(source prefix)を表示します。

@item  @samp{--dst-prefix=<prefix>} 
"b/" の代わりに、指定された宛先プレフィックス(destination prefix)を表示します。

@item  @samp{--no-prefix} 
送信元(source)または宛先(destination)のプレフィックスを表示しません。

@item  @samp{--line-prefix=<prefix>} 
出力のすべての行に追加のプレフィックスを付加します。

@item  @samp{--ita-invisible-in-index} 
デフォルトでは、 "git add -N" によって追加されたエントリは、 "git diff" に既存の空のファイルとして表示され、 "git
diff --cached" に新しいファイルとして表示されます。このオプションを使用すると、エントリは "git diff"
では新しいファイルとして表示され、 "git diff --cached" では存在しません。このオプションは、
@samp{--ita-visible-in-index} で元に戻すことができます。どちらのオプションも実験的なものであり、将来削除される可能性があります。
@end table

これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照してください。

@table @asis

@item  @samp{-<n>} 
Prepare patches from the topmost <n> commits.

@item  @samp{-o <dir>} 
@itemx  @samp{--output-directory <dir>} 
Use <dir> to store the resulting files, instead of the current working
directory.

@item  @samp{-n} 
@itemx  @samp{--numbered} 
Name output in @emph{[PATCH n/m]} format, even with a single patch.

@item  @samp{-N} 
@itemx  @samp{--no-numbered} 
Name output in @emph{[PATCH]} format.

@item  @samp{--start-number <n>} 
Start numbering the patches at <n> instead of 1.

@item  @samp{--numbered-files} 
Output file names will be a simple number sequence without the default first
line of the commit appended.

@item  @samp{-k} 
@itemx  @samp{--keep-subject} 
Do not strip/add @emph{[PATCH]} from the first line of the commit log message.

@item  @samp{-s} 
@itemx  @samp{--signoff} 
Add a @samp{Signed-off-by} trailer to the commit message, using the committer
identity of yourself.  See the signoff option in git-commit(1) for
more information.

@item  @samp{--stdout} 
Print all commits to the standard output in mbox format, instead of creating
a file for each one.

@item  @samp{--attach[=<boundary>]} 
Create multipart/mixed attachment, the first part of which is the commit
message and the patch itself in the second part, with @samp{Content-Disposition:
attachment}.

@item  @samp{--no-attach} 
Disable the creation of an attachment, overriding the configuration setting.

@item  @samp{--inline[=<boundary>]} 
Create multipart/mixed attachment, the first part of which is the commit
message and the patch itself in the second part, with @samp{Content-Disposition:
inline}.

@item  @samp{--thread[=<style>]} 
@itemx  @samp{--no-thread} 
Controls addition of @samp{In-Reply-To} and @samp{References} headers to make the
second and subsequent mails appear as replies to the first.  Also controls
generation of the @samp{Message-Id} header to reference.

The optional <style> argument can be either @samp{shallow} or @samp{deep}.  @emph{shallow}
threading makes every mail a reply to the head of the series, where the head
is chosen from the cover letter, the @samp{--in-reply-to}, and the first patch
mail, in this order.  @emph{deep} threading makes every mail a reply to the
previous one.

The default is @samp{--no-thread}, unless the @samp{format.thread} configuration is
set.  If @samp{--thread} is specified without a style, it defaults to the style
specified by @samp{format.thread} if any, or else @samp{shallow}.

Beware that the default for @emph{git send-email} is to thread emails itself.  If
you want @samp{git format-patch} to take care of threading, you will want to
ensure that threading is disabled for @samp{git send-email}.

@item  @samp{--in-reply-to=<message id>} 
Make the first mail (or all the mails with @samp{--no-thread}) appear as a reply
to the given <message id>, which avoids breaking threads to provide a new
patch series.

@item  @samp{--ignore-if-in-upstream} 
Do not include a patch that matches a commit in <until>..<since>.  This will
examine all patches reachable from <since> but not from <until> and compare
them with the patches being generated, and any patch that matches is
ignored.

@item  @samp{--cover-from-description=<mode>} 
Controls which parts of the cover letter will be automatically populated
using the branch’s description.

If @samp{<mode>} is @samp{message} or @samp{default}, the cover letter subject will be
populated with placeholder text. The body of the cover letter will be
populated with the branch’s description. This is the default mode when no
configuration nor command line option is specified.

If @samp{<mode>} is @samp{subject}, the first paragraph of the branch description will
populate the cover letter subject. The remainder of the description will
populate the body of the cover letter.

If @samp{<mode>} is @samp{auto}, if the first paragraph of the branch description is
greater than 100 bytes, then the mode will be @samp{message}, otherwise @samp{subject}
will be used.

If @samp{<mode>} is @samp{none}, both the cover letter subject and body will be
populated with placeholder text.

@item  @samp{--subject-prefix=<subject prefix>} 
Instead of the standard @emph{[PATCH]} prefix in the subject line, instead use
@emph{[<subject prefix>]}. This allows for useful naming of a patch series, and
can be combined with the @samp{--numbered} option.

@item  @samp{--filename-max-length=<n>} 
Instead of the standard 64 bytes, chomp the generated output filenames at
around @emph{<n>} bytes (too short a value will be silently raised to a
reasonable length).  Defaults to the value of the @samp{format.filenameMaxLength}
configuration variable, or 64 if unconfigured.

@item  @samp{--rfc} 
Alias for @samp{--subject-prefix="RFC PATCH"}. RFC means "Request For Comments";
use this when sending an experimental patch for discussion rather than
application.

@item  @samp{-v <n>} 
@itemx  @samp{--reroll-count=<n>} 
Mark the series as the <n>-th iteration of the topic. The output filenames
have @samp{v<n>} prepended to them, and the subject prefix ("PATCH" by default,
but configurable via the @samp{--subject-prefix} option) has ` v<n>` appended to
it.  E.g.  @samp{--reroll-count=4} may produce @samp{v4-0001-add-makefile.patch} file
that has "Subject: [PATCH v4 1/20] Add makefile" in it.  @samp{<n>} does not have
to be an integer (e.g. "--reroll-count=4.4", or "--reroll-count=4rev2" are
allowed), but the downside of using such a reroll-count is that the
range-diff/interdiff with the previous version does not state exactly which
version the new interation is compared against.

@item  @samp{--to=<email>} 
Add a @samp{To:} header to the email headers. This is in addition to any
configured headers, and may be used multiple times.  The negated form
@samp{--no-to} discards all @samp{To:} headers added so far (from config or command
line).

@item  @samp{--cc=<email>} 
Add a @samp{Cc:} header to the email headers. This is in addition to any
configured headers, and may be used multiple times.  The negated form
@samp{--no-cc} discards all @samp{Cc:} headers added so far (from config or command
line).

@item  @samp{--from} 
@itemx  @samp{--from=<ident>} 
Use @samp{ident} in the @samp{From:} header of each commit email. If the author ident
of the commit is not textually identical to the provided @samp{ident}, place a
@samp{From:} header in the body of the message with the original author. If no
@samp{ident} is given, use the committer ident.

Note that this option is only useful if you are actually sending the emails
and want to identify yourself as the sender, but retain the original author
(and @samp{git am} will correctly pick up the in-body header). Note also that
@samp{git send-email} already handles this transformation for you, and this
option should not be used if you are feeding the result to @samp{git send-email}.

@item  @samp{--add-header=<header>} 
Add an arbitrary header to the email headers.  This is in addition to any
configured headers, and may be used multiple times.  For example,
@samp{--add-header="Organization: git-foo"}.  The negated form @samp{--no-add-header}
discards @strong{all} (@samp{To:}, @samp{Cc:}, and custom) headers added so far from config
or command line.

@item  @samp{--[no-]cover-letter} 
In addition to the patches, generate a cover letter file containing the
branch description, shortlog and the overall diffstat.  You can fill in a
description in the file before sending it out.

@item  @samp{--encode-email-headers} 
@itemx  @samp{--no-encode-email-headers} 
Encode email headers that have non-ASCII characters with "Q-encoding"
(described in RFC 2047), instead of outputting the headers
verbatim. Defaults to the value of the @samp{format.encodeEmailHeaders}
configuration variable.

@item  @samp{--interdiff=<previous>} 
As a reviewer aid, insert an interdiff into the cover letter, or as
commentary of the lone patch of a 1-patch series, showing the differences
between the previous version of the patch series and the series currently
being formatted. @samp{previous} is a single revision naming the tip of the
previous series which shares a common base with the series being formatted
(for example @samp{git format-patch --cover-letter --interdiff=feature/v1 -3
feature/v2}).

@item  @samp{--range-diff=<previous>} 
As a reviewer aid, insert a range-diff (see git-range-diff(1))  into
the cover letter, or as commentary of the lone patch of a 1-patch series,
showing the differences between the previous version of the patch series and
the series currently being formatted.  @samp{previous} can be a single revision
naming the tip of the previous series if it shares a common base with the
series being formatted (for example @samp{git format-patch --cover-letter
--range-diff=feature/v1 -3 feature/v2}), or a revision range if the two
versions of the series are disjoint (for example @samp{git format-patch
--cover-letter --range-diff=feature/v1~3..feature/v1 -3 feature/v2}).

Note that diff options passed to the command affect how the primary product
of @samp{format-patch} is generated, and they are not passed to the underlying
@samp{range-diff} machinery used to generate the cover-letter material (this may
change in the future).

@item  @samp{--creation-factor=<percent>} 
Used with @samp{--range-diff}, tweak the heuristic which matches up commits
between the previous and current series of patches by adjusting the
creation/deletion cost fudge factor. See git-range-diff(1))  for
details.

@item  @samp{--notes[=<ref>]} 
@itemx  @samp{--no-notes} 
Append the notes (see git-notes(1)) for the commit after the
three-dash line.

The expected use case of this is to write supporting explanation for the
commit that does not belong to the commit log message proper, and include it
with the patch submission. While one can simply write these explanations
after @samp{format-patch} has run but before sending, keeping them as Git notes
allows them to be maintained between versions of the patch series (but see
the discussion of the @samp{notes.rewrite} configuration options in
git-notes(1) to use this workflow).

The default is @samp{--no-notes}, unless the @samp{format.notes} configuration is set.

@item  @samp{--[no-]signature=<signature>} 
Add a signature to each message produced. Per RFC 3676 the signature is
separated from the body by a line with '-- ' on it. If the signature option
is omitted the signature defaults to the Git version number.

@item  @samp{--signature-file=<file>} 
Works just like --signature except the signature is read from a file.

@item  @samp{--suffix=.<sfx>} 
Instead of using @samp{.patch} as the suffix for generated filenames, use
specified suffix.  A common alternative is @samp{--suffix=.txt}.  Leaving this
empty will remove the @samp{.patch} suffix.

Note that the leading character does not have to be a dot; for example, you
can use @samp{--suffix=-patch} to get @samp{0001-description-of-my-change-patch}.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Do not print the names of the generated files to standard output.

@item  @samp{--no-binary} 
Do not output contents of changes in binary files, instead display a notice
that those files changed.  Patches generated using this option cannot be
applied properly, but they are still useful for code review.

@item  @samp{--zero-commit} 
Output an all-zero hash in each patch’s From header instead of the hash of
the commit.

@item  @samp{--[no-]base[=<commit>]} 
Record the base tree information to identify the state the patch series
applies to.  See the BASE TREE INFORMATION section below for details. If
<commit> is "auto", a base commit is automatically chosen. The @samp{--no-base}
option overrides a @samp{format.useAutoBase} configuration.

@item  @samp{--root} 
Treat the revision argument as a <revision range>, even if it is just a
single commit (that would normally be treated as a <since>).  Note that root
commits included in the specified range are always formatted as creation
patches, independently of this flag.

@item  @samp{--progress} 
Show progress reports on stderr as patches are generated.
@end table

@noindent

@chapheading CONFIGURATION

You can specify extra mail header lines to be added to each message,
defaults for the subject prefix and file suffix, number patches when
outputting more than one patch, add "To:" or "Cc:" headers, configure
attachments, change the patch output directory, and sign off patches with
configuration variables.

@example
[format]
        headers = "Organization: git-foo\n"
        subjectPrefix = CHANGE
        suffix = .txt
        numbered = auto
        to = <email>
        cc = <email>
        attach [ = mime-boundary-string ]
        signOff = true
        outputDirectory = <directory>
        coverLetter = auto
        coverFromDescription = auto
@end example


@noindent

@chapheading DISCUSSION

The patch produced by @emph{git format-patch} is in UNIX mailbox format, with a
fixed "magic" time stamp to indicate that the file is output from
format-patch rather than a real mailbox, like so:

@example
From 8f72bad1baf19a53459661343e21d6491c3908d3 Mon Sep 17 00:00:00 2001
From: Tony Luck <tony.luck@@intel.com>
Date: Tue, 13 Jul 2010 11:42:54 -0700
Subject: [PATCH] =?UTF-8?q?[IA64]=20Put=20ia64=20config=20files=20on=20the=20?=
 =?UTF-8?q?Uwe=20Kleine-K=C3=B6nig=20diet?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

arch/arm config files were slimmed down using a python script
(See commit c2330e286f68f1c408b4aa6515ba49d57f05beae comment)

Do the same for ia64 so we can have sleek & trim looking
...
@end example


Typically it will be placed in a MUA’s drafts folder, edited to add timely
commentary that should not go in the changelog after the three dashes, and
then sent as a message whose body, in our example, starts with "arch/arm
config files were…".  On the receiving end, readers can save interesting
patches in a UNIX mailbox and apply them with git-am(1).

When a patch is part of an ongoing discussion, the patch generated by @emph{git
format-patch} can be tweaked to take advantage of the @emph{git am --scissors}
feature.  After your response to the discussion comes a line that consists
solely of "@samp{-- >8 --}" (scissors and perforation), followed by the patch
with unnecessary header fields removed:

@example
...
> So we should do such-and-such.

Makes sense to me.  How about this patch?

-- >8 --
Subject: [IA64] Put ia64 config files on the Uwe Kleine-König diet

arch/arm config files were slimmed down using a python script
...
@end example


When sending a patch this way, most often you are sending your own patch, so
in addition to the "@samp{From $SHA1 $magic_timestamp}" marker you should omit
@samp{From:} and @samp{Date:} lines from the patch file.  The patch title is likely to
be different from the subject of the discussion the patch is in response to,
so it is likely that you would want to keep the Subject: line, like the
example above.

@noindent

@heading Checking for patch corruption

Many mailers if not set up properly will corrupt whitespace.  Here are two
common types of corruption:

@itemize 

@item
Empty context lines that do not have @emph{any} whitespace.

@item
Non-empty context lines that have one extra whitespace at the beginning.
@end itemize

One way to test if your MUA is set up correctly is:

@itemize 

@item
Send the patch to yourself, exactly the way you would, except with To: and
Cc: lines that do not contain the list and maintainer address.

@item
Save that patch to a file in UNIX mailbox format.  Call it a.patch, say.

@item
Apply it:

@example
$ git fetch <project> master:test-apply
$ git switch test-apply
$ git restore --source=HEAD --staged --worktree :/
$ git am a.patch
@end example
@end itemize

If it does not apply correctly, there can be various reasons.

@itemize 

@item
The patch itself does not apply cleanly.  That is @emph{bad} but does not have
much to do with your MUA.  You might want to rebase the patch with
git-rebase(1) before regenerating it in this case.

@item
The MUA corrupted your patch; "am" would complain that the patch does not
apply.  Look in the .git/rebase-apply/ subdirectory and see what @emph{patch}
file contains and check for the common corruption patterns mentioned above.

@item
While at it, check the @emph{info} and @emph{final-commit} files as well.  If what is
in @emph{final-commit} is not exactly what you would want to see in the commit
log message, it is very likely that the receiver would end up hand editing
the log message when applying your patch.  Things like "Hi, this is my first
patch.\n" in the patch e-mail should come after the three-dash line that
signals the end of the commit message.
@end itemize

@noindent

@chapheading MUA-SPECIFIC HINTS

Here are some hints on how to successfully submit patches inline using
various mailers.

@noindent

@heading GMail

GMail does not have any way to turn off line wrapping in the web interface,
so it will mangle any emails that you send.  You can however use "git
send-email" and send your patches through the GMail SMTP server, or use any
IMAP email client to connect to the google IMAP server and forward the
emails through that.

For hints on using @emph{git send-email} to send your patches through the GMail
SMTP server, see the EXAMPLE section of git-send-email(1).

For hints on submission using the IMAP interface, see the EXAMPLE section of
git-imap-send(1).

@noindent

@heading Thunderbird

By default, Thunderbird will both wrap emails as well as flag them as being
@emph{format=flowed}, both of which will make the resulting email unusable by
Git.

There are three different approaches: use an add-on to turn off line wraps,
configure Thunderbird to not mangle patches, or use an external editor to
keep Thunderbird from mangling the patches.

@noindent

@subheading Approach #1 (add-on)

Install the Toggle Word Wrap add-on that is available from
@uref{https://addons.mozilla.org/thunderbird/addon/toggle-word-wrap/,https://addons.mozilla.org/thunderbird/addon/toggle-word-wrap/} It adds a
menu entry "Enable Word Wrap" in the composer’s "Options" menu that you can
tick off. Now you can compose the message as you otherwise do (cut + paste,
@emph{git format-patch} | @emph{git imap-send}, etc), but you have to insert line
breaks manually in any text that you type.

@noindent

@subheading Approach #2 (configuration)

Three steps:

@enumerate 

@item
Configure your mail server composition as plain text: Edit…Account
Settings…Composition & Addressing, uncheck "Compose Messages in HTML".

@item
Configure your general composition window to not wrap.

In Thunderbird 2: Edit..Preferences..Composition, wrap plain text messages
at 0

In Thunderbird 3: Edit..Preferences..Advanced..Config Editor.  Search for
"mail.wrap_long_lines".  Toggle it to make sure it is set to @samp{false}. Also,
search for "mailnews.wraplength" and set the value to 0.

@item
Disable the use of format=flowed: Edit..Preferences..Advanced..Config
Editor.  Search for "mailnews.send_plaintext_flowed".  Toggle it to make
sure it is set to @samp{false}.
@end enumerate

After that is done, you should be able to compose email as you otherwise
would (cut + paste, @emph{git format-patch} | @emph{git imap-send}, etc), and the
patches will not be mangled.

@noindent

@subheading Approach #3 (external editor)

The following Thunderbird extensions are needed: AboutConfig from
@uref{http://aboutconfig.mozdev.org/,http://aboutconfig.mozdev.org/} and External Editor from
@uref{http://globs.org/articles.php?lng=en&pg=8,http://globs.org/articles.php?lng=en&pg=8}

@enumerate 

@item
Prepare the patch as a text file using your method of choice.

@item
Before opening a compose window, use Edit→Account Settings to uncheck the
"Compose messages in HTML format" setting in the "Composition & Addressing"
panel of the account to be used to send the patch.

@item
In the main Thunderbird window, @emph{before} you open the compose window for the
patch, use Tools→about:config to set the following to the indicated values:

@example
        mailnews.send_plaintext_flowed  => false
        mailnews.wraplength             => 0
@end example


@item
Open a compose window and click the external editor icon.

@item
In the external editor window, read in the patch file and exit the editor
normally.
@end enumerate

Side note: it may be possible to do step 2 with about:config and the
following settings but no one’s tried yet.

@example
        mail.html_compose                       => false
        mail.identity.default.compose_html      => false
        mail.identity.id?.compose_html          => false
@end example


There is a script in contrib/thunderbird-patch-inline which can help you
include patches with Thunderbird in an easy way. To use it, do the steps
above and then use the script as the external editor.

@noindent

@heading KMail

This should help you to submit patches inline using KMail.

@enumerate 

@item
Prepare the patch as a text file.

@item
Click on New Mail.

@item
Go under "Options" in the Composer window and be sure that "Word wrap" is
not set.

@item
Use Message → Insert file… and insert the patch.

@item
Back in the compose window: add whatever other text you wish to the message,
complete the addressing and subject fields, and press send.
@end enumerate

@noindent

@chapheading BASE TREE INFORMATION

The base tree information block is used for maintainers or third party
testers to know the exact state the patch series applies to. It consists of
the @emph{base commit}, which is a well-known commit that is part of the stable
part of the project history everybody else works off of, and zero or more
@emph{prerequisite patches}, which are well-known patches in flight that is not
yet part of the @emph{base commit} that need to be applied on top of @emph{base
commit} in topological order before the patches can be applied.

The @emph{base commit} is shown as "base-commit: " followed by the 40-hex of the
commit object name.  A @emph{prerequisite patch} is shown as
"prerequisite-patch-id: " followed by the 40-hex @emph{patch id}, which can be
obtained by passing the patch through the @samp{git patch-id --stable} command.

Imagine that on top of the public commit P, you applied well-known patches
X, Y and Z from somebody else, and then built your three-patch series A, B,
C, the history would be like:

@example
---P---X---Y---Z---A---B---C
@end example

With @samp{git format-patch --base=P -3 C} (or variants thereof, e.g. with
@samp{--cover-letter} or using @samp{Z..C} instead of @samp{-3 C} to specify the range),
the base tree information block is shown at the end of the first message the
command outputs (either the first patch, or the cover letter), like this:

@example
base-commit: P
prerequisite-patch-id: X
prerequisite-patch-id: Y
prerequisite-patch-id: Z
@end example


For non-linear topology, such as

@example
---P---X---A---M---C
    \         /
     Y---Z---B
@end example

You can also use @samp{git format-patch --base=P -3 C} to generate patches for A,
B and C, and the identifiers for P, X, Y, Z are appended at the end of the
first message.

If set @samp{--base=auto} in cmdline, it will track base commit automatically,
the base commit will be the merge base of tip commit of the remote-tracking
branch and revision-range specified in cmdline.  For a local branch, you
need to track a remote branch by @samp{git branch --set-upstream-to} before using
this option.

@noindent

@chapheading EXAMPLES

@itemize 

@item
Extract commits between revisions R1 and R2, and apply them on top of the
current branch using @emph{git am} to cherry-pick them:

@example
$ git format-patch -k --stdout R1..R2 | git am -3 -k
@end example


@item
Extract all commits which are in the current branch but not in the origin
branch:

@example
$ git format-patch origin
@end example


For each commit a separate file is created in the current directory.

@item
Extract all commits that lead to @emph{origin} since the inception of the
project:

@example
$ git format-patch --root origin
@end example


@item
The same as the previous one:

@example
$ git format-patch -M -B origin
@end example


Additionally, it detects and handles renames and complete rewrites
intelligently to produce a renaming patch.  A renaming patch reduces the
amount of text output, and generally makes it easier to review.  Note that
non-Git "patch" programs won’t understand renaming patches, so use it only
when you know the recipient uses Git to apply your patch.

@item
Extract three topmost commits from the current branch and format them as
e-mailable patches:

@example
$ git format-patch -3
@end example

@end itemize

@noindent

@chapheading CAVEATS

Note that @samp{format-patch} will omit merge commits from the output, even if
they are part of the requested range. A simple "patch" does not include
enough information for the receiving end to reproduce the same merge commit.

@noindent

@chapheading SEE ALSO

git-am(1), git-send-email(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-fsck-objects,,,Top
@chapheading Name

git-fsck-objects — データベース内のオブジェクトの接続性(connectivity)と有効性(validity)を検証(verify)します

@noindent

@chapheading Synopsis

@display
git fsck-objects …
@end display


@noindent

@chapheading DESCRIPTION

これは git-fsck(1) の同義語です。 git-fsck(1) の文書を参照してください。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-fsck,,,Top
@chapheading Name

git-fsck — データベース内のオブジェクトの接続性(connectivity)と有効性(validity)を検証します

@noindent

@chapheading Synopsis

@display
git fsck [--tags] [--root] [--unreachable] [--cache] [--no-reflogs]
         [--[no-]full] [--strict] [--verbose] [--lost-found]
         [--[no-]dangling] [--[no-]progress] [--connectivity-only]
         [--[no-]name-objects] [<object>*]
@end display


@noindent

@chapheading DESCRIPTION

データベース内のオブジェクトの接続性(connectivity)と有効性(validity)を検証します

@noindent

@chapheading OPTIONS

@table @asis

@item  <object> 
到達不能追跡のheadとして扱うオブジェクト。

オブジェクトが指定されていない場合、 @emph{git fsck} はデフォルトでインデックスファイルと、 @samp{refs}
名前空間内のすべてのSHA-1参照と、(@samp{--no-reflogs} が与えられて無い場合)すべてのreflogsを、headとして使用します。

@item  @samp{--unreachable} 
存在するが、どの参照ノードからも到達できないオブジェクトを印刷します。

@item  @samp{--[no-]dangling} 
存在するが「直接」使用されることのないオブジェクトを印刷します(デフォルト)。 @samp{--no-dangling}
を使用して、この情報を出力から省略することができます。

@item  @samp{--root} 
ルートノードを報告します。

@item  @samp{--tags} 
タグを報告します。

@item  @samp{--cache} 
インデックスに記録されているオブジェクトを、到達不能追跡のheadノードとしても考慮します。

@item  @samp{--no-reflogs} 
reflogのエントリによってのみ参照されるコミットが到達可能であるとは見なさないようにします。このオプションは、以前はrefに含まれていたが、現在は含まれていないが、対応するreflogに残っているコミットを検索することのみを目的としています。

@item  @samp{--full} 
GIT_OBJECT_DIRECTORY（$GIT_DIR/objects)
内のオブジェクトだけでなく、GIT_ALTERNATE_OBJECT_DIRECTORIES または
$GIT_DIR/objects/info/alternates にリストされている代替オブジェクトプール、および
$GIT_DIR/objects/pack
にあるパックされたGitアーカイブにあるオブジェクトもチェックします。サブディレクトリを代替オブジェクトプールにパックします。いまやこれがデフォルトになりました。
@samp{--no-full} でオフにできます。

@item  @samp{--connectivity-only} 
到達可能なオブジェクトの接続のみをチェックし、到達可能なタグ、コミット、またはツリーによって参照されるオブジェクトが存在することを確認します。これにより、ブロブの読み取りを完全に回避することで操作が高速化されます(ただし、参照されたブロブが存在するかどうかは引き続きチェックされます)。
これにより、コミットとツリーの破損が検出されますが、セマンティックチェック(フォーマットエラーなど)は行われません。ブロブオブジェクトの破損はまったく検出されません。

到達不能なタグ、コミット、およびツリーにもアクセスして、履歴のぶら下がっているセグメントのヒントを見つけることができます。この出力を気にせず、さらに高速化したい場合は、
@samp{--no-dangling} を使用してください。

@item  @samp{--strict} 
より厳密なチェックを有効にします。つまり、古いバージョンのGitによって作成された g+w
ビットセットで記録されたファイルモードをキャッチします。Linuxカーネル、Git自体、スパースリポジトリなどの既存のリポジトリには、このチェックをトリガーする古いオブジェクトがありますが、このフラグを使用して新しいプロジェクトをチェックすることをお勧めします。

@item  @samp{--verbose} 
おしゃべりになります。

@item  @samp{--lost-found} 
タイプに応じて、ぶら下がっているオブジェクトを .git/lost-found/commit/ または .git/lost-found/other/
に書き込みます。オブジェクトがブロブの場合、コンテンツはそのオブジェクト名ではなくファイルに書き込まれます。

@item  @samp{--name-objects} 
到達可能なオブジェクトの名前を表示する場合、SHA-1に加えて、それらがどのように到達可能であるかを説明する名前も表示します。
git-rev-parse(1) と互換性があります。 例えば @samp{HEAD@@@{1234567890@}~25^2:src/}

@item  @samp{--[no-]progress} 
@samp{--no-progress} または @samp{--verbose}
が指定されていない限り、進行状況ステータスは、端末に接続されている場合、デフォルトで標準エラーストリームに報告されます。 @samp{--progress}
は、標準エラーストリームが端末に送信されていない場合でも、進行状況出力を強制します。
@end table

@noindent

@chapheading CONFIGURATION

@table @asis

@item  fsck.<msg-id> 
fsck中に、gitは、現在のバージョンのgitでは生成されず、 @samp{transfer.fsckObjects}
が設定されている場合はネットワーク経由で送信されない、レガシーデータの問題を検出する場合があります。この機能は、そのようなデータを含むレガシーリポジトリの操作をサポートすることを目的としています。

@samp{fsck.<msg-id>} 設定は、 git-fsck(1) によって取得されますが、代わりに、そのようなデータセット
@samp{receive.fsck.<msg-id>} のプッシュを受け入れるか、または、クローンまたはフェッチのセットである
@samp{fetch.fsck.<msg-id>} を使用します。

この文書の残りの部分では、簡潔にするために @samp{fsck.*} 変数について説明していますが、対応する @samp{receive.fsck.*} 変数と
@samp{fetch.<msg-id>.*} 変数にも同じことが当てはまります。

@samp{color.ui} や @samp{core.editor} のような変数とは異なり、 @samp{receive.fsck.<msg-id>} と
@samp{fetch.fsck.<msg-id>} 変数は、設定されていない場合、 @samp{fsck.<msg-id>}
構成にフォールバックしません。さまざまな状況で同じfsck設定を均一に構成するには、3つすべてを同じ値に設定する必要があります。

@samp{fsck.<msg-id>} が設定されている場合、 @samp{fsck.<msg-id>} の値を @samp{error} 、 @samp{warn} 、@samp{ignore}
のいずれか一つとすることにより、エラーを警告に切り替える事もでき、その逆も可能です。そして @samp{<msg-id>}
の部分はメッセージIDです。便利なように、fsckはエラー/警告メッセージの前にメッセージIDを付けます。たとえば「missingEmail:
invalid author/committer line - missing email」は、 @samp{fsck.missingEmail =
ignore} を設定するとその問題が非表示になることを意味します。

一般に、これらの問題のあるオブジェクトが共有する破損の種類をリストして無視するのではなく、 @samp{fsck.skipList}
に問題のある既存のオブジェクトを列挙することをお勧めします。前者を実行すると、同じ破損の新しいインスタンスが見過ごされる可能性があります。

不明な @samp{fsck.<msg-id>} 値を設定すると、fsckが停止(die)しますが、 @samp{receive.fsck.<msg-id>} や
@samp{fetch.fsck.<msg-id>} に対して同じことを行うと、gitは単に警告するだけです。

@item  fsck.skipList 
非致命的な理由により既に壊れている(broken)ことが分かっているため無視する必要があるオブジェクト名(1行につき1つの省略されてないSHA-1)のリストへのパス。Git
2.20
以降では、コメント(@samp{#})文字から行末までと、空行と、先頭と末尾の空白(whitespace)は無視されます。それより古いバージョンでは1行につき1つのSHA-1以外は全てエラーになります。

この機能は、無効なコミッターの電子メールアドレスなど、初期のコミットにもかかわらず、安全に無視できるエラーを含む、確立されたプロジェクトを受け入れる必要がある場合に役立ちます。
注意: この設定では、corruptオブジェクトをスキップすることはできません。

@samp{fsck.<msg-id>} と同様に、この変数に対応する @samp{receive.fsck.skipList} 派生と
@samp{fetch.fsck.skipList} 派生があります。

@samp{color.ui} や @samp{core.editor} のような変数とは異なり、 @samp{receive.fsck.skipList} 変数と
@samp{fetch.fsck.skipList} 変数は、設定されていない場合、 @samp{fsck.skipList}
構成にフォールバックしません。さまざまな状況で同じfsck設定を均一に構成するには、3つすべてを同じ値に設定する必要があります。

古いバージョンのGit(2.20より前)では、オブジェクト名リストを並べ替える必要があることが文書化されています。これは必須ではなく、オブジェクト名は任意の順序で表示できますが、リストを読み取るときに、内部バイナリ検索実装の目的でリストが並べ替えられているかどうかを追跡しました。これにより、既に並べ替えられたリストでは作業を節約できます。膨大なリストがない限り、リストを事前に並べ替える必要はありませんでした。
Gitバージョン2.20以降では、代わりにハッシュ実装が使用されるため、リストを事前に並べ替える必要はありません。
@end table

@noindent

@chapheading DISCUSSION

git-fsckは、SHA-1と一般的なオブジェクトの健全性をテストし、結果として得られる到達可能性とその他すべてを完全に追跡します。検出した破損(オブジェクトの欠落または不良)を出力し、
@samp{--unreachable}
フラグを使用すると、存在するが指定されたheadノード(または上記デフォルト達)のいずれからも到達できないオブジェクトも出力します。

つまり、それは、あなたのバックアップや、他のアーカイブで見つけなければならない破損したオブジェクトです(つまり、あなたは、それらを削除して、他の誰かが破損したオブジェクトを持っていることを期待して、他のサイトと「rsync」を実行できます)。

core.commitGraph が true の場合、 commit-graph ファイルも「git commit-graph
verify」を使用して検査されます。 git-commit-graph(1) を参照してください。

@noindent

@chapheading Extracted Diagnostics

@table @asis

@item  unreachable <type> <object> 
<type> というタイプである <object>
というオブジェクトは、表示されるツリーまたはコミットのいずれにおいても、実際には直接または間接的に参照されていません。これは、指定していない別のルートノードがあるか、ツリーが破損していることを意味している可能性があります。ルートノードを見逃していない場合は、到達不能なノードは使用できないため、削除することをお勧めします。

@item  missing <type> <object> 
この <type> というタイプの <object> というオブジェクトは参照されていますが、データベースに存在しません。

@item  dangling <type> <object> 
この <type> タイプの <object> というオブジェクトはデータベースに存在しますが、「直接」使用されることはありません。
ぶら下がっているコミットはルートノードである可能性があります。

@item  hash mismatch <object> 
データベースに、ハッシュがオブジェクトデータベースの値と一致しないオブジェクトがあります。これは、深刻なデータ整合性の問題を示しています。
@end table

@noindent

@chapheading Environment Variables

@table @asis

@item  GIT_OBJECT_DIRECTORY 
オブジェクトデータベースのルート(通常は $GIT_DIR/objects )を指定するために使用されます

@item  GIT_INDEX_FILE 
インデックスのインデックスファイルを指定するために使用されます

@item  GIT_ALTERNATE_OBJECT_DIRECTORIES 
追加のオブジェクトデータベースルートを指定するために使用されます(通常は未設定)
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-gc,,,Top
@chapheading Name

git-gc — 不要なファイルをクリーンアップし、ローカルリポジトリを最適化する

@noindent

@chapheading Synopsis

@display
git gc [--aggressive] [--auto] [--quiet] [--prune=<date> | --no-prune] [--force] [--keep-largest-pack]
@end display


@noindent

@chapheading DESCRIPTION

ファイルリビジョンの圧縮(ディスクスペースの削減とパフォーマンスの向上)または、「git
add」の以前の呼び出しから作成された可能性のある到達不能オブジェクトの削除または、refのパッキングまたは、reflogの剪定(prune)または、メタデータまたは古い作業ツリーのrerere、など、現在のリポジトリ内で多数のハウスキーピングタスクを実行します。
commit-graphなどの補助インデックスも更新される場合があります。

オブジェクトを作成する一般的な磁器コマンド操作を実行すると、最後のメンテナンス以降にリポジトリが大幅に拡張されているかどうかが確認され、拡張されている場合は、
@samp{git gc} が自動的に実行されます。この動作を無効にする方法については、以下の @samp{gc.auto} を参照してください。

@samp{git gc}
を手動で実行する必要があるのは、そのような磁器コマンドを定期的に実行せずにオブジェクトをリポジトリに追加する場合、1回限りのリポジトリ最適化を行う場合などです。最適ではない大量インポートをクリーンアップします。インポートの場合の詳細については、
git-fast-import(1)の「PACKFILE OPTIMIZATION」セクションを参照してください。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--aggressive} 
通常、「git gc」は非常に高速に実行され、ディスクスペースの使用率とパフォーマンスは良好です。このオプションを使用すると、「git
gc」はリポジトリをより積極的に最適化できますが、時間がかかります。この最適化の効果は割と持続性があります。詳細については、以下の「AGGRESSIVE」セクションを参照してください。

@item  @samp{--auto} 
このオプションを使用すると、「git gc」はハウスキーピングが必要かどうかを確認します。 そうでない場合は、作業を実行せずに終了します。

このヒューリスティックな作業がどのように機能するかについては、以下の「CONFIGURATION」セクションの「gc.auto」オプションを参照してください。

@samp{gc.auto} や @samp{gc.autoPackLimit}
などの構成オプションの制限を超えてハウスキーピングがトリガーされると、他のすべてのハウスキーピングタスク（rerere、working
tree、reflogなど）も実行されます。

@item  @samp{--prune=<date>} 
指定の日付より古いルーズオブジェクトを削除します(デフォルトは2週間前で、構成変数 @samp{gc.pruneExpire} で上書きできます)。
@samp{--prune=now}
は、日付に関係なく緩いオブジェクトを削除し、別のプロセスが同時にリポジトリに書き込んでいる場合に破損のリスクが高まります。以下の「NOTES」を参照してください。
@samp{--prune} はデフォルトでオンになっています。

@item  @samp{--no-prune} 
任意のルーズオブジェクトを剪定しません。

@item  @samp{--quiet} 
すべての進捗レポートを抑制します。

@item  @samp{--force} 
このリポジトリで別の @samp{git gc} インスタンスが実行されている場合でも、 @samp{git gc} を強制的に実行します。

@item  @samp{--keep-largest-pack} 
最大のパックと @samp{.keep} ファイルでマークされたパックを除くすべてのパックが1つのパックに統合されます。このオプションを使用すると、
@samp{gc.bigPackThreshold} は無視されます。
@end table

@noindent

@chapheading AGGRESSIVE

@samp{--aggressive} オプションが指定されている場合、 git-repack(1) は @samp{-f}
フラグを指定して呼び出され、次に @samp{--no-reuse-delta} が git-pack-objects(1)
に渡されます。これにより、既存のデルタが破棄されて再計算され、再パッキングに多くの時間を費します。

この効果は割と長続きします。例えばパックとルーズオブジェクトが互いに合体すると、そのパック内の既存のデルタが再利用される可能性がありますが、代わりに新しいパックから次善のデルタを選択する場合もあります。

さらに、 @samp{--aggressive} を指定すると、 git-repack(1) に渡される @samp{--depth} と
@samp{--window} オプションが微調整されます。以下の @samp{gc.aggressiveDepth} と @samp{gc.aggressiveWindow}
設定を参照してください。より大きなウィンドウサイズを使用することで、より最適なデルタを見つける可能性が高くなります。

カスタマイズされたパフォーマンスベンチマークを実行せずに、特定のリポジトリでこのオプションを使用することはおそらく価値がありません。それにはもっと時間がかかり、結果として生じるスペース/デルタの最適化はそれだけの価値があるかもしれませんし、そうでないかもしれません。これをまったく使用しないことは、ほとんどのユーザーとそのリポジトリにとって正しいトレードオフです。

@noindent

@chapheading CONFIGURATION

以下の文書は git-config(1) にあるものと同じです:

@table @asis

@item  gc.aggressiveDepth 
@samp{git gc --aggressive}
で使用されるデルタ圧縮アルゴリズムで使用される深さパラメーター。これはデフォルトで50に設定されています。これは @samp{--aggressive}
が使用されていない場合の @samp{--depth} オプションのデフォルトです。

詳細については git-repack(1) の @samp{--depth} オプションの文書を参照してください。

@item  gc.aggressiveWindow 
@samp{git gc --aggressive}
で使用されるデルタ圧縮アルゴリズムで使用されるウィンドウサイズパラメータ。これはデフォルトで250に設定されています。これは、 @samp{--window}
のデフォルト値の10よりもはるかに積極的なウィンドウサイズです。

詳細については、 git-repack(1) の @samp{--window} オプションの文書を参照してください。

@item  gc.auto 
リポジトリにおおよそ指定の値より多くのルーズオブジェクトがある場合、 @samp{git gc --auto}
はそれらをパックします。一部の磁器コマンドは、このコマンドを使用して、軽量のガベージコレクションを時々実行します。デフォルト値は6700です。

これを0に設定すると、ルーズオブジェクトの数に基づく自動パッキングが無効にななります。また、他のヒューリスティックな @samp{git gc --auto}
が、 @samp{gc.autoPackLimit} などの作業があるかどうかを判断するためにこの値を使用します。

@item  gc.autoPackLimit 
リポジトリに @samp{* .keep} ファイルでマークされていないパックがこの設定値より多くある場合、 @samp{git gc --auto}
はそれらを1つの大きなパックに統合します。デフォルト値は50です。これを0に設定すると、無効になります。 @samp{gc.auto}
を0に設定すると、この設定も無効になります。

以下の @samp{gc.bigPackThreshold} 構成変数を参照してください。この設定を使用中は、自動パックの制限がどのように機能するかに影響します。

@item  gc.autoDetach 
システムがサポートしている場合は @samp{git gc --auto} は即座戻り、実行はバックグラウンドで行われます。デフォルトはtrueです。

@item  gc.bigPackThreshold 
ゼロ以外の場合、 @samp{git gc} の実行時に、この設定値より大きいすべてのパックが保持されます。これは @samp{--keep-largest-pack}
と非常に似ていますが、最大のパックだけでなく、しきい値を満たす全てのパックが保持される点が異なります。デフォルトはゼロです。 @emph{k} 、 @emph{m} 、
@emph{g} の一般的な単位接尾辞がサポートされています。

注意: 保持されるパックの数が gc.autoPackLimit
を超える場合、この構成変数は無視され、基本パックを除くすべてのパックが再パックされることに注意してください。再パック後、パックの数は
gc.autoPackLimit を下回り、再び gc.bigPackThreshold が尊重されるでしょう。

@samp{git repack} がスムーズに実行されると推定されるメモリ量が利用できず、かつ、 @samp{gc.bigPackThreshold}
が設定されていない場合、最大のパックも除外されます(これは、 @samp{--keep-largest-pack} を指定して @samp{git gc}
を実行するのと同じです)。

@item  gc.writeCommitGraph 
trueの場合、 git-gc(1) が実行されると、 gcはcommit-graphファイルを書き換えます。 @samp{git gc
--auto} を使用する場合、ハウスキーピングが必要な場合はコミットグラフが更新されます。デフォルトはtrueです。詳細については
git-commit-graph(1) を参照してください。

@item  gc.logExpiry 
ファイルgc.logが存在する場合、 @samp{git gc --auto}
はそのコンテンツを出力し、そのファイルが「gc.logExpiry」より古い場合を除いて、実行する代わりにステータス0で終了します。デフォルトは「1.day」です。その他の値の指定方法については
@samp{gc.pruneExpire} を参照してください。

@item  gc.packRefs 
リポジトリで @samp{git pack-refs} を実行すると、HTTPなどの馬鹿プロトコル(dumb transport) を介して 1.5.1.2
より前のGitバージョンではクローンが作成できなくなります。この変数は、「git gc」が「git
pack-refs」を実行するかどうかを決定します。これを @samp{notbare}
に設定して、すべての非ベアリポジトリ内で有効にするか、ブール値に設定することができます。 デフォルトは @samp{true} です。

@item  gc.pruneExpire 
「git gc」を実行すると、@samp{prune --expire 2.weeks.ago} が呼び出されます。この構成変数で猶予期間をオーバーライドします。
値「now」を使用してこの猶予期間を無効にし、到達不能なオブジェクトを常にすぐに剪定(prune)するか、「never」を使用して剪定を抑制することができます。この機能は「git
gc」がリポジトリに書き込む別のプロセスと同時に実行される場合の破損を防ぐのに役立ちます。 git-gc(1)
の「NOTES」セクションを参照してください。

@item  gc.worktreePruneExpire 
@emph{git gc} が実行されると、 @samp{git worktree prune --expire3.months.ago}
が呼び出されます。この構成変数を使用して、別の猶予期間を設定できます。値「now」を使用して猶予期間を無効にし、
@samp{$GIT_DIR/worktrees} をすぐに剪定(prune)するか、「never」を使用して剪定を抑制することができます。

@item  gc.reflogExpire 
@itemx  gc.<pattern>.reflogExpire 
「git reflog
expire」は、この時間より古いreflogエントリを削除します。デフォルトは90日です。値「now」はすべてのエントリをすぐに期限切れにし、「never」は期限切れを完全に抑制します。中央に「<pattern>」(例:「refs/stash」)がある場合、設定は
<pattern> に一致するrefにのみ適用されます。

@item  gc.reflogExpireUnreachable 
@itemx  gc.<pattern>.reflogExpireUnreachable 
@emph{git reflog expire} は、この時間より古いreflogエントリを削除し、現在の先端(the current
tip)から到達不能にします。デフォルトは30日です。値「now」はすべてのエントリをすぐに期限切れにし、「never」は期限切れを完全に抑制します。中央に「<pattern>」(例:「refs/stash」)がある場合、設定は
<pattern> に一致するrefにのみ適用されます。

これらのタイプのエントリは通常、 @samp{git commit--amend} または @samp{git rebase}
を使用した結果として作成され、修正またはリベースが発生する前のコミットです。これらの変更は現在のプロジェクトの一部ではないため、ほとんどのユーザーはそれらをより早く期限切れにしたいと思うでしょう。そのため、デフォルトは
@samp{gc.reflogExpire} よりも積極的です。

@item  gc.rerereResolved 
以前に解決した競合するマージの記録は、「git rerere
gc」が実行されるときに、この設定値で指定の日数保持されます。より人間が読める「1.month.ago」などを使用することもできます。デフォルトは60日です。
git-rerere(1) を参照してください。

@item  gc.rerereUnresolved 
@emph{git rerere gc}
が実行されると、解決していない競合するマージの記録がこの設定値の日数保持されます。より人間が読める「1.month.ago」などを使用することもできます。デフォルトは15日です。
git-rerere(1) を参照してください。
@end table

@noindent

@chapheading NOTES

@emph{git gc}
は、リポジトリ内のどこかで参照されているオブジェクトを削除しないように非常に努力しています。特に、現在のブランチとタグのセットによって参照されるオブジェクトだけでなく、インデックス、リモートトラッキングブランチ、reflog（後で修正または巻き戻されたブランチのコミットを参照する可能性がある）などによって参照されるオブジェクトも保持されます。それ以外の場合は、
refs/* 名前空間にあります。オブジェクトに添付された(「git notes」によって作成された種類の)
noteは、オブジェクトの存続に寄与しないことに注意してください。一部のオブジェクトが削除されることを期待していて、削除されない場合は、それらの場所をすべて確認し、それらの参照を削除することが理にかなっているかどうかを判断してください。

一方、「git
gc」が別のプロセスと同時に実行されると、他のプロセスが使用しているが参照を作成していないオブジェクトが削除されるリスクがあります。これにより、他のプロセスが失敗したり、他のプロセスが後で削除されたオブジェクトへの参照を追加した場合にリポジトリが破損したりする可能性があります。
Gitには、この問題を大幅に軽減する2つの機能があります:

@enumerate 

@item
@samp{--prune} の日付よりも新しい変更時刻を持つオブジェクトは、そこから到達可能なすべてのモノと共にに保持されます。

@item
データベースにオブジェクトを追加するほとんどの操作は、オブジェクトがすでに存在する場合はその変更時刻を更新して、 #1 が適用されるようにします。
@end enumerate

ただし、これらの機能は完全なソリューションには及ばないため、コマンドを同時に実行するユーザーは、破損のリスクを抱えて生活する必要があります(実際にはリスクは低いようです)。

@noindent

@chapheading HOOKS

@samp{git gc --auto} コマンドは、 @emph{pre-auto-gc} フックを実行します。 詳細については、 githooks(5)
を参照してください。

@noindent

@chapheading SEE ALSO

git-prune(1) git-reflog(1) git-repack(1)
git-rerere(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-get-tar-commit-id,,,Top
@chapheading Name

git-get-tar-commit-id — git-archiveを使用して作成されたアーカイブからコミットIDを抽出します

@noindent

@chapheading Synopsis

@display
git get-tar-commit-id
@end display


@noindent

@chapheading DESCRIPTION

@emph{git archive}
によって作成されたtarアーカイブを標準入力から読み取り、そこに保存されているコミットIDを抽出します。入力の最初の1024バイトのみを読み取るため、実行時間はtarアーカイブのサイズに大きく影響されることはありません。

コミットIDが見つからない場合、 @emph{git get-tar-commit-id} は何も出力せずリターンコード1を返すだけです。これは、アーカイブが
@emph{git archive} を使用して作成されていない場合、または @emph{git archive}
の最初のパラメーターが、コミットIDまたはタグではなくツリーIDだった場合に発生する可能性があります。(訳注:入力がtarアーカイブで無い場合はstderrにtarアーカイブで無い旨のエラー出力があり、exit
code は 128。入力がtarアーカイブの場合で、コミットIDが見つからない場合は表記どおりstdout/stderr出力一切無しでexit
code 1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-grep,,,Top
@chapheading Name

git-grep — Print lines matching a pattern

@noindent

@chapheading Synopsis

@display
git grep [-a | --text] [-I] [--textconv] [-i | --ignore-case] [-w | --word-regexp]
           [-v | --invert-match] [-h|-H] [--full-name]
           [-E | --extended-regexp] [-G | --basic-regexp]
           [-P | --perl-regexp]
           [-F | --fixed-strings] [-n | --line-number] [--column]
           [-l | --files-with-matches] [-L | --files-without-match]
           [(-O | --open-files-in-pager) [<pager>]]
           [-z | --null]
           [ -o | --only-matching ] [-c | --count] [--all-match] [-q | --quiet]
           [--max-depth <depth>] [--[no-]recursive]
           [--color[=<when>] | --no-color]
           [--break] [--heading] [-p | --show-function]
           [-A <post-context>] [-B <pre-context>] [-C <context>]
           [-W | --function-context]
           [--threads <num>]
           [-f <file>] [-e] <pattern>
           [--and|--or|--not|(|)|-e <pattern>…]
           [--recurse-submodules] [--parent-basename <basename>]
           [ [--[no-]exclude-standard] [--cached | --no-index | --untracked] | <tree>…]
           [--] [<pathspec>…]
@end display


@noindent

@chapheading DESCRIPTION

Look for specified patterns in the tracked files in the work tree, blobs
registered in the index file, or blobs in given tree objects.  Patterns are
lists of one or more search expressions separated by newline characters.  An
empty string as search expression matches all lines.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--cached} 
Instead of searching tracked files in the working tree, search blobs
registered in the index file.

@item  @samp{--no-index} 
Search files in the current directory that is not managed by Git.

@item  @samp{--untracked} 
In addition to searching in the tracked files in the working tree, search
also in untracked files.

@item  @samp{--no-exclude-standard} 
Also search in ignored files by not honoring the @samp{.gitignore}
mechanism. Only useful with @samp{--untracked}.

@item  @samp{--exclude-standard} 
Do not pay attention to ignored files specified via the @samp{.gitignore}
mechanism.  Only useful when searching files in the current directory with
@samp{--no-index}.

@item  @samp{--recurse-submodules} 
Recursively search in each submodule that is active and checked out in the
repository.  When used in combination with the <tree> option the prefix of
all submodule output will be the name of the parent project’s <tree>
object. This option has no effect if @samp{--no-index} is given.

@item  @samp{-a} 
@itemx  @samp{--text} 
Process binary files as if they were text.

@item  @samp{--textconv} 
Honor textconv filter settings.

@item  @samp{--no-textconv} 
Do not honor textconv filter settings.  This is the default.

@item  @samp{-i} 
@itemx  @samp{--ignore-case} 
Ignore case differences between the patterns and the files.

@item  @samp{-I} 
Don’t match the pattern in binary files.

@item  @samp{--max-depth <depth>} 
For each <pathspec> given on command line, descend at most <depth> levels of
directories. A value of -1 means no limit.  This option is ignored if
<pathspec> contains active wildcards.  In other words if "a*" matches a
directory named "a*", "*" is matched literally so --max-depth is still
effective.

@item  @samp{-r} 
@itemx  @samp{--recursive} 
Same as @samp{--max-depth=-1}; this is the default.

@item  @samp{--no-recursive} 
Same as @samp{--max-depth=0}.

@item  @samp{-w} 
@itemx  @samp{--word-regexp} 
Match the pattern only at word boundary (either begin at the beginning of a
line, or preceded by a non-word character; end at the end of a line or
followed by a non-word character).

@item  @samp{-v} 
@itemx  @samp{--invert-match} 
Select non-matching lines.

@item  @samp{-h} 
@itemx  @samp{-H} 
By default, the command shows the filename for each match.  @samp{-h} option is
used to suppress this output.  @samp{-H} is there for completeness and does not
do anything except it overrides @samp{-h} given earlier on the command line.

@item  @samp{--full-name} 
When run from a subdirectory, the command usually outputs paths relative to
the current directory.  This option forces paths to be output relative to
the project top directory.

@item  @samp{-E} 
@itemx  @samp{--extended-regexp} 
@itemx  @samp{-G} 
@itemx  @samp{--basic-regexp} 
Use POSIX extended/basic regexp for patterns.  Default is to use basic
regexp.

@item  @samp{-P} 
@itemx  @samp{--perl-regexp} 
Use Perl-compatible regular expressions for patterns.

Support for these types of regular expressions is an optional compile-time
dependency. If Git wasn’t compiled with support for them providing this
option will cause it to die.

@item  @samp{-F} 
@itemx  @samp{--fixed-strings} 
Use fixed strings for patterns (don’t interpret pattern as a regex).

@item  @samp{-n} 
@itemx  @samp{--line-number} 
Prefix the line number to matching lines.

@item  @samp{--column} 
Prefix the 1-indexed byte-offset of the first match from the start of the
matching line.

@item  @samp{-l} 
@itemx  @samp{--files-with-matches} 
@itemx  @samp{--name-only} 
@itemx  @samp{-L} 
@itemx  @samp{--files-without-match} 
Instead of showing every matched line, show only the names of files that
contain (or do not contain) matches.  For better compatibility with @emph{git
diff}, @samp{--name-only} is a synonym for @samp{--files-with-matches}.

@item  @samp{-O[<pager>]} 
@itemx  @samp{--open-files-in-pager[=<pager>]} 
Open the matching files in the pager (not the output of @emph{grep}).  If the
pager happens to be "less" or "vi", and the user specified only one pattern,
the first file is positioned at the first match automatically. The @samp{pager}
argument is optional; if specified, it must be stuck to the option without a
space. If @samp{pager} is unspecified, the default pager will be used (see
@samp{core.pager} in git-config(1)).

@item  @samp{-z} 
@itemx  @samp{--null} 
Use \0 as the delimiter for pathnames in the output, and print them
verbatim. Without this option, pathnames with "unusual" characters are
quoted as explained for the configuration variable core.quotePath (see
git-config(1)).

@item  @samp{-o} 
@itemx  @samp{--only-matching} 
Print only the matched (non-empty) parts of a matching line, with each such
part on a separate output line.

@item  @samp{-c} 
@itemx  @samp{--count} 
Instead of showing every matched line, show the number of lines that match.

@item  @samp{--color[=<when>]} 
Show colored matches.  The value must be always (the default), never, or
auto.

@item  @samp{--no-color} 
Turn off match highlighting, even when the configuration file gives the
default to color output.  Same as @samp{--color=never}.

@item  @samp{--break} 
Print an empty line between matches from different files.

@item  @samp{--heading} 
Show the filename above the matches in that file instead of at the start of
each shown line.

@item  @samp{-p} 
@itemx  @samp{--show-function} 
Show the preceding line that contains the function name of the match, unless
the matching line is a function name itself.  The name is determined in the
same way as @samp{git diff} works out patch hunk headers (see @emph{Defining a custom
hunk-header} in gitattributes(5)).

@item  @samp{-<num>} 
@itemx  @samp{-C <num>} 
@itemx  @samp{--context <num>} 
Show <num> leading and trailing lines, and place a line containing @samp{--}
between contiguous groups of matches.

@item  @samp{-A <num>} 
@itemx  @samp{--after-context <num>} 
Show <num> trailing lines, and place a line containing @samp{--} between
contiguous groups of matches.

@item  @samp{-B <num>} 
@itemx  @samp{--before-context <num>} 
Show <num> leading lines, and place a line containing @samp{--} between
contiguous groups of matches.

@item  @samp{-W} 
@itemx  @samp{--function-context} 
Show the surrounding text from the previous line containing a function name
up to the one before the next function name, effectively showing the whole
function in which the match was found. The function names are determined in
the same way as @samp{git diff} works out patch hunk headers (see @emph{Defining a
custom hunk-header} in gitattributes(5)).

@item  @samp{--threads <num>} 
Number of grep worker threads to use.  See @samp{grep.threads} in @emph{CONFIGURATION}
for more information.

@item  @samp{-f <file>} 
Read patterns from <file>, one per line.

Passing the pattern via <file> allows for providing a search pattern
containing a \0.

Not all pattern types support patterns containing \0. Git will error out if
a given pattern type can’t support such a pattern. The @samp{--perl-regexp}
pattern type when compiled against the PCRE v2 backend has the widest
support for these types of patterns.

In versions of Git before 2.23.0 patterns containing \0 would be silently
considered fixed. This was never documented, there were also odd and
undocumented interactions between e.g. non-ASCII patterns containing \0 and
@samp{--ignore-case}.

In future versions we may learn to support patterns containing \0 for more
search backends, until then we’ll die when the pattern type in question
doesn’t support them.

@item  @samp{-e} 
The next parameter is the pattern. This option has to be used for patterns
starting with @samp{-} and should be used in scripts passing user input to grep.
Multiple patterns are combined by @emph{or}.

@item  @samp{--and} 
@itemx  @samp{--or} 
@itemx  @samp{--not} 
@itemx  ( … ) 
Specify how multiple patterns are combined using Boolean expressions.
@samp{--or} is the default operator.  @samp{--and} has higher precedence than @samp{--or}.
@samp{-e} has to be used for all patterns.

@item  @samp{--all-match} 
When giving multiple pattern expressions combined with @samp{--or}, this flag is
specified to limit the match to files that have lines to match all of them.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Do not output matched lines; instead, exit with status 0 when there is a
match and with non-zero status when there isn’t.

@item  <tree>… 
Instead of searching tracked files in the working tree, search blobs in the
given trees.

@item  -- 
Signals the end of options; the rest of the parameters are <pathspec>
limiters.

@item  <pathspec>… 
If given, limit the search to paths matching at least one pattern.  Both
leading paths match and glob(7) patterns are supported.

For more details about the <pathspec> syntax, see the @emph{pathspec} entry in
gitglossary(7).
@end table

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git grep 'time_t' -- '*.[ch]'} 
Looks for @samp{time_t} in all tracked .c and .h files in the working directory
and its subdirectories.

@item  @samp{git grep -e '#define' --and \( -e MAX_PATH -e PATH_MAX \)} 
Looks for a line that has @samp{#define} and either @samp{MAX_PATH} or @samp{PATH_MAX}.

@item  @samp{git grep --all-match -e NODE -e Unexpected} 
Looks for a line that has @samp{NODE} or @samp{Unexpected} in files that have lines
that match both.

@item  @samp{git grep solution -- :^Documentation} 
Looks for @samp{solution}, excluding files in @samp{Documentation}.
@end table

@noindent

@chapheading NOTES ON THREADS

The @samp{--threads} option (and the grep.threads configuration) will be ignored
when @samp{--open-files-in-pager} is used, forcing a single-threaded execution.

When grepping the object store (with @samp{--cached} or giving tree objects),
running with multiple threads might perform slower than single threaded if
@samp{--textconv} is given and there’re too many text conversions. So if you
experience low performance in this case, it might be desirable to use
@samp{--threads=1}.

@noindent

@chapheading CONFIGURATION

@table @asis

@item  grep.lineNumber 
If set to true, enable @samp{-n} option by default.

@item  grep.column 
If set to true, enable the @samp{--column} option by default.

@item  grep.patternType 
Set the default matching behavior. Using a value of @emph{basic}, @emph{extended},
@emph{fixed}, or @emph{perl} will enable the @samp{--basic-regexp}, @samp{--extended-regexp},
@samp{--fixed-strings}, or @samp{--perl-regexp} option accordingly, while the value
@emph{default} will return to the default matching behavior.

@item  grep.extendedRegexp 
If set to true, enable @samp{--extended-regexp} option by default. This option is
ignored when the @samp{grep.patternType} option is set to a value other than
@emph{default}.

@item  grep.threads 
Number of grep worker threads to use. If unset (or set to 0), Git will use
as many threads as the number of logical cores available.

@item  grep.fullName 
If set to true, enable @samp{--full-name} option by default.

@item  grep.fallbackToNoIndex 
If set to true, fall back to git grep --no-index if git grep is executed
outside of a git repository.  Defaults to false.
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-gui,,,Top
@chapheading Name

git-gui — Gitのための移植性の高いGUI

@noindent

@chapheading Synopsis

@display
git gui [<command>] [arguments]
@end display


@noindent

@chapheading DESCRIPTION

Gitの為の Tcl/Tk ベースのGUIです。「git
gui」は、ユーザーが新しいコミットを作成し、既存のコミットを修正し、ブランチを作成し、ローカルマージを実行し、リモートリポジトリにフェッチ/プッシュすることでリポジトリに変更を加えることができるようにすることに重点を置いています。

@emph{gitk} とは異なり、 @emph{git gui} はコミットの生成と単一ファイルの注釈に焦点を合わせており、プロジェクトの履歴は表示しません。
ただし、「git gui」内から「gitk」セッションを開始するためのメニュー操作を提供します。

「git gui」は、すべての一般的なUNIXシステム、Mac OS
X、およびWindows(CygwinとMSYSの両方)で動作することが知られています。可能な限り、OS固有のユーザーインターフェイスガイドラインに従い、「git
gui」を各OSのユーザーにとってかなり自然なインターフェイスにしようとしています。

@noindent

@chapheading COMMANDS

@table @asis

@item  blame 
指定されたバージョンの指定されたファイル(または指定されていない場合は作業ディレクトリ)でblameビューアを起動します。

@item  browser 
指定されたコミット内のすべてのファイルを表示するツリーブラウザを起動します。ブラウザで選択したファイルをblemeビューアで開きます。

@item  citool 
@emph{git gui}
を開始し、シェルを終了してシェルに戻る前に、正確に1つのコミットを行うように調整します。インターフェイスはコミットアクションのみに制限されているため、アプリケーションの起動時間がわずかに短縮され、メニューバーが簡素化されます。

@item  version 
現在実行中の「git gui」のバージョンを表示します。
@end table

@noindent

@chapheading Examples

@table @asis

@item  @samp{git gui blame Makefile} 
現在の作業ディレクトリにあるファイル「Makefile」の内容を表示し、各行の元の作成者と、その行を現在の場所に移動した人の両方に注釈を付けます。コミットされていないファイルには注釈が付けられ、(存在する場合)コミットされていない変更は「まだコミットされていません」と明示されます。

@item  @samp{git gui blame v0.99.8 Makefile} 
リビジョン「v0.99.8」の「Makefile」の内容を表示し、各行に注釈を付けます。上記の例とは異なり、ファイルは作業ディレクトリではなくオブジェクトデータベースから読み取られます。

@item  @samp{git gui blame --line=100 Makefile} 
上記のように注釈をロードし、100行目を中心にビューを自動的にスクロールします。

@item  @samp{git gui citool} 
1つのコミットを行い、完了したらシェルに戻ります。このコマンドは、コミットを行う以外の方法でウィンドウが閉じられた場合、ゼロ以外の終了コードを返します。

@item  @samp{git gui citool --amend} 
インターフェイスの「Amend Last Commit」モードを自動的に開始します。

@item  @samp{git gui citool --nocommit} 
通常のcitoolとして動作しますが、コミットを行う代わりに、ゼロの終了コードで終了します。インデックスにマージされていないエントリが含まれていないことを引き続きチェックするため、
git-mergetool(1) のGUIバージョンとして使用できます。

@item  @samp{git citool} 
@samp{git gui citool} (上記)と同じです。

@item  @samp{git gui browser maint} 
@emph{maint} ブランチのツリーのブラウザを表示します。ブラウザで選択したファイルは、内部のblameビューアで表示できます。
@end table

@noindent

@chapheading SEE ALSO

@table @asis

@item  gitk(1) 
Gitリポジトリブラウザ。 ブランチ、コミット履歴、ファイルの差分を表示します。 gitkは、「git
gui」のリポジトリ視覚化操作によって開始されるユーティリティです。
@end table

@noindent

@chapheading Other

「git
gui」は実際には独立したプロジェクトとして維持されていますが、エンドユーザーの便宜のために安定したバージョンがGitスイートの一部として配布されています。

@emph{git gui} プロジェクトの公式リポジトリは以下の場所にあります:

@example
https://github.com/prati0100/git-gui.git/
@end example

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-hash-object,,,Top
@chapheading Name

git-hash-object — オブジェクトIDを計算し、オプションでファイルからブロブを作成する

@noindent

@chapheading Synopsis

@display
git hash-object [-t <type>] [-w] [--path=<file>|--no-filters] [--stdin [--literally]] [--] <file>…
git hash-object [-t <type>] [-w] --stdin-paths [--no-filters]
@end display


@noindent

@chapheading DESCRIPTION

指定のファイル(作業ツリーの外部にある可能性あり)の内容を使用して、指定されたタイプのオブジェクトのオブジェクトID値を計算し、オブジェクトIDを標準出力に報告します。オプションで結果のオブジェクトをオブジェクトデータベースに書き込みます。
<type> が指定されていない場合、デフォルトで「blob」になります。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-t <type>} 
タイプの指定(デフォルト: "blob")。

@item  @samp{-w} 
実際にオブジェクトをオブジェクトデータベースに書き込みます。

@item  @samp{--stdin} 
ファイルからではなく、標準入力からオブジェクトを読み取ります。

@item  @samp{--stdin-paths} 
コマンドラインからではなく、標準入力から1行に1つずつファイル名を読み取ります。

@item  @samp{--path} 
指定されたパスにあるオブジェクトをハッシュします。ファイルの場所はハッシュ値に直接影響しませんが、パスを使用して、オブジェクトデータベースに配置する前にオブジェクトに適用するGitフィルターを決定し、フィルターを適用した結果、実際のブロブを配置します。オブジェクトデータベースへの入力は、指定されたファイルとは異なる場合があります。このオプションは主に、作業ディレクトリの外部にある一時ファイルまたは標準入力から読み取られたファイルをハッシュする場合に役立ちます。

@item  @samp{--no-filters} 
行末変換など、属性メカニズムによって選択された入力フィルターを無視して、コンテンツをそのままハッシュします。 ファイルが標準入力から読み取られる場合、
@samp{--path} オプションが指定されていない限り、これは常に暗黙に指定されたものとみなします。

@item  @samp{--literally} 
@samp{--stdin}
が、標準のオブジェクトパースやgit-fsckチェックに合格しない可能性のあるガベージをハッシュして緩いオブジェクトにできるようにします。Git自体のストレステストや、野生で遭遇した破損または偽のオブジェクトの特性の再現に役立ちます。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-help,,,Top
@chapheading Name

git-help — Display help information about Git

@noindent

@chapheading Synopsis

@display
git help [-a|--all [--[no-]verbose]] [-g|--guides]
           [-i|--info|-m|--man|-w|--web] [COMMAND|GUIDE]
@end display


@noindent

@chapheading DESCRIPTION

With no options and no COMMAND or GUIDE given, the synopsis of the @emph{git}
command and a list of the most commonly used Git commands are printed on the
standard output.

If the option @samp{--all} or @samp{-a} is given, all available commands are printed
on the standard output.

If the option @samp{--guides} or @samp{-g} is given, a list of the Git concept guides
is also printed on the standard output.

If a command, or a guide, is given, a manual page for that command or guide
is brought up. The @emph{man} program is used by default for this purpose, but
this can be overridden by other options or configuration variables.

If an alias is given, git shows the definition of the alias on standard
output. To get the manual page for the aliased command, use @samp{git COMMAND
--help}.

Note that @samp{git --help ...} is identical to @samp{git help ...} because the former
is internally converted into the latter.

To display the git(1) man page, use @samp{git help git}.

This page can be displayed with @emph{git help help} or @samp{git help --help}

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-a} 
@itemx  @samp{--all} 
Prints all the available commands on the standard output. This option
overrides any given command or guide name.

@item  @samp{--verbose} 
When used with @samp{--all} print description for all recognized commands. This
is the default.

@item  @samp{-c} 
@itemx  @samp{--config} 
List all available configuration variables. This is a short summary of the
list in git-config(1).

@item  @samp{-g} 
@itemx  @samp{--guides} 
Prints a list of the Git concept guides on the standard output. This option
overrides any given command or guide name.

@item  @samp{-i} 
@itemx  @samp{--info} 
Display manual page for the command in the @emph{info} format. The @emph{info} program
will be used for that purpose.

@item  @samp{-m} 
@itemx  @samp{--man} 
Display manual page for the command in the @emph{man} format. This option may be
used to override a value set in the @samp{help.format} configuration variable.

By default the @emph{man} program will be used to display the manual page, but
the @samp{man.viewer} configuration variable may be used to choose other display
programs (see below).

@item  @samp{-w} 
@itemx  @samp{--web} 
Display manual page for the command in the @emph{web} (HTML)  format. A web
browser will be used for that purpose.

The web browser can be specified using the configuration variable
@samp{help.browser}, or @samp{web.browser} if the former is not set. If none of these
config variables is set, the @emph{git web--browse} helper script (called by
@emph{git help}) will pick a suitable default. See
git-web--browse(1) for more information about this.
@end table

@noindent

@chapheading CONFIGURATION VARIABLES

@noindent

@heading help.format

If no command-line option is passed, the @samp{help.format} configuration
variable will be checked. The following values are supported for this
variable; they make @emph{git help} behave as their corresponding command- line
option:

@itemize 

@item
"man" corresponds to @emph{-m|--man},

@item
"info" corresponds to @emph{-i|--info},

@item
"web" or "html" correspond to @emph{-w|--web}.
@end itemize

@noindent

@heading help.browser, web.browser and browser.<tool>.path

The @samp{help.browser}, @samp{web.browser} and @samp{browser.<tool>.path} will also be
checked if the @emph{web} format is chosen (either by command-line option or
configuration variable). See @emph{-w|--web} in the OPTIONS section above and
git-web--browse(1).

@noindent

@heading man.viewer

The @samp{man.viewer} configuration variable will be checked if the @emph{man} format
is chosen. The following values are currently supported:

@itemize 

@item
"man": use the @emph{man} program as usual,

@item
"woman": use @emph{emacsclient} to launch the "woman" mode in emacs (this only
works starting with emacsclient versions 22),

@item
"konqueror": use @emph{kfmclient} to open the man page in a new konqueror tab
(see @emph{Note about konqueror} below).
@end itemize

Values for other tools can be used if there is a corresponding
@samp{man.<tool>.cmd} configuration entry (see below).

Multiple values may be given to the @samp{man.viewer} configuration
variable. Their corresponding programs will be tried in the order listed in
the configuration file.

For example, this configuration:

@example
        [man]
                viewer = konqueror
                viewer = woman
@end example


will try to use konqueror first. But this may fail (for example, if DISPLAY
is not set) and in that case emacs' woman mode will be tried.

If everything fails, or if no viewer is configured, the viewer specified in
the @samp{GIT_MAN_VIEWER} environment variable will be tried.  If that fails too,
the @emph{man} program will be tried anyway.

@noindent

@heading man.<tool>.path

You can explicitly provide a full path to your preferred man viewer by
setting the configuration variable @samp{man.<tool>.path}. For example, you can
configure the absolute path to konqueror by setting
@emph{man.konqueror.path}. Otherwise, @emph{git help} assumes the tool is available in
PATH.

@noindent

@heading man.<tool>.cmd

When the man viewer, specified by the @samp{man.viewer} configuration variables,
is not among the supported ones, then the corresponding @samp{man.<tool>.cmd}
configuration variable will be looked up. If this variable exists then the
specified tool will be treated as a custom command and a shell eval will be
used to run the command with the man page passed as arguments.

@noindent

@heading Note about konqueror

When @emph{konqueror} is specified in the @samp{man.viewer} configuration variable, we
launch @emph{kfmclient} to try to open the man page on an already opened
konqueror in a new tab if possible.

For consistency, we also try such a trick if @emph{man.konqueror.path} is set to
something like @samp{A_PATH_TO/konqueror}. That means we will try to launch
@samp{A_PATH_TO/kfmclient} instead.

If you really want to use @emph{konqueror}, then you can use something like the
following:

@example
        [man]
                viewer = konq

        [man "konq"]
                cmd = A_PATH_TO/konqueror
@end example


@noindent

@heading Note about git config --global

Note that all these configuration variables should probably be set using the
@samp{--global} flag, for example like this:

@example
$ git config --global help.format web
$ git config --global web.browser firefox
@end example


as they are probably more user specific than repository specific.  See
git-config(1) for more information about this.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-http-backend,,,Top
@chapheading Name

git-http-backend — Server side implementation of Git over HTTP

@noindent

@chapheading Synopsis

@display
git http-backend
@end display


@noindent

@chapheading DESCRIPTION

A simple CGI program to serve the contents of a Git repository to Git
clients accessing the repository over http:// and https:// protocols.  The
program supports clients fetching using both the smart HTTP protocol and the
backwards-compatible dumb HTTP protocol, as well as clients pushing using
the smart HTTP protocol. It also supports Git’s more-efficient "v2" protocol
if properly configured; see the discussion of @samp{GIT_PROTOCOL} in the
ENVIRONMENT section below.

It verifies that the directory has the magic file "git-daemon-export-ok",
and it will refuse to export any Git directory that hasn’t explicitly been
marked for export this way (unless the @samp{GIT_HTTP_EXPORT_ALL} environmental
variable is set).

By default, only the @samp{upload-pack} service is enabled, which serves @emph{git
fetch-pack} and @emph{git ls-remote} clients, which are invoked from @emph{git fetch},
@emph{git pull}, and @emph{git clone}.  If the client is authenticated, the
@samp{receive-pack} service is enabled, which serves @emph{git send-pack} clients,
which is invoked from @emph{git push}.

@noindent

@chapheading SERVICES

These services can be enabled/disabled using the per-repository
configuration file:

@table @asis

@item  http.getanyfile 
This serves Git clients older than version 1.6.6 that are unable to use the
upload pack service.  When enabled, clients are able to read any file within
the repository, including objects that are no longer reachable from a branch
but are still present.  It is enabled by default, but a repository can
disable it by setting this configuration item to @samp{false}.

@item  http.uploadpack 
This serves @emph{git fetch-pack} and @emph{git ls-remote} clients.  It is enabled by
default, but a repository can disable it by setting this configuration item
to @samp{false}.

@item  http.receivepack 
This serves @emph{git send-pack} clients, allowing push.  It is disabled by
default for anonymous users, and enabled by default for users authenticated
by the web server.  It can be disabled by setting this item to @samp{false}, or
enabled for all users, including anonymous users, by setting it to @samp{true}.
@end table

@noindent

@chapheading URL TRANSLATION

To determine the location of the repository on disk, @emph{git http-backend}
concatenates the environment variables PATH_INFO, which is set automatically
by the web server, and GIT_PROJECT_ROOT, which must be set manually in the
web server configuration.  If GIT_PROJECT_ROOT is not set, @emph{git
http-backend} reads PATH_TRANSLATED, which is also set automatically by the
web server.

@noindent

@chapheading EXAMPLES

All of the following examples map @samp{http://$hostname/git/foo/bar.git} to
@samp{/var/www/git/foo/bar.git}.

@table @asis

@item  Apache 2.x 
Ensure mod_cgi, mod_alias, and mod_env are enabled, set GIT_PROJECT_ROOT (or
DocumentRoot) appropriately, and create a ScriptAlias to the CGI:

@example
SetEnv GIT_PROJECT_ROOT /var/www/git
SetEnv GIT_HTTP_EXPORT_ALL
ScriptAlias /git/ /usr/libexec/git-core/git-http-backend/

# This is not strictly necessary using Apache and a modern version of
# git-http-backend, as the webserver will pass along the header in the
# environment as HTTP_GIT_PROTOCOL, and http-backend will copy that into
# GIT_PROTOCOL. But you may need this line (or something similar if you
# are using a different webserver), or if you want to support older Git
# versions that did not do that copying.
#
# Having the webserver set up GIT_PROTOCOL is perfectly fine even with
# modern versions (and will take precedence over HTTP_GIT_PROTOCOL,
# which means it can be used to override the client's request).
SetEnvIf Git-Protocol ".*" GIT_PROTOCOL=$0
@end example


To enable anonymous read access but authenticated write access, require
authorization for both the initial ref advertisement (which we detect as a
push via the service parameter in the query string), and the receive-pack
invocation itself:

@example
RewriteCond %@{QUERY_STRING@} service=git-receive-pack [OR]
RewriteCond %@{REQUEST_URI@} /git-receive-pack$
RewriteRule ^/git/ - [E=AUTHREQUIRED:yes]

<LocationMatch "^/git/">
        Order Deny,Allow
        Deny from env=AUTHREQUIRED

        AuthType Basic
        AuthName "Git Access"
        Require group committers
        Satisfy Any
        ...
</LocationMatch>
@end example


If you do not have @samp{mod_rewrite} available to match against the query
string, it is sufficient to just protect @samp{git-receive-pack} itself, like:

@example
<LocationMatch "^/git/.*/git-receive-pack$">
        AuthType Basic
        AuthName "Git Access"
        Require group committers
        ...
</LocationMatch>
@end example


In this mode, the server will not request authentication until the client
actually starts the object negotiation phase of the push, rather than during
the initial contact.  For this reason, you must also enable the
@samp{http.receivepack} config option in any repositories that should accept a
push. The default behavior, if @samp{http.receivepack} is not set, is to reject
any pushes by unauthenticated users; the initial request will therefore
report @samp{403 Forbidden} to the client, without even giving an opportunity for
authentication.

To require authentication for both reads and writes, use a Location
directive around the repository, or one of its parent directories:

@example
<Location /git/private>
        AuthType Basic
        AuthName "Private Git Access"
        Require group committers
        ...
</Location>
@end example


To serve gitweb at the same url, use a ScriptAliasMatch to only those URLs
that @emph{git http-backend} can handle, and forward the rest to gitweb:

@example
ScriptAliasMatch \
        "(?x)^/git/(.*/(HEAD | \
                        info/refs | \
                        objects/(info/[^/]+ | \
                                 [0-9a-f]@{2@}/[0-9a-f]@{38@} | \
                                 pack/pack-[0-9a-f]@{40@}\.(pack|idx)) | \
                        git-(upload|receive)-pack))$" \
        /usr/libexec/git-core/git-http-backend/$1

ScriptAlias /git/ /var/www/cgi-bin/gitweb.cgi/
@end example


To serve multiple repositories from different gitnamespaces(7) in a
single repository:

@example
SetEnvIf Request_URI "^/git/([^/]*)" GIT_NAMESPACE=$1
ScriptAliasMatch ^/git/[^/]*(.*) /usr/libexec/git-core/git-http-backend/storage.git$1
@end example


@item  Accelerated static Apache 2.x 
Similar to the above, but Apache can be used to return static files that are
stored on disk.  On many systems this may be more efficient as Apache can
ask the kernel to copy the file contents from the file system directly to
the network:

@example
SetEnv GIT_PROJECT_ROOT /var/www/git

AliasMatch ^/git/(.*/objects/[0-9a-f]@{2@}/[0-9a-f]@{38@})$          /var/www/git/$1
AliasMatch ^/git/(.*/objects/pack/pack-[0-9a-f]@{40@}.(pack|idx))$ /var/www/git/$1
ScriptAlias /git/ /usr/libexec/git-core/git-http-backend/
@end example


This can be combined with the gitweb configuration:

@example
SetEnv GIT_PROJECT_ROOT /var/www/git

AliasMatch ^/git/(.*/objects/[0-9a-f]@{2@}/[0-9a-f]@{38@})$          /var/www/git/$1
AliasMatch ^/git/(.*/objects/pack/pack-[0-9a-f]@{40@}.(pack|idx))$ /var/www/git/$1
ScriptAliasMatch \
        "(?x)^/git/(.*/(HEAD | \
                        info/refs | \
                        objects/info/[^/]+ | \
                        git-(upload|receive)-pack))$" \
        /usr/libexec/git-core/git-http-backend/$1
ScriptAlias /git/ /var/www/cgi-bin/gitweb.cgi/
@end example


@item  Lighttpd 
Ensure that @samp{mod_cgi}, @samp{mod_alias}, @samp{mod_auth}, @samp{mod_setenv} are loaded,
then set @samp{GIT_PROJECT_ROOT} appropriately and redirect all requests to the
CGI:

@example
alias.url += ( "/git" => "/usr/lib/git-core/git-http-backend" )
$HTTP["url"] =~ "^/git" @{
        cgi.assign = ("" => "")
        setenv.add-environment = (
                "GIT_PROJECT_ROOT" => "/var/www/git",
                "GIT_HTTP_EXPORT_ALL" => ""
        )
@}
@end example


To enable anonymous read access but authenticated write access:

@example
$HTTP["querystring"] =~ "service=git-receive-pack" @{
        include "git-auth.conf"
@}
$HTTP["url"] =~ "^/git/.*/git-receive-pack$" @{
        include "git-auth.conf"
@}
@end example


where @samp{git-auth.conf} looks something like:

@example
auth.require = (
        "/" => (
                "method" => "basic",
                "realm" => "Git Access",
                "require" => "valid-user"
               )
)
# ...and set up auth.backend here
@end example


To require authentication for both reads and writes:

@example
$HTTP["url"] =~ "^/git/private" @{
        include "git-auth.conf"
@}
@end example

@end table

@noindent

@chapheading ENVIRONMENT

@emph{git http-backend} relies upon the @samp{CGI} environment variables set by the
invoking web server, including:

@itemize 

@item
PATH_INFO (if GIT_PROJECT_ROOT is set, otherwise PATH_TRANSLATED)

@item
REMOTE_USER

@item
REMOTE_ADDR

@item
CONTENT_TYPE

@item
QUERY_STRING

@item
REQUEST_METHOD
@end itemize

The @samp{GIT_HTTP_EXPORT_ALL} environmental variable may be passed to
@emph{git-http-backend} to bypass the check for the "git-daemon-export-ok" file
in each repository before allowing export of that repository.

The @samp{GIT_HTTP_MAX_REQUEST_BUFFER} environment variable (or the
@samp{http.maxRequestBuffer} config variable) may be set to change the largest
ref negotiation request that git will handle during a fetch; any fetch
requiring a larger buffer will not succeed.  This value should not normally
need to be changed, but may be helpful if you are fetching from a repository
with an extremely large number of refs.  The value can be specified with a
unit (e.g., @samp{100M} for 100 megabytes). The default is 10 megabytes.

Clients may probe for optional protocol capabilities (like the v2 protocol)
using the @samp{Git-Protocol} HTTP header. In order to support these, the
contents of that header must appear in the @samp{GIT_PROTOCOL} environment
variable. Most webservers will pass this header to the CGI via the
@samp{HTTP_GIT_PROTOCOL} variable, and @samp{git-http-backend} will automatically copy
that to @samp{GIT_PROTOCOL}. However, some webservers may be more selective about
which headers they’ll pass, in which case they need to be configured
explicitly (see the mention of @samp{Git-Protocol} in the Apache config from the
earlier EXAMPLES section).

The backend process sets GIT_COMMITTER_NAME to @emph{$REMOTE_USER} and
GIT_COMMITTER_EMAIL to @emph{$@{REMOTE_USER@}@@http.$@{REMOTE_ADDR@}}, ensuring
that any reflogs created by @emph{git-receive-pack} contain some identifying
information of the remote user who performed the push.

All @samp{CGI} environment variables are available to each of the hooks invoked
by the @emph{git-receive-pack}.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-http-fetch,,,Top
@chapheading Name

git-http-fetch — HTTPでリモートGitリポジトリからダウンロード

@noindent

@chapheading Synopsis

@display
git http-fetch [-c] [-t] [-a] [-d] [-v] [-w filename] [--recover] [--stdin | --packfile=<hash> | <commit>] <url>
@end display


@noindent

@chapheading DESCRIPTION

HTTPでリモートGitリポジトリからダウンロード

このコマンドは常にすべてのオブジェクトを取得します。歴史的に、ダウンロードするオブジェクトを選択するには、 @samp{-a} と @samp{-c} と @samp{-t}
の3つのオプションがありました。それらは現在、何も警告を出さずに無視されます。

@noindent

@chapheading OPTIONS

@table @asis

@item  commit-id 
プルするハッシュ、または [URL]/refs/ 下のファイル名 のいずれか。

@item  @samp{-a, -c, -t} 
これらのオプションは、歴史的な理由により無視されます。

@item  @samp{-v} 
ダウンロードしたものを報告します。

@item  @samp{-w <filename>} 
転送が完了した後、ローカル側ドの $GIT_DIR/refs/<filename> の下のファイル名にcommit-idを書き込みます。

@item  @samp{--stdin} 
(この場合は期待されていない)コマンドラインのコミットIDの代わりに、 @emph{githttp-fetch} は標準入力からの行を以下の形式であると期待します

@example
<commit-id>['\t'<filename-as-in--w>]
@end example

@item  @samp{--packfile=<hash>} 
内部使用のみ。 (この場合は期待されていない)コマンドラインのコミットIDの代わりに、 @emph{git http-fetch}
は指定されたURLで直接パックファイルをフェッチし、 index-pack を使用して対応する .idx ファイルと .keep
ファイルを生成します。ハッシュは一時ファイルの名前を決定するために使用され、任意です。 index-pack の出力は stdout に出力されます。
@samp{--index-pack-args} が必要です。

@item  @samp{--index-pack-args=<args>} 
内部使用のみ。 ダウンロードしたパックの内容に対して実行するコマンド。引数はスペースで区切られURLエンコードされます。

@item  @samp{--recover} 
ターゲットから到達可能なすべてのものがフェッチされていることを確認します。以前のフェッチが中断された後に使用されます。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-http-push,,,Top
@chapheading Name

git-http-push — HTTP/DAV を介してオブジェクトを別のリポジトリにプッシュする

@noindent

@chapheading Synopsis

@display
git http-push [--all] [--dry-run] [--force] [--verbose] <url> <ref> [<ref>…]
@end display


@noindent

@chapheading DESCRIPTION

リモートに不足しているオブジェクトをリモートリポジトリに送信し、リモートブランチを更新します。

@strong{注} : libcurlが7.16より古い場合、このコマンドは一時的に無効になります。
これは、組み合わせが機能しないことが報告されており、
リポジトリが破損する場合があるためです。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--all} 
リモートリポジトリが現在の状態で完全であると想定しません。また、ローカルrefの履歴全体のすべてのオブジェクトがリモートリポジトリに存在することを確認します。

@item  @samp{--force} 
通常、コマンドは、上書きに使用されたローカルrefの祖先ではないリモートrefの更新を拒否します。このフラグはこのチェックを無効にします。これが意味するのは、リモートリポジトリがコミットを失う可能性があるということです。注意して使用してください。

@item  @samp{--dry-run} 
実際に更新を送信する以外はすべて行います。

@item  @samp{--verbose} 
ローカルでウォークされているオブジェクトのリストと、リモートリポジトリに正常に送信されたオブジェクトのリストを報告します。

@item  @samp{-d} 
@itemx  @samp{-D} 
リモートリポジトリから <ref> を削除します。指定のブランチをリモートHEADにすることはできません。 @samp{-d}
を指定する場合は、以下の他の条件も満たす必要があります:

@itemize 

@item
リモートHEADは、ローカルに存在するオブジェクトに名前解決(resolve)できなければなりません。

@item
指定のブランチは、ローカルに存在するオブジェクトに名前解決(resolve)します。

@item
指定のブランチは、リモートHEADの祖先です。
@end itemize

@item  <ref>… 
更新したいリモートrefs
@end table

@noindent

@chapheading SPECIFYING THE REFS

@emph{<ref>} 指定は、単一のパターン、またはコロン ":"
で区切られた、そのようなパターンのペアのいずれかです(これは、ref名にコロンを含めることができないことを意味します)。 単一のパターン
@emph{<name>} は、 @emph{<name>:<name>} の短縮形です。

各パターンペアは、送信元側(コロンの前)と宛先側(コロンの後)で構成されます。プッシュされるrefは、ソース側に一致する一致を見つけることによって決定され、プッシュされる場所は、宛先側を使用して決定されます。

@itemize 

@item
<src> がローカルrefの1つと正確に一致しない場合は、エラーになります。

@item
<dst> がどのリモートrefとも一致しない場合、以下のどちらかです

@itemize 

@item
"refs/" で始まる必要があります。この場合、文字通り <dst> が宛先として使用されます。

@item
<src> == <dst> かつ <src> に一致するrefは、リモートrefのセットに存在してはなりません。ローカルで一致するref <src>
は、宛先の名前として使用されます。
@end itemize
@end itemize

@samp{--force} の指定が無く、<dst> が存在しない場合または <dst> が <src>
の適切なサブセット(つまり、祖先)である場合のみリモートに保存されます。 "fast-forward check"
(早送りチェック)と呼ばれるこのチェックは、リモートrefを誤って上書きして、そこから他の人のコミットを失うことを回避するために実行されます。

@samp{--force} を使用すると、すべてのrefに対して fast-forward check が無効になります。

オプションで、<ref> パラメーターの前に「+」記号を付けて、そのrefでのみ fast-forward check を無効にすることができます。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-imap-send,,,Top
@chapheading Name

git-imap-send — Send a collection of patches from stdin to an IMAP folder

@noindent

@chapheading Synopsis

@display
git imap-send [-v] [-q] [--[no-]curl]
@end display


@noindent

@chapheading DESCRIPTION

This command uploads a mailbox generated with @emph{git format-patch} into an
IMAP drafts folder.  This allows patches to be sent as other email is when
using mail clients that cannot read mailbox files directly. The command also
works with any general mailbox in which emails have the fields "From",
"Date", and "Subject" in that order.

Typical usage is something like:

git format-patch --signoff --stdout --attach origin | git imap-send

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Be verbose.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Be quiet.

@item  @samp{--curl} 
Use libcurl to communicate with the IMAP server, unless tunneling into it.
Ignored if Git was built without the USE_CURL_FOR_IMAP_SEND option set.

@item  @samp{--no-curl} 
Talk to the IMAP server using git’s own IMAP routines instead of using
libcurl.  Ignored if Git was built with the NO_OPENSSL option set.
@end table

@noindent

@chapheading CONFIGURATION

To use the tool, @samp{imap.folder} and either @samp{imap.tunnel} or @samp{imap.host} must
be set to appropriate values.

@table @asis

@item  imap.folder 
The folder to drop the mails into, which is typically the Drafts folder. For
example: "INBOX.Drafts", "INBOX/Drafts" or "[Gmail]/Drafts". Required.

@item  imap.tunnel 
Command used to setup a tunnel to the IMAP server through which commands
will be piped instead of using a direct network connection to the
server. Required when imap.host is not set.

@item  imap.host 
A URL identifying the server. Use an @samp{imap://} prefix for non-secure
connections and an @samp{imaps://} prefix for secure connections.  Ignored when
imap.tunnel is set, but required otherwise.

@item  imap.user 
The username to use when logging in to the server.

@item  imap.pass 
The password to use when logging in to the server.

@item  imap.port 
An integer port number to connect to on the server.  Defaults to 143 for
imap:// hosts and 993 for imaps:// hosts.  Ignored when imap.tunnel is set.

@item  imap.sslverify 
A boolean to enable/disable verification of the server certificate used by
the SSL/TLS connection. Default is @samp{true}. Ignored when imap.tunnel is set.

@item  imap.preformattedHTML 
A boolean to enable/disable the use of html encoding when sending a patch.
An html encoded patch will be bracketed with <pre> and have a content type
of text/html.  Ironically, enabling this option causes Thunderbird to send
the patch as a plain/text, format=fixed email.  Default is @samp{false}.

@item  imap.authMethod 
Specify authenticate method for authentication with IMAP server.  If Git was
built with the NO_CURL option, or if your curl version is older than 7.34.0,
or if you’re running git-imap-send with the @samp{--no-curl} option, the only
supported method is @emph{CRAM-MD5}. If this is not set then @emph{git imap-send} uses
the basic IMAP plaintext LOGIN command.
@end table

@noindent

@chapheading EXAMPLES

Using tunnel mode:

@example
[imap]
    folder = "INBOX.Drafts"
    tunnel = "ssh -q -C user@@example.com /usr/bin/imapd ./Maildir 2> /dev/null"
@end example

Using direct mode:

@example
[imap]
    folder = "INBOX.Drafts"
    host = imap://imap.example.com
    user = bob
    pass = p4ssw0rd
@end example

Using direct mode with SSL:

@example
[imap]
    folder = "INBOX.Drafts"
    host = imaps://imap.example.com
    user = bob
    pass = p4ssw0rd
    port = 123
    ; sslVerify = false
@end example

@quotation

@strong{Note}

You may want to use @samp{sslVerify=false} while troubleshooting, if you suspect
that the reason you are having trouble connecting is because the certificate
you use at the private server @samp{example.com} you are trying to set up (or
have set up) may not be verified correctly.
@end quotation

Using Gmail’s IMAP interface:

@example
[imap]
        folder = "[Gmail]/Drafts"
        host = imaps://imap.gmail.com
        user = user@@gmail.com
        port = 993
@end example


@quotation

@strong{Note}

You might need to instead use: @samp{folder = "[Google Mail]/Drafts"} if you get
an error that the "Folder doesn’t exist".
@end quotation

@quotation

@strong{Note}

If your Gmail account is set to another language than English, the name of
the "Drafts" folder will be localized.
@end quotation

Once the commits are ready to be sent, run the following command:

@example
$ git format-patch --cover-letter -M --stdout origin/master | git imap-send
@end example

Just make sure to disable line wrapping in the email client (Gmail’s web
interface will wrap lines no matter what, so you need to use a real IMAP
client).

@noindent

@chapheading CAUTION

It is still your responsibility to make sure that the email message sent by
your email program meets the standards of your project.  Many projects do
not like patches to be attached.  Some mail agents will transform patches
(e.g. wrap lines, send them as format=flowed) in ways that make them fail.
You will get angry flames ridiculing you if you don’t check this.

Thunderbird in particular is known to be problematic.  Thunderbird
users may wish to visit this web page for more information:
@uref{http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email,http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email}

@noindent

@chapheading SEE ALSO

git-format-patch(1), git-send-email(1), mbox(5)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-index-pack,,,Top
@chapheading Name

git-index-pack — Build pack index file for an existing packed archive

@noindent

@chapheading Synopsis

@display
git index-pack [-v] [-o <index-file>] [--[no-]rev-index] <pack-file>
git index-pack --stdin [--fix-thin] [--keep] [-v] [-o <index-file>]
                  [--[no-]rev-index] [<pack-file>]
@end display


@noindent

@chapheading DESCRIPTION

Reads a packed archive (.pack) from the specified file, and builds a pack
index file (.idx) for it. Optionally writes a reverse-index (.rev) for the
specified pack. The packed archive together with the pack index can then be
placed in the objects/pack/ directory of a Git repository.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-v} 
Be verbose about what is going on, including progress status.

@item  @samp{-o <index-file>} 
Write the generated pack index into the specified file.  Without this option
the name of pack index file is constructed from the name of packed archive
file by replacing .pack with .idx (and the program fails if the name of
packed archive does not end with .pack).

@item  @samp{--[no-]rev-index} 
When this flag is provided, generate a reverse index (a @samp{.rev} file)
corresponding to the given pack. If @samp{--verify} is given, ensure that the
existing reverse index is correct. Takes precedence over
@samp{pack.writeReverseIndex}.

@item  @samp{--stdin} 
When this flag is provided, the pack is read from stdin instead and a copy
is then written to <pack-file>. If <pack-file> is not specified, the pack is
written to objects/pack/ directory of the current Git repository with a
default name determined from the pack content.  If <pack-file> is not
specified consider using --keep to prevent a race condition between this
process and @emph{git repack}.

@item  @samp{--fix-thin} 
Fix a "thin" pack produced by @samp{git pack-objects --thin} (see
git-pack-objects(1) for details) by adding the excluded objects the
deltified objects are based on to the pack. This option only makes sense in
conjunction with --stdin.

@item  @samp{--keep} 
Before moving the index into its final destination create an empty .keep
file for the associated pack file.  This option is usually necessary with
--stdin to prevent a simultaneous @emph{git repack} process from deleting the
newly constructed pack and index before refs can be updated to use objects
contained in the pack.

@item  @samp{--keep=<msg>} 
Like --keep create a .keep file before moving the index into its final
destination, but rather than creating an empty file place @emph{<msg>} followed
by an LF into the .keep file.  The @emph{<msg>} message can later be searched for
within all .keep files to locate any which have outlived their usefulness.

@item  @samp{--index-version=<version>[,<offset>]} 
This is intended to be used by the test suite only. It allows to force the
version for the generated pack index, and to force 64-bit index entries on
objects located above the given offset.

@item  @samp{--strict} 
Die, if the pack contains broken objects or links.

@item  @samp{--progress-title} 
For internal use only.

Set the title of the progress bar. The title is "Receiving objects" by
default and "Indexing objects" when @samp{--stdin} is specified.

@item  @samp{--check-self-contained-and-connected} 
Die if the pack contains broken links. For internal use only.

@item  @samp{--fsck-objects} 
For internal use only.

Die if the pack contains broken objects. If the pack contains a tree
pointing to a .gitmodules blob that does not exist, prints the hash of that
blob (for the caller to check) after the hash that goes into the name of the
pack/idx file (see "Notes").

@item  @samp{--threads=<n>} 
Specifies the number of threads to spawn when resolving deltas. This
requires that index-pack be compiled with pthreads otherwise this option is
ignored with a warning.  This is meant to reduce packing time on
multiprocessor machines. The required amount of memory for the delta search
window is however multiplied by the number of threads.  Specifying 0 will
cause Git to auto-detect the number of CPU’s and use maximum 3 threads.

@item  @samp{--max-input-size=<size>} 
Die, if the pack is larger than <size>.

@item  @samp{--object-format=<hash-algorithm>} 
Specify the given object format (hash algorithm) for the pack.  The valid
values are @emph{sha1} and (if enabled) @emph{sha256}.  The default is the algorithm
for the current repository (set by @samp{extensions.objectFormat}), or @emph{sha1} if
no value is set or outside a repository.

This option cannot be used with --stdin.

このオプションは実験的なものです！ SHA-256のサポートは実験的なものであり、まだ初期段階です。
SHA-256リポジトリは、通常、「通常の」SHA-1リポジトリと作業を共有できません。
たとえば、SHA-256リポジトリに関連するGit内部ファイル形式は、下位互換性のない方法で変更される可能性があると想定する必要があります。テスト目的でのみ
@samp{--object-format=sha256} を使用してください。
@end table

@noindent

@chapheading NOTES

Once the index has been created, the hash that goes into the name of the
pack/idx file is printed to stdout. If --stdin was also used then this is
prefixed by either "pack\t", or "keep\t" if a new .keep file was
successfully created. This is useful to remove a
.keep file used as a lock to prevent the race with @emph{git repack}
mentioned above.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-init-db,,,Top
@chapheading Name

git-init-db — 空のGitリポジトリを作成

@noindent

@chapheading Synopsis

@display
git init-db [-q | --quiet] [--bare] [--template=<template_directory>] [--separate-git-dir <git dir>] [--shared[=<permissions>]]
@end display


@noindent

@chapheading DESCRIPTION

これは git-init(1) の同義語です。 git-init(1) コマンドの文書を参照してください。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-init,,,Top
@chapheading Name

git-init — Create an empty Git repository or reinitialize an existing one

@noindent

@chapheading Synopsis

@display
git init [-q | --quiet] [--bare] [--template=<template_directory>]
          [--separate-git-dir <git dir>] [--object-format=<format>]
          [-b <branch-name> | --initial-branch=<branch-name>]
          [--shared[=<permissions>]] [directory]
@end display


@noindent

@chapheading DESCRIPTION

This command creates an empty Git repository - basically a @samp{.git} directory
with subdirectories for @samp{objects}, @samp{refs/heads}, @samp{refs/tags}, and template
files.  An initial branch without any commits will be created (see the
@samp{--initial-branch} option below for its name).

If the @samp{$GIT_DIR} environment variable is set then it specifies a path to
use instead of @samp{./.git} for the base of the repository.

If the object storage directory is specified via the @samp{$GIT_OBJECT_DIRECTORY}
environment variable then the sha1 directories are created underneath -
otherwise the default @samp{$GIT_DIR/objects} directory is used.

Running @emph{git init} in an existing repository is safe. It will not overwrite
things that are already there. The primary reason for rerunning @emph{git init}
is to pick up newly added templates (or to move the repository to another
place if --separate-git-dir is given).

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Only print error and warning messages; all other output will be suppressed.

@item  @samp{--bare} 
Create a bare repository. If @samp{GIT_DIR} environment is not set, it is set to
the current working directory.

@item  @samp{--object-format=<format>} 
Specify the given object format (hash algorithm) for the repository.  The
valid values are @emph{sha1} and (if enabled) @emph{sha256}.  @emph{sha1} is the default.

このオプションは実験的なものです！ SHA-256のサポートは実験的なものであり、まだ初期段階です。
SHA-256リポジトリは、通常、「通常の」SHA-1リポジトリと作業を共有できません。
たとえば、SHA-256リポジトリに関連するGit内部ファイル形式は、下位互換性のない方法で変更される可能性があると想定する必要があります。テスト目的でのみ
@samp{--object-format=sha256} を使用してください。

@item  @samp{--template=<template_directory>} 
Specify the directory from which templates will be used.  (See the "TEMPLATE
DIRECTORY" section below.)

@item  @samp{--separate-git-dir=<git dir>} 
Instead of initializing the repository as a directory to either @samp{$GIT_DIR}
or @samp{./.git/}, create a text file there containing the path to the actual
repository.  This file acts as filesystem-agnostic Git symbolic link to the
repository.

If this is reinitialization, the repository will be moved to the specified
path.

@item  @samp{-b <branch-name>} 
@itemx  @samp{--initial-branch=<branch-name>} 
Use the specified name for the initial branch in the newly created
repository.  If not specified, fall back to the default name (currently
@samp{master}, but this is subject to change in the future; the name can be
customized via the @samp{init.defaultBranch} configuration variable).

@item  @samp{--shared[=(false|true|umask|group|all|world|everybody|0xxx)]} 
Specify that the Git repository is to be shared amongst several users.  This
allows users belonging to the same group to push into that repository.  When
specified, the config variable "core.sharedRepository" is set so that files
and directories under @samp{$GIT_DIR} are created with the requested
permissions.  When not specified, Git will use permissions reported by
umask(2).

The option can have the following values, defaulting to @emph{group} if no value
is given:

@table @asis

@item  @emph{umask} (or @emph{false}) 
Use permissions reported by umask(2). The default, when @samp{--shared} is not
specified.

@item  @emph{group} (or @emph{true}) 
Make the repository group-writable, (and g+sx, since the git group may be
not the primary group of all users). This is used to loosen the permissions
of an otherwise safe umask(2) value. Note that the umask still applies to
the other permission bits (e.g. if umask is @emph{0022}, using @emph{group} will not
remove read privileges from other (non-group) users). See @emph{0xxx} for how to
exactly specify the repository permissions.

@item  @emph{all} (or @emph{world} or @emph{everybody}) 
Same as @emph{group}, but make the repository readable by all users.

@item  @emph{0xxx} 
@emph{0xxx} is an octal number and each file will have mode @emph{0xxx}. @emph{0xxx} will
override users' umask(2) value (and not only loosen permissions as @emph{group}
and @emph{all} does). @emph{0640} will create a repository which is group-readable,
but not group-writable or accessible to others. @emph{0660} will create a repo
that is readable and writable to the current user and group, but
inaccessible to others.
@end table
@end table

By default, the configuration flag @samp{receive.denyNonFastForwards} is enabled
in shared repositories, so that you cannot force a non fast-forwarding push
into it.

If you provide a @emph{directory}, the command is run inside it. If this
directory does not exist, it will be created.

@noindent

@chapheading TEMPLATE DIRECTORY

Files and directories in the template directory whose name do not start with
a dot will be copied to the @samp{$GIT_DIR} after it is created.

The template directory will be one of the following (in order):

@itemize 

@item
the argument given with the @samp{--template} option;

@item
the contents of the @samp{$GIT_TEMPLATE_DIR} environment variable;

@item
the @samp{init.templateDir} configuration variable; or

@item
the default template directory: @samp{/usr/share/git-core/templates}.
@end itemize

The default template directory includes some directory structure, suggested
"exclude patterns" (see gitignore(5)), and sample hook files.

The sample hooks are all disabled by default. To enable one of the sample
hooks rename it by removing its @samp{.sample} suffix.

See githooks(5) for more general info on hook execution.

@noindent

@chapheading EXAMPLES

@table @asis

@item  Start a new Git repository for an existing code base 
@example
$ cd /path/to/my/codebase
$ git init      (1)
$ git add .     (2)
$ git commit    (3)
@end example


@table @asis

@item @pxref{CO1-1,,(1)}
Create a /path/to/my/codebase/.git directory.

@item @pxref{CO1-2,,(2)}
Add all existing files to the index.

@item @pxref{CO1-3,,(3)}
Record the pristine state as the first commit in the history.
@end table
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-instaweb,,,Top
@chapheading Name

git-instaweb — gitwebで作業リポジトリをインスタントにブラウズします

@noindent

@chapheading Synopsis

@display
git instaweb [--local] [--httpd=<httpd>] [--port=<port>]
               [--browser=<browser>]
git instaweb [--start] [--stop] [--restart]
@end display


@noindent

@chapheading DESCRIPTION

ローカルリポジトリを参照するための @samp{gitweb} とWebサーバーを設定するための簡単なスクリプト。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-l} 
@itemx  @samp{--local} 
WebサーバーをローカルIP(127.0.0.1)にのみバインドします。

@item  @samp{-d} 
@itemx  @samp{--httpd} 
実行されるHTTPデーモンのコマンドライン。コマンドラインオプションはここで指定でき、構成ファイルはコマンドラインの最後に追加されます。現在、apache2、lighttpd、mongoose、plackup、python、webrickがサポートされています。（デフォルト：lighttpd）

@item  @samp{-m} 
@itemx  @samp{--module-path} 
モジュールパス(httpdがApacheの場合にのみ必要)。(デフォルト: /usr/lib/apache2/modules )

@item  @samp{-p} 
@itemx  @samp{--port} 
httpdをバインドするポート番号。(デフォルト: 1234)

@item  @samp{-b} 
@itemx  @samp{--browser} 
gitwebページを表示するために使用する必要があるWebブラウザー。これは、gitwebインスタンスのURLとともに @emph{git
web--browse} ヘルパースクリプトに渡されます。詳細については、 git-web--browse(1)
を参照してください。スクリプトが失敗した場合、URLはstdoutに出力されます。

@item  start 
@itemx  @samp{--start} 
httpdインスタンスを開始して本コマンドを終了します。新しいインスタンスを生成するために、必要に応じて構成ファイルを再生成します。

@item  stop 
@itemx  @samp{--stop} 
httpdインスタンスを停止して本コマンドを終了します。これにより、新しいインスタンスを生成するための構成ファイルが生成されたり、ブラウザーが閉じられたりすることはありません。

@item  restart 
@itemx  @samp{--restart} 
httpdインスタンスを再起動して本コマンドを終了します。 新しいインスタンスを生成するために、必要に応じて構成ファイルを再生成します。
@end table

@noindent

@chapheading CONFIGURATION

あなたは .git/config で構成を指定できます

@example
[instaweb]
        local = true
        httpd = apache2 -f
        port = 4321
        browser = konqueror
        modulePath = /usr/lib/apache2/modules
@end example


構成変数 @samp{instaweb.browser} が設定されていない場合に、@samp{web.browser} が定義されていれば、代わりに
@samp{web.browser} が使用されます。詳細については、 git-web--browse(1) を参照してください。

@noindent

@chapheading SEE ALSO

gitweb(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-interpret-trailers,,,Top
@chapheading Name

git-interpret-trailers — コミットメッセージの構造化情報を追加またはパースします

@noindent

@chapheading Synopsis

@display
git interpret-trailers [<options>] [(--trailer <token>[(=|:)<value>])…] [<file>…]
git interpret-trailers [<options>] [--parse] [<file>…]
@end display


@noindent

@chapheading DESCRIPTION

コミットメッセージの自由形式の部分の最後に、RFC 822 電子メールヘッダーに似た「トレーラー」(trailers)行の追加またはパースを支援します。

This command reads some patches or commit messages from either the <file>
arguments or the standard input if no <file> is specified. If @samp{--parse} is
specified, the output consists of the parsed trailers.

Otherwise, this command applies the arguments passed using the @samp{--trailer}
option, if any, to the commit message part of each input file. The result is
emitted on the standard output.

Some configuration variables control the way the @samp{--trailer} arguments are
applied to each commit message and the way any existing trailer in the
commit message is changed. They also make it possible to automatically add
some trailers.

By default, a @emph{<token>=<value>} or @emph{<token>:<value>} argument given using
@samp{--trailer} will be appended after the existing trailers only if the last
trailer has a different (<token>, <value>) pair (or if there is no existing
trailer). The <token> and <value> parts will be trimmed to remove starting
and trailing whitespace, and the resulting trimmed <token> and <value> will
appear in the message like this:

@example
token: value
@end example


This means that the trimmed <token> and <value> will be separated by @samp{': '}
(one colon followed by one space).

By default the new trailer will appear at the end of all the existing
trailers. If there is no existing trailer, the new trailer will appear after
the commit message part of the output, and, if there is no line with only
spaces at the end of the commit message part, one blank line will be added
before the new trailer.

Existing trailers are extracted from the input message by looking for a
group of one or more lines that (i) is all trailers, or (ii) contains at
least one Git-generated or user-configured trailer and consists of at least
25% trailers.  The group must be preceded by one or more empty (or
whitespace-only) lines.  The group must either be at the end of the message
or be the last non-whitespace lines before a line that starts with @emph{---}
(followed by a space or the end of the line). Such three minus signs start
the patch part of the message. See also @samp{--no-divider} below.

When reading trailers, there can be whitespaces after the token, the
separator and the value. There can also be whitespaces inside the token and
the value. The value may be split over multiple lines with each subsequent
line starting with whitespace, like the "folding" in RFC 822.

Note that @emph{trailers} do not follow and are not intended to follow many rules
for RFC 822 headers. For example they do not follow the encoding rules and
probably many other rules.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--in-place} 
Edit the files in place.

@item  @samp{--trim-empty} 
If the <value> part of any trailer contains only whitespace, the whole
trailer will be removed from the resulting message.  This applies to
existing trailers as well as new trailers.

@item  @samp{--trailer <token>[(=|:)<value>]} 
Specify a (<token>, <value>) pair that should be applied as a trailer to the
input messages. See the description of this command.

@item  @samp{--where <placement>} 
@itemx  @samp{--no-where} 
Specify where all new trailers will be added.  A setting provided with
@emph{--where} overrides all configuration variables and applies to all
@emph{--trailer} options until the next occurrence of @emph{--where} or
@emph{--no-where}. Possible values are @samp{after}, @samp{before}, @samp{end} or @samp{start}.

@item  @samp{--if-exists <action>} 
@itemx  @samp{--no-if-exists} 
Specify what action will be performed when there is already at least one
trailer with the same <token> in the message.  A setting provided with
@emph{--if-exists} overrides all configuration variables and applies to all
@emph{--trailer} options until the next occurrence of @emph{--if-exists} or
@emph{--no-if-exists}. Possible actions are @samp{addIfDifferent},
@samp{addIfDifferentNeighbor}, @samp{add}, @samp{replace} and @samp{doNothing}.

@item  @samp{--if-missing <action>} 
@itemx  @samp{--no-if-missing} 
Specify what action will be performed when there is no other trailer with
the same <token> in the message.  A setting provided with @emph{--if-missing}
overrides all configuration variables and applies to all @emph{--trailer} options
until the next occurrence of @emph{--if-missing} or @emph{--no-if-missing}. Possible
actions are @samp{doNothing} or @samp{add}.

@item  @samp{--only-trailers} 
Output only the trailers, not any other parts of the input.

@item  @samp{--only-input} 
Output only trailers that exist in the input; do not add any from the
command-line or by following configured @samp{trailer.*} rules.

@item  @samp{--unfold} 
Remove any whitespace-continuation in trailers, so that each trailer appears
on a line by itself with its full content.

@item  @samp{--parse} 
A convenience alias for @samp{--only-trailers --only-input --unfold}.

@item  @samp{--no-divider} 
Do not treat @samp{---} as the end of the commit message. Use this when you know
your input contains just the commit message itself (and not an email or the
output of @samp{git format-patch}).
@end table

@noindent

@chapheading CONFIGURATION VARIABLES

@table @asis

@item  trailer.separators 
This option tells which characters are recognized as trailer separators. By
default only @emph{:} is recognized as a trailer separator, except that @emph{=} is
always accepted on the command line for compatibility with other git
commands.

The first character given by this option will be the default character used
when another separator is not specified in the config for this trailer.

For example, if the value for this option is "%=$", then only lines using
the format @emph{<token><sep><value>} with <sep> containing @emph{%}, @emph{=} or @emph{$} and
then spaces will be considered trailers. And @emph{%} will be the default
separator used, so by default trailers will appear like: @emph{<token>% <value>}
(one percent sign and one space will appear between the token and the
value).

@item  trailer.where 
This option tells where a new trailer will be added.

This can be @samp{end}, which is the default, @samp{start}, @samp{after} or @samp{before}.

If it is @samp{end}, then each new trailer will appear at the end of the existing
trailers.

If it is @samp{start}, then each new trailer will appear at the start, instead of
the end, of the existing trailers.

If it is @samp{after}, then each new trailer will appear just after the last
trailer with the same <token>.

If it is @samp{before}, then each new trailer will appear just before the first
trailer with the same <token>.

@item  trailer.ifexists 
This option makes it possible to choose what action will be performed when
there is already at least one trailer with the same <token> in the message.

The valid values for this option are: @samp{addIfDifferentNeighbor} (this is the
default), @samp{addIfDifferent}, @samp{add}, @samp{replace} or @samp{doNothing}.

With @samp{addIfDifferentNeighbor}, a new trailer will be added only if no
trailer with the same (<token>, <value>) pair is above or below the line
where the new trailer will be added.

With @samp{addIfDifferent}, a new trailer will be added only if no trailer with
the same (<token>, <value>) pair is already in the message.

With @samp{add}, a new trailer will be added, even if some trailers with the same
(<token>, <value>) pair are already in the message.

With @samp{replace}, an existing trailer with the same <token> will be deleted
and the new trailer will be added. The deleted trailer will be the closest
one (with the same <token>) to the place where the new one will be added.

With @samp{doNothing}, nothing will be done; that is no new trailer will be added
if there is already one with the same <token> in the message.

@item  trailer.ifmissing 
This option makes it possible to choose what action will be performed when
there is not yet any trailer with the same <token> in the message.

The valid values for this option are: @samp{add} (this is the default) and
@samp{doNothing}.

With @samp{add}, a new trailer will be added.

With @samp{doNothing}, nothing will be done.

@item  trailer.<token>.key 
This @samp{key} will be used instead of <token> in the trailer. At the end of
this key, a separator can appear and then some space characters. By default
the only valid separator is @emph{:}, but this can be changed using the
@samp{trailer.separators} config variable.

If there is a separator, then the key will be used instead of both the
<token> and the default separator when adding the trailer.

@item  trailer.<token>.where 
This option takes the same values as the @emph{trailer.where} configuration
variable and it overrides what is specified by that option for trailers with
the specified <token>.

@item  trailer.<token>.ifexists 
This option takes the same values as the @emph{trailer.ifexists} configuration
variable and it overrides what is specified by that option for trailers with
the specified <token>.

@item  trailer.<token>.ifmissing 
This option takes the same values as the @emph{trailer.ifmissing} configuration
variable and it overrides what is specified by that option for trailers with
the specified <token>.

@item  trailer.<token>.command 
This option behaves in the same way as @emph{trailer.<token>.cmd}, except that it
doesn’t pass anything as argument to the specified command.  Instead the
first occurrence of substring $ARG is replaced by the value that would be
passed as argument.

The @emph{trailer.<token>.command} option has been deprecated in favor of
@emph{trailer.<token>.cmd} due to the fact that $ARG in the user’s command is
only replaced once and that the original way of replacing $ARG is not safe.

When both @emph{trailer.<token>.cmd} and @emph{trailer.<token>.command} are given for
the same <token>, @emph{trailer.<token>.cmd} is used and
@emph{trailer.<token>.command} is ignored.

@item  trailer.<token>.cmd 
This option can be used to specify a shell command that will be called: once
to automatically add a trailer with the specified <token>, and then each
time a @emph{--trailer <token>=<value>} argument to modify the <value> of the
trailer that this option would produce.

When the specified command is first called to add a trailer with the
specified <token>, the behavior is as if a special @emph{--trailer
<token>=<value>} argument was added at the beginning of the "git
interpret-trailers" command, where <value> is taken to be the standard
output of the command with any leading and trailing whitespace trimmed off.

If some @emph{--trailer <token>=<value>} arguments are also passed on the command
line, the command is called again once for each of these arguments with the
same <token>. And the <value> part of these arguments, if any, will be
passed to the command as its first argument. This way the command can
produce a <value> computed from the <value> passed in the @emph{--trailer
<token>=<value>} argument.
@end table

@noindent

@chapheading EXAMPLES

@itemize 

@item
Configure a @emph{sign} trailer with a @emph{Signed-off-by} key, and then add two of
these trailers to a message:

@example
$ git config trailer.sign.key "Signed-off-by"
$ cat msg.txt
subject

message
$ cat msg.txt | git interpret-trailers --trailer 'sign: Alice <alice@@example.com>' --trailer 'sign: Bob <bob@@example.com>'
subject

message

Signed-off-by: Alice <alice@@example.com>
Signed-off-by: Bob <bob@@example.com>
@end example


@item
Use the @samp{--in-place} option to edit a message file in place:

@example
$ cat msg.txt
subject

message

Signed-off-by: Bob <bob@@example.com>
$ git interpret-trailers --trailer 'Acked-by: Alice <alice@@example.com>' --in-place msg.txt
$ cat msg.txt
subject

message

Signed-off-by: Bob <bob@@example.com>
Acked-by: Alice <alice@@example.com>
@end example


@item
Extract the last commit as a patch, and add a @emph{Cc} and a @emph{Reviewed-by}
trailer to it:

@example
$ git format-patch -1
0001-foo.patch
$ git interpret-trailers --trailer 'Cc: Alice <alice@@example.com>' --trailer 'Reviewed-by: Bob <bob@@example.com>' 0001-foo.patch >0001-bar.patch
@end example


@item
Configure a @emph{sign} trailer with a command to automatically add a
'Signed-off-by: ' with the author information only if there is no
'Signed-off-by: ' already, and show how it works:

@example
$ git config trailer.sign.key "Signed-off-by: "
$ git config trailer.sign.ifmissing add
$ git config trailer.sign.ifexists doNothing
$ git config trailer.sign.command 'echo "$(git config user.name) <$(git config user.email)>"'
$ git interpret-trailers <<EOF
> EOF

Signed-off-by: Bob <bob@@example.com>
$ git interpret-trailers <<EOF
> Signed-off-by: Alice <alice@@example.com>
> EOF

Signed-off-by: Alice <alice@@example.com>
@end example


@item
Configure a @emph{fix} trailer with a key that contains a @emph{#} and no space after
this character, and show how it works:

@example
$ git config trailer.separators ":#"
$ git config trailer.fix.key "Fix #"
$ echo "subject" | git interpret-trailers --trailer fix=42
subject

Fix #42
@end example


@item
Configure a @emph{help} trailer with a cmd use a script @samp{glog-find-author} which
search specified author identity from git log in git repository and show how
it works:

@example
$ cat ~/bin/glog-find-author
#!/bin/sh
test -n "$1" && git log --author="$1" --pretty="%an <%ae>" -1 || true
$ git config trailer.help.key "Helped-by: "
$ git config trailer.help.ifExists "addIfDifferentNeighbor"
$ git config trailer.help.cmd "~/bin/glog-find-author"
$ git interpret-trailers --trailer="help:Junio" --trailer="help:Couder" <<EOF
> subject
>
> message
>
> EOF
subject

message

Helped-by: Junio C Hamano <gitster@@pobox.com>
Helped-by: Christian Couder <christian.couder@@gmail.com>
@end example


@item
Configure a @emph{ref} trailer with a cmd use a script @samp{glog-grep} to grep last
relevant commit from git log in the git repository and show how it works:

@example
$ cat ~/bin/glog-grep
#!/bin/sh
test -n "$1" && git log --grep "$1" --pretty=reference -1 || true
$ git config trailer.ref.key "Reference-to: "
$ git config trailer.ref.ifExists "replace"
$ git config trailer.ref.cmd "~/bin/glog-grep"
$ git interpret-trailers --trailer="ref:Add copyright notices." <<EOF
> subject
>
> message
>
> EOF
subject

message

Reference-to: 8bc9a0c769 (Add copyright notices., 2005-04-07)
@end example


@item
Configure a @emph{see} trailer with a command to show the subject of a commit
that is related, and show how it works:

@example
$ git config trailer.see.key "See-also: "
$ git config trailer.see.ifExists "replace"
$ git config trailer.see.ifMissing "doNothing"
$ git config trailer.see.command "git log -1 --oneline --format=\"%h (%s)\" --abbrev-commit --abbrev=14 \$ARG"
$ git interpret-trailers <<EOF
> subject
>
> message
>
> see: HEAD~2
> EOF
subject

message

See-also: fe3187489d69c4 (subject of related commit)
@end example


@item
Configure a commit template with some trailers with empty values (using sed
to show and keep the trailing spaces at the end of the trailers), then
configure a commit-msg hook that uses @emph{git interpret-trailers} to remove
trailers with empty values and to add a @emph{git-version} trailer:

@example
$ sed -e 's/ Z$/ /' >commit_template.txt <<EOF
> ***subject***
>
> ***message***
>
> Fixes: Z
> Cc: Z
> Reviewed-by: Z
> Signed-off-by: Z
> EOF
$ git config commit.template commit_template.txt
$ cat >.git/hooks/commit-msg <<EOF
> #!/bin/sh
> git interpret-trailers --trim-empty --trailer "git-version: \$(git describe)" "\$1" > "\$1.new"
> mv "\$1.new" "\$1"
> EOF
$ chmod +x .git/hooks/commit-msg
@end example

@end itemize

@noindent

@chapheading SEE ALSO

git-commit(1), git-format-patch(1), git-config(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-log,,,Top
@chapheading Name

git-log — コミットのログを表示

@noindent

@chapheading Synopsis

@display
git log [<options>] [<revision range>] [[--] <path>…]
@end display


@noindent

@chapheading DESCRIPTION

コミットのログを表示します。

指定されたコミットから「親」リンクをたどることによって到達可能なコミットをリストしますが、その前に @emph{^}
が付いているコミットから到達可能なコミットは除外します。デフォルトでは、出力は時系列の逆順で表示されます。

これは集合演算と考えることができます。 コマンドラインで指定されたコミットのいずれかから到達可能なコミットのセットを形成し、 @emph{^}
が前に付いたコミットのいずれかから到達可能なコミットがそのセットから差し引かれます。差し引かれた残りのコミットは、コマンドの出力に出力されるものです。他のさまざまなオプションとパスパラメータ(pats
parameters)を使用して、結果をさらに制限できます。

したがって、以下のコマンド:

@example
$ git log foo bar ^baz
@end example


は、「 @emph{foo} または @emph{bar} から到達可能であるが、 @emph{baz} からは到達できないすべてのコミットをリストする」を意味します。

特別な表記 "@emph{<commit1>}..@emph{<commit2>}" は、 "^@emph{<commit1>} @emph{<commit2>}"
の省略形として使用できます。たとえば、以下のどちらかを同じ意味で使用できます:

@example
$ git log origin..HEAD
$ git log HEAD ^origin
@end example


もう1つの特別な表記法は、マージに役立つ "@emph{<commit1>}…@emph{<commit2>}"
です。結果として得られるコミットのセットは、2つのオペランド間の対称差(symmetric difference)です。以下の2つのコマンドは同等です:

@example
$ git log A B --not $(git merge-base --all A B)
$ git log A...B
@end example


このコマンドは、 git-rev-list(1) コマンドに適用可能なオプションを使用して、表示内容と方法を制御し、そして
git-diff(1) コマンドに適用可能なオプションを使用して、各コミットによって導入される変更の表示方法を制御します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--follow} 
ファイル名が途中でリネームされていてもそこで中断することなく、そのファイルの一覧を続けて表示します(単一のファイルに対してのみ機能します)。

@item  @samp{--no-decorate} 
@itemx  @samp{--decorate[=short|full|auto|no]} 
表示されているコミットのref名を出力します。 @emph{short} が指定されている場合、ref名の接頭辞 @emph{refs/heads/} と
@emph{refs/tags/} と @emph{refs/remotes/} は出力されません。 @emph{full}
が指定されている場合、完全なref名(接頭辞を含む)が出力されます。@emph{auto} が指定されている場合、出力が端末に送られると、ref名は
@emph{short} が指定されているかのように表示され、それ以外の場合はref名は表示されません。オプション @samp{--decorate} は
@samp{--decorate=short} の省略形です。構成されている場合はデフォルトで構成値の @samp{log.decorate}
になり、構成されていない場合は @samp{auto} になります。

@item  @samp{--decorate-refs=<pattern>} 
@itemx  @samp{--decorate-refs-exclude=<pattern>} 
@samp{--decorate-refs}
が指定されていない場合は、すべてのrefが含まれているように見せかけます。候補ごとに、@samp{--decorate-refs-exclude}
に指定されたパターンのいずれにもマッチしない場合、または @samp{--decorate-refs}
に指定されたパターンのいずれにもマッチしない場合は、装飾に使用しないでください。 @samp{log.excludeDecoration}
構成オプションを使用すると、装飾からrefを除外できますが、明示的な @samp{--decorate-refs} パターンは
@samp{log.excludeDecoration} のマッチングをオーバーライドします。

@item  @samp{--source} 
各コミットがコマンドラインで指定のコミットのいずれかから到達できる祖先である場合、当該コミット毎にコマンドラインで指定のコミットのref名で表示します。

@item  @samp{--[no-]mailmap} 
@itemx  @samp{--[no-]use-mailmap} 
mailmapファイルを使用して、作者名(author names)とコミッター名(committer names)と電子メールアドレス(email
addresses)を、正式な本名と電子メールアドレスにマップします。 git-shortlog(1) 参照。

@item  @samp{--full-diff} 
このフラグがない場合、 @samp{git log -p <path>...}
は、指定されたパスに関連(touch)するコミットを示し、その指定されたパスについての差分を取ります。これにより、指定されたパスに関連するコミットの完全な差分が表示されます。これは、
"<path>…" がコミットのみを制限し、それらのコミットの差分を制限しないことを意味します。

これは、例えば @samp{--stat} によって生成されたものなど、すべての差分ベースの出力タイプに影響することに注意してください。

@item  @samp{--log-size} 
各コミットの出力に “log size <number>” という行を含めます。ここで、 <number>
はそのコミットのメッセージの長さ(バイト単位)です。プログラムがスペースをコミットのメッセージ読み込み前に割り当てられるようにして、 @samp{git log}
出力からログメッセージを読み取るツールを高速化することを目的としています。

@item  @samp{-L<start>,<end>:<file>} 
@itemx  @samp{-L:<funcname>:<file>} 
@emph{<file>} 内で、 @emph{<start>,<end>} 、または関数名 regex @emph{<funcname>}
で指定された行範囲をトレースします。pathspec
リミッターを指定することはできません。これは現在、単一のリビジョンから開始するウォークに制限されています。つまり、0個または1個の正のリビジョン引数のみを指定でき、
@emph{<start>} と @emph{<end>} (または @emph{<funcname>})
が開始リビジョンに存在する必要があります。このオプションは複数回指定できます。これは @samp{--patch} オプションの機能を内包しています。パッチ出力は
@samp{--no-patch} を使用して抑制できますが、他の差分形式(つまり、 @samp{--raw}、 @samp{--numstat}、 @samp{--shortstat}、
@samp{--dirstat}、 @samp{--summary}、 @samp{--name-only}、 @samp{--name-status}、
@samp{--check})は現在実装されていません。

@emph{<start>} と @emph{<end>} は、以下のいずれかの形式です:

@itemize 

@item
number

@emph{<start>} または @emph{<end>} が数値の場合、絶対行番号を指定します(行は1から数えます)。

@item
@samp{/regex/}

この形式は、指定されたPOSIX正規表現に一致する最初の行を使用します。 @emph{<start>} が正規表現の場合、前の @samp{-L}
範囲の末尾から検索します。それ以外の場合は、ファイルの先頭から検索します。 @emph{<start>} が @samp{^/regex/}
の場合、ファイルの先頭から検索します。 @emph{<end>} が正規表現の場合、 @emph{<start>} で指定された行から検索開始します。

@item
+offset or -offset

これは <end> に対してのみ有効であり、 <start> で指定された行の前後の行数を指定します。
@end itemize

@emph{<start>} および @emph{<end>} の代わりに @samp{:<funcname>} が指定されている場合、これは @emph{<funcname>}
に一致する最初の関数名行から次の関数名行までの範囲を示す正規表現です。 @samp{:<funcname>} は、前の @samp{-L}
範囲の末尾から検索します。それ以外の場合は、ファイルの先頭から検索します。 @samp{^:<funcname>} はファイルの先頭から検索します。関数名は、
@samp{git diff} がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の
@emph{Defining a custom hunk-header} 参照)。

@item  <revision range> 
指定されたリビジョン範囲のコミットのみを表示します。 <revision range> が指定されていない場合、デフォルトで @samp{HEAD}
(つまり、現在のコミットにつながる履歴全体)になります。 @samp{origin..HEAD}
は、現在のコミット(つまり、@samp{HEAD})から到達可能なすべてのコミットを指定しますが、`origin`からは指定しません。 <revision
range> の綴り方の完全なリストについては、 gitrevisions(7) の「Specifying
Ranges」節を参照してください。

@item  [--] <path>… 
指定されたパスに一致するファイルがどのようになったかを説明するのに必要十分なコミットのみを表示します。詳細およびその他の簡略化モードについては、以下の
@emph{History Simplification} を参照してください。

混乱が生じた場合、パスをオプションまたはリビジョン範囲から分離するために、パスの前に @samp{--} を付ける必要がある場合があります。
@end table

@noindent

@heading Commit Limiting

ここで説明されている特別な表記法を使用してリストする必要があるコミットの範囲を指定することに加えて、追加のコミット制限が適用される場合があります。

より多くのオプションを使用すると、通常、出力がさらに制限されます(たとえば、@samp{--since=<date1>`は}<date1>@samp{より新しいコミットに制限され、}--grep=<pattern>@samp{と一緒に使用すると、ログメッセージに}<pattern>`と一致する行があるコミットにさらに制限されます)。

注意: これらは、`--reverse`などのコミット順序およびフォーマットオプションの前に適用されることに注意してください。

@table @asis

@item  @samp{-<number>} 
@itemx  @samp{-n <number>} 
@itemx  @samp{--max-count=<number>} 
出力するコミットの数を制限します。

@item  @samp{--skip=<number>} 
コミット出力の表示を開始する前に、'number’個のコミットをスキップします。

@item  --since=<date> 
@itemx  @samp{--after=<date>} 
指定の日付よりも新しいコミットを表示します。

@item  @samp{--until=<date>} 
@itemx  @samp{--before=<date>} 
指定の日付より古いコミットを表示します。

@item  @samp{--author=<pattern>} 
@itemx  @samp{--committer=<pattern>} 
コミット出力を、指定されたパターン(正規表現)に一致する作者(author)/コミッター(committer)ヘッダー行を持つものに制限します。複数の
@samp{--author=<pattern>} がある場合、作者が指定されたパターンのいずれかに一致するコミットが選択されます(複数の
@samp{--committer=<pattern>} の場合も同様)。

@item  @samp{--grep-reflog=<pattern>} 
コミット出力を、指定されたパターン(正規表現)に一致するreflogエントリを持つものに制限します。複数の`--grep-reflog`を使用すると、指定されたパターンのいずれかに一致するreflogメッセージを持つコミットが選択されます。`--walk-reflogs`が使用されていない限り、このオプションを使用するとエラーになります。

@item  @samp{--grep=<pattern>} 
コミット出力を、指定されたパターン(正規表現)に一致するログメッセージを持つものに制限します。複数の`--grep=<pattern>@samp{を使用すると、指定されたパターンのいずれかにメッセージが一致するコミットが選択されます(全てに一致するコミットだけを選択したい場合、}--all-match`を参照してください)。

`--notes`が有効な場合、ノートからのメッセージは、ログメッセージの一部であるかのようにマッチングされます。

@item  @samp{--all-match} 
コミット出力を、少なくとも1つに一致するものではなく、指定されたすべての`--grep`に一致するものに制限します。

@item  @samp{--invert-grep} 
コミット出力を、`--grep=<pattern>`で指定されたパターンと一致しないログメッセージを持つものに制限します。

@item  @samp{-i} 
@itemx  @samp{--regexp-ignore-case} 
大文字小文字に関係なく、正規表現の制限パターンに一致します。

@item  @samp{--basic-regexp} 
制限パターンを基本正規表現として扱います。これがデフォルトです。

@item  @samp{-E} 
@itemx  @samp{--extended-regexp} 
制限パターンを、デフォルトの基本正規表現の代わりに拡張正規表現として扱います。

@item  @samp{-F} 
@itemx  @samp{--fixed-strings} 
制限パターンを固定文字列として扱います(パターンを正規表現として解釈しないでください)。

@item  @samp{-P} 
@itemx  @samp{--perl-regexp} 
制限パターンをPerl互換の正規表現として扱います。

これらのタイプの正規表現のサポートは、コンパイル時オプションに依存します。Gitが当該のサポート付きでコンパイルされていない場合、このオプションを提供すると、Gitが死にます(die)。

@item  @samp{--remove-empty} 
指定されたパスがツリーから見えなくなったら停止(stop)します。

@item  @samp{--merges} 
マージコミットのみを印刷します。これは`--min-parents=2`とまったく同じです。

@item  @samp{--no-merges} 
複数の親を持つコミットを出力しない。これは`--max-parents=1`とまったく同じです。

@item  @samp{--min-parents=<number>} 
@itemx  @samp{--max-parents=<number>} 
@itemx  @samp{--no-min-parents} 
@itemx  @samp{--no-max-parents} 
量の多少に関わらず、とにかく複数の親コミットがあるコミットのみを表示します。特に、@samp{--max-parents=1`は}--no-merges`と同じであり、@samp{--min-parents=2`は}--merges`と同じです。@samp{--max-parents=0`はすべてのルートコミットを提供し、}--min-parents=3`はすべてのタコ足マージ(octopus
merges)を示します。

@samp{--no-min-parents`と}--no-max-parents`は、これらの制限を(制限なしに)再度リセットします。同等の形式は、@samp{--min-parents=0}(すべてのコミットに0個以上の親があります)および`--max-parents=-1`(マイナスの数は上限がないことを示します)です。

@item  @samp{--first-parent} 
マージコミットを確認したら、最初の親コミットのみを探索します。このオプションは、特定のトピックブランチの進化を表示するときに、より良い概要を提供できます。トピックブランチへのマージは、時々更新されるアップストリームに調整することだけである傾向があり、このオプションを使用すると、そのようなマージによって履歴に取り込まれた個々のコミットを無視できます。

このオプションは、マージコミットのデフォルトのdiff形式も`first-parent`に変更します。詳細については、`--diff-merges=first-parent`を参照してください。

@item  @samp{--not} 
次に現れる`--not`までの間、後続のすべてのリビジョン指定子の'^'プレフィックス(またはその欠如)の意味を逆にします。

@item  @samp{--all} 
‘refs/`内のすべてのrefが`HEAD`とともに、コマンドラインに’<commit>'としてリストされているかのように見せかけます。

@item  @samp{--branches[=<pattern>]} 
‘refs/heads`内のすべてのrefがコマンドラインに’<commit>'としてリストされているかのように見せかけます。@emph{<pattern>'が指定されている場合、ブランチを指定されたシェルグロブ(shell
glob)に一致するものに制限します。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--tags[=<pattern>]} 
‘refs/tags`内のすべてのrefがコマンドラインに’<commit>'としてリストされているかのように見せかけます。@emph{<pattern>'が指定されている場合は、指定されたシェルグロブ(shell
glob)に一致するタグにタグを制限します。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--remotes[=<pattern>]} 
‘refs/remotes`内のすべてのrefがコマンドラインに’<commit>'としてリストされているかのように見せかけます。@emph{<pattern>'が指定されている場合、リモート追跡ブランチを指定されたシェルグロブ(shell
glob)に一致するものに制限します。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--glob=<glob-pattern>} 
シェルグロブ'<glob-pattern>'に一致するすべてのrefがコマンドラインに'<commit>'としてリストされているかのように見せかけます。先頭の’refs/@emph{は、欠落している場合は自動的に先頭に追加されます。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--exclude=<glob-pattern>} 
次の`--all`または`--branches`または`--tags`または`--remotes`または`--glob`が別の方法で考慮する'<glob-pattern>'に一致するrefを含めないでください。このオプションを繰り返すと、次の`--all`または`--branches`または`--tags`または`--remotes`または`--glob`オプションまで除外パターンが蓄積されます(他のオプションまたは引数は、蓄積されたパターンをクリアしません)。

与えられたパターンは、それぞれ`--branches`または`
--tags`または`--remotes`に適用される場合、‘refs/heads`または`refs/tags`または`refs/remotes`で始まるべきではありません。@samp{--glob`または}--all`に適用する場合は、`refs/`で始める必要があります。末尾の’/*'を意図している場合は、明示的に指定する必要があります。

@item  @samp{--reflog} 
reflogsで言及されているすべてのオブジェクトがコマンドラインに`<commit>`としてリストされているかのように見せかけます。

@item  @samp{--alternate-refs} 
代替リポジトリのref先端として言及されているすべてのオブジェクトがコマンドラインにリストされているかのように見せかけます。代替リポジトリは、オブジェクトディレクトリが`objects/info/alternates`で指定されているリポジトリです。インクルードされたオブジェクトのセットは、`core.alternateRefsCommand`などによって変更できます。git-config(1)を参照してください。

@item  @samp{--single-worktree} 
デフォルトでは、作業ツリーが複数ある場合、@samp{--all`と}-reflog`と`--indexed-objects`では、すべての作業ツリーが検査されます(git-worktree(1)を参照)。このオプションは、現在の作業ツリーのみを調べるように強制します。

@item  @samp{--ignore-missing} 
入力に無効なオブジェクト名が含まれている場合、そもそもその不正な入力が行われていないかのように見せかけます。

@item  @samp{--bisect} 
コマンドラインで、bad bisection ref @samp{refs/bisect/bad} がリストされ、その後に @samp{--not} と good
bisection ref @samp{refs/bisect/good-*} が続くかのように見せかけます。

@item  @samp{--stdin} 
コマンドラインにリストされている'<commit>'に加えて、標準入力からそれらを読み取ります。`--`区切り文字が表示された場合は、コミットの読み取りを停止し、パスの読み取りを開始して結果を制限します。

@item  @samp{--cherry-mark} 
@samp{--cherry-pick}（以下を参照）と同様ですが、同等のコミットを省略せずに`=@samp{と印し、同等でないコミットを}+`と印します。

@item  @samp{--cherry-pick} 
コミットの組を対称差(symmetric difference)に制限する場合、「反対側」の別のコミットと同じ変更を導入するコミットを省略します。

たとえば、@samp{A`と`B`の2つのブランチがある場合、それらの片側だけですべてのコミットを一覧表示する通常の方法は、}--left-right`を使用することです(`--left-right`オプションの説明の以下の例を参照してください)。ただし、他のブランチからは(ブランチAと重複しない)厳選されたコミットが表示されます(たとえば、「3rd
onb」はブランチAからチェリーピックされる可能性があります)。このオプションを使用すると、そのようなコミットのペアは出力から除外されます。

@item  @samp{--left-only} 
@itemx  @samp{--right-only} 
リストは、対称差のそれぞれの側でのみコミットします。つまり、@samp{--left-right`で `<}
と印されるのだけか、あるいは`--left-right`で`>`と印されるものだけです。

たとえば、@samp{--cherry-pick --right-only
A...B`は、`A`にある、または`A`のコミットとパッチと同等のコミットを`B`から省略します。つまり、これは`git cherry A
B`からの}+@samp{コミットをリストします。より正確に書くと、}--cherry-pick --right-only
--no-merges`により正確なリストを提供します。

@item  @samp{--cherry} 
`--right-only --cherry-mark
--no-merges`の同義語です。出力を私たちの側のコミットに制限し、フォークされた履歴の反対の側に適用されたものを、`git cherry
upstream mybranch`と同様に`git log --cherry upstream…mybranch`で印するのに役立ちます。

@item  @samp{-g} 
@itemx  @samp{--walk-reflogs} 
コミットの祖先チェーンをたどる代わりに、reflogエントリを最新のものから古いものに移動します。このオプションを使用する場合、除外するコミットを指定することはできません(つまり、'^commit’や'commit1..commit2’や'commit1...commit2’表記は使用できません)。

(明らかな理由で、)@samp{oneline`と`reference`以外の}--pretty`形式では、これにより、出力にreflogから取得された2行の追加情報が含まれます。出力のreflog指定子は、@samp{ref@@@{Nth@}}(@samp{Nth`はreflogの逆時系列インデックス(reverse-chronological
index))または`ref@@@{timestamp@}}(そのエントリのタイムスタンプ付き)として表示されます。表示は下記のいくつかのルールに依存します:

@enumerate 

@item
開始点が @samp{ref@@@{Nth@}} として指定されている場合は、インデックス形式を表示します。

@item
開始点が @samp{ref@@@{now@}} として指定されている場合は、タイムスタンプ形式を表示します。

@item
上記のどちらも使用されていないが、コマンドラインで`--date`が指定されている場合は、`--date`で要求された形式でタイムスタンプを表示します。

@item
それ以外の場合は、インデックス形式を表示します。
@end enumerate

@samp{--pretty =
oneline`では、コミットメッセージの前にこの情報が同じ行に付けられます。このオプションを}--reverse`と組み合わせることはできません。git-reflog(1)も参照してください。

`--pretty=reference`では、この情報はまったく表示されません。

@item  @samp{--merge} 
マージが失敗した後、競合があり、マージするすべてのheadに存在しないファイルに関連(touch)するrefを表示します。

@item  @samp{--boundary} 
除外された境界コミットを出力します。 境界コミットの前には `-`が付いています。
@end table

@noindent

@heading History Simplification

特定の<path>を変更するコミットなど、履歴の一部のみに関心がある場合があります。ただし、「履歴の簡略化」(History
Simplification)は2つの部分から成ります。履歴を簡略化するためにはさまざまな戦略があるためです。その1つはコミットの選択であり、もう1つはそれを行う方法です。

以下のオプションは、表示するコミットを選択します:

@table @asis

@item  <paths> 
指定された<パス>を変更するコミットが選択されます。

@item  @samp{--simplify-by-decoration} 
いくつかのブランチまたはタグによって参照されるコミットが選択されます。
@end table

注意: 意味のある重要な履歴のために、追加のコミットを表示できることに注意してください。

以下のオプションは、簡略化の実行方法に影響します。

@table @asis

@item  Default mode 
履歴を、ツリーの最終状態を説明する最も単純な履歴に単純化します。最終結果が同じである場合(つまり、同じコンテンツのブランチをマージする場合)、いくつかの傍流ブランチ(side
branches)を削除するため、最も単純です。

@item  @samp{--show-pulls} 
デフォルトモードからのすべてのコミットを含めますが、最初の親へのTREESAMEではなく、後の親へのTREESAMEであるマージコミットも含めます。このモードは、ブランチに変更を「最初に導入した」マージコミットを表示するのに役立ちます。(訳注:TREESAME=pathspecが全く同一であるツリー)

@item  @samp{--full-history} 
デフォルトモードと同じですが、一部の履歴を削除しません。

@item  @samp{--dense} 
選択したコミットのみが表示され、重大で意味のある履歴を持つコミットもいくつか表示されます。

@item  @samp{--sparse} 
簡略化された履歴内のすべてのコミットが表示されます。

@item  @samp{--simplify-merges} 
このマージに寄与する選択されたコミットがないため、結果の履歴からいくつかの不要なマージを削除するための`--full-history`への追加オプション。

@item  @samp{--ancestry-path} 
表示するコミットの範囲が指定されている場合(たとえば、@emph{commit1..commit2’または’commit2 ^commit1})、
@emph{commit1} と @emph{commit2} の間の祖先チェーンに直接存在するコミットのみ、つまり、 @emph{commit1} の子孫であり、
@emph{commit2} の祖先であるコミットを表示します。
@end table

より詳細な説明は以下のとおりです。

<paths> として @samp{foo} を指定したとします。 @samp{foo} !TREESAME
を変更するコミットを呼び出し、残りをTREESAMEと呼びます。( @samp{foo}
のためにフィルタリングされた差分では、それぞれ異なって見えたりたり等しく見えたりします。）

以下、簡略化設定の違いを説明するために、同じ履歴例を使います。このコミットグラフでは、ファイル @samp{foo} をフィルタリングしていると想定しています:

@example
          .-A---M---N---O---P---Q
         /     /   /   /   /   /
        I     B   C   D   E   Y
         \   /   /   /   /   /
          `-------------'   X
@end example


履歴 A---Q の水平線は、各マージの最初の親と見なされます。その各コミットは以下のとおりです:

@itemize 

@item
@samp{I} は最初のコミットであり、ファイル @samp{foo} が内容 “asdf” で存在し、ファイル @samp{quux} は内容 “quux”
で存在します。最初のコミットは空のツリーと比較されるため、@samp{I} は !TREESAME です。

@item
@samp{A} では、 @samp{foo} には “foo” だけが含まれています。

@item
@samp{B} には @samp{A} と同じ変更が含まれています。そのマージ @samp{M} は些細なことであり、したがってすべての親にとって TREESAME です。

@item
@samp{C} は @samp{foo} を変更しませんが、そのマージ @samp{N} はそれを “foobar” に変更するので、どの親にとっても TREESAME
ではありません。

@item
@samp{D} は @samp{foo} を “baz” に設定します。そのマージ @samp{O} は、 @samp{N} と @samp{D} から “foobarbaz”
への文字列を結合します。つまり、どの親にとっても TREESAME ではありません。

@item
@samp{E} は @samp{quux} を “xyzzy” に変更し、そのマージ @samp{P} は文字列を “quuxxyzzy” に結合します。 @samp{P} は
@samp{O} に対して TREESAME ですが、 @samp{E} に対してはそうではありません。

@item
@samp{X} は、新ファイル @samp{side} を追加し、 @samp{Y} がそれを変更した独立したルートコミットです。 @samp{Y} は @samp{X}
へのTREESAMEです。そのマージ @samp{Q} は @samp{P} に @samp{side} を追加し、 @samp{Q} は @samp{P} にはTREESAMEですが、@samp{Y}
に対してはそうではありません。
@end itemize

@samp{rev-list} は、 @samp{--full-history} および/または、( @samp{--parents} または @samp{--children}
を介して)親の書き換えが使用されているかどうかに基づいて、コミットを含めたり除外したりして、履歴を逆方向にウォークスルーします。以下の設定が可能です。

@table @asis

@item  Default mode 
コミットは、どの親に対してもTREESAMEでない場合に含まれます(これは変更できますが、以下の @samp{--sparse}
を参照してください)。コミットがマージであり、一方の親に対するTREESAMEであった場合は、その親のみをフォローします。(TREESAMEの親が複数ある場合でも、そのうちの1つだけをフォローします)。それ以外の場合は、すべての親をフォローします。

これにより、以下のようになります:

@example
          .-A---N---O
         /     /   /
        I---------D
@end example


TREESAMEの親のみに従うルールが利用可能な場合は、 @samp{B} を検討対象から完全に削除したことに注意してください。 @samp{C} は @samp{N}
を介して考慮されましたが、しかしそれはTREESAMEです。ルートコミットは空のツリーと比較されるため、 @samp{I} は !TREESAME です。

親子関係は @samp{--parents} でのみ表示されますが、デフォルトモードで選択されたコミットには影響しないため、親の行を示しました。

@item  @samp{--full-history without parent rewriting} 
このモードは、デフォルトとはある一点で異なります。つまり、いずれかの親に対してTREESAMEであっても、常にマージのすべての親に従います。マージの複数の側にコミットが含まれている場合でも、これはマージ自体が含まれていることを意味するものではありません！
例では以下のようになります。

@example
        I  A  B  N  D  O  P  Q
@end example


@samp{M} は、両方の親にとってTREESAMEであるため、除外されました。 @samp{E} と @samp{C} と @samp{B} をすべて巡りましたが、 @samp{B} だけが
!TREESAME だったので、他は表示されません。

注意:
親の書き換え(rewrite)がないと、コミット間の親子関係について話す(talk)ことは実際には不可能であるため、それらが切断されている(disconnected)ことを示していることに注意してください。

@item  @samp{--full-history with parent rewriting} 
通常のコミットは !TREESAME の場合にのみ含まれます(これは変更できますが、以下の @samp{--sparse} を参照してください)。

マージは常に含まれます。ただし、親リストは書き直されます。各親に沿って、自分自身に含まれていないコミットを削除します。 これにより以下のようになります。

@example
          .-A---M---N---O---P---Q
         /     /   /   /   /
        I     B   /   D   /
         \   /   /   /   /
          `-------------'
@end example


上記を書き直さずに @samp{--full-history} と比較してください。 @samp{E} はTREESAMEであるため削除されましたが、Pの親リストは @samp{E}
の親 @samp{I} を含むように書き直されていることに注意してください。 @samp{C} と @samp{N} および @samp{X} と @samp{Y} と @samp{Q}
についても同じことが起こりました。
@end table

上記の設定に加えて、あなたはTREESAMEが包含に影響を与えるかどうかを変更できます:

@table @asis

@item  @samp{--dense} 
巡ったコミットは、親にとってTREESAMEでない場合に含まれます。

@item  @samp{--sparse} 
巡ったすべてのコミットが含まれます。

@samp{--full-history}
がなくても、これによりマージが単純化されることに注意してください。親の1つがTREESAMEの場合、その1つだけに従うため、マージの反対側を巡ることはありません。

@item  @samp{--simplify-merges} 
最初に、親を書き換えた @samp{--full-history} と同じ方法で履歴グラフを作成します(上記を参照)。

それから、以下のルールに従って、各コミット @samp{C} を最終履歴内の置換 @samp{C'} に単純化します:

@itemize 

@item
@samp{C'} を @samp{C} にセットします。

@item
@samp{C'} の各親 @samp{P} をその簡略化された @samp{P'}
に置き換えます。その過程で、他の親の祖先であるか、ルートである親を削除すると、TREESAMEが空のツリーにコミットされ、重複が削除されますが、TREESAMEであるすべての親を削除しないように注意してください。

@item
この親の書き換え後、 @samp{C'} がルートまたはマージコミット(0または >1 の親を持つ)、境界コミット、または
!TREESAMEである場合、それは残ります。それ以外の場合は、唯一の親に置き換えられます。
@end itemize

この効果は、親の書き換えを使用した @samp{--full-history} と比較することで最もよく示されます。例は以下のようになります:

@example
          .-A---M---N---O
         /     /       /
        I     B       D
         \   /       /
          `---------'
@end example


注意: @samp{--full-history} に対する @samp{N} と @samp{P} と @samp{Q} の主な違いに注意してください:

@itemize 

@item
@samp{N} の親リストは、他の親 @samp{M} の祖先であるため、 @samp{I} が削除されました。それでも、 !TREESAME なので @samp{N} が残りました。

@item
@samp{P} の親リストも同様に @samp{I} が削除されました。 @samp{P} は、親が1つで TREESAMEであるため、完全に削除されました。

@item
@samp{Q} の親リストでは、 @samp{Y} が @samp{X} に簡略化されていました。その後、 @samp{X} はTREESAMEルートであったため、削除されました。 @samp{Q}
は、親が1つで TREESAMEであるため、完全に削除されました。
@end itemize
@end table

利用可能な別の簡略化モードがあります:

@table @asis

@item  @samp{--ancestry-path} 
表示されるコミットを、指定されたコミット範囲内の “from” コミットと “to”
コミットの間の祖先チェーンに直接あるコミットに制限します。つまり、 “to” コミットの祖先であるコミットと “from”
コミットの子孫であるコミットのみを表示します。

ユースケースの例として、以下のコミット履歴について考えます:

@example
            D---E-------F
           /     \       \
          B---C---G---H---I---J
         /                     \
        A-------K---------------L--M
@end example


通常の @emph{D..M} は、 @samp{M} の祖先であるコミットのセットを計算しますが、 @samp{D} の祖先であるコミットは除外します。 これは、「 @samp{M} には
@samp{D} には存在しなかったものがある」という意味で、 @samp{D} 以降の @samp{M`に至るまでの歴史に何が起こったのかを知るのに役立ちます。この例の結果は、
`A} と @samp{B} (そしてもちろん @samp{D} 自体)を除くすべてのコミットになります。

ただし、 @samp{M} のコミットが @samp{D} で入ったバグで汚染されており、修正が必要な場合は、実際には @samp{D} の子孫である @emph{D..M}
のサブセットのみを表示する必要があります。つまり、 @samp{C} と @samp{K} を除外します。これはまさに @samp{--ancestry-path}
オプションが行うことです。これを @emph{D..M} 範囲に適用すると、以下のようになります:

@example
                E-------F
                 \       \
                  G---H---I---J
                               \
                                L--M
@end example

@end table

別のオプション @samp{--show-pulls} について説明する前に、新しいサンプル履歴を作成する必要があります。

簡略化された履歴を見るときにユーザーが直面する一般的な問題は、ファイルを変更したことがわかっているコミットが、ファイルの簡略化された履歴に表示されないことです。そこで、新しい例を示し、その場合に
@samp{--full-history} や @samp{--simplify-merges} などのオプションがどのように機能するかを示しましょう。

@example
          .-A---M-----C--N---O---P
         /     / \  \  \/   /   /
        I     B   \  R-'`-Z'   /
         \   /     \/         /
          \ /      /\        /
           `---X--'  `---Y--'
@end example


この例では、 @samp{I} が @samp{file.txt} を作成し、それが @samp{A} と`B` と @samp{X}
にてさまざまな方法で変更されたとします。ひとり親のコミット @samp{C} と @samp{Z} と @samp{Y} は @samp{file.txt} を変更していません。マージコミット
@samp{M} は、マージの競合を解決して、 @samp{A} と @samp{B}
の両方の変更を含めることによって作成されたため、どちらにもTREESAMEではありません。ただし、マージコミット @samp{R} は、 @samp{M} の
@samp{file.txt`の内容を無視し、 `X} の @samp{file.txt} の内容のみを取得することによって作成されました。 したがって、 @samp{R} は
@samp{X} へのTREESAMEですが、 @samp{M} はそうではありません。最後に、 @samp{N} を作成するための自然なマージ解決は、 @samp{R} で
@samp{file.txt} の内容を取得することです。したがって、 @samp{N} は @samp{C} ではなく @samp{R} へのTREESAMEです。マージコミット @samp{O} と
@samp{P} は、最初の親にはTREESAMEですが、2番目の親である @samp{Z} と @samp{Y} にはついてはそうではありません。

デフォルトモードを使用する場合、 @samp{N} と @samp{R}
は両方ともTREESAMEの親を持っているため、これらのエッジはウォークされ、他のエッジは無視されます。結果の履歴グラフは以下のとおりです:

@example
        I---X
@end example


@samp{--full-history} を使用する場合、Gitはすべてのエッジを巡ります。これにより、コミット @samp{A} と @samp{B} と マージ @samp{M}
が検出されますが、マージコミット @samp{O} と @samp{P} も明らかになります。 親を書き換えると、結果のグラフは以下のようになります:

@example
          .-A---M--------N---O---P
         /     / \  \  \/   /   /
        I     B   \  R-'`--'   /
         \   /     \/         /
          \ /      /\        /
           `---X--'  `------'
@end example


ここで、マージコミット @samp{O} と @samp{P} は、実際には @samp{file.txt} への変更を提供しなかったため、余分なノイズを提供します。古いバージョンの
@samp{file.txt}
に基づいたトピックのみをマージしました。これは、多くの寄稿者が並行して作業し、トピックブランチを単一のトランクに沿ってマージするワークフローを使用するリポジトリの一般的な問題です。開発に関係のないマージが
@samp{--full-history} の結果に表示されます。

@samp{--simplify-merges} オプションを使用すると、コミット @samp{O} と @samp{P} が結果から消えます。 これは、 @samp{O} と @samp{P}
の書き直された2番目の親が、最初の親から到達可能であるためです。これらのエッジが削除されると、コミットは、親にとってTREESAMEである単一の親のコミットのように見えます。これはコミット
@samp{N} にも発生し、以下のような履歴ビューが表示されます:

@example
          .-A---M--.
         /     /    \
        I     B      R
         \   /      /
          \ /      /
           `---X--'
@end example


このビューでは、 @samp{A} と @samp{B} と @samp{X} からの重要なひとり親の変更がすべて表示されます。また、慎重に解決されたマージ @samp{M}
とそれほど慎重に解決されていないマージ @samp{R} も表示されます。これは通常、コミット @samp{A} と @samp{B}
がデフォルトのビューの履歴から「消えた」理由を判断するのに十分な情報です。ただし、このアプローチにはいくつかの問題があります。

最初の問題はパフォーマンスです。以前のオプションとは異なり、 @samp{--simplify-merges}
オプションでは、単一の結果を返す前にコミット履歴全体をウォークする必要があります。これにより、非常に大規模なリポジトリでこのオプションを使用するのが難しくなる可能性があります。

2番目の問題は監査の1つです。多くの寄稿者が同じリポジトリで作業している場合、どのマージコミットが重要なブランチに変更を導入したかが重要です。上記の問題のあるマージ
@samp{R} は、重要なブランチにマージするために使用されたマージコミットではない可能性があります。 代わりに、マージ @samp{N} を使用して @samp{R} と @samp{X}
を重要なブランチにマージしました。このコミットには、変更 @samp{X} がコミットメッセージの @samp{A} と @samp{B}
からの変更を上書きするようになった理由に関する情報が含まれている可能性があります。

@table @asis

@item  @samp{--show-pulls} 
デフォルトの履歴に表示されるコミットに加えて、最初の親にはTREESAMEではなく、後の親にはTREESAMEである各マージコミットを表示します。

マージコミットが @samp{--show-pulls} に含まれている場合、マージは別のブランチから変更を「プル」したかのように扱われます。この例で
@samp{--show-pulls} を使用すると(他のオプションは使用しない場合、)結果のグラフは行かのようになります:

@example
        I---X---R---N
@end example


ここで、コミット @samp{X} と @samp{R} をそれぞれベースブランチにプルしたため、マージコミット @samp{R} と @samp{N}
が含まれています。これらのマージは、コミット @samp{A} と @samp{B} がデフォルトの履歴に表示されない理由です。

@samp{--show-pulls} が @samp{--simplify-merges} とペアになっている場合、グラフには必要なすべての情報が含まれます:

@example
          .-A---M--.   N
         /     /    \ /
        I     B      R
         \   /      /
          \ /      /
           `---X--'
@end example


@samp{M} は @samp{R} から到達可能であるため、 @samp{N} から @samp{M} へのエッジが単純化されていることに注意してください。ただし、 @samp{N} は、変更
@samp{R} をメインブランチに「プル」したため、重要なコミットとして履歴に表示されます。
@end table

@samp{--simplify-by-decoration}
オプションを使用すると、タグで参照されていないコミットを省略して、履歴のトポロジの全体像のみを表示できます。コミットは、(1)タグによって参照されている場合、または
(2)コマンドラインで指定されたパスの内容を変更した場合に、!TREESAMEとしてマークされます(つまり、上記の履歴簡略化ルールの後に保持されます)。他のすべてのコミットはTREESAMEとしてマークされます(簡略化される可能性があります)。

@noindent

@heading Commit Ordering

デフォルトでは、コミットは新しい順に表示されます。

@table @asis

@item  @samp{--date-order} 
すべての子が表示されるまで親を表示しませんが、それ以外の場合はコミットタイムスタンプの順序でコミットを表示します。

@item  @samp{--author-date-order} 
すべての子が表示されるまで親を表示しませんが、それ以外の場合は、作者(author)のタイムスタンプ順にコミットを表示します。

@item  @samp{--topo-order} 
すべての子が表示されるまで親を表示せず、複数の履歴行が混在するコミットを表示しないようにします。

たとえば、以下のようなコミット履歴があります:

@example
    ---1----2----4----7
        \              \
         3----5----6----8---
@end example


ここで、数字はコミットタイムスタンプの順序を示し、 @samp{gitrev-list} と @samp{--date-order}
のある友達は、タイムスタンプの順序でコミットを示します。つまり、8 7 6 5 4 3 2 1

@samp{--topo-order} を使用すると、8 6 5 3 7 4 2 1（または8 7 4 2 6 5 3
1）が表示されます。2つの並列開発トラックからのコミットが混在して表示されないようにするために、いくつかの古いコミットが新しいコミットの前に表示されます。

@item  @samp{--reverse} 
表示するように選択したコミットを逆の順序で出力します(上記の Commit Limiting 節を参照)。 @samp{--walk-reflogs}
と組み合わせることはできません。
@end table

@noindent

@heading Object Traversal

これらのオプションは、主にGitリポジトリのパッキングを対象としています。

@table @asis

@item  @samp{--unsorted-input} 
コミット時間で時系列の逆順に並べ替えるのではなく、コマンドラインで指定された順序でコミットを表示します。@samp{--no-walk} または
@samp{--no-walk=sorted} と組み合わせることはできません。

@item  @samp{--no-walk[=(sorted|unsorted)]} 
指定されたコミットのみを表示し、祖先をトラバースしない。範囲が指定されている場合、これは効果がありません。引数 @samp{unsorted}
が指定されている場合、コミットはコマンドラインで指定された順序で表示されます。それ以外の場合( @samp{sorted}
または引数が指定されていない場合)、コミットはコミット時間の逆順に表示されます。 @samp{--graph} と組み合わせることはできません。 @samp{sorted}
または引数が指定されていない場合、 @samp{--unsorted-input} と組み合わせることはできません。

@item  @samp{--do-walk} 
以前の @samp{--no-walk} を上書きします。
@end table

@noindent

@heading Commit Formatting

@table @asis

@item  @samp{--pretty[=<format>]} 
@itemx  @samp{--format=<format>} 
コミットログの内容を指定された形式できれいに印刷(pretty-print)します。 @emph{<format>} は
oneline・short・medium・full・fuller・reference・email・raw・format:<string>・tformat:<string>
のいずれかになります。 @emph{<format>} が上記のいずれでもなく、 @emph{%placeholder} が含まれている場合、
@emph{--pretty=tformat:<format>} が指定されたかのように動作します。

各フォーマットの詳細については、 "PRETTY FORMATS" セクションを参照してください。 @emph{=<format>}
の部分を省略すると、デフォルトで @emph{medium} になります。

注意: リポジトリー構成でデフォルトのpretty formatを指定できます(git-config(1) 参照)。

@item  @samp{--abbrev-commit} 
40バイトの16進コミットオブジェクト名全体を表示する代わりに、オブジェクトに一意の名前を付けるプレフィックスを表示します。
"--abbrev=<n>" (表示されている場合はdiff出力も変更します)オプションを使用して、プレフィックスの最小長を指定できます。

これにより、80桁幅の端末を使用している人にとって "--pretty=oneline" がずっと読みやすくなるはずです。

@item  @samp{--no-abbrev-commit} 
完全な40バイトの16進コミットオブジェクト名を表示します。 これにより、明示的または "--oneline"
などの他のオプションによって暗黙的に示される @samp{--abbrev-commit} が無効になります。また、 @samp{log.abbrevCommit}
変数をオーバーライドします。

@item  @samp{--oneline} 
これは、 "--pretty=oneline --abbrev-commit" を一緒に使用するための省略形です。

@item  @samp{--encoding=<encoding>} 
コミットオブジェクトは、ログメッセージに使用される文字エンコードをエンコードヘッダーに記録します。このオプションを使用して、ユーザーが好むエンコーディングでコミットログメッセージを再コーディングするようにコマンドに指示できます。配管以外のコマンドの場合、これはデフォルトでUTF-8になります。オブジェクトが
@samp{X} でエンコードされていると主張し、 @samp{X}
で出力している場合、オブジェクトをそのまま出力することに注意してください。これは、元のコミットの無効なシーケンスが出力にコピーされる可能性があることを意味します。同様に、
iconv(3) コミットの変換に失敗した場合、警告とともに元のオブジェクトをそのまま出力します。

@item  @samp{--expand-tabs=<n>} 
@itemx  @samp{--expand-tabs} 
@itemx  @samp{--no-expand-tabs} 
出力に表示する前に、ログメッセージでタブ展開を実行します(タブ幅を <n> とみなして <n> 境界に揃うように空白で調整する)。
@samp{--expand-tabs} は @samp{--expand-tabs=8} の省略形であり、 @samp{--no-expand-tabs} は
@samp{--expand-tabs=0} の省略形です。タブの展開を無効にします。

デフォルトでは、タブはログメッセージを4つのスペースでインデントするきれいな形式(pretty formats)で展開されます(つまり、デフォルトの
@emph{medium} と’full' と @emph{fuller})。

@item  @samp{--notes[=<ref>]} 
コミットログメッセージを表示するときに、コミットに注釈を付けるnotes(git-notes(1)
参照)を表示します。これは、コマンドラインに @samp{--pretty} 、@samp{--format} または @samp{--oneline}
オプションが指定されていない場合の、 @samp{git log} と @samp{git show} と ` git whatchanged` コマンドのデフォルトです。

デフォルトでは、表示されるnotesは、 @samp{core.notesRef} および @samp{notes.displayRef}
変数(または対応する環境変数オーバーライド)にリストされているnote refからのものです。詳細については git-config(1)
を参照してください。

オプションの @emph{<ref>} 引数を使用して、refを使用して表示するnotesを検索します。 refは、 @samp{refs/notes/}
で始まる完全なrefnameを指定できます。 @samp{notes/} で始まるか、 @samp{refs/} で始まるか、それ以外で始まる場合、
@samp{refs/notes/} が接頭辞として付けられ、refのフルネームを形成します。

複数の --notes オプションを組み合わせて、表示するノートを制御できます。 例: "--notes=foo" は "refs/notes/foo"
からのnotesのみを表示します。 "--notes=foo --notes" は、 "refs/notes/foo" とデフォルトのnotes
ref(s) の両方のnotesを表示します。

@item  @samp{--no-notes} 
notesを表示しないでください。 これは、notesが表示されるnotes refのリストをリセットすることにより、上記の @samp{--notes}
オプションを無効にします。 オプションは、コマンドラインで指定された順序で解析されます。 "--notes --notes=foo --no-notes
--notes=bar" は、 "refs/notes/bar" からのnotesのみを表示します。

@item  @samp{--show-notes[=<ref>]} 
@itemx  @samp{--[no-]standard-notes} 
これらのオプションは非推奨です。 代わりに、上記の --notes/--no-notes オプションを使用してください。

@item  @samp{--show-signature} 
署名を @samp{gpg --verify} に渡して、署名されたコミットオブジェクトの有効性を確認し、出力を表示します。

@item  @samp{--relative-date} 
@samp{--date=relative} と同じ。

@item  @samp{--date=<format>} 
@samp{--pretty} を使用する場合など、人間が読める形式で表示される日付に対してのみ有効になります。 @samp{log.date} 構成変数(config
variable)は、logコマンドの @samp{--date}
オプションのデフォルト値を設定します。デフォルトでは、日付は元のタイムゾーン(コミッターの、または作者のいずれか)で表示されます。フォーマットに
@samp{-local} が追加されている場合(例: @samp{iso-local} )、代わりにユーザーのローカルタイムゾーンが使用されます。

@samp{--date=relative} は、現在の時刻を基準にした日付を示します。例: “2 hours ago” 。 @samp{-local} オプションは
@samp{--date = relative} には効果がありません。

@samp{--date=local} は @samp{--date=default-local} のエイリアスです。

@samp{--date=iso} (または @samp{--date=iso8601} )は、タイムスタンプをISO 8601のような形式で表示します。厳密なISO
8601形式との違いは以下のとおりです:

@itemize 

@item
@samp{T} 日付/時刻区切り文字の代わりにスペース

@item
時間とタイムゾーンの間のスペース

@item
タイムゾーンの時間と分の間にコロンがありません
@end itemize

@samp{--date=iso-strict} (または @samp{--date=iso8601-strict} )は、タイムスタンプを厳密なISO
8601形式で表示します。

@samp{--date=rfc} (または @samp{--date=rfc2822} )は、RFC
2822形式のタイムスタンプを示します。これは、電子メールメッセージでよく見られます。

@samp{--date=short} は、日付のみを表示し、時刻は表示せず、 @samp{YYYY-MM-DD} 形式で表示します。

@samp{--date=raw} は、エポック(1970-01-01 00:00:00 UTC)からの秒数、スペース、UTCからのオフセット(@samp{+} または
@samp{-} の付いた4桁数字で、最初の2つは時間、次の2つは分です)。つまり、タイムスタンプが @samp{strftime("%s %z")}
でフォーマットされているかのようになります。 @samp{-local}
オプションは、seconds-since-epoch値(常にUTCで測定されます)には影響しませんが、付随するタイムゾーン値を切り替えることに注意してください。

@samp{--date=human}
は、タイムゾーンが現在のタイムゾーンと一致しない場合はタイムゾーンを表示し、一致する場合は日付全体を印刷しません(つまり、「今年」の日付の場合は年の印刷をスキップしますが、何があったか覚えてるような過去数日については日付自体もスキップします)。
古い日付の場合、時と分も省略されます。

@samp{--date=unix} は、日付をUnixエポックタイムスタンプ(1970年からの秒数)として表示します。 @samp{--raw}
と同様に、これは常にUTCであるため、 ` -local` は効果がありません。

@samp{--date=format:...} は、内部で処理される%zと%Zを除いて、フォーマット @samp{...} をあなたのシステムの @samp{strftime}
に送ります。 @samp{--date=format:%c}
を使用して、システムロケールの推奨形式で日付を表示します。フォーマットプレースホルダーの完全なリストについては、 @samp{strftime}
マニュアルを参照してください。 @samp{-local} を使用する場合、正しい構文は @samp{--date=format-local:...} です。

@samp{--date=default} はデフォルトの形式であり、いくつかの例外を除いて @samp{--date=rfc2822} に似ています:

@itemize 

@item
曜日の後にコンマはありません

@item
ローカルタイムゾーンを使用する場合、タイムゾーンは省略されます
@end itemize

@item  @samp{--parents} 
コミットの親も出力します( "commit parent…" の形式で)。親の書き換えも可能にします。上記の @emph{History
Simplification} 参照してください。

@item  @samp{--children} 
コミットの子も出力します( "commit child…" の形式で)。親の書き換えも可能にします。上記の @emph{History
Simplification} を参照してください。

@item  @samp{--left-right} 
対称差のどちら側からコミットに到達できるかをマークします。左側からのコミットには`<@samp{が付けられ、右側からのコミットには
`>`が付けられます。}--boundary`と組み合わせると、それらのコミットの前に`-`が付きます。

たとえば、以下のトポロジーの場合:

@example
             y---b---b  branch B
            / \ /
           /   .
          /   / \
         o---x---a---a  branch A
@end example


以下のような出力が得られます:

@example
        $ git rev-list --left-right --boundary --pretty=oneline A...B

        >bbbbbbb... 3rd on b
        >bbbbbbb... 2nd on b
        <aaaaaaa... 3rd on a
        <aaaaaaa... 2nd on a
        -yyyyyyy... 1st on b
        -xxxxxxx... 1st on a
@end example


@item  @samp{--graph} 
出力の左側に、コミット履歴のテキストベースのグラフィック表現を描画します。グラフ履歴を適切に描画するために、コミットの間に余分な行が出力される可能性があります。
@samp{--no-walk} と組み合わせることはできません。

これにより、親の書き換えが可能になります。上記の @emph{History Simplification} を参照してください。

これは、デフォルトで @samp{--topo-order} オプションを意味しますが、 @samp{--date-order} オプションも指定できます。

@item  @samp{--show-linear-break[=<barrier>]} 
--graph
を使用しない場合、すべての履歴ブランチがフラット化されるため、2つの連続するコミットが線形ブランチに属していないことがわかりにくくなる可能性があります。このオプションは、その場合、それらの間に障壁を置きます。
@samp{<barrier>} が指定されている場合、デフォルトの障壁文字列の代わりに @samp{<barrier>} が表示されます。
@end table

@noindent

@chapheading PRETTY FORMATS

コミットがマージであり、 pretty-format が @emph{oneline} または @emph{email} または @emph{raw} でない場合、
@emph{Author:} 行の前に追加の行が挿入されます。この行は "Merge: "
で始まり、先祖のコミットのハッシュがスペースで区切られて出力されます。履歴の表示を制限している場合、たとえば、特定のディレクトリまたはファイルに関連する変更のみに関心がある場合、リストされたコミットは必ずしも
@strong{直接} の親コミットのリストではない可能性があることに注意してください。

いくつかの組み込みフォーマットがあります。そして以下で説明するように、 pretty.<name> 構成オプション(config
option)を別のフォーマット名または @emph{format:}
文字列に設定することで、追加のフォーマットを定義できます(git-config(1)
参照)。組み込みフォーマットの詳細は以下のとおりです:

@itemize 

@item
@emph{oneline}

@example
<hash> <title line>
@end example

これは、可能な限りコンパクトになるように設計されています。

@item
@emph{short}

@example
commit <hash>
Author: <author>
@end example

@example
<title line>
@end example

@item
@emph{medium}

@example
commit <hash>
Author: <author>
Date:   <author date>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{full}

@example
commit <hash>
Author: <author>
Commit: <committer>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{fuller}

@example
commit <hash>
Author:     <author>
AuthorDate: <author date>
Commit:     <committer>
CommitDate: <committer date>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{reference}

@example
<abbrev hash> (<title line>, <short author date>)
@end example

この形式は、コミットメッセージ内の別のコミットを参照するために使用され、 @samp{--pretty='format:%C(auto)%h (%s,
%ad)'} と同じです。 デフォルトでは、別の @samp{--date} オプションが明示的に指定されていない限り、日付は @samp{--date=short}
でフォーマットされます。formatプレースホルダーを使用する他の @samp{format:} と同様に、その出力は、 @samp{--decorate} や
@samp{--walk-reflogs} などの他のオプションの影響を受けません。

@item
@emph{email}

@example
From <hash> <date>
From: <author>
Date: <author date>
Subject: [PATCH] <title line>
@end example

@example
<full commit message>
@end example

@item
@emph{mboxrd}

@emph{email} と同様ですが、コミットメッセージの "From " で始まる行(前に0個以上の ">" が付いている)は ">"
でクォートされているため、新しいコミットの開始と混同されることはありません。

@item
@emph{raw}

@emph{raw} 形式は、コミットオブジェクトに格納されているとおりにコミット全体を正確に表示します。とりわけ --abbrev または
--no-abbrev
のどちらが使用されているかに関係なく、ハッシュは完全に表示され、「親」(parents)情報は、移植や履歴の単純化を考慮せずに、真の親のコミットを示します。この形式は、コミットの表示方法に影響しますが、いわゆる
@samp{git log --raw} の差分の表示方法ではありません。生のdiff形式で完全なオブジェクト名を取得するには、 @samp{--no-abbrev}
を使用します。

@item
@emph{format:<string>}

@emph{format:<string>} 形式を使用すると、表示する情報を指定できます。注意: これはprintf書式に少し似ていますが、 @emph{\n}
の代わりに @emph{%n} を使用して改行を取得するという例外に注意してください。

例:  @emph{format:"The author of %h was %an, %ar%nThe title was >>%s<<%n"}
は以下のように表示されます:

@example
The author of fe6e0ee was Junio C Hamano, 23 hours ago
The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<
@end example


さて、以下がプレースホルダー達です:

@itemize 

@item
単一のリテラル文字に展開されるプレースホルダー:

@table @asis

@item  @emph{%n} 
改行(newline)

@item  @emph{%%} 
'%'そのもの

@item  @emph{%x00} 
16進数のバイト値を出力
@end table

@item
うしろのプレースホルダーのフォーマッティングに影響するプレースホルダー:

@table @asis

@item  @emph{%Cred} 
赤色に切り替える

@item  @emph{%Cgreen} 
緑色に切り替える

@item  @emph{%Cblue} 
青色に切り替える。

@item  @emph{%Creset} 
色をリセットする

@item  @emph{%C(…)} 
git-config(1) の "CONFIGURATION FILE" 節の Values で説明されている色の指定。
デフォルトでは、色はログ出力が有効になっている場合にのみ表示されます（ @samp{color.diff} または ` color.ui` または
@samp{--color`によって、ターミナルに行く場合は前者の `auto} 設定を尊重します)。 @samp{%C(auto,...)} は、 default
の歴史的同義語として受け入れられます(例: @samp{%C(auto,red)})。 @samp{%C(always,...)}
を指定すると、色が有効になっていない場合でも色が表示されます(この形式やgitが色付けする可能性のある他のすべてのものを含め、出力全体の色を有効にするために
@samp{--color = always} の使用を検討してください)。 @samp{auto} のみ(つまり、 @samp{%C(auto)}
)は、色が再び切り替わるまで、続くプレースホルダーで自動色付けをオンにします。

@item  @emph{%m} 
左(@samp{<}) または 右(@samp{>}) または 境界 (@samp{-}) の印

@item  @emph{%w([<w>[,<i1>[,<i2>]]])} 
git-shortlog(1) の -w オプションのように、
行の折り返しを切り替えます。

@item  @emph{%<(<N>[,trunc|ltrunc|mtrunc])} 
次のプレースホルダーに少なくともN列を使用させ、
必要に応じて右側にスペースを埋め込みます。オプションで、出力がN列より長い場合は、先頭(ltrunc)または中間(mtrunc)または末尾(trunc)で切り捨てます。注意:
切り捨ては、 N >= 2 でのみ正しく機能することに注意してください。

@item  @emph{%<|(<N>)} 
次のプレースホルダーを少なくともN番目の列まで取得し、
必要に応じて右側にスペースを埋め込みます

@item  @emph{%>(<N>)}, @emph{%>|(<N>)} 
それぞれ @emph{%<(<N>)} 、 @emph{%<|(<N>)} に似ていますが、
左側にスペースが埋め込まれています

@item  @emph{%>>(<N>)}, @emph{%>>|(<N>)} 
@emph{%>(<N>)} 、 @emph{%>|(<N>)} とそれぞれ似ていますが、
次のプレースホルダーが指定されたよりも多くのスペースを取り、その左側にスペースがある場合は、それらのスペースを使用します。

@item  @emph{%><(<N>)}, @emph{%><|(<N>)} 
それぞれ @emph{%<(<N>)} 、 @emph{%<|(<N>)} に似ていますが、
両側にパディングがあります(つまり、テキストが中央に配置されます)
@end table

@item
コミットから抽出された情報に展開するプレースホルダー:

@table @asis

@item  @emph{%H} 
コミットハッシュ

@item  @emph{%h} 
省略されたコミットハッシュ

@item  @emph{%T} 
ツリーハッシュ

@item  @emph{%t} 
省略されたツリーハッシュ

@item  @emph{%P} 
親のハッシュ達

@item  @emph{%p} 
省略された親のハッシュ達

@item  @emph{%an} 
作者名

@item  @emph{%aN} 
作者名( .mailmap に関しては、git-shortlog(1) または
git-blame(1) を参照)

@item  @emph{%ae} 
作者電子メールアドレス

@item  @emph{%aE} 
作者電子メールアドレス(.mailmap に関しては git-shortlog(1) または
git-blame(1) を参照)

@item  @emph{%al} 
作者電子メールアドレスアカウント名(local-part)( @emph{@@} の前の部分)

@item  @emph{%aL} 
作者電子メールアドレスアカウント名(local-part)(@emph{%al} 参照) .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ad} 
作成日(フォーマットに関しては --date= オプション参照)

@item  @emph{%aD} 
作成日 RFC2822形式

@item  @emph{%ar} 
作成日 相対(relative)形式

@item  @emph{%at} 
作成日 UNIXタイムスタンプ形式

@item  @emph{%ai} 
作成日 ISO 8601風形式

@item  @emph{%aI} 
作成日 厳密なISO 8601形式

@item  @emph{%as} 
作成日 短い形式(@samp{YYYY-MM-DD})

@item  @emph{%ah} 
作成日 human形式( git-rev-list(1) の @samp{--date=human}
オプションのようなかんじ)

@item  @emph{%cn} 
コミッター名

@item  @emph{%cN} 
コミッター名( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ce} 
コミッター電子メールアドレス

@item  @emph{%cE} 
コミッター電子メールアドレス(.mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%cl} 
コミッター電子メールアドレスアカウント名(local-part)( @emph{@@} の前の部分)

@item  @emph{%cL} 
コミッター電子メールアドレスアカウント名(local-part)( @emph{%cl} 参照) .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%cd} 
コミッター日付(フォーマットに関しては --date= オプション参照)

@item  @emph{%cD} 
コミッター日付 RFC2822形式

@item  @emph{%cr} 
コミッター日付 相対(relative)形式

@item  @emph{%ct} 
コミッター日付 UNIXタイムスタンプ形式

@item  @emph{%ci} 
コミッター日付 ISO 8601風形式

@item  @emph{%cI} 
コミッター日付 厳密なISO 8601形式

@item  @emph{%cs} 
コミッター日付 短い形式(@samp{YYYY-MM-DD})

@item  @emph{%ch} 
コミッター日付 human形式(git-rev-list(1) の @samp{--date=human}
オプションのようなかんじ)

@item  @emph{%d} 
ref名 git-log(1) の --decorate オプションみたいなの

@item  @emph{%D} 
" (", ")" で囲ってないref名

@item  @emph{%(describe[:options])} 
git-describe(1) のような人間が読める名前。
説明できないコミットの場合は空の文字列。 @samp{describe}
文字列の後には、コロンと0個以上のカンマ区切りオプションを続けることができます。タグが同時に追加または削除されると、説明に一貫性がなくなる可能性があります。

@itemize 

@item
@emph{match=<pattern>}:  "refs/tags/" プレフィックスを除いて、指定された @samp{glob(7)}
パターンに一致するタグのみを考慮します。

@item
@emph{exclude=<pattern>}: "refs/tags/" プレフィックスを除いて、指定された @samp{glob(7)}
パターンに一致するタグを考慮しないでください。
@end itemize

@item  @emph{%S} 
コミットに到達したコマンドラインで指定されたref名
( @samp{git log --source} など)は、 @samp{git log} でのみ機能します

@item  @emph{%e} 
エンコーディング

@item  @emph{%s} 
件名(subject)

@item  @emph{%f} 
ファイル名に適した、サニタイズされた件名

@item  @emph{%b} 
本文(body)

@item  @emph{%B} 
生本文(raw body)(ラップされてない件名と本文)

@item  @emph{%N} 
コミットノート(commit notes)

@item  @emph{%GG} 
署名されたコミットの為のGPSからの生の検証メッセージ

@item  @emph{%G?} 
良い(good)な(有効な)署名の場合は "G" 、
悪い(bad)な署名の場合は "B" 、有効性が不明(unknown)な良い署名の場合は "U" 、期限切れ(eXpired)の良い署名の場合は "X"
、期限切れのキーで作成された良い署名の場合は "Y" 、取り消されたキーによって作成された良い署名の場合は "R"
、署名を確認できない場合(キーの欠落など)は "E" 、署名がない場合は "N" を表示します。

@item  @emph{%GS} 
署名されたコミットの署名者の名前を表示する

@item  @emph{%GK} 
署名されたコミットに署名するために使用されるキーを表示する

@item  @emph{%GF} 
署名されたコミットに署名するために使用されるキーのフィンガープリントを表示する

@item  @emph{%GP} 
署名されたコミットに署名するためにサブキーが使用された
主キーのフィンガープリントを表示します

@item  @emph{%GT} 
署名されたコミットに署名するために使用されるキーの信頼レベル(trust level)を表示します

@item  @emph{%gD} 
reflogセレクター(例:@samp{refs/stash@@@{1@}} or @samp{refs/stash@@@{2 minutes ago@}})
この形式は、 @samp{-g} オプションで説明されている規則に従います。 @samp{@@} の前の部分は、コマンドラインで指定されたrefnameです(したがって、
@samp{git log -g refs/heads/master} は @samp{refs/heads/master@@@{0@}} を生成します)。

@item  @emph{%gd} 
短縮されたreflogセレクター。 @samp{%gD} と同じですが、
人間が読みやすいようにrefname部分が短縮されています(したがって、 @samp{refs/heads/master} は単に @samp{master}
になります)。

@item  @emph{%gn} 
reflog ID名

@item  @emph{%gN} 
reflog ID名( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ge} 
reflog ID 電子メールアドレス

@item  @emph{%gE} 
reflog ID 電子メールアドレス( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%gs} 
reflog 件名

@item  @emph{%(trailers[:options])} 
git-interpret-trailers(1) によって解釈されるようにボディのトレーラーを表示します。
@samp{trailers}
文字列の後には、コロンと0個以上のカンマ区切りオプションを続けることができます。いずれかのオプションが複数回提供された場合、それぞれ最後のものが優先されます。

ブール値オプションは、オプションの値 @samp{[=<BOOL>]} を受け入れます。 値 @samp{true} 、@samp{false} 、 @samp{on} 、@samp{off}
などはすべて受け入れられます。 git-config(1) の "EXAMPLES" の "boolean"
サブセクションを参照してください。ブール値オプションが値なしで指定された場合、それは有効を指定した事になります。

@itemize 

@item
@emph{key=<K>}
は指定されたキーを持つトレーラーのみを表示します。マッチングは大文字と小文字を区別せずに行われ、末尾のコロンはオプションです。オプションが複数回指定されている場合、いずれかのキーに一致するトレーラー行が表示されます。このオプションは自動的に
@samp{only} オプションを有効にして、トレーラーブロック内の非トレーラー行が非表示になるようにします。それが望ましくない場合は、
@samp{only=false} で無効にすることができます。 たとえば、 @samp{%(trailers:key=Reviewed-by)} は、キーが
`Reviewed-by`のトレーラー行を表示します。

@item
@emph{only[=<BOOL>]} はトレーラーブロックに非トレーラー行を含めるかどうかを選択します。

@item
@emph{separator=<SEP>}
はトレーラー行の間に挿入される区切り文字を指定します。このオプションが指定されていない場合、各トレーラー行は改行文字で終了します。文字列SEPには、上記のリテラルフォーマットコードが含まれる場合があります。区切り文字としてコンマを使用するには、次のオプションとして解析されないよう
@samp{%x2C} を使用する必要があります。 たとえば、 %(trailers:key=Ticket,separator=%x2C )` は、キーが
"Ticket" であるすべてのトレーラー行をカンマとスペースで区切って表示します。

@item
@emph{unfold[=<BOOL>]} は interpret-trailer の @samp{--unfold}
オプションが指定されたかのように動作させます。たとえば、 @samp{%(trailers:only,unfold=true)}
が展開され、すべてのトレーラー行が表示されます。

@item
@emph{keyonly[=<BOOL>]} トレーラーのキー部分のみを表示。

@item
@emph{valueonly[=<BOOL>]} トレーラーの値部分のみ表示。

@item
@emph{key_value_separator=<SEP>}
トレーラー行の間に挿入される区切り文字を指定します。このオプションが指定されていない場合、各トレーラーのキーと値のペアは ": " で区切られます。
それ以外の場合は、上記の @emph{separator=<SEP>} と同じセマンティクスを共有します。
@end itemize
@end table
@end itemize
@end itemize

@quotation

@strong{Note}

一部のプレースホルダーは、リビジョントラバーサルエンジンに指定された他のオプションに依存する場合があります。 たとえば、 @samp{%g*}
reflogオプションは、reflogエントリをトラバースしない限り(たとえば、 @samp{git log
-g`によって)空の文字列を挿入します。コマンドラインで `--decorate} がまだ指定されていない場合、 @samp{%d} と @samp{%D}
プレースホルダーは「短い」(short)装飾形式を使用します。
@end quotation

プレースホルダーの @emph{%} の後に @samp{+}
(プラス記号)を追加すると、プレースホルダーが空でない文字列に展開される場合に限り、展開の直前に改行が挿入されます。

プレースホルダーの @emph{%} の後に @samp{-}
(マイナス記号)を追加すると、プレースホルダーが空の文字列に展開された場合にのみ、展開の直前の連続するすべての改行が削除されます。

プレースホルダーの @emph{%} の後に ` `
(スペース)を追加すると、プレースホルダーが空でない文字列に展開される場合に限り、展開の直前にスペースが挿入されます。

@itemize 

@item
@emph{tformat:}

@emph{tformat:} 形式は、 "separator" セマンティクスの代わりに "terminator" セマンティクスを提供することを除いて、
@emph{format:} とまったく同じように機能します。
つまり、各コミットには、エントリ間に区切り文字を配置するのではなく、メッセージターミネータ文字(通常は改行)が追加されます。
これは、「1行」形式と同様に、1行形式の最終エントリが新しい行で適切に終了することを意味します。 例えば:

@example
$ git log -2 --pretty=format:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973 -- NO NEWLINE

$ git log -2 --pretty=tformat:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973
@end example


加えて、 @samp{%} が含まれている認識されない文字列は、その前に @samp{tformat:} があるかのように解釈(interpret)されます。
たとえば、以下の2つは同等です:

@example
$ git log -2 --pretty=tformat:%h 4da45bef
$ git log -2 --pretty=%h 4da45bef
@end example

@end itemize

@noindent

@chapheading DIFF FORMATTING

デフォルトでは、 @samp{git log} はdiff出力を生成しません。以下のオプションを使用して、各コミットによって行われた変更を表示できます。

注意: @samp{--diff-merges} のバリエーション(短い @samp{-m}、 @samp{-c}、 @samp{--cc}
オプションを含む)の1つが明示的に指定されていない限り、マージコミットはdiffを表示しませんし、@samp{--patch`のようなdiff書式が選択されていても、}-S`のような検索オプションと一致しません。例外は、`--first-parent`が使用されている場合です。この場合、`first-parent`がデフォルトの書式です。

@table @asis

@item  @samp{-p} 
@itemx  @samp{-u} 
@itemx  @samp{--patch} 
パッチを生成します(generating patches に関するセクションを参照)。

@item  @samp{-s} 
@itemx  @samp{--no-patch} 
diff出力を抑制します。デフォルトでパッチを表示する @samp{git show} のようなコマンド、または @samp{--patch}
の効果をキャンセルする場合に便利です。

@item  @samp{--diff-merges=(off|none|on|first-parent|1|separate|m|combined|c|dense-combined|cc)} 
@itemx  @samp{--no-diff-merges} 
マージコミットに使用するdiff形式を指定します。 @samp{--first-parent} が使用されている場合を除き、デフォルトは
@samp{off} です。使用されている場合は、 @samp{first-parent} がデフォルトです。

@table @asis

@item  @samp{--diff-merges=(off|none)} 
@itemx  @samp{--no-diff-merges} 
マージコミットのdiffの出力を無効にします。暗黙の値を上書きするのに便利です。

@item  @samp{--diff-merges=on} 
@itemx  @samp{--diff-merges=m} 
@itemx  @samp{-m} 
このオプションにより、マージコミットのdiff出力がデフォルトの形式で表示されます。 @samp{-m} は、 @samp{-p}
も指定されている場合にのみ出力を生成します。デフォルトの形式は、 @samp{log.diffMerges} 構成パラメーター(configuration
parameter)を使用して変更できます。デフォルト値は @samp{separate} です。

@item  @samp{--diff-merges=first-parent} 
@itemx  @samp{--diff-merges=1} 
このオプションにより、マージコミットは最初の親に関してのみ完全なdiffを表示します。

@item  @samp{--diff-merges=separate} 
これにより、マージコミットは各親に関して完全なdiffを表示します。親ごとに個別のログエントリとdiffが生成されます。

@item  @samp{--diff-merges=combined} 
@itemx  @samp{--diff-merges=c} 
@end table

@item  @samp{-c:} 
このオプションを使用すると、マージコミットのdiff出力は、親と結果のペアごとの差分を一度に1つずつ表示するのではなく、各親からの差分をマージ結果に同時に表示します。さらに、すべての親から変更されたファイルのみが一覧表示されます。
@samp{-c} は @samp{-p} の機能を含んでいます。

@table @asis

@item  @samp{--diff-merges=dense-combined} 
@itemx  @samp{--diff-merges=cc} 
@itemx  @samp{--cc} 
このオプションを使用すると、 @samp{--diff-merges=Combined}
によって生成される出力は、親のコンテンツに2つの派生(variants)しかない、興味のないハンクを省略してさらに圧縮され、マージ結果は変更なしでそのうちの1つを選択します。
@samp{--cc} は @samp{-p} の機能を含んでいます。
@end table

@item  @samp{--combined-all-paths} 
このフラグにより、結合された差分(マージコミットに使用)にすべての親からのファイルの名前が一覧表示されます。したがって、これは
@samp{--diff-merges=[dense-]combined}
が使用されている場合にのみ有効であり、ファイル名の変更が検出された場合(つまり、名前の変更またはコピーの検出が要求された場合)にのみ役立つ可能性があります。

@item  @samp{-U<n>} 
@itemx  @samp{--unified=<n>} 
通常の3行ではなく、<n> 行の内容でdiffを生成します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--output=<file>} 
stdout ではなく指定のファイルに出力します。

@item  @samp{--output-indicator-new=<char>} 
@itemx  @samp{--output-indicator-old=<char>} 
@itemx  @samp{--output-indicator-context=<char>} 
生成されたパッチの新しい行、古い行、またはコンテキスト行を示すために使用される文字を指定します。 通常、それらはそれぞれ @emph{+} 、 @emph{-} 、 ' '
です。

@item  @samp{--raw} 
コミットごとに、生の差分形式を使用して変更の概要を表示します。
git-diff(1) の "RAW OUTPUT FORMAT" セクションを参照してください。
これは、ログ自体をraw形式で表示することとは異なります。
これは @samp{--format=raw} で
実現できます。

@item  @samp{--patch-with-raw} 
@samp{-p --raw} の同義語。

@item  @samp{-t} 
diff出力にツリーオブジェクトを表示します。

@item  @samp{--indent-heuristic} 
diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッチを読みやすくします。 これがデフォルトです。

@item  @samp{--no-indent-heuristic} 
インデントヒューリスティック(indent heuristic)を無効にします。

@item  @samp{--minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{--patience} 
"patience diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--histogram} 
"histogram diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--anchored=<text>} 
"anchored diff" アルゴリズムを使用してdiffを生成します。

このオプションは複数回指定できます。

行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる場合、このアルゴリズムは、その行が出力に削除または追加として表示されないようにします。内部で
"patience diff" アルゴリズムを使用します。

@item  @samp{--diff-algorithm=@{patience|minimal|histogram|myers@}} 
diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

@table @asis

@item  @samp{default}, @samp{myers} 
基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、これがデフォルトです。

@item  @samp{minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{patience} 
パッチを生成する時に "patience diff" アルゴリズムを使います。

@item  @samp{histogram} 
このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張して、「発生率の低い共通要素をサポート」(support
low-occurrence common elements)します。
@end table

たとえば、 あなたが @samp{diff.algorithm}
変数をデフォルト以外の値に設定した上で、それでもデフォルト値を使用する場合は、@samp{--diff-algorithm=default}
オプションを使用する必要があります。

@item  @samp{--stat[=<width>[,<name-width>[,<count>]]]} 
diffstatを生成します。
デフォルトでは、必要なだけのスペースがファイル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォルトで端末幅、または端末に接続されていない場合は80桁であり、
@samp{<width>} で上書きできます。ファイル名部分の幅は、コンマの後に別の幅 @samp{<name-width>}
を指定することで制限できます。グラフ部分の幅は、 @samp{--stat-graph-width=<width>}
(統計グラフを生成するすべてのコマンドに影響します)を使用するか、 @samp{diff.statGraphWidth=<width>} ( @samp{git
format-patch} に影響しません)を設定することによって制限できます。3番目のパラメータ @samp{<count>}
を指定することにより、出力を最初の @samp{<count>} 行に制限し、それに @samp{...} が続く形にできます。

これらのパラメータは、 @samp{--stat-width=<width>} と @samp{--stat-name-width=<name-width>} と
@samp{--stat-count=<count>} を使用して個別に設定することもできます。

@item  @samp{--compact-summary} 
ファイルの作成や削除( "new" または "gone" 。オプションでシンボリックリンクの場合は "+l"
)、diffstatのモード変更(実行可能ビットを追加または削除する場合は、それぞれ "+x" または "-x"
)など、拡張ヘッダー情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置かれます。本機能は @samp{--stat} の機能を含んでいます。

@item  @samp{--numstat} 
@samp{--stat`に似ていますが、プログラムで処理しやすい(machine
friendly)ように、追加および削除された行数を10進表記とパス名で省略形なしで表示します。バイナリファイルの場合、 `0 0} の代わりに2つの
@samp{-} を出力します。

@item  @samp{--shortstat} 
変更されたファイルの総数と、追加および削除された行の数を含む @samp{--stat} 形式の最後の行のみを出力します。

@item  @samp{-X[<param1,param2,...>]} 
@itemx  @samp{--dirstat[=<param1,param2,...>]} 
各サブディレクトリの相対的な変更量の分布を出力します。 @samp{--dirstat}
の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズできます。デフォルトは、 @samp{diff.dirstat}
構成変数によって制御されます(git-config(1) 参照)。以下のパラメータを使用できます:

@table @asis

@item  @samp{changes} 
ソースから削除された、または宛先に追加された行をカウントして、dirstat数を計算します。これは、ファイル内の純粋なコード移動の量を無視します。つまり、ファイル内の行の再配置は、他の変更ほどカウントされません。これは、パラメーターが指定されていない場合のデフォルトの動作です。

@item  @samp{lines} 
通常の行ベースのdiff分析を実行し、削除/追加された行数を合計して、dirstat数を計算します。
(バイナリファイルの場合、バイナリファイルには行の概念がないため、代わりに64バイトのチャンクをカウントします)。 これは @samp{changes}
動作よりも高価な @samp{--dirstat} 動作ですが、他の変更と同じようにファイル内の再配置された行をカウントします。結果の出力は、他の
@samp{--*stat} オプションから得られるものと一致しています。

@item  @samp{files} 
変更されたファイルの数を数えて、dirstat数を計算します。変更された各ファイルは、dirstat分析で等しくカウントされます。これは、ファイルの内容をまったく調べる必要がないため、計算コストが最もかからない
@samp{--dirstat} の動作です。

@item  @samp{cumulative} 
親ディレクトリの子ディレクトリの変更も同様にカウントします。 @samp{cumulative}(累積的)
を使用する場合、報告されるパーセンテージの合計が100%を超える場合があることに注意してください。デフォルトの(非累積的な)動作は、@samp{noncumulative}
パラメーターで指定できます。

@item  <limit> 
整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指定します。指定の割合より少ないディレクトリは、出力に表示されません。
@end table

例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディレクトリに子ディレクトリの数を累積しながら、変更されたファイルをカウント:
@samp{--dirstat=files,10,cumulative}

@item  @samp{--cumulative} 
@samp{--dirstat=cumulative} と同義語

@item  @samp{--dirstat-by-file[=<param1,param2>...]} 
@samp{--dirstat=files,param1,param2...} と同義語

@item  @samp{--summary} 
作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約(condensed summary)を出力します。

@item  @samp{--patch-with-stat} 
@samp{-p --stat} と同義語。

@item  @samp{-z} 
改行(newline)ではなく、NULでコミットを区切ります。

また、 @samp{--raw} または @samp{--numstat}
を指定した場合は、パス名を難読化(munge)したり、出力フィールドターミネータとしてNULを使用したりしないでください。

このオプションがないと、構成変数 @samp{core.quotePath} で説明されているように、 通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。

@item  @samp{--name-only} 
変更されたファイルの名前のみを表示します。 多くの場合、ファイル名はUTF-8でエンコードされます。 詳細については、
git-log(1) のマニュアルページにあるエンコーディングに関する議論(the discussion about
encoding)を参照してください。

@item  @samp{--name-status} 
変更されたファイルの名前とステータスのみを表示します。ステータス文字の意味については、 @samp{--diff-filter}
オプションの説明を参照してください。 @samp{--name-only} と同じように、ファイル名はしばしばUTF-8でエンコードされます。

@item  @samp{--submodule[=<format>]} 
サブモジュールの違いをどのように表示するかを指定します。 @samp{--submodule=short} を指定する場合、 @emph{short}
形式が使用されます。この形式は、範囲の最初と最後にコミットの名前を表示するだけです。 @samp{--submodule} または
@samp{--submodule=log} が指定されている場合、 @emph{log} 形式が使用されます。この形式では、
git-submodule(1) @samp{summary} のように範囲内のコミットが一覧表示されます。 @samp{--submodule=diff}
が指定されている場合、 @emph{diff}
形式が使用されます。この形式は、コミット範囲間のサブモジュールの内容の変更のインラインdiffを示します。configオプションが設定されていない場合、デフォルトは
@samp{diff.submodule} または @emph{short} 形式です。

@item  @samp{--color[=<when>]} 
色付きのdiffを表示します。 @samp{--color} (つまり、 @emph{=<when>} ) は @samp{--color=always} と同じです。
@emph{<when>} は、 @samp{always} または @samp{never} または @samp{auto} のいずれかになります。

@item  @samp{--no-color} 
カラーdiffをオフにします。
@samp{--color=never} と同じです。

@item  @samp{--color-moved[=<mode>]} 
ソースコードの移動した行を別の色にします。
<mode>は、オプションが指定されていない場合はデフォルトで @emph{no} になり、
モードが指定されていないオプションが指定されている場合は @emph{zebra} になります。
モードは以下のいずれかでなければなりません:

@table @asis

@item  no 
移動行をハイライトしません。

@item  default 
@samp{zebra} の同義語です。これは、将来、より賢明なモードに変更される可能性があります。

@item  plain 
ある場所で追加され、別の場所で削除された行は、 @emph{color.diff.newMoved} で色付けされます。 同様に、
@emph{color.diff.oldMoved}
は、差分の別の場所に追加された削除された行に使用されます。このモードは移動された行をピックアップしますが、コードのブロックが順列なしで移動されたかどうかを判断することはレビューではあまり役に立ちません。

@item  blocks 
少なくとも20文字の英数字の移動テキストのブロックが貪欲に検出されます。検出されたブロックは、 @emph{color.diff.@{old,new@}Moved}
色のいずれかを使用して色付けされます。隣接するブロックを区別することはできません。

@item  zebra 
移動されたテキストのブロックは、 @emph{blocks} モードの場合と同様に検出されます。 ブロックは、
@emph{color.diff.@{old,new@}Moved} 色または @emph{color.diff.@{old,new@}MovedAlternative}
色のいずれかを使用して色付けされます。2つの色の間の変化は、新しいブロックが検出されたことを示します。

@item  dimmed-zebra 
@emph{zebra}
に似ていますが、移動されたコードの重要でない部分の追加の調光(dimmed)が実行されます。隣接する2つのブロックの境界線は興味深いと見なされ、残りは興味深いものではありません。
@samp{dimmed_zebra} は非推奨の同義語です。
@end table

@item  @samp{--no-color-moved} 
移動検出をオフにします。 これは、構成設定を上書きするために使用できます。 @samp{--color-moved=no} と同じです。

@item  @samp{--color-moved-ws=<modes>} 
これは、 @samp{--color-moved} の移動検出を実行するときに空白を無視する方法を設定します。
これらのモードは、コンマ区切りのリストとして指定できます:

@table @asis

@item  no 
移動行検出を実行するときに、空白(whitespace)を無視しない。

@item  ignore-space-at-eol 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  ignore-space-change 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  ignore-all-space 
行を比較するときは空白(whitespace)を無視します。これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  allow-indentation-change 
最初に移動検出で空白(whitespace)を無視し、空白(whitespace)の変更が行ごとに同じである場合にのみ、移動されたコードブロックをブロックにグループ化します。
これは他のモードと互換性がありません。
@end table

@item  @samp{--no-color-moved-ws} 
移動検出を実行するときは、空白(whitespace)を無視しないでください。これは、構成設定を上書きするために使用できます。
@samp{--color-moved-ws=no} と同じです。

@item  @samp{--word-diff[=<mode>]} 
<mode> を使用して変更された単語を区切ることにより、単語のdiffを表示します。デフォルトでは、単語は空白で区切られます。 以下の
@samp{--word-diff-regex} を参照してください。 <mode> のデフォルトは 'plain’です。 <mode>
は以下のいずれかである必要があります:

@table @asis

@item  color 
変更された単語(word)を色のみを使用して強調表示します。 @samp{--color} を意味します。

@item  plain 
単語を @samp{[-removed-]} および @samp{@{+added+@}} として表示します。
区切り文字が入力に表示されている場合、区切り文字をエスケープしようとしないため、出力があいまいになる可能性があります。

@item  porcelain 
スクリプトの使用を目的とした特別な行ベースの形式を使用します。追加/削除/無変更については、通常の統一されたdiff形式で印刷され、行の先頭の
@samp{+}/@samp{-}/` ` 文字で始まり、行の終わりまで続きます。入力の改行は、それ自体の行のチルダ @samp{~} で表されます。

@item  none 
単語(word)のdiffを再度無効にします。
@end table

注意: 最初のモードの名前にもかかわらず、有効になっている場合、すべてのモードで変更された部分を強調するために色が使用されることに注意してください。

@item  @samp{--word-diff-regex=<regex>} 
空白以外を単語と見なす代わりに、 <regex> を使用して単語が何であるかを決定します。また、すでに有効になっていない限り、この機能は
@samp{--word-diff} の機能を含んでいます。

<regex> の重複しないマッチはすべて、単語と見なされます。これらのマッチの間のすべては空白と見なされ、違いを見つけるためとしては無視されます！
正規表現に @samp{|[^[:space:]]}
を追加して、空白以外のすべての文字とマッチすることを確認することをお勧めします。改行を含むマッチは、改行で黙って切り捨てられます！

たとえば、 @samp{--word-diff-regex=.} は各文字を単語として扱い、それに応じて文字ごとの違いを表示します。

正規表現は、diffドライバーまたは構成オプション(configuration option)を介して設定することもできます。
gitattributes(5) または git-config(1)
を参照してください。これを指定すると、diffドライバーまたは構成設定(configuration
settings)が明示的にオーバーライドされます。diffドライバーは構成設定を上書きします。

@item  @samp{--color-words[=<regex>]} 
@samp{--word-diff=color} に @samp{--word-diff-regex=<regex>}
を加えたものに相当します(正規表現が指定されている場合)。

@item  @samp{--no-renames} 
構成ファイルにデフォルトで指定されている場合でも、名前変更の検出をオフにします。

@item  @samp{--[no-]rename-empty} 
名前変更ソースとして空のブロブを使用するかどうか。

@item  @samp{--check} 
変更によって競合マーカーまたは空白エラーが発生した場合に警告します。空白エラーと見なされるものは、 @samp{core.whitespace}
構成によって制御されます。
デフォルトでは、末尾の空白(空白のみで構成される行を含む)と、行の最初のインデント内で直後にタブ文字が続くスペース文字は、空白エラーと見なされます。問題が見つかった場合は、ゼロ以外のステータスで終了します。なお、
--exit-code とは互換性がありません。

@item  @samp{--ws-error-highlight=<kind>} 
diffの @samp{context} または @samp{old} または @samp{new} 行の空白エラーを強調表示します。複数の値はコンマで区切られ、 @samp{none}
は前の値をリセットし、 @samp{default} はリストを @samp{new} にリセットし、 @samp{all} は old、new、context
の省略形です。このオプションが指定されておらず、構成変数 @samp{diff.wsErrorHighlight} が設定されていない場合、 @samp{new}
行の空白エラーのみが強調表示されます。空白エラーは @samp{color.diff.whitespace} で色分けされています。

@item  @samp{--full-index} 
パッチ形式の出力を生成するときは、最初の一握りの文字(first handful of
characters)の代わりに、「インデックス」行にイメージ前およびイメージ後の完全ブロブオブジェクト名を表示します。

@item  @samp{--binary} 
@samp{--full-index} に加えて、 @samp{git-apply} で適用できるバイナリ差分を出力します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--abbrev[=<n>]} 
完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくとも
@emph{<n>} 桁の16進数の長さの最短のプレフィックスを表示します。diffパッチ出力形式では、 @samp{--full-index} が優先されます。つまり、
@samp{--full-index} が指定されている場合、 @samp{--abbrev} に関係なく、完全なブロブ名が表示されます。デフォルト以外の桁数は、
@samp{--abbrev=<n>} で指定できます。

@item  @samp{-B[<n>][/<m>]} 
@itemx  @samp{--break-rewrites[=[<n>][/<m>]]} 
完全な書き換えの変更を削除と作成のペアに分割します。これには以下の2つの目的があります:

これは、ファイルの完全な書き換えに相当する変更が、コンテキストとしてテキストで一致する非常に少数の行と混合された一連の削除と挿入としてではなく、古いものすべての単一の削除とそれに続く
すべての新しいものを1回挿入し、数値 @samp{m} が -B オプションのこの側面を制御します(デフォルトは60%)。 @samp{-B/70%}
は、Gitがそれを完全な書き換えと見なすために、元の30%未満が結果に残る必要があることを指定します(つまり、結果のパッチは、コンテキスト行と混合された一連の削除と挿入になります)。

-M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソースと見なされ(通常、 -M
は、消えたファイルのみを名前変更のソースと見なします)、数 @samp{n} が -Bオプションのこの側面を制御します(デフォルトは50%)。 @samp{-B20%}
は、ファイルのサイズの20%以上と比較して、追加および削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取得される資格があることを指定します。

@item  @samp{-M[<n>]} 
@itemx  @samp{--find-renames[=<n>]} 
diffを生成する場合は、コミットごとに名前の変更を検出して報告します。
履歴をトラバースしながら名前を変更してファイルをフォローする方法については、
@samp{--follow} を参照してください。
@samp{n} が指定されている場合、それは類似性インデックスのしきい値です
(つまり、ファイルのサイズと比較した追加/削除の量)。
たとえば、 @samp{-M90%} は、ファイルの90%以上が変更されていない場合、
Gitが削除/追加のペアを名前変更と見なす必要があることを意味します。
@samp{%} 記号がない場合、数値は小数として読み取られ、その前に小数点が付きます。
つまり、 @samp{-M5} は0.5になるため、@samp{-M50%} と同じになります。
同様に、 @samp{-M05} は @samp{-M5%} と同じです。
検出を正確な名前変更に制限するには、 @samp{-M100%} を使用します。
デフォルトの類似性インデックスは50%です。

@item  @samp{-C[<n>]} 
@itemx  @samp{--find-copies[=<n>]} 
名前と同様コピーを検出します。 @samp{--find-copies-harder} @samp{も参照してください。 `n} を指定すると、 @samp{-M<n>}
と同じ意味になります。

@item  @samp{--find-copies-harder} 
パフォーマンス上の理由から、デフォルトでは、 @samp{-C}
オプションは、コピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピーを検索します。このフラグにより、コマンドは変更されていないファイルをコピー元の候補として検査します。これは大規模なプロジェクトでは非常にコストのかかる操作であるため、注意して使用してください。
複数の @samp{-C} オプションを指定しても同じ効果があります。

@item  @samp{-D} 
@itemx  @samp{--irreversible-delete} 
削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを出力し、プレイメージと @samp{/dev/null}
の差分は出力しません。結果のパッチは、 @samp{patch} または @samp{git apply}
で適用されることを意図していません。これは、変更後にテキストを確認することに集中したい人のためだけのものです。さらに、出力には明らかに、そのようなパッチを手動でも逆に適用するのに十分な情報が不足しているため、オプションの名前が付けられています。

@samp{-B} と併用する場合は、削除/作成ペアの削除部分のプリイメージ(preimage)も省略してください。

@item  @samp{-l<num>} 
@samp{-M} および @samp{-C}
オプションには、名前変更/コピーのサブセットを安価に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペアになっていない宛先をすべての関連ソースと比較する徹底的なフォールバック部分が続きます。(名前の変更の場合、残りのペアになっていないソースのみが関係します。コピーの場合、すべての元のソースが関係します)。Nのソースと宛先の場合、この徹底的なチェックのコストは
O(N^2)
です。このオプションは、関係するソース/宛先ファイルの数が指定された数を超えた場合に、名前変更/コピー検出の完全な部分が実行されないようにします。デフォルトは
diff.renameLimit です。 値0は無制限として扱われることに注意してください。

@item  @samp{--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]} 
追加(Add)・コピー(Copy)・削除(Delete)・変更(Modify)・名前変更(Rename)されたファイル、タイプが変更されたファイル(T)、マージされていないファイル(U)、不明なファイル(X)、またはペアリングが壊れているファイル(B)のみを選択します。フィルタ文字(無しも含む)の任意の組み合わせを使用できます。
組み合わせに @samp{*} (全てまたは無し)が追加されると、比較で他の基準に一致するファイルがある場合、すべてのパスが選択されます。
他の基準に一致するファイルがない場合、何も選択されません。

また、逆に、除外したい時はこれらの各大文字指定を小文字にして指定します。例えば @samp{--diff-filter=ad}
は、追加および削除されたパスを除外します。

注意:すべてのdiffがすべてのタイプを特徴とするわけではないことに注意してください。
たとえば、インデックスから作業ツリーへのdiffにエントリを追加することはできません(diffに含まれるパスのセットは、インデックスの内容によって制限されるため)。
同様に、これらのタイプの検出が無効になっている場合、コピーおよび名前変更されたエントリは表示されません。

@item  @samp{-S<string>} 
ファイル内の指定の文字列(つまり、 addition 、deletion)の出現回数の差分を調べます。スクリプターが使用することを目的としています。

(構造体など)コードの正確なブロックを探していて、そのブロックが最初に作成されてからの履歴を知りたい場合に便利です。この機能を繰り返し使用して、プリイメージ(preimage)内の興味深いブロックを
@samp{-S} にフィードバックし、そしてあなたはそれをブロックの最初のバージョンを取得するまで続けます。

バイナリファイルも検索されます。

@item  @samp{-G<regex>} 
パッチテキストに <regex> にマッチする 追加/削除 された行が含まれている差分を探します。

@samp{-S<regex>-pickaxe-regex} と @samp{-G<regex>}
の違いを説明するために、同じファイル内で以下のdiffを使用してコミットすることを検討してください:

@example
+    return frotz(nitfol, two->ptr, 1, 0);
...
-    hit = frotz(nitfol, mf2.ptr, 1, 0);
@end example


@samp{git log -G"frotz\(nitfol"} はこのコミットを表示しますが、 @samp{git log -S"frotz\(nitfol"
--pickaxe-regex} は表示しません(その文字列の出現回数が変更されなかったため)。

@samp{--text} が提供されていない限り、 textconv フィルターのないバイナリファイルのパッチは無視されます。

詳細については gitdiffcore(7) の @emph{pickaxe} エントリを参照してください。

@item  @samp{--find-object=<object-id>} 
指定されたオブジェクトの出現回数を変更する違いを探します。 @samp{-S}
と同様に、引数だけが異なり、特定の文字列ではなく特定のオブジェクトIDを検索します。

オブジェクトは、ブロブまたはサブモジュールのコミットにすることができます。 これは、 @samp{git-log} の @samp{-t}
オプションがツリーも探すことを意味します。

@item  @samp{--pickaxe-all} 
@samp{-S} または @samp{-G} が変更を見つけたら、 <string>
の変更を含むファイルだけでなく、その変更セット(changeset)のすべての変更を表示します。

@item  @samp{--pickaxe-regex} 
@samp{-S} に指定した <string> を拡張POSIX正規表現として扱います。

@item  @samp{-O<orderfile>} 
ファイルが出力に表示される順序を制御します。これは @samp{diff.orderFile}
構成変数をオーバーライドします(git-config(1) 参照)。 @samp{diff.orderFile} をキャンセルするには、
@samp{-O/dev/null} を使用します。

出力順序は、 <orderfile>
内のglobパターンの順序によって決定されます。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力され、2番目のパターンに一致する(ただし最初のパターンには一致しない)パス名を持つすべてのファイルが次に出力されます。パス名がどのパターンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一致パターンがあるかのように、最後に出力されます。複数のパス名のランクが同じである場合(同じパターンに一致するが、以前のパターンには一致しない)、相互の出力順序は通常の順序です。

<orderfile> は以下のとおりパースされます:

@itemize 

@item
空白行は無視されるため、読みやすくするための区切りとして使用できます。

@item
ハッシュ ("@samp{#}") で始まる行は無視されるため、コメントに使用できます。
パターンがハッシュで始まる場合は、パターンの先頭にバックスラッシュ(訳注:日本では環境により円記号)("@samp{\}") を追加します。

@item
他の各行には、単一のパターンが含まれています。
@end itemize

パターンは、 FNM_PATHNAME フラグなしで fnmatch(3)
に使用されるパターンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポーネントをいくつも削除するとパターンと一致する場合、パス名もパターンと一致する点が異なります。
たとえば、パターン "@samp{foo*bar}" は、 "@samp{fooasdfbar}" および "@samp{foo/bar/baz/asdf}" と一致しますが、
"@samp{foobarx}" とは一致しません。

@item  @samp{--skip-to=<file>} 
@itemx  @samp{--rotate-to=<file>} 
名前付き <file> の前のファイルを出力から破棄するか(スキップして)、出力の最後に移動させます(ローテーションさせます)。 これらは主に @samp{git
difftool} コマンドを使用するために考案されたものであり、それ以外の場合はあまり役に立たない可能性があります。

@item  @samp{-R} 
2つの入力を交換します。 つまり、インデックスまたはディスク上のファイルとツリーの内容の違いを表示します。

@item  @samp{--relative[=<path>]} 
@itemx  @samp{--no-relative} 
プロジェクトのサブディレクトリから実行する場合、このオプションを使用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示するように指示できます。サブディレクトリ(ベアリポジトリなど)にいない場合は、引数として
<path> を指定することで、出力を作成するサブディレクトリに名前を付けることができます。 @samp{--no-relative`は、
`diff.relative} 設定オプションと以前の @samp{--relative} の両方を打ち消すために使用できます。

@item  @samp{-a} 
@itemx  @samp{--text} 
すべてのファイルをテキストとして扱います。

@item  @samp{--ignore-cr-at-eol} 
比較を行うときは、行末のキャリッジリターン(carriage-return)を無視します。

@item  @samp{--ignore-space-at-eol} 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  @samp{-b} 
@itemx  @samp{--ignore-space-change} 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  @samp{-w} 
@itemx  @samp{--ignore-all-space} 
行を比較するときは空白を無視します。 これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  @samp{--ignore-blank-lines} 
全て空白の行の変更は無視します。

@item  @samp{-I<regex>} 
@itemx  @samp{--ignore-matching-lines=<regex>} 
すべての行が <regex> にマッチする変更を無視します。このオプションは複数回指定できます。

@item  @samp{--inter-hunk-context=<lines>} 
指定された行数までの差分ハンク間のコンテキストを表示し、それによって互いに近いハンクを融合します。デフォルトは
@samp{diff.interHunkContext} で、設定オプションが設定されていない場合は0です。

@item  @samp{-W} 
@itemx  @samp{--function-context} 
関数全体を各変更のコンテキスト行として表示します。関数名は、 @samp{git diff}
がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の @emph{Defining a custom
hunk-header} を参照)。

@item  @samp{--ext-diff} 
外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外部diffドライバーを設定する場合は、
git-log(1) およびその仲間と一緒にこのオプションを使用する必要があります。

@item  @samp{--no-ext-diff} 
外部diffドライバーを禁止します。

@item  @samp{--textconv} 
@itemx  @samp{--no-textconv} 
バイナリファイルを比較するときに、外部テキスト変換フィルターの実行を許可(または禁止)します。 詳細については、
gitattributes(5)
を参照してください。textconvフィルターは通常、一方向の変換であるため、結果のdiffは人間の消費に適していますが、適用(apply)することはできません。このため、textconvフィルターは、
git-diff(1) および git-log(1) に対してのみデフォルトで有効になりますが、
git-format-patch(1) またはdiff配管コマンドに対しては有効になりません。

@item  @samp{--ignore-submodules[=<when>]} 
diff生成のサブモジュールへの変更を無視します。 <when> は、
none・untracked・dirty・allのいずれかになります。これがデフォルトです。noneを使用すると、追跡されていないファイルまたは変更されたファイルが含まれている場合、またはそのHEADがスーパープロジェクトに記録されているコミットと異なる場合にサブモジュールが変更されたと見なされ、
git-config(1) または gitmodules(5) の
ignoreオプションの設定をオーバーライドするために使用できます。untrackedが使用されている場合、サブモジュールには追跡されていないコンテンツのみが含まれている場合、サブモジュールはダーティとは見なされません(ただし、変更されたコンテンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作業ツリーへのすべての変更が無視され、スーパープロジェクトに格納されているコミットへの変更のみが表示されます(これは1.7.0までの動作でした)。「all」を使用すると、サブモジュールへのすべての変更が非表示になります。

@item  @samp{--src-prefix=<prefix>} 
"a/" の代わりに、与えられたソースプレフィックス(source prefix)を表示します。

@item  @samp{--dst-prefix=<prefix>} 
"b/" の代わりに、指定された宛先プレフィックス(destination prefix)を表示します。

@item  @samp{--no-prefix} 
送信元(source)または宛先(destination)のプレフィックスを表示しません。

@item  @samp{--line-prefix=<prefix>} 
出力のすべての行に追加のプレフィックスを付加します。

@item  @samp{--ita-invisible-in-index} 
デフォルトでは、 "git add -N" によって追加されたエントリは、 "git diff" に既存の空のファイルとして表示され、 "git
diff --cached" に新しいファイルとして表示されます。このオプションを使用すると、エントリは "git diff"
では新しいファイルとして表示され、 "git diff --cached" では存在しません。このオプションは、
@samp{--ita-visible-in-index} で元に戻すことができます。どちらのオプションも実験的なものであり、将来削除される可能性があります。
@end table

これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照してください。

@noindent

@chapheading Generating patch text with -p

git-diff(1) 、 git-log(1) 、 git-show(1) 、
git-diff-index(1) 、 git-diff-tree(1) 、
git-diff-files(1) に @samp{-p} オプションを付けて実行するとパッチテキストを生成します。パッチテキストの作成は、
@samp{GIT_EXTERNAL_DIFF} と @samp{GIT_DIFF_OPTS} 環境変数( git(1) 参照)、および @samp{diff}
属性( gitattributes(5) 参照)を介してカスタマイズできます。

-pオプションが生成するものは、従来のdiff形式とは少々異なります:

@enumerate 

@item
先行して、以下のような "git diff" ヘッダーがあります:

@example
diff --git a/file1 b/file2
@end example

名前の変更/コピーが含まれない限り、 @samp{a/} と @samp{b/} のファイル名は同じです。 特に、作成または削除の場合でも、 @samp{a/} または @samp{b/}
ファイル名の代わりに @samp{/dev/ null} が使用されることはありません。

名前変更/コピーが含まれる場合、 @samp{file1} と`file2`
は、それぞれ名前変更/コピーのソースファイルの名前と、名前変更/コピーが生成するファイルの名前を示します。

@item
その後に、1つ以上の拡張ヘッダー行達が続きます:

@example
old mode <mode>
new mode <mode>
deleted file mode <mode>
new file mode <mode>
copy from <path>
copy to <path>
rename from <path>
rename to <path>
similarity index <number>
dissimilarity index <number>
index <hash>..<hash> <mode>
@end example

ファイルモードは、ファイルタイプとファイル許可ビットを含む6桁の8進数として出力されます。

拡張ヘッダーのパス名には、 @samp{a/} および @samp{b/} プレフィックスは含まれません。

類似インデックス(similarity index)は変更されていない行のパーセンテージであり、非類似インデックス(dissimilarity
index)は変更された行のパーセンテージです。これは切り捨てられた整数であり、その後にパーセント記号が続きます。したがって、100％の類似インデックス値は2つの等しいファイルを表し、100％の非類似性は古いファイルから新しいファイルに移行された行がないことを意味します。

インデックス行には、変更前後のブロブオブジェクト名が含まれます。 <mode>
は、ファイルモードが変更されない場合に含まれます。それ以外の場合、別々の行は古いモードと新しいモードを示します。

@item
通常の文字でないキャラクタ(\"unusual\" characters)を含むパス名は、構成変数 @samp{core.quotePath}
で説明されているように引用符で囲まれています( git-config(1)参照)。

@item
出力内のすべての @samp{file1} ファイルはコミット前のファイルを参照し、すべての @samp{file2}
ファイルはコミット後のファイルを参照します。各変更を各ファイルに順番に適用するのは誤りです。たとえば、以下のパッチはaとbを交換します:

@example
diff --git a/a b/b
rename from a
rename to b
diff --git a/b b/a
rename from b
rename to a
@end example

@item
ハンクのヘッダーには、ハンクが適用される関数の名前が記載されています。特定の言語に合わせてこれを調整する方法の詳細については、
gitattributes(5) の "Defining a custom hunk-header" を参照してください。
@end enumerate

@noindent

@chapheading Combined diff format

diffを生成するコマンドは、マージを表示するときに @samp{-c} または @samp{--cc} オプションを使用して「合成diff」(combined
diff)を生成できます。これは git-diff(1) または git-show(1)
でのマージを表示するときのデフォルトの形式です。 注意: これらのコマンドのいずれかに適切な @samp{--diff-merges}
オプションを指定して、特定の形式で差分を強制的に生成できることにも注意してください。

合成diff形式は以下のようになります:

@example
diff --combined describe.c
index fabadb8,cc95eb0..4866510
--- a/describe.c
+++ b/describe.c
@@@@@@ -98,20 -98,12 +98,20 @@@@@@
        return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
  @}

- static void describe(char *arg)
 -static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  @{
 +      unsigned char sha1[20];
 +      struct commit *cmit;
        struct commit_list *list;
        static int initialized = 0;
        struct commit_name *n;

 +      if (get_sha1(arg, sha1) < 0)
 +              usage(describe_usage);
 +      cmit = lookup_commit_reference(sha1);
 +      if (!cmit)
 +              usage(describe_usage);
 +
        if (!initialized) @{
                initialized = 1;
                for_each_ref(get_name);
@end example


@enumerate 

@item
まず "git diff"  ヘッダーがあり、以下のようになります( @samp{-c} オプションが使用されている場合):

@example
diff --combined file
@end example

または、以下のようになります( @samp{--cc} オプションが使用されている場合):

@example
diff --cc file
@end example

@item
その後に1つ以上の拡張ヘッダー行が続きます(以下の例は、2つの親とのマージを示しています):

@example
index <hash>,<hash>..<hash>
mode <mode>,<mode>..<mode>
new file mode <mode>
deleted file mode <mode>,<mode>
@end example

@samp{mode <mode>,<mode>..<mode>} 行は、<mode> の少なくとも1つが他の <mode>
と異なる場合にのみ表示されます。検出されたコンテンツの移動(名前の変更とコピーの検出)に関する情報を含む拡張ヘッダーは、2つの <tree-ish>
のdiffで機能するように設計されており、合成diff形式では使用されません。

@item
その後に2行の from-file/to-file ヘッダーが続きます

@example
--- a/file
+++ b/file
@end example

従来の統一diff形式の2行ヘッダーと同様に、 @samp{/dev/null} は、作成または削除されたファイルを通知するために使用されます。

ただし、 --combined-all-paths  オプションが指定されている場合、2行の from-file/to-file の代わりに、 N+1
行の from-file/to-file ヘッダーが取得されます。ここで、 N はマージコミットの親の数です。

@example
--- a/file
--- a/file
--- a/file
+++ b/file
@end example

この拡張形式は、名前変更またはコピー検出がアクティブな場合に役立ち、別の親のファイルの元の名前を確認できます。

@item
チャンクヘッダーの形式が変更され、誤って @samp{patch-p1}
にフィードされるのを防ぎます。合成差分形式は、マージコミットの変更を確認するために作成されたものであり、適用されることを意図したものではありません。この変更は、拡張された「インデックス」ヘッダーの変更に似ています:

@example
@@@@@@ <from-file-range> <from-file-range> <to-file-range> @@@@@@
@end example

合成diff形式のチャンクヘッダーには親の数+1の @samp{@@} 文字があります。
@end enumerate

従来の統一diff形式とは異なり、2つのファイルAとBが、 @samp{-} (マイナスはAに表示されますが、Bでは削除されます) または @samp{+}
(プラスはAにはありませんが、Bには追加されます)、または @samp{" "}（スペースは変更なし)
プレフィックスを持つ単一の列で表示される場合、この形式は2つ以上のファイル file1, file2,… を1つのファイルXと比較し、Xが各
fileN とどのように異なるかを示します。ファイルNごとに1つの列が出力行の前に追加され、Xの行が出力行とどのように異なるかを示します。

列Nの @samp{-} 文字は、その行が fileN に表示されているが、結果には表示されていないことを意味します。 列Nの @samp{+}
文字は、結果に行が表示され、 fileN にその行がないことを意味します(つまり、その親の観点から見て行が追加されたことを示す)。

上記の出力例では、関数のシグネチャが両方のファイルから見て変更されています(したがって、 file1 と file2 の両方から2つの @samp{-}
が削除され、さらに @samp{++} が追加されたため、 file1 と file2 のどちらにも表示されません)。また、他の8行は file1 と同じですが、
file2 には表示されません(したがって、接頭辞として @samp{+} が付けられます)。

@samp{git diff-tree -c} で表示される場合、マージコミットの親をマージ結果と比較します(つまり、 file1..fileN が親です)。
@samp{git diff-files -c} で表示される場合、2つの未解決のマージ親を作業ツリーファイルと比較します(つまり、 file1
はステージ2、別名「私たちのバージョン」、 file2 はステージ3、別名「彼らのバージョン」です)。

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git log --no-merges} 
コミット履歴全体を表示しますが、マージはスキップします

@item  @samp{git log v2.6.12.. include/scsi drivers/scsi} 
バージョン @emph{v2.6.12} 以降で @samp{include/scsi} または @samp{drivers/scsi}
サブディレクトリ内のファイルの変更がある、すべてのコミットを表示します

@item  @samp{git log --since="2 weeks ago" -- gitk} 
@emph{gitk} ファイルの変更について過去2週間の範囲で表示します。`--`は*ブランチ*名 @emph{gitk} と混同しないようにするために必要です。

@item  @samp{git log --name-status release..test} 
「test」ブランチにはあるがまだ「release」ブランチにはないコミットを、各コミットが変更するパスのリストとともに表示します。

@item  @samp{git log --follow builtin/rev-list.c} 
ファイルに現在の名前が付けられる前に発生したコミット(訳注:つまりファイル名が変更される前の当該ファイル)を含め、`builtin/rev-list.c`を変更したコミットを表示します。

@item  @samp{git log --branches --not --remotes=origin} 
ローカルブランチ’origin’にあり、'origin’のリモートトラッキングブランチのいずれにも存在していないコミットを表示します。

@item  @samp{git log master --not --remotes=*/master} 
ローカルmasterにはあるが、リモートリポジトリmasterブランチにはないすべてのコミットを表示します。

@item  @samp{git log -p -m --first-parent} 
変更の差分を含む履歴を表示しますが、‘`main
branch’'の観点からのみ、マージされたブランチからのコミットをスキップし、マージによって導入された変更の完全な差分を表示します。これは、単一の統合ブランチにとどまり、そのブランチにすべてのトピックブランチをマージするという厳格なポリシーに従う場合にのみ意味があります。

@item  @samp{git log -L '/int main/',/^@}/:main.c} 
ファイル`main.c`の関数`main()`が時間の経過とともにどのように進化したかを示します。

@item  @samp{git log -3} 
表示するコミットの数を3個に制限します。
@end table

@noindent

@chapheading DISCUSSION

Gitは、ある程度までは文字エンコードに依存しません。

@itemize 

@item
ブロブオブジェクトの内容は、解釈されていないバイトのシーケンスです。コアレベルでのエンコーディング変換はありません。

@item
パス名はUTF-8正規化形式C(UTF-8 normalization form
C)でエンコードされます。これは、ツリーオブジェクト、インデックスファイル、ref名、およびコマンドライン引数、環境変数、構成ファイル(
@samp{.git/config} (git-config(1) 参照) と gitignore(5) と
gitattributes(5) と gitmodules(5)) のパス名に適用されます。

コアレベルのGitは、パス名を単に非NULバイトのシーケンスとして扱い、パス名をエンコードする変換はありません(MacとWindowsを除く)。したがって、非ASCIIパス名の使用は、レガシー拡張ASCIIエンコーディングを使用するプラットフォームやファイルシステムでもほとんど機能します。ただし、そのようなシステムで作成されたリポジトリは、UTF-8ベースのシステム(Linux、Mac、Windowsなど)では正しく機能しません。その逆も同様です。さらに、多くのGitベースのツールは、パス名がUTF-8であると単純に想定しており、他のエンコーディングを正しく表示できません。

@item
コミットログメッセージは通常UTF-8でエンコードされますが、他の拡張ASCIIエンコードもサポートされています。これには、ISO-8859-x、CP125xなどが含まれますが、UTF-16/32、EBCDIC、およびCJKマルチバイトエンコーディング(GBK、Shift-JIS、Big5、EUC-x、CP9xxなど)は含まれません。
@end itemize

我々はコミットログメッセージをUTF-8でエンコードすることをお勧めしますが、コアとGit
Porcelainはどちらも、プロジェクトでUTF-8を強制しないように設計されています。特定のプロジェクトのすべての参加者がレガシーエンコーディングを使用する方が便利だと感じた場合、Gitはそれを禁止しません。
ただし、覚えておくべきことがいくつかあります。

@enumerate 

@item
@emph{git commit} と @emph{git commit-tree}
は、プロジェクトがレガシーエンコーディングを使用していることを明示的に指定しない限り、与えられたコミットログメッセージが有効なUTF-8文字列のように見えない場合に警告を発します。明示的に指定する方法は、以下のように、
@samp{.git/config} ファイルに @samp{i18n.commitEncoding} を含めることです。

@example
[i18n]
        commitEncoding = ISO-8859-1
@end example


上記の設定で作成されたコミットオブジェクトは、 @samp{encoding} ヘッダーに @samp{i18n.commitEncoding} の値を記録します。
これは、後でそれらを見る他の人々を助けるためです。このヘッダーがないということは、コミットログメッセージがUTF-8でエンコードされていることを意味します。

@item
@emph{git log} と @emph{git show} と @emph{git blame} とその仲間たちは、コミットオブジェクトの @samp{encoding}
ヘッダーを見て、特に指定がない限り、ログメッセージをUTF-8に再コーディングしようとします。あなたは以下のように、 @samp{.git/config}
ファイルの @samp{i18n.logOutputEncoding} を使用して目的の出力エンコーディングを指定できます。

@example
[i18n]
        logOutputEncoding = ISO-8859-1
@end example


この構成変数がない場合は、代わりに @samp{i18n.commitEncoding} の値が使用されます。
@end enumerate

UTF-8への再コーディングは必ずしも可逆的な操作ではないため、我々はコミットが行われたときにコミットログメッセージを再コーディングしないことを意図的に選択したことに注意してください。

@noindent

@chapheading CONFIGURATION

コア変数については git-config(1) を、diff生成に関連する設定については git-diff(1)
を参照してください。

@table @asis

@item  format.pretty 
`--format`オプションのデフォルト。(上記’Pretty Formats’を参照してください。)デフォルトは`medium`です。

@item  i18n.logOutputEncoding 
ログを表示するときに使用するエンコーディング。(上記’Discussion’を参照してください。)デフォルトでは、設定されている場合は
@samp{i18n.commitEncoding} の値になり、そうでない場合は UTF-8 になります。

@item  log.date 
人間が読める形式の日付のデフォルト形式。(@samp{--date`オプションと比べてみてください。)デフォルトは "default" です。これは、`Sat
May 8 19:35:34 2010 -0500} のような日付を書き込むことを意味します。

フォーマットが"auto:foo"に設定されていて、かつ、ページャーが使用されている場合、フォーマット "foo"
が日付フォーマットに使用されます。それ以外の場合は"default"が使用されます。

@item  log.follow 
@samp{true`の場合、`git
log`は、単一の<path>が指定されたときに}--follow`オプションが使用されたかのように機能します。これには`--follow`と同じ制限があります。つまり、複数のファイルを追跡するために使用することはできず、非線形履歴(non-linear
history)ではうまく機能しません。

@item  log.showRoot 
`false`の場合、`git log`および関連するコマンドは最初のコミットを大きな作成イベント(big creation
event)として扱いません。`git log -p`出力のルートコミットは、差分を添付せずに表示されます。デフォルトは `true`です。

@item  log.showSignature 
@samp{true`の場合、`git log`および関連するコマンドは}--show-signature`オプションが渡されたかのように動作します。

@item  mailmap.* 
git-shortlog(1) 参照。

@item  notes.displayRef 
`core.notesRef`または`GIT_NOTES_REF`によって設定されたデフォルトに加えて、コマンドの`log`ファミリーでコミットメッセージを表示するときにメモを読み取るためのrefs。git-notes(1)を参照してください。

省略されていないref名またはグロブ(glob)である可能性があり、複数回指定される可能性があります。存在しないrefsに対しては警告が発行されますが、どのrefsとも一致しないグロブ(glob)は黙って無視されます。

この設定は、@samp{--no-notes`オプションで無効にしたり、`GIT_NOTES_DISPLAY_REF`環境変数で上書きしたり、}--notes=<ref>`オプションで上書きしたりできます。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-ls-files,,,Top
@chapheading Name

git-ls-files — インデックスと作業ツリーのファイルに関する情報を表示する

@noindent

@chapheading Synopsis

@display
git ls-files [-z] [-t] [-v] [-f]
                (--[cached|deleted|others|ignored|stage|unmerged|killed|modified])*
                (-[c|d|o|i|s|u|k|m])*
                [--eol]
                [--deduplicate]
                [-x <pattern>|--exclude=<pattern>]
                [-X <file>|--exclude-from=<file>]
                [--exclude-per-directory=<file>]
                [--exclude-standard]
                [--error-unmatch] [--with-tree=<tree-ish>]
                [--full-name] [--recurse-submodules]
                [--abbrev[=<n>]] [--] [<file>…]
@end display


@noindent

@chapheading DESCRIPTION

これにより、インデックス内のファイルリストが実際の作業ディレクトリリストとマージされ、2つのさまざまな組み合わせが表示されます。

以下の1つ以上のオプションを使用して、表示されるファイルを判別できます:

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-c} 
@itemx  @samp{--cached} 
Show cached files in the output (default)

@item  @samp{-d} 
@itemx  @samp{--deleted} 
Show deleted files in the output

@item  @samp{-m} 
@itemx  @samp{--modified} 
変更されたファイルを出力に表示

@item  @samp{-o} 
@itemx  @samp{--others} 
Show other (i.e. untracked) files in the output

@item  @samp{-i} 
@itemx  @samp{--ignored} 
Show only ignored files in the output. When showing files in the index,
print only those matched by an exclude pattern. When showing "other" files,
show only those matched by an exclude pattern. Standard ignore rules are not
automatically activated, therefore at least one of the @samp{--exclude*} options
is required.

@item  @samp{-s} 
@itemx  @samp{--stage} 
Show staged contents' mode bits, object name and stage number in the output.

@item  @samp{--directory} 
If a whole directory is classified as "other", show just its name (with a
trailing slash) and not its whole contents.

@item  @samp{--no-empty-directory} 
Do not list empty directories. Has no effect without --directory.

@item  @samp{-u} 
@itemx  @samp{--unmerged} 
Show unmerged files in the output (forces --stage)

@item  @samp{-k} 
@itemx  @samp{--killed} 
Show files on the filesystem that need to be removed due to file/directory
conflicts for checkout-index to succeed.

@item  @samp{-z} 
\0 line termination on output and do not quote filenames.  See OUTPUT below
for more information.

@item  @samp{--deduplicate} 
When only filenames are shown, suppress duplicates that may come from having
multiple stages during a merge, or giving @samp{--deleted} and @samp{--modified}
option at the same time.  When any of the @samp{-t}, @samp{--unmerged}, or @samp{--stage}
option is in use, this option has no effect.

@item  @samp{-x <pattern>} 
@itemx  @samp{--exclude=<pattern>} 
Skip untracked files matching pattern.  Note that pattern is a shell
wildcard pattern. See EXCLUDE PATTERNS below for more information.

@item  @samp{-X <file>} 
@itemx  @samp{--exclude-from=<file>} 
Read exclude patterns from <file>; 1 per line.

@item  @samp{--exclude-per-directory=<file>} 
Read additional exclude patterns that apply only to the directory and its
subdirectories in <file>.

@item  @samp{--exclude-standard} 
Add the standard Git exclusions: .git/info/exclude, .gitignore in each
directory, and the user’s global exclusion file.

@item  @samp{--error-unmatch} 
If any <file> does not appear in the index, treat this as an error (return
1).

@item  @samp{--with-tree=<tree-ish>} 
When using --error-unmatch to expand the user supplied <file> (i.e. path
pattern) arguments to paths, pretend that paths which were removed in the
index since the named <tree-ish> are still present.  Using this option with
@samp{-s} or @samp{-u} options does not make any sense.

@item  @samp{-t} 
This feature is semi-deprecated. For scripting purpose,
git-status(1) @samp{--porcelain} and git-diff-files(1)
@samp{--name-status} are almost always superior alternatives, and users should
look at git-status(1) @samp{--short} or git-diff(1)
@samp{--name-status} for more user-friendly alternatives.

This option identifies the file status with the following tags (followed by
a space) at the start of each line:

@table @asis

@item  H 
cached

@item  S 
skip-worktree

@item  M 
unmerged

@item  R 
removed/deleted

@item  C 
modified/changed

@item  K 
to be killed

@item  ? 
other
@end table

@item  @samp{-v} 
Similar to @samp{-t}, but use lowercase letters for files that are marked as
@emph{assume unchanged} (see git-update-index(1)).

@item  @samp{-f} 
Similar to @samp{-t}, but use lowercase letters for files that are marked as
@emph{fsmonitor valid} (see git-update-index(1)).

@item  @samp{--full-name} 
When run from a subdirectory, the command usually outputs paths relative to
the current directory.  This option forces paths to be output relative to
the project top directory.

@item  @samp{--recurse-submodules} 
Recursively calls ls-files on each active submodule in the repository.
Currently there is only support for the --cached mode.

@item  @samp{--abbrev[=<n>]} 
Instead of showing the full 40-byte hexadecimal object lines, show the
shortest prefix that is at least @emph{<n>} hexdigits long that uniquely refers
the object.  Non default number of digits can be specified with
--abbrev=<n>.

@item  @samp{--debug} 
After each line that describes a file, add more data about its cache entry.
This is intended to show as much information as possible for manual
inspection; the exact format may change at any time.

@item  @samp{--eol} 
Show <eolinfo> and <eolattr> of files.  <eolinfo> is the file content
identification used by Git when the "text" attribute is "auto" (or not set
and core.autocrlf is not false).  <eolinfo> is either "-text", "none", "lf",
"crlf", "mixed" or "".

"" means the file is not a regular file, it is not in the index or not
accessible in the working tree.

<eolattr> is the attribute that is used when checking out or committing, it
is either "", "-text", "text", "text=auto", "text eol=lf", "text eol=crlf".
Since Git 2.10 "text=auto eol=lf" and "text=auto eol=crlf" are supported.

Both the <eolinfo> in the index ("i/<eolinfo>")  and in the working tree
("w/<eolinfo>") are shown for regular files, followed by the
("attr/<eolattr>").

@item  -- 
Do not interpret any more arguments as options.

@item  <file> 
Files to show. If no files are given all files which match the other
specified criteria are shown.
@end table

@noindent

@chapheading OUTPUT

@emph{git ls-files} just outputs the filenames unless @samp{--stage} is specified in
which case it outputs:

@example
[<tag> ]<mode> <object> <stage> <file>
@end example

@emph{git ls-files --eol} will show
i/<eolinfo><SPACES>w/<eolinfo><SPACES>attr/<eolattr><SPACE*><TAB><file>

@emph{git ls-files --unmerged} and @emph{git ls-files --stage} can be used to examine
detailed information on unmerged paths.

For an unmerged path, instead of recording a single mode/SHA-1 pair, the
index records up to three such pairs; one from tree O in stage 1, A in stage
2, and B in stage 3.  This information can be used by the user (or the
porcelain) to see what should eventually be recorded at the path. (see
git-read-tree(1) for more information on state)

Without the @samp{-z} option, pathnames with "unusual" characters are quoted as
explained for the configuration variable @samp{core.quotePath} (see
git-config(1)).  Using @samp{-z} the filename is output verbatim and the
line is terminated by a NUL byte.

@noindent

@chapheading EXCLUDE PATTERNS

@emph{git ls-files} can use a list of "exclude patterns" when traversing the
directory tree and finding files to show when the flags --others or
--ignored are specified.  gitignore(5) specifies the format of
exclude patterns.

These exclude patterns come from these places, in order:

@enumerate 

@item
The command-line flag --exclude=<pattern> specifies a single pattern.
Patterns are ordered in the same order they appear in the command line.

@item
The command-line flag --exclude-from=<file> specifies a file containing a
list of patterns.  Patterns are ordered in the same order they appear in the
file.

@item
The command-line flag --exclude-per-directory=<name> specifies a name of the
file in each directory @emph{git ls-files} examines, normally @samp{.gitignore}.
Files in deeper directories take precedence.  Patterns are ordered in the
same order they appear in the files.
@end enumerate

A pattern specified on the command line with --exclude or read from the file
specified with --exclude-from is relative to the top of the directory tree.
A pattern read from a file specified by --exclude-per-directory is relative
to the directory that the pattern file appears in.

@noindent

@chapheading SEE ALSO

git-read-tree(1), gitignore(5)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-ls-remote,,,Top
@chapheading Name

git-ls-remote — List references in a remote repository

@noindent

@chapheading Synopsis

@display
git ls-remote [--heads] [--tags] [--refs] [--upload-pack=<exec>]
              [-q | --quiet] [--exit-code] [--get-url] [--sort=<key>]
              [--symref] [<repository> [<refs>…]]
@end display


@noindent

@chapheading DESCRIPTION

Displays references available in a remote repository along with the
associated commit IDs.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-h} 
@itemx  @samp{--heads} 
@itemx  @samp{-t} 
@itemx  @samp{--tags} 
Limit to only refs/heads and refs/tags, respectively.  These options are
@emph{not} mutually exclusive; when given both, references stored in refs/heads
and refs/tags are displayed.  Note that @samp{git ls-remote -h} used without
anything else on the command line gives help, consistent with other git
subcommands.

@item  @samp{--refs} 
Do not show peeled tags or pseudorefs like @samp{HEAD} in the output.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Do not print remote URL to stderr.

@item  @samp{--upload-pack=<exec>} 
Specify the full path of @emph{git-upload-pack} on the remote host. This allows
listing references from repositories accessed via SSH and where the SSH
daemon does not use the PATH configured by the user.

@item  @samp{--exit-code} 
Exit with status "2" when no matching refs are found in the remote
repository. Usually the command exits with status "0" to indicate it
successfully talked with the remote repository, whether it found any
matching refs.

@item  @samp{--get-url} 
Expand the URL of the given remote repository taking into account any
"url.<base>.insteadOf" config setting (See git-config(1)) and exit
without talking to the remote.

@item  @samp{--symref} 
In addition to the object pointed by it, show the underlying ref pointed by
it when showing a symbolic ref.  Currently, upload-pack only shows the
symref HEAD, so it will be the only one shown by ls-remote.

@item  @samp{--sort=<key>} 
Sort based on the key given. Prefix @samp{-} to sort in descending order of the
value. Supports "version:refname" or "v:refname" (tag names are treated as
versions). The "version:refname" sort order can also be affected by the
"versionsort.suffix" configuration variable.  See
git-for-each-ref(1) for more sort options, but be aware keys like
@samp{committerdate} that require access to the objects themselves will not work
for refs whose objects have not yet been fetched from the remote, and will
give a @samp{missing object} error.

@item  @samp{-o <option>} 
@itemx  @samp{--server-option=<option>} 
Transmit the given string to the server when communicating using protocol
version 2.  The given string must not contain a NUL or LF character.  When
multiple @samp{--server-option=<option>} are given, they are all sent to the
other side in the order listed on the command line.

@item  <repository> 
The "remote" repository to query.  This parameter can be either a URL or the
name of a remote (see the GIT URLS and REMOTES sections of
git-fetch(1)).

@item  <refs>… 
When unspecified, all references, after filtering done with --heads and
--tags, are shown.  When <refs>… are specified, only references matching
the given patterns are displayed.
@end table

@noindent

@chapheading EXAMPLES

@example
$ git ls-remote --tags ./.
d6602ec5194c87b0fc87103ca4d67251c76f233a        refs/tags/v0.99
f25a265a342aed6041ab0cc484224d9ca54b6f41        refs/tags/v0.99.1
7ceca275d047c90c0c7d5afb13ab97efdf51bd6e        refs/tags/v0.99.3
c5db5456ae3b0873fc659c19fafdde22313cc441        refs/tags/v0.99.2
0918385dbd9656cab0d1d81ba7453d49bbc16250        refs/tags/junio-gpg-pub
$ git ls-remote http://www.kernel.org/pub/scm/git/git.git master seen rc
5fe978a5381f1fbad26a80e682ddd2a401966740        refs/heads/master
c781a84b5204fb294c9ccc79f8b3baceeb32c061        refs/heads/seen
$ git remote add korg http://www.kernel.org/pub/scm/git/git.git
$ git ls-remote --tags korg v\*
d6602ec5194c87b0fc87103ca4d67251c76f233a        refs/tags/v0.99
f25a265a342aed6041ab0cc484224d9ca54b6f41        refs/tags/v0.99.1
c5db5456ae3b0873fc659c19fafdde22313cc441        refs/tags/v0.99.2
7ceca275d047c90c0c7d5afb13ab97efdf51bd6e        refs/tags/v0.99.3
@end example


@noindent

@chapheading SEE ALSO

git-check-ref-format(1).

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-ls-tree,,,Top
@chapheading Name

git-ls-tree — ツリーオブジェクトの内容を一覧表示します

@noindent

@chapheading Synopsis

@display
git ls-tree [-d] [-r] [-t] [-l] [-z]
            [--name-only] [--name-status] [--full-name] [--full-tree] [--abbrev[=<n>]]
            <tree-ish> [<path>…]
@end display


@noindent

@chapheading DESCRIPTION

「/bin/ls -a」が現在の作業ディレクトリで行うことのように、特定のツリーオブジェクトの内容を一覧表示します。 ただし以下の点に注意してください:

@itemize 

@item
動作は「/bin/ls」の動作とは少し異なり、「<path>」は一致するパターンのリストのみを示します。 したがって、( @samp{-r}
なしで)ディレクトリ名を指定すると動作が異なり、引数の順序は重要ではありません。

@item
@emph{<path>}
が現在の作業ディレクトリを基準にして取得されるという点で、動作は「/bin/ls」の動作と似ています。例えば、あなたの現在の作業ディレクトリが「sub」で、その下にサブディレクトリ「dir」がある場合は、「git
ls-tree -r HEAD dir」を実行すると、「dir」ツリーの内容を一覧表示できます(つまり、「HEAD」の「sub/dir」)
。あなたが、ルートレベル以外のツリーを直接指定したいとします(たとえば @samp{git ls-tree -r HEAD:sub dir}
と指定します)。しかし、この場合は結果として @samp{HEAD} コミットで @samp{sub/sub/dir}
を要求したことになります(そしてそんなディレクトリはないので何も表示されない)。ただし、 @samp{--full-tree}
プションを渡すと、現在の作業ディレクトリを無視できます(つまり、 @samp{git ls-tree --fulltree -r HEAD:sub dir}
とすれば意図したとおりに動く)
@end itemize

@noindent

@chapheading OPTIONS

@table @asis

@item  <tree-ish> 
ツリーっぽい何か(tree-ish)のID

@item  @samp{-d} 
名前付きツリーエントリ自体のみを表示し、その子供たちは表示しません。

@item  @samp{-r} 
サブツリーに再帰的に入っていきます

@item  @samp{-t} 
サブツリーに再帰的入っていく場合でも、ツリーエントリを表示します。 @samp{-r} が渡されなかった場合は効果がありません。 @samp{-d} は @samp{-t}
の意味を含んでいます。

@item  @samp{-l} 
@itemx  @samp{--long} 
ブロブ(ファイル)エントリのオブジェクトサイズを表示します。

@item  @samp{-z} 
@samp{\0} (NULバイト)出力での行終了であり、ファイル名をクォートしません。 詳細については、以下の OUTPUT FORMAT を参照してください。

@item  @samp{--name-only} 
@itemx  @samp{--name-status} 
(「long」出力ではなく)ファイル名のみを1行に1つずつリストします。

@item  @samp{--abbrev[=<n>]} 
40バイトの16進オブジェクト行全体を表示する代わりに、オブジェクトを一意に参照できる、少なくとも @emph{<n>}
以上の長さの最短のプレフィックスを表示します。デフォルト以外の桁数は @samp{--abbrev=<n>}
で指定できます。(訳注:手元ではデフォルトは10桁で表示された。 @samp{--abbrev=1} とすると5桁(一部6桁)表示となった)

@item  @samp{--full-name} 
現在の作業ディレクトリに関連するパス名を表示する代わりに、フルパス名を表示します。

@item  @samp{--full-tree} 
現在の作業ディレクトリを無視して、ルートレベルを起点として一覧表示します。 @samp{--full-name} の意味を含んでいます。

@item  [<path>…] 
パスが指定されたら、それらを表示します(これは実際には生のパス名ではなく、一致するパターンのリストであることに注意してください)。
それ以外の場合は、ツリーのルートレベルを唯一のパス引数として暗黙的に使用します。
@end table

@noindent

@chapheading Output Format

@example
<mode> SP <type> SP <object> TAB <file>
@end example

この出力形式は、「git update-index」の「--index-info—stdin」が期待するものと互換性があります。

@samp{-l} オプションを使用すると、形式が以下のように変わります

@example
<mode> SP <type> SP <object> SP <object size> TAB <file>
@end example

<object>
で識別されるオブジェクトサイズはバイト単位で指定され、最小幅7文字で右寄せされます。オブジェクトサイズは、ブロブ(ファイル)エントリに対してのみ指定されます。他のエントリの場合、サイズの代わりに
@samp{-} 文字が使用されます。

@samp{-z} オプションを指定しない場合、構成変数 @samp{core.quotePath}
で説明されているように、「異常な」文字を含むパス名が引用符で囲まれます(git-config(1) を参照)。 @samp{-z}
を使用すると、ファイル名がそのまま出力され、行はNULバイトで終了します。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-mailinfo,,,Top
@chapheading Name

git-mailinfo — Extracts patch and authorship from a single e-mail message

@noindent

@chapheading Synopsis

@display
git mailinfo [-k|-b] [-u | --encoding=<encoding> | -n]
               [--[no-]scissors] [--quoted-cr=<action>]
               <msg> <patch>
@end display


@noindent

@chapheading DESCRIPTION

Reads a single e-mail message from the standard input, and writes the commit
log message in <msg> file, and the patches in <patch> file.  The author
name, e-mail and e-mail subject are written out to the standard output to be
used by @emph{git am} to create a commit.  It is usually not necessary to use
this command directly.  See git-am(1) instead.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-k} 
Usually the program removes email cruft from the Subject: header line to
extract the title line for the commit log message.  This option prevents
this munging, and is most useful when used to read back @emph{git format-patch
-k} output.

Specifically, the following are removed until none of them remain:

@itemize 

@item
Leading and trailing whitespace.

@item
Leading @samp{Re:}, @samp{re:}, and @samp{:}.

@item
Leading bracketed strings (between @samp{[} and @samp{]}, usually
@samp{[PATCH]}).
@end itemize

Finally, runs of whitespace are normalized to a single ASCII space
character.

@item  @samp{-b} 
When -k is not in effect, all leading strings bracketed with @emph{[} and @emph{]}
pairs are stripped.  This option limits the stripping to only the pairs
whose bracketed string contains the word "PATCH".

@item  @samp{-u} 
The commit log message, author name and author email are taken from the
e-mail, and after minimally decoding MIME transfer encoding, re-coded in the
charset specified by @samp{i18n.commitEncoding} (defaulting to UTF-8) by
transliterating them.  This used to be optional but now it is the default.

Note that the patch is always used as-is without charset conversion, even
with this flag.

@item  @samp{--encoding=<encoding>} 
Similar to -u.  But when re-coding, the charset specified here is used
instead of the one specified by @samp{i18n.commitEncoding} or UTF-8.

@item  @samp{-n} 
Disable all charset re-coding of the metadata.

@item  @samp{-m} 
@itemx  @samp{--message-id} 
Copy the Message-ID header at the end of the commit message.  This is useful
in order to associate commits with mailing list discussions.

@item  @samp{--scissors} 
Remove everything in body before a scissors line (e.g. "-- >8 --").  The
line represents scissors and perforation marks, and is used to request the
reader to cut the message at that line.  If that line appears in the body of
the message before the patch, everything before it (including the scissors
line itself) is ignored when this option is used.

This is useful if you want to begin your message in a discussion thread with
comments and suggestions on the message you are responding to, and to
conclude it with a patch submission, separating the discussion and the
beginning of the proposed commit log message with a scissors line.

This can be enabled by default with the configuration option
mailinfo.scissors.

@item  @samp{--no-scissors} 
Ignore scissors lines. Useful for overriding mailinfo.scissors settings.

@item  @samp{--quoted-cr=<action>} 
Action when processes email messages sent with base64 or quoted-printable
encoding, and the decoded lines end with a CRLF instead of a simple LF.

The valid actions are:

@itemize 

@item
@samp{nowarn}: Git will do nothing when such a CRLF is found.

@item
@samp{warn}: Git will issue a warning for each message if such a CRLF is
found.

@item
@samp{strip}: Git will convert those CRLF to LF.
@end itemize

The default action could be set by configuration option
@samp{mailinfo.quotedCR}.  If no such configuration option has been set, @samp{warn}
will be used.

@item  <msg> 
The commit log message extracted from e-mail, usually except the title line
which comes from e-mail Subject.

@item  <patch> 
The patch extracted from e-mail.
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-mailsplit,,,Top
@chapheading Name

git-mailsplit — 簡易 UNIX mbox 分割プログラム

@noindent

@chapheading Synopsis

@display
git mailsplit [-b] [-f<nn>] [-d<prec>] [--keep-cr] [--mboxrd]
                -o<directory> [--] [(<mbox>|<Maildir>)…]
@end display


@noindent

@chapheading DESCRIPTION

mboxファイルまたはMaildirを指定のディレクトリ内でファイルのリストに分割し("0001" "0002"
..)、そこからさらに処理できるようにします。

@quotation

@strong{Important}

Maildirの分割は、ファイル名が正しい順序でパッチを出力するためにソートされていることに依存しています。
@end quotation

@noindent

@chapheading OPTIONS

@table @asis

@item  <mbox> 
分割するmboxファイル。指定しない場合、mboxは標準入力から読み取られます。

@item  <Maildir> 
分割するMaildirのルート。このディレクトリには、cur と tmp とnew サブディレクトリが含まれている必要があります。

@item  @samp{-o<directory>} 
個々のメッセージを配置するディレクトリ。

@item  @samp{-b} 
ファイルがFrom行で始まらない場合は、エラーにするのではなく、単一のメールメッセージであると想定してください。

@item  @samp{-d<prec>} 
先行ゼロを含むデフォルトの4桁の代わりに、生成するファイル名に異なる桁数を指定できます。

@item  @samp{-f<nn>} 
出力ファイル名の最初の <nn> 番号までをスキップします。たとえば、 -f3 が指定されている場合は、番号を0004から始めます。

@item  @samp{--keep-cr} 
@samp{\r\n} で終わる行から @samp{\r} を削除しないでください。

@item  @samp{--mboxrd} 
入力は「mboxrd」形式であり、 "^>+From " 行のエスケープは逆になります。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-maintenance,,,Top
@chapheading Name

git-maintenance — Run tasks to optimize Git repository data

@noindent

@chapheading Synopsis

@display
git maintenance run [<options>]
@end display


@noindent

@chapheading DESCRIPTION

Run tasks to optimize Git repository data, speeding up other Git commands
and reducing storage requirements for the repository.

Git commands that add repository data, such as @samp{git add} or @samp{git fetch}, are
optimized for a responsive user experience. These commands do not take time
to optimize the Git data, since such optimizations scale with the full size
of the repository while these user commands each perform a relatively small
action.

The @samp{git maintenance} command provides flexibility for how to optimize the
Git repository.

@noindent

@chapheading SUBCOMMANDS

@table @asis

@item  register 
Initialize Git config values so any scheduled maintenance will start running
on this repository. This adds the repository to the @samp{maintenance.repo}
config variable in the current user’s global config and enables some
recommended configuration values for @samp{maintenance.<task>.schedule}. The
tasks that are enabled are safe for running in the background without
disrupting foreground processes.

The @samp{register} subcommand will also set the @samp{maintenance.strategy} config
value to @samp{incremental}, if this value is not previously set. The
@samp{incremental} strategy uses the following schedule for each maintenance
task:

@itemize 

@item
@samp{gc}: disabled.

@item
@samp{commit-graph}: hourly.

@item
@samp{prefetch}: hourly.

@item
@samp{loose-objects}: daily.

@item
@samp{incremental-repack}: daily.
@end itemize

@samp{git maintenance register} will also disable foreground maintenance by
setting @samp{maintenance.auto = false} in the current repository. This config
setting will remain after a @samp{git maintenance unregister} command.

@item  run 
Run one or more maintenance tasks. If one or more @samp{--task} options are
specified, then those tasks are run in that order. Otherwise, the tasks are
determined by which @samp{maintenance.<task>.enabled} config options are true. By
default, only @samp{maintenance.gc.enabled} is true.

@item  start 
Start running maintenance on the current repository. This performs the same
config updates as the @samp{register} subcommand, then updates the background
scheduler to run @samp{git maintenance run --scheduled} on an hourly basis.

@item  stop 
Halt the background maintenance schedule. The current repository is not
removed from the list of maintained repositories, in case the background
maintenance is restarted later.

@item  unregister 
Remove the current repository from background maintenance. This only removes
the repository from the configured list. It does not stop the background
maintenance processes from running.
@end table

@noindent

@chapheading TASKS

@table @asis

@item  commit-graph 
The @samp{commit-graph} job updates the @samp{commit-graph} files incrementally, then
verifies that the written data is correct. The incremental write is safe to
run alongside concurrent Git processes since it will not expire @samp{.graph}
files that were in the previous @samp{commit-graph-chain} file. They will be
deleted by a later run based on the expiration delay.

@item  prefetch 
The @samp{prefetch} task updates the object directory with the latest objects
from all registered remotes. For each remote, a @samp{git fetch} command is
run. The configured refspec is modified to place all requested refs within
@samp{refs/prefetch/}. Also, tags are not updated.

This is done to avoid disrupting the remote-tracking branches. The end users
expect these refs to stay unmoved unless they initiate a fetch.  With
prefetch task, however, the objects necessary to complete a later real fetch
would already be obtained, so the real fetch would go faster.  In the ideal
case, it will just become an update to a bunch of remote-tracking branches
without any object transfer.

@item  gc 
Clean up unnecessary files and optimize the local repository. "GC" stands
for "garbage collection," but this task performs many smaller tasks. This
task can be expensive for large repositories, as it repacks all Git objects
into a single pack-file. It can also be disruptive in some situations, as it
deletes stale data. See git-gc(1) for more details on garbage
collection in Git.

@item  loose-objects 
The @samp{loose-objects} job cleans up loose objects and places them into
pack-files. In order to prevent race conditions with concurrent Git
commands, it follows a two-step process. First, it deletes any loose objects
that already exist in a pack-file; concurrent Git processes will examine the
pack-file for the object data instead of the loose object. Second, it
creates a new pack-file (starting with "loose-")  containing a batch of
loose objects. The batch size is limited to 50 thousand objects to prevent
the job from taking too long on a repository with many loose objects. The
@samp{gc} task writes unreachable objects as loose objects to be cleaned up by a
later step only if they are not re-added to a pack-file; for this reason it
is not advisable to enable both the @samp{loose-objects} and @samp{gc} tasks at the
same time.

@item  incremental-repack 
The @samp{incremental-repack} job repacks the object directory using the
@samp{multi-pack-index} feature. In order to prevent race conditions with
concurrent Git commands, it follows a two-step process. First, it calls @samp{git
multi-pack-index expire} to delete pack-files unreferenced by the
@samp{multi-pack-index} file. Second, it calls @samp{git multi-pack-index repack} to
select several small pack-files and repack them into a bigger one, and then
update the @samp{multi-pack-index} entries that refer to the small pack-files to
refer to the new pack-file. This prepares those small pack-files for
deletion upon the next run of @samp{git multi-pack-index expire}.  The selection
of the small pack-files is such that the expected size of the big pack-file
is at least the batch size; see the @samp{--batch-size} option for the @samp{repack}
subcommand in git-multi-pack-index(1). The default batch-size is
zero, which is a special case that attempts to repack all pack-files into a
single pack-file.

@item  pack-refs 
The @samp{pack-refs} task collects the loose reference files and collects them
into a single file. This speeds up operations that need to iterate across
many references. See git-pack-refs(1) for more information.
@end table

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--auto} 
When combined with the @samp{run} subcommand, run maintenance tasks only if
certain thresholds are met. For example, the @samp{gc} task runs when the number
of loose objects exceeds the number stored in the @samp{gc.auto} config setting,
or when the number of pack-files exceeds the @samp{gc.autoPackLimit} config
setting. Not compatible with the @samp{--schedule} option.

@item  @samp{--schedule} 
When combined with the @samp{run} subcommand, run maintenance tasks only if
certain time conditions are met, as specified by the
@samp{maintenance.<task>.schedule} config value for each @samp{<task>}.  This config
value specifies a number of seconds since the last time that task ran,
according to the @samp{maintenance.<task>.lastRun} config value. The tasks that
are tested are those provided by the @samp{--task=<task>} option(s) or those with
@samp{maintenance.<task>.enabled} set to true.

@item  @samp{--quiet} 
Do not report progress or other information over @samp{stderr}.

@item  @samp{--task=<task>} 
If this option is specified one or more times, then only run the specified
tasks in the specified order. If no @samp{--task=<task>} arguments are specified,
then only the tasks with @samp{maintenance.<task>.enabled} configured as @samp{true}
are considered.  See the @emph{TASKS} section for the list of accepted @samp{<task>}
values.

@item  @samp{--scheduler=auto|crontab|systemd-timer|launchctl|schtasks} 
When combined with the @samp{start} subcommand, specify the scheduler for running
the hourly, daily and weekly executions of @samp{git maintenance run}.  Possible
values for @samp{<scheduler>} are @samp{auto}, @samp{crontab} (POSIX), @samp{systemd-timer}
(Linux), @samp{launchctl} (macOS), and @samp{schtasks} (Windows). When @samp{auto} is
specified, the appropriate platform-specific scheduler is used; on Linux,
@samp{systemd-timer} is used if available, otherwise @samp{crontab}. Default is
@samp{auto}.
@end table

@noindent

@chapheading TROUBLESHOOTING

The @samp{git maintenance} command is designed to simplify the repository
maintenance patterns while minimizing user wait time during Git commands.  A
variety of configuration options are available to allow customizing this
process. The default maintenance options focus on operations that complete
quickly, even on large repositories.

Users may find some cases where scheduled maintenance tasks do not run as
frequently as intended. Each @samp{git maintenance run} command takes a lock on
the repository’s object database, and this prevents other concurrent @samp{git
maintenance run} commands from running on the same repository. Without this
safeguard, competing processes could leave the repository in an
unpredictable state.

The background maintenance schedule runs @samp{git maintenance run} processes on
an hourly basis. Each run executes the "hourly" tasks. At midnight, that
process also executes the "daily" tasks. At midnight on the first day of the
week, that process also executes the "weekly" tasks. A single process
iterates over each registered repository, performing the scheduled tasks for
that frequency. Depending on the number of registered repositories and their
sizes, this process may take longer than an hour.  In this case, multiple
@samp{git maintenance run} commands may run on the same repository at the same
time, colliding on the object database lock. This results in one of the two
tasks not running.

If you find that some maintenance windows are taking longer than one hour to
complete, then consider reducing the complexity of your maintenance
tasks. For example, the @samp{gc} task is much slower than the
@samp{incremental-repack} task. However, this comes at a cost of a slightly
larger object database. Consider moving more expensive tasks to be run less
frequently.

Expert users may consider scheduling their own maintenance tasks using a
different schedule than is available through @samp{git maintenance start} and Git
configuration options. These users should be aware of the object database
lock and how concurrent @samp{git maintenance run} commands behave.  Further, the
@samp{git gc} command should not be combined with @samp{git maintenance run}
commands. @samp{git gc} modifies the object database but does not take the lock
in the same way as @samp{git maintenance run}. If possible, use @samp{git maintenance
run --task=gc} instead of @samp{git gc}.

The following sections describe the mechanisms put in place to run
background maintenance by @samp{git maintenance start} and how to customize them.

@noindent

@chapheading BACKGROUND MAINTENANCE ON POSIX SYSTEMS

The standard mechanism for scheduling background tasks on POSIX systems is
cron(8). This tool executes commands based on a given schedule. The current
list of user-scheduled tasks can be found by running @samp{crontab -l}.  The
schedule written by @samp{git maintenance start} is similar to this:

@example
# BEGIN GIT MAINTENANCE SCHEDULE
# The following schedule was created by Git
# Any edits made in this region might be
# replaced in the future by a Git command.

0 1-23 * * * "/<path>/git" --exec-path="/<path>" for-each-repo --config=maintenance.repo maintenance run --schedule=hourly
0 0 * * 1-6 "/<path>/git" --exec-path="/<path>" for-each-repo --config=maintenance.repo maintenance run --schedule=daily
0 0 * * 0 "/<path>/git" --exec-path="/<path>" for-each-repo --config=maintenance.repo maintenance run --schedule=weekly

# END GIT MAINTENANCE SCHEDULE
@end example


The comments are used as a region to mark the schedule as written by Git.
Any modifications within this region will be completely deleted by @samp{git
maintenance stop} or overwritten by @samp{git maintenance start}.

The @samp{crontab} entry specifies the full path of the @samp{git} executable to
ensure that the executed @samp{git} command is the same one with which @samp{git
maintenance start} was issued independent of @samp{PATH}. If the same user runs
@samp{git maintenance start} with multiple Git executables, then only the latest
executable is used.

These commands use @samp{git for-each-repo --config=maintenance.repo} to run @samp{git
maintenance run --schedule=<frequency>} on each repository listed in the
multi-valued @samp{maintenance.repo} config option. These are typically loaded
from the user-specific global config. The @samp{git maintenance} process then
determines which maintenance tasks are configured to run on each repository
with each @samp{<frequency>} using the @samp{maintenance.<task>.schedule} config
options. These values are loaded from the global or repository config
values.

If the config values are insufficient to achieve your desired background
maintenance schedule, then you can create your own schedule. If you run
@samp{crontab -e}, then an editor will load with your user-specific @samp{cron}
schedule. In that editor, you can add your own schedule lines. You could
start by adapting the default schedule listed earlier, or you could read the
crontab(5) documentation for advanced scheduling techniques. Please do use
the full path and @samp{--exec-path} techniques from the default schedule to
ensure you are executing the correct binaries in your schedule.

@noindent

@chapheading BACKGROUND MAINTENANCE ON LINUX SYSTEMD SYSTEMS

While Linux supports @samp{cron}, depending on the distribution, @samp{cron} may be an
optional package not necessarily installed. On modern Linux distributions,
systemd timers are superseding it.

If user systemd timers are available, they will be used as a replacement of
@samp{cron}.

In this case, @samp{git maintenance start} will create user systemd timer units
and start the timers. The current list of user-scheduled tasks can be found
by running @samp{systemctl --user list-timers}. The timers written by @samp{git
maintenance start} are similar to this:

@example
$ systemctl --user list-timers
NEXT                         LEFT          LAST                         PASSED     UNIT                         ACTIVATES
Thu 2021-04-29 19:00:00 CEST 42min left    Thu 2021-04-29 18:00:11 CEST 17min ago  git-maintenance@@hourly.timer git-maintenance@@hourly.service
Fri 2021-04-30 00:00:00 CEST 5h 42min left Thu 2021-04-29 00:00:11 CEST 18h ago    git-maintenance@@daily.timer  git-maintenance@@daily.service
Mon 2021-05-03 00:00:00 CEST 3 days left   Mon 2021-04-26 00:00:11 CEST 3 days ago git-maintenance@@weekly.timer git-maintenance@@weekly.service
@end example


One timer is registered for each @samp{--schedule=<frequency>} option.

The definition of the systemd units can be inspected in the following files:

@example
~/.config/systemd/user/git-maintenance@@.timer
~/.config/systemd/user/git-maintenance@@.service
~/.config/systemd/user/timers.target.wants/git-maintenance@@hourly.timer
~/.config/systemd/user/timers.target.wants/git-maintenance@@daily.timer
~/.config/systemd/user/timers.target.wants/git-maintenance@@weekly.timer
@end example


@samp{git maintenance start} will overwrite these files and start the timer again
with @samp{systemctl --user}, so any customization should be done by creating a
drop-in file, i.e. a @samp{.conf} suffixed file in the
@samp{~/.config/systemd/user/git-maintenance@@.service.d} directory.

@samp{git maintenance stop} will stop the user systemd timers and delete the
above mentioned files.

For more details, see @samp{systemd.timer(5)}.

@noindent

@chapheading BACKGROUND MAINTENANCE ON MACOS SYSTEMS

While macOS technically supports @samp{cron}, using @samp{crontab -e} requires
elevated privileges and the executed process does not have a full user
context. Without a full user context, Git and its credential helpers cannot
access stored credentials, so some maintenance tasks are not functional.

Instead, @samp{git maintenance start} interacts with the @samp{launchctl} tool, which
is the recommended way to schedule timed jobs in macOS. Scheduling
maintenance through @samp{git maintenance (start|stop)} requires some @samp{launchctl}
features available only in macOS 10.11 or later.

Your user-specific scheduled tasks are stored as XML-formatted @samp{.plist}
files in @samp{~/Library/LaunchAgents/}. You can see the currently-registered
tasks using the following command:

@example
$ ls ~/Library/LaunchAgents/org.git-scm.git*
org.git-scm.git.daily.plist
org.git-scm.git.hourly.plist
org.git-scm.git.weekly.plist
@end example


One task is registered for each @samp{--schedule=<frequency>} option. To inspect
how the XML format describes each schedule, open one of these @samp{.plist} files
in an editor and inspect the @samp{<array>} element following the
@samp{<key>StartCalendarInterval</key>} element.

@samp{git maintenance start} will overwrite these files and register the tasks
again with @samp{launchctl}, so any customizations should be done by creating
your own @samp{.plist} files with distinct names. Similarly, the @samp{git maintenance
stop} command will unregister the tasks with @samp{launchctl} and delete the
@samp{.plist} files.

To create more advanced customizations to your background tasks, see
launchctl.plist(5) for more information.

@noindent

@chapheading BACKGROUND MAINTENANCE ON WINDOWS SYSTEMS

Windows does not support @samp{cron} and instead has its own system for
scheduling background tasks. The @samp{git maintenance start} command uses the
@samp{schtasks} command to submit tasks to this system. You can inspect all
background tasks using the Task Scheduler application. The tasks added by
Git have names of the form @samp{Git Maintenance (<frequency>)}.  The Task
Scheduler GUI has ways to inspect these tasks, but you can also export the
tasks to XML files and view the details there.

Note that since Git is a console application, these background tasks create
a console window visible to the current user. This can be changed manually
by selecting the "Run whether user is logged in or not" option in Task
Scheduler. This change requires a password input, which is why @samp{git
maintenance start} does not select it by default.

If you want to customize the background tasks, please rename the tasks so
future calls to @samp{git maintenance (start|stop)} do not overwrite your custom
tasks.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-merge-base,,,Top
@chapheading Name

git-merge-base — Find as good common ancestors as possible for a merge

@noindent

@chapheading Synopsis

@display
git merge-base [-a|--all] <commit> <commit>…
git merge-base [-a|--all] --octopus <commit>…
git merge-base --is-ancestor <commit> <commit>
git merge-base --independent <commit>…
git merge-base --fork-point <ref> [<commit>]
@end display


@noindent

@chapheading DESCRIPTION

@emph{git merge-base} finds best common ancestor(s) between two commits to use in
a three-way merge.  One common ancestor is @emph{better} than another common
ancestor if the latter is an ancestor of the former.  A common ancestor that
does not have any better common ancestor is a @emph{best common ancestor}, i.e. a
@emph{merge base}.  Note that there can be more than one merge base for a pair of
commits.

@noindent

@chapheading OPERATION MODES

As the most common special case, specifying only two commits on the command
line means computing the merge base between the given two commits.

More generally, among the two commits to compute the merge base from, one is
specified by the first commit argument on the command line; the other commit
is a (possibly hypothetical) commit that is a merge across all the remaining
commits on the command line.

As a consequence, the @emph{merge base} is not necessarily contained in each of
the commit arguments if more than two commits are specified. This is
different from git-show-branch(1) when used with the @samp{--merge-base}
option.

@table @asis

@item  @samp{--octopus} 
Compute the best common ancestors of all supplied commits, in preparation
for an n-way merge.  This mimics the behavior of @emph{git show-branch
--merge-base}.

@item  @samp{--independent} 
Instead of printing merge bases, print a minimal subset of the supplied
commits with the same ancestors.  In other words, among the commits given,
list those which cannot be reached from any other.  This mimics the behavior
of @emph{git show-branch --independent}.

@item  @samp{--is-ancestor} 
Check if the first <commit> is an ancestor of the second <commit>, and exit
with status 0 if true, or with status 1 if not.  Errors are signaled by a
non-zero status that is not 1.

@item  @samp{--fork-point} 
Find the point at which a branch (or any history that leads to <commit>)
forked from another branch (or any reference)  <ref>. This does not just
look for the common ancestor of the two commits, but also takes into account
the reflog of <ref> to see if the history leading to <commit> forked from an
earlier incarnation of the branch <ref> (see discussion on this mode below).
@end table

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-a} 
@itemx  @samp{--all} 
Output all merge bases for the commits, instead of just one.
@end table

@noindent

@chapheading DISCUSSION

Given two commits @emph{A} and @emph{B}, @samp{git merge-base A B} will output a commit
which is reachable from both @emph{A} and @emph{B} through the parent relationship.

For example, with this topology:

@example
         o---o---o---B
        /
---o---1---o---o---o---A
@end example

the merge base between @emph{A} and @emph{B} is @emph{1}.

Given three commits @emph{A}, @emph{B} and @emph{C}, @samp{git merge-base A B C} will compute
the merge base between @emph{A} and a hypothetical commit @emph{M}, which is a merge
between @emph{B} and @emph{C}.  For example, with this topology:

@example
       o---o---o---o---C
      /
     /   o---o---o---B
    /   /
---2---1---o---o---o---A
@end example

the result of @samp{git merge-base A B C} is @emph{1}.  This is because the equivalent
topology with a merge commit @emph{M} between @emph{B} and @emph{C} is:

@example
       o---o---o---o---o
      /                 \
     /   o---o---o---o---M
    /   /
---2---1---o---o---o---A
@end example

and the result of @samp{git merge-base A M} is @emph{1}.  Commit @emph{2} is also a common
ancestor between @emph{A} and @emph{M}, but @emph{1} is a better common ancestor, because
@emph{2} is an ancestor of @emph{1}.  Hence, @emph{2} is not a merge base.

The result of @samp{git merge-base --octopus A B C} is @emph{2}, because @emph{2} is the
best common ancestor of all commits.

When the history involves criss-cross merges, there can be more than one
@emph{best} common ancestor for two commits.  For example, with this topology:

@example
---1---o---A
    \ /
     X
    / \
---2---o---o---B
@end example

both @emph{1} and @emph{2} are merge-bases of A and B.  Neither one is better than the
other (both are @emph{best} merge bases).  When the @samp{--all} option is not given,
it is unspecified which best one is output.

A common idiom to check "fast-forward-ness" between two commits A and B is
(or at least used to be) to compute the merge base between A and B, and
check if it is the same as A, in which case, A is an ancestor of B.  You
will see this idiom used often in older scripts.

@example
A=$(git rev-parse --verify A)
if test "$A" = "$(git merge-base A B)"
then
        ... A is an ancestor of B ...
fi
@end example

In modern git, you can say this in a more direct way:

@example
if git merge-base --is-ancestor A B
then
        ... A is an ancestor of B ...
fi
@end example

instead.

@noindent

@chapheading Discussion on fork-point mode

After working on the @samp{topic} branch created with @samp{git switch -c topic
origin/master}, the history of remote-tracking branch @samp{origin/master} may
have been rewound and rebuilt, leading to a history of this shape:

@example
                 o---B2
                /
---o---o---B1--o---o---o---B (origin/master)
        \
         B0
          \
           D0---D1---D (topic)
@end example

where @samp{origin/master} used to point at commits B0, B1, B2 and now it points
at B, and your @samp{topic} branch was started on top of it back when
@samp{origin/master} was at B0, and you built three commits, D0, D1, and D, on
top of it.  Imagine that you now want to rebase the work you did on the
topic on top of the updated origin/master.

In such a case, @samp{git merge-base origin/master topic} would return the parent
of B0 in the above picture, but B0^..D is @strong{not} the range of commits you
would want to replay on top of B (it includes B0, which is not what you
wrote; it is a commit the other side discarded when it moved its tip from B0
to B1).

@samp{git merge-base --fork-point origin/master topic} is designed to help in
such a case.  It takes not only B but also B0, B1, and B2 (i.e. old tips of
the remote-tracking branches your repository’s reflog knows about) into
account to see on which commit your topic branch was built and finds B0,
allowing you to replay only the commits on your topic, excluding the commits
the other side later discarded.

Hence

@example
$ fork_point=$(git merge-base --fork-point origin/master topic)
@end example

will find B0, and

@example
$ git rebase --onto origin/master $fork_point topic
@end example

will replay D0, D1 and D on top of B to create a new history of this shape:

@example
                 o---B2
                /
---o---o---B1--o---o---o---B (origin/master)
        \                   \
         B0                  D0'--D1'--D' (topic - updated)
          \
           D0---D1---D (topic - old)
@end example

A caveat is that older reflog entries in your repository may be expired by
@samp{git gc}.  If B0 no longer appears in the reflog of the remote-tracking
branch @samp{origin/master}, the @samp{--fork-point} mode obviously cannot find it and
fails, avoiding to give a random and useless result (such as the parent of
B0, like the same command without the @samp{--fork-point} option gives).

Also, the remote-tracking branch you use the @samp{--fork-point} mode with must
be the one your topic forked from its tip.  If you forked from an older
commit than the tip, this mode would not find the fork point (imagine in the
above sample history B0 did not exist, origin/master started at B1, moved to
B2 and then B, and you forked your topic at origin/master^ when
origin/master was B1; the shape of the history would be the same as above,
without B0, and the parent of B1 is what @samp{git merge-base origin/master
topic} correctly finds, but the @samp{--fork-point} mode will not, because it is
not one of the commits that used to be at the tip of origin/master).

@noindent

@chapheading See also

git-rev-list(1), git-show-branch(1), git-merge(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-merge-file,,,Top
@chapheading Name

git-merge-file — 3方向ファイルマージを実行する

@noindent

@chapheading Synopsis

@display
git merge-file [-L <current-name> [-L <base-name> [-L <other-name>]]]
        [--ours|--theirs|--union] [-p|--stdout] [-q|--quiet] [--marker-size=<n>]
        [--[no-]diff3] <current-file> <base-file> <other-file>
@end display


@noindent

@chapheading DESCRIPTION

@emph{git merge-file} は、 @samp{<base-file>} から @samp{<other-file>} へのすべての変更を
@samp{<current-file>} に組み込みます。結果は通常 @samp{<current-file>} に入ります。 @emph{git merge-file}
は、元のファイルへの個別の変更を組み合わせるのに役立ちます。 @samp{<base-file>} がオリジナルであり、 @samp{<current-file>} と
@samp{<other-file>} の両方が @samp{<base-file>} の変更であるとすると、 @emph{git merge-file} は両方の変更を結合します。

@samp{<current-file>} と @samp{<other-file>}
の両方の行の共通セグメントに変更がある場合、競合が発生します。競合が見つかった場合、「git merge-file」は通常、警告を出力し、
@samp{<<<<<<<} および @samp{>>>>>>>} マーカーを含む行で競合を囲みます。典型的な競合は以下のようになります:

@example
<<<<<<< A
lines in file A
=======
lines in file B
>>>>>>> B
@end example

競合がある場合、ユーザーは結果を編集して、選択肢の1つを削除する必要があります。 ただし @samp{--ours} または @samp{--theirs} または
@samp{--union} オプションが有効な場合、これらの競合は、 @samp{<current-file>} の行または @samp{<other-file>}
の行または両方からの行を優先して解決します。競合マーカーの長さは @samp{--marker-size} オプションで指定できます。

このプログラムの終了値は、エラーの場合は負数であり、それ以外の場合は競合した数です(競合たくさんの場合は127に切り捨てられます)。マージがクリーンだった場合、終了値は0です。

@emph{git merge-file} は、RCS用マージの最小限のクローンになるように設計されています。つまり git(1)
に必要なRCSのマージ機能をすべて実装します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-L <label>} 
このオプションは最大3回指定でき、競合レポートで対応するファイル名の代わりに使用するラベルを指定します。 つまり @samp{git merge-file -L
x -L y -L z a b c} は、ファイルa、b、cからではなく、ファイルx、y、zから来たように見える出力を生成します。

@item  @samp{-p} 
@samp{<current-file>} を上書きする代わりに、結果を標準出力に送信します。

@item  @samp{-q} 
静かにします(quiet)。競合について警告しないでください。

@item  @samp{--diff3} 
「diff3」スタイルで競合を表示します。

@item  @samp{--ours} 
@itemx  @samp{--theirs} 
@itemx  @samp{--union} 
ファイルに競合を残す代わりに、競合部分の、our (または their または 両方)側に有利な競合解決します。
@end table

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git merge-file README.my README README.upstream} 
README以降のREADME.myとREADME.upstreamの変更を組み合わせて、それらをマージしようとし、結果をREADME.myに書き込みます。

@item  @samp{git merge-file -L a -L b -L c tmp/a123 tmp/b234 tmp/c345} 
tmp/a123 と tmp/c345 をベースの tmp/b234 とマージしますが、 @samp{tmp/a123} と @samp{tmp/c345}
の代わりにラベル @samp{a} と @samp{c} を使用します。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-merge-index,,,Top
@chapheading Name

git-merge-index — マージが必要なファイルのマージを実行します

@noindent

@chapheading Synopsis

@display
git merge-index [-o] [-q] <merge-program> (-a | [--] <file>*)
@end display


@noindent

@chapheading DESCRIPTION

これにより、インデックス内の <file>
が検索され、マージエントリがある場合は、それらのファイルのSHA-1ハッシュが引数1、2、3（ファイルがない場合は空の引数）として、および、引数4として
<file> が渡されます。引数1、2、3の3つのファイルのファイルモードは、引数5、6、7として渡されます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--} 
これ以後の引数をオプションとして解釈しないでください。

@item  @samp{-a} 
インデックス内のマージが必要なすべてのファイルに対してマージを実行します。

@item  @samp{-o} 
最初に失敗したマージで停止するのではなく、すべてを一度に実行します。前のマージでエラーが返された場合でもマージを続行し、すべてのマージ後にエラーコードを返します。

@item  @samp{-q} 
マージプログラムの失敗について文句を言わないでください(マージプログラムの失敗は通常、マージ中の競合を示します)。
これは、カスタムメッセージを送信する可能性のある磁器コマンド用です。
@end table

@emph{git merge-index} が複数の <file> (または @samp{-a}
)で呼び出された場合、それらを順番に処理し、マージがゼロ以外の終了コードを返した場合にのみ停止します。

通常、これは、RCSパッケージの「マージ」コマンドのGitの模倣を呼び出すスクリプトで実行されます。

@emph{git merge-one-file} というサンプルスクリプトがディストリビューションに含まれています。

警告！警告！警告！
Gitの「オブジェクトのマージ順序」は、RCSの「マージ」プログラムのオブジェクトのマージ順序とは異なります。上記の順番では、オリジナルが最初です。しかし、3方向マージプログラム「マージ」の引数の順序は、オリジナルを中央に置きます。理由は聞かないで…

例:

@example
torvalds@@ppc970:~/merge-test> git merge-index cat MM
This is MM from the original tree.              # original
This is modified MM in the branch A.            # merge1
This is modified MM in the branch B.            # merge2
This is modified MM in the branch B.            # current contents
@end example


または

@example
torvalds@@ppc970:~/merge-test> git merge-index cat AA MM
cat: : No such file or directory
This is added AA in the branch A.
This is added AA in the branch B.
This is added AA in the branch B.
fatal: merge program failed
@end example


後者の例は、何かがエラーを返した後、「git
merge-index」がマージの試行を停止する方法を示しています(つまり、「cat」は元のファイルに存在しなかったため、AAファイルのエラーを返しました。
@emph{git merge-index} はMMをマージしようとさえしませんでした)。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-merge-one-file,,,Top
@chapheading Name

git-merge-one-file — git-merge-indexで使用する標準のヘルパープログラム

@noindent

@chapheading Synopsis

@display
git merge-one-file
@end display


@noindent

@chapheading DESCRIPTION

これは、 @emph{git merge-index} で行われた簡単なマージの後にマージを解決するために、 @emph{git read-tree -m}
で使用する標準のヘルパープログラムです。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-merge-tree,,,Top
@chapheading Name

git-merge-tree — インデックスに触れずに(without touching)3者間マージを表示する

@noindent

@chapheading Synopsis

@display
git merge-tree <base-tree> <branch1> <branch2>
@end display


@noindent

@chapheading DESCRIPTION

3つのツリーっぽいものを読み取り、些細なマージ結果と競合するステージを標準出力に出力します。 これは、3者間の @emph{git read-tree -m}
と似ていますが、結果をインデックスに格納する代わりに、コマンドはエントリを標準出力に出力します。

これは、インデックスの外部でマージ結果を計算し、結果をインデックスに戻すために、より高いレベルのスクリプトによって使用されることを意図しています。
このため、コマンドからの出力では、 <branch1> ツリーに一致するエントリが省略されます。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-merge,,,Top
@chapheading Name

git-merge — Join two or more development histories together

@noindent

@chapheading Synopsis

@display
git merge [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]
        [--no-verify] [-s <strategy>] [-X <strategy-option>] [-S[<keyid>]]
        [--[no-]allow-unrelated-histories]
        [--[no-]rerere-autoupdate] [-m <msg>] [-F <file>] [<commit>…]
git merge (--continue | --abort | --quit)
@end display


@noindent

@chapheading DESCRIPTION

Incorporates changes from the named commits (since the time their histories
diverged from the current branch) into the current branch.  This command is
used by @emph{git pull} to incorporate changes from another repository and can be
used by hand to merge changes from one branch into another.

Assume the following history exists and the current branch is "@samp{master}":

@example
          A---B---C topic
         /
    D---E---F---G master
@end example


Then "@samp{git merge topic}" will replay the changes made on the @samp{topic} branch
since it diverged from @samp{master} (i.e., @samp{E}) until its current commit (@samp{C})
on top of @samp{master}, and record the result in a new commit along with the
names of the two parent commits and a log message from the user describing
the changes.

@example
          A---B---C topic
         /         \
    D---E---F---G---H master
@end example


The second syntax ("@samp{git merge --abort}") can only be run after the merge
has resulted in conflicts. @emph{git merge --abort} will abort the merge process
and try to reconstruct the pre-merge state. However, if there were
uncommitted changes when the merge started (and especially if those changes
were further modified after the merge was started), @emph{git merge --abort} will
in some cases be unable to reconstruct the original (pre-merge)
changes. Therefore:

@strong{Warning}: Running @emph{git merge} with non-trivial uncommitted changes is
discouraged: while possible, it may leave you in a state that is hard to
back out of in the case of a conflict.

The third syntax ("@samp{git merge --continue}") can only be run after the merge
has resulted in conflicts.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--commit} 
@itemx  @samp{--no-commit} 
Perform the merge and commit the result. This option can be used to override
--no-commit.

With --no-commit perform the merge and stop just before creating a merge
commit, to give the user a chance to inspect and further tweak the merge
result before committing.

Note that fast-forward updates do not create a merge commit and therefore
there is no way to stop those merges with --no-commit.  Thus, if you want to
ensure your branch is not changed or updated by the merge command, use
--no-ff with --no-commit.

@item  @samp{--edit} 
@itemx  @samp{-e} 
@itemx  @samp{--no-edit} 
Invoke an editor before committing successful mechanical merge to further
edit the auto-generated merge message, so that the user can explain and
justify the merge. The @samp{--no-edit} option can be used to accept the
auto-generated message (this is generally discouraged).
The @samp{--edit} (or @samp{-e}) option is still useful if you are giving a draft
message with the @samp{-m} option from the command line and want to edit it in
the editor.

Older scripts may depend on the historical behaviour of not allowing the
user to edit the merge log message. They will see an editor opened when they
run @samp{git merge}. To make it easier to adjust such scripts to the updated
behaviour, the environment variable @samp{GIT_MERGE_AUTOEDIT} can be set to @samp{no}
at the beginning of them.

@item  @samp{--cleanup=<mode>} 
This option determines how the merge message will be cleaned up before
committing. See git-commit(1) for more details. In addition, if the
@emph{<mode>} is given a value of @samp{scissors}, scissors will be appended to
@samp{MERGE_MSG} before being passed on to the commit machinery in the case of a
merge conflict.

@item  @samp{--ff} 
@itemx  @samp{--no-ff} 
@itemx  @samp{--ff-only} 
Specifies how a merge is handled when the merged-in history is already a
descendant of the current history.  @samp{--ff} is the default unless merging an
annotated (and possibly signed) tag that is not stored in its natural place
in the @samp{refs/tags/} hierarchy, in which case @samp{--no-ff} is assumed.

With @samp{--ff}, when possible resolve the merge as a fast-forward (only update
the branch pointer to match the merged branch; do not create a merge
commit).  When not possible (when the merged-in history is not a descendant
of the current history), create a merge commit.

With @samp{--no-ff}, create a merge commit in all cases, even when the merge
could instead be resolved as a fast-forward.

With @samp{--ff-only}, resolve the merge as a fast-forward when possible.  When
not possible, refuse to merge and exit with a non-zero status.

@item  @samp{-S[<keyid>]} 
@itemx  @samp{--gpg-sign[=<keyid>]} 
@itemx  @samp{--no-gpg-sign} 
GPG-sign the resulting merge commit. The @samp{keyid} argument is optional and
defaults to the committer identity; if specified, it must be stuck to the
option without a space. @samp{--no-gpg-sign} is useful to countermand both
@samp{commit.gpgSign} configuration variable, and earlier @samp{--gpg-sign}.

@item  @samp{--log[=<n>]} 
@itemx  @samp{--no-log} 
In addition to branch names, populate the log message with one-line
descriptions from at most <n> actual commits that are being merged. See also
git-fmt-merge-msg(1).

With --no-log do not list one-line descriptions from the actual commits
being merged.

@item  @samp{--signoff} 
@itemx  @samp{--no-signoff} 
コミットログメッセージの最後に、コミッターによる「Signed-off-by」トレーラーを追加します。signoffの意味は、コミットしているプロジェクトによって異なります。たとえば、コミッターがプロジェクトのライセンスに基づいて作品を提出する権利を持っていることを証明したり、開発者の原産地証明書などの寄稿者の代表に同意したりする場合があります。(LinuxカーネルおよびGitプロジェクトで使用されるものについては、http：//developercertificate.orgを参照してください)。プロジェクトでsignoffがどのように使用されるかを理解するには、貢献しているプロジェクトのドキュメントまたはリーダーシップ(leadership)を参照してください。

@samp{--no-signoff} オプションを使用すると、コマンドラインで以前の @samp{--signoff} オプションを無効にすることができます。

@item  @samp{--stat} 
@itemx  @samp{-n} 
@itemx  @samp{--no-stat} 
Show a diffstat at the end of the merge. The diffstat is also controlled by
the configuration option merge.stat.

With -n or --no-stat do not show a diffstat at the end of the merge.

@item  @samp{--squash} 
@itemx  @samp{--no-squash} 
Produce the working tree and index state as if a real merge happened (except
for the merge information), but do not actually make a commit, move the
@samp{HEAD}, or record @samp{$GIT_DIR/MERGE_HEAD} (to cause the next @samp{git commit}
command to create a merge commit).  This allows you to create a single
commit on top of the current branch whose effect is the same as merging
another branch (or more in case of an octopus).

With --no-squash perform the merge and commit the result. This option can be
used to override --squash.

With --squash, --commit is not allowed, and will fail.

@item  @samp{--no-verify} 
This option bypasses the pre-merge and commit-msg hooks.  See also
githooks(5).

@item  @samp{-s <strategy>} 
@itemx  @samp{--strategy=<strategy>} 
Use the given merge strategy; can be supplied more than once to specify them
in the order they should be tried.  If there is no @samp{-s} option, a built-in
list of strategies is used instead (@samp{ort} when merging a single head,
@samp{octopus} otherwise).

@item  @samp{-X <option>} 
@itemx  @samp{--strategy-option=<option>} 
Pass merge strategy specific option through to the merge strategy.

@item  @samp{--verify-signatures} 
@itemx  @samp{--no-verify-signatures} 
Verify that the tip commit of the side branch being merged is signed with a
valid key, i.e. a key that has a valid uid: in the default trust model, this
means the signing key has been signed by a trusted key.  If the tip commit
of the side branch is not signed with a valid key, the merge is aborted.

@item  @samp{--summary} 
@itemx  @samp{--no-summary} 
Synonyms to --stat and --no-stat; these are deprecated and will be removed
in the future.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Operate quietly. Implies --no-progress.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Be verbose.

@item  @samp{--progress} 
@itemx  @samp{--no-progress} 
Turn progress on/off explicitly. If neither is specified, progress is shown
if standard error is connected to a terminal.  Note that not all merge
strategies may support progress reporting.

@item  @samp{--autostash} 
@itemx  @samp{--no-autostash} 
Automatically create a temporary stash entry before the operation begins,
record it in the special ref @samp{MERGE_AUTOSTASH} and apply it after the
operation ends.  This means that you can run the operation on a dirty
worktree.  However, use with care: the final stash application after a
successful merge might result in non-trivial conflicts.

@item  @samp{--allow-unrelated-histories} 
By default, @samp{git merge} command refuses to merge histories that do not share
a common ancestor.  This option can be used to override this safety when
merging histories of two projects that started their lives independently. As
that is a very rare occasion, no configuration variable to enable this by
default exists and will not be added.

@item  @samp{-m <msg>} 
Set the commit message to be used for the merge commit (in case one is
created).

If @samp{--log} is specified, a shortlog of the commits being merged will be
appended to the specified message.

The @emph{git fmt-merge-msg} command can be used to give a good default for
automated @emph{git merge} invocations. The automated message can include the
branch description.

@item  @samp{-F <file>} 
@itemx  @samp{--file=<file>} 
Read the commit message to be used for the merge commit (in case one is
created).

If @samp{--log} is specified, a shortlog of the commits being merged will be
appended to the specified message.

@item  @samp{--rerere-autoupdate} 
@itemx  @samp{--no-rerere-autoupdate} 
Allow the rerere mechanism to update the index with the result of
auto-conflict resolution if possible.

@item  @samp{--overwrite-ignore} 
@itemx  @samp{--no-overwrite-ignore} 
Silently overwrite ignored files from the merge result. This is the default
behavior. Use @samp{--no-overwrite-ignore} to abort.

@item  @samp{--abort} 
Abort the current conflict resolution process, and try to reconstruct the
pre-merge state. If an autostash entry is present, apply it to the worktree.

If there were uncommitted worktree changes present when the merge started,
@emph{git merge --abort} will in some cases be unable to reconstruct these
changes. It is therefore recommended to always commit or stash your changes
before running @emph{git merge}.

@emph{git merge --abort} is equivalent to @emph{git reset --merge} when @samp{MERGE_HEAD}
is present unless @samp{MERGE_AUTOSTASH} is also present in which case @emph{git merge
--abort} applies the stash entry to the worktree whereas @emph{git reset --merge}
will save the stashed changes in the stash list.

@item  @samp{--quit} 
Forget about the current merge in progress. Leave the index and the working
tree as-is. If @samp{MERGE_AUTOSTASH} is present, the stash entry will be saved
to the stash list.

@item  @samp{--continue} 
After a @emph{git merge} stops due to conflicts you can conclude the merge by
running @emph{git merge --continue} (see "HOW TO RESOLVE CONFLICTS" section
below).

@item  <commit>… 
Commits, usually other branch heads, to merge into our branch.  Specifying
more than one commit will create a merge with more than two parents
(affectionately called an Octopus merge).

If no commit is given from the command line, merge the remote-tracking
branches that the current branch is configured to use as its upstream.  See
also the configuration section of this manual page.

When @samp{FETCH_HEAD} (and no other commit) is specified, the branches recorded
in the @samp{.git/FETCH_HEAD} file by the previous invocation of @samp{git fetch} for
merging are merged to the current branch.
@end table

@noindent

@chapheading PRE-MERGE CHECKS

Before applying outside changes, you should get your own work in good shape
and committed locally, so it will not be clobbered if there are conflicts.
See also git-stash(1).  @emph{git pull} and @emph{git merge} will stop without
doing anything when local uncommitted changes overlap with files that @emph{git
pull}/@emph{git merge} may need to update.

To avoid recording unrelated changes in the merge commit, @emph{git pull} and
@emph{git merge} will also abort if there are any changes registered in the index
relative to the @samp{HEAD} commit.  (Special narrow exceptions to this rule may
exist depending on which merge strategy is in use, but generally, the index
must match HEAD.)

If all named commits are already ancestors of @samp{HEAD}, @emph{git merge} will exit
early with the message "Already up to date."

@noindent

@chapheading FAST-FORWARD MERGE

Often the current branch head is an ancestor of the named commit.  This is
the most common case especially when invoked from @emph{git pull}: you are
tracking an upstream repository, you have committed no local changes, and
now you want to update to a newer upstream revision.  In this case, a new
commit is not needed to store the combined history; instead, the @samp{HEAD}
(along with the index) is updated to point at the named commit, without
creating an extra merge commit.

This behavior can be suppressed with the @samp{--no-ff} option.

@noindent

@chapheading TRUE MERGE

Except in a fast-forward merge (see above), the branches to be merged must
be tied together by a merge commit that has both of them as its parents.

A merged version reconciling the changes from all branches to be merged is
committed, and your @samp{HEAD}, index, and working tree are updated to it.  It
is possible to have modifications in the working tree as long as they do not
overlap; the update will preserve them.

When it is not obvious how to reconcile the changes, the following happens:

@enumerate 

@item
The @samp{HEAD} pointer stays the same.

@item
The @samp{MERGE_HEAD} ref is set to point to the other branch head.

@item
Paths that merged cleanly are updated both in the index file and in your
working tree.

@item
For conflicting paths, the index file records up to three versions: stage 1
stores the version from the common ancestor, stage 2 from @samp{HEAD}, and stage
3 from @samp{MERGE_HEAD} (you can inspect the stages with @samp{git ls-files -u}).
The working tree files contain the result of the "merge" program; i.e. 3-way
merge results with familiar conflict markers @samp{<<<} @samp{===} @samp{>>>}.

@item
No other changes are made.  In particular, the local modifications you had
before you started merge will stay the same and the index entries for them
stay as they were, i.e. matching @samp{HEAD}.
@end enumerate

If you tried a merge which resulted in complex conflicts and want to start
over, you can recover with @samp{git merge --abort}.

@noindent

@chapheading MERGING TAG

When merging an annotated (and possibly signed) tag, Git always creates a
merge commit even if a fast-forward merge is possible, and the commit
message template is prepared with the tag message.  Additionally, if the tag
is signed, the signature check is reported as a comment in the message
template. See also git-tag(1).

When you want to just integrate with the work leading to the commit that
happens to be tagged, e.g. synchronizing with an upstream release point, you
may not want to make an unnecessary merge commit.

In such a case, you can "unwrap" the tag yourself before feeding it to @samp{git
merge}, or pass @samp{--ff-only} when you do not have any work on your own. e.g.

@example
git fetch origin
git merge v1.2.3^0
git merge --ff-only v1.2.3
@end example


@noindent

@chapheading HOW CONFLICTS ARE PRESENTED

During a merge, the working tree files are updated to reflect the result of
the merge.  Among the changes made to the common ancestor’s version,
non-overlapping ones (that is, you changed an area of the file while the
other side left that area intact, or vice versa) are incorporated in the
final result verbatim.  When both sides made changes to the same area,
however, Git cannot randomly pick one side over the other, and asks you to
resolve it by leaving what both sides did to that area.

By default, Git uses the same style as the one used by the "merge" program
from the RCS suite to present such a conflicted hunk, like this:

@example
Here are lines that are either unchanged from the common
ancestor, or cleanly resolved because only one side changed.
<<<<<<< yours:sample.txt
Conflict resolution is hard;
let's go shopping.
=======
Git makes conflict resolution easy.
>>>>>>> theirs:sample.txt
And here is another line that is cleanly resolved or unmodified.
@end example


The area where a pair of conflicting changes happened is marked with markers
@samp{<<<<<<<}, @samp{=======}, and @samp{>>>>>>>}.  The part before the @samp{=======} is
typically your side, and the part afterwards is typically their side.

The default format does not show what the original said in the conflicting
area.  You cannot tell how many lines are deleted and replaced with Barbie’s
remark on your side.  The only thing you can tell is that your side wants to
say it is hard and you’d prefer to go shopping, while the other side wants
to claim it is easy.

An alternative style can be used by setting the "merge.conflictStyle"
configuration variable to "diff3".  In "diff3" style, the above conflict may
look like this:

@example
Here are lines that are either unchanged from the common
ancestor, or cleanly resolved because only one side changed.
<<<<<<< yours:sample.txt
Conflict resolution is hard;
let's go shopping.
|||||||
Conflict resolution is hard.
=======
Git makes conflict resolution easy.
>>>>>>> theirs:sample.txt
And here is another line that is cleanly resolved or unmodified.
@end example


In addition to the @samp{<<<<<<<}, @samp{=======}, and @samp{>>>>>>>} markers, it uses
another @samp{|||||||} marker that is followed by the original text.  You can
tell that the original just stated a fact, and your side simply gave in to
that statement and gave up, while the other side tried to have a more
positive attitude.  You can sometimes come up with a better resolution by
viewing the original.

@noindent

@chapheading HOW TO RESOLVE CONFLICTS

After seeing a conflict, you can do two things:

@itemize 

@item
Decide not to merge.  The only clean-ups you need are to reset the index
file to the @samp{HEAD} commit to reverse 2. and to clean up working tree changes
made by 2. and 3.; @samp{git merge --abort} can be used for this.

@item
Resolve the conflicts.  Git will mark the conflicts in the working tree.
Edit the files into shape and @emph{git add} them to the index.  Use @emph{git commit}
or @emph{git merge --continue} to seal the deal. The latter command checks
whether there is a (interrupted) merge in progress before calling @emph{git
commit}.
@end itemize

You can work through the conflict with a number of tools:

@itemize 

@item
Use a mergetool.  @samp{git mergetool} to launch a graphical mergetool which will
work you through the merge.

@item
Look at the diffs.  @samp{git diff} will show a three-way diff, highlighting
changes from both the @samp{HEAD} and @samp{MERGE_HEAD} versions.

@item
Look at the diffs from each branch. @samp{git log --merge -p <path>} will show
diffs first for the @samp{HEAD} version and then the @samp{MERGE_HEAD} version.

@item
Look at the originals.  @samp{git show :1:filename} shows the common ancestor,
@samp{git show :2:filename} shows the @samp{HEAD} version, and @samp{git show :3:filename}
shows the @samp{MERGE_HEAD} version.
@end itemize

@noindent

@chapheading EXAMPLES

@itemize 

@item
Merge branches @samp{fixes} and @samp{enhancements} on top of the current branch,
making an octopus merge:

@example
$ git merge fixes enhancements
@end example


@item
Merge branch @samp{obsolete} into the current branch, using @samp{ours} merge
strategy:

@example
$ git merge -s ours obsolete
@end example


@item
Merge branch @samp{maint} into the current branch, but do not make a new commit
automatically:

@example
$ git merge --no-commit maint
@end example


This can be used when you want to include further changes to the merge, or
want to write your own merge commit message.

You should refrain from abusing this option to sneak substantial changes
into a merge commit.  Small fixups like bumping release/version name would
be acceptable.
@end itemize

@noindent

@chapheading MERGE STRATEGIES

The merge mechanism (@samp{git merge} and @samp{git pull} commands) allows the backend
@emph{merge strategies} to be chosen with @samp{-s} option.  Some strategies can also
take their own options, which can be passed by giving @samp{-X<option>} arguments
to @samp{git merge} and/or @samp{git pull}.

@table @asis

@item  ort 
This is the default merge strategy when pulling or merging one branch.  This
strategy can only resolve two heads using a 3-way merge algorithm.  When
there is more than one common ancestor that can be used for 3-way merge, it
creates a merged tree of the common ancestors and uses that as the reference
tree for the 3-way merge.  This has been reported to result in fewer merge
conflicts without causing mismerges by tests done on actual merge commits
taken from Linux 2.6 kernel development history.  Additionally this strategy
can detect and handle merges involving renames.  It does not make use of
detected copies.  The name for this algorithm is an acronym ("Ostensibly
Recursive’s Twin") and came from the fact that it was written as a
replacement for the previous default algorithm, @samp{recursive}.

The @emph{ort} strategy can take the following options:

@table @asis

@item  ours 
This option forces conflicting hunks to be auto-resolved cleanly by favoring
@emph{our} version.  Changes from the other tree that do not conflict with our
side are reflected in the merge result.  For a binary file, the entire
contents are taken from our side.

This should not be confused with the @emph{ours} merge strategy, which does not
even look at what the other tree contains at all.  It discards everything
the other tree did, declaring @emph{our} history contains all that happened in
it.

@item  theirs 
This is the opposite of @emph{ours}; note that, unlike @emph{ours}, there is no
@emph{theirs} merge strategy to confuse this merge option with.

@item  ignore-space-change 
@itemx  ignore-all-space 
@itemx  ignore-space-at-eol 
@itemx  ignore-cr-at-eol 
Treats lines with the indicated type of whitespace change as unchanged for
the sake of a three-way merge.  Whitespace changes mixed with other changes
to a line are not ignored.  See also git-diff(1) @samp{-b}, @samp{-w},
@samp{--ignore-space-at-eol}, and @samp{--ignore-cr-at-eol}.

@itemize 

@item
If @emph{their} version only introduces whitespace changes to a line, @emph{our}
version is used;

@item
If @emph{our} version introduces whitespace changes but @emph{their} version includes
a substantial change, @emph{their} version is used;

@item
Otherwise, the merge proceeds in the usual way.
@end itemize

@item  renormalize 
This runs a virtual check-out and check-in of all three stages of a file
when resolving a three-way merge.  This option is meant to be used when
merging branches with different clean filters or end-of-line normalization
rules.  See "Merging branches with differing checkin/checkout attributes" in
gitattributes(5) for details.

@item  no-renormalize 
Disables the @samp{renormalize} option.  This overrides the @samp{merge.renormalize}
configuration variable.

@item  find-renames[=<n>] 
Turn on rename detection, optionally setting the similarity threshold.  This
is the default. This overrides the @emph{merge.renames} configuration variable.
See also git-diff(1) @samp{--find-renames}.

@item  rename-threshold=<n> 
Deprecated synonym for @samp{find-renames=<n>}.

@item  subtree[=<path>] 
This option is a more advanced form of @emph{subtree} strategy, where the
strategy makes a guess on how two trees must be shifted to match with each
other when merging.  Instead, the specified path is prefixed (or stripped
from the beginning) to make the shape of two trees to match.
@end table

@item  recursive 
This can only resolve two heads using a 3-way merge algorithm.  When there
is more than one common ancestor that can be used for 3-way merge, it
creates a merged tree of the common ancestors and uses that as the reference
tree for the 3-way merge.  This has been reported to result in fewer merge
conflicts without causing mismerges by tests done on actual merge commits
taken from Linux 2.6 kernel development history.  Additionally this can
detect and handle merges involving renames.  It does not make use of
detected copies.  This was the default strategy for resolving two heads from
Git v0.99.9k until v2.33.0.

The @emph{recursive} strategy takes the same options as @emph{ort}.  However, there
are three additional options that @emph{ort} ignores (not documented above) that
are potentially useful with the @emph{recursive} strategy:

@table @asis

@item  patience 
Deprecated synonym for @samp{diff-algorithm=patience}.

@item  diff-algorithm=[patience|minimal|histogram|myers] 
Use a different diff algorithm while merging, which can help avoid mismerges
that occur due to unimportant matching lines (such as braces from distinct
functions).  See also git-diff(1) @samp{--diff-algorithm}.  Note that
@samp{ort} specifically uses @samp{diff-algorithm=histogram}, while @samp{recursive}
defaults to the @samp{diff.algorithm} config setting.

@item  no-renames 
Turn off rename detection. This overrides the @samp{merge.renames} configuration
variable.  See also git-diff(1) @samp{--no-renames}.
@end table

@item  resolve 
This can only resolve two heads (i.e. the current branch and another branch
you pulled from) using a 3-way merge algorithm.  It tries to carefully
detect criss-cross merge ambiguities.  It does not handle renames.

@item  octopus 
This resolves cases with more than two heads, but refuses to do a complex
merge that needs manual resolution.  It is primarily meant to be used for
bundling topic branch heads together.  This is the default merge strategy
when pulling or merging more than one branch.

@item  ours 
This resolves any number of heads, but the resulting tree of the merge is
always that of the current branch head, effectively ignoring all changes
from all other branches.  It is meant to be used to supersede old
development history of side branches.  Note that this is different from the
-Xours option to the @emph{recursive} merge strategy.

@item  subtree 
This is a modified @samp{ort} strategy. When merging trees A and B, if B
corresponds to a subtree of A, B is first adjusted to match the tree
structure of A, instead of reading the trees at the same level. This
adjustment is also done to the common ancestor tree.
@end table

With the strategies that use 3-way merge (including the default, @emph{ort}), if
a change is made on both branches, but later reverted on one of the
branches, that change will be present in the merged result; some people find
this behavior confusing.  It occurs because only the heads and the merge
base are considered when performing a merge, not the individual commits.
The merge algorithm therefore considers the reverted change as no change at
all, and substitutes the changed version instead.

@noindent

@chapheading CONFIGURATION

@table @asis

@item  merge.conflictStyle 
Specify the style in which conflicted hunks are written out to working tree
files upon merge.  The default is "merge", which shows a @samp{<<<<<<<} conflict
marker, changes made by one side, a @samp{=======} marker, changes made by the
other side, and then a @samp{>>>>>>>} marker.  An alternate style, "diff3", adds
a @samp{|||||||} marker and the original text before the @samp{=======} marker.

@item  merge.defaultToUpstream 
If merge is called without any commit argument, merge the upstream branches
configured for the current branch by using their last observed values stored
in their remote-tracking branches.  The values of the @samp{branch.<current
branch>.merge} that name the branches at the remote named by
@samp{branch.<current branch>.remote} are consulted, and then they are mapped via
@samp{remote.<remote>.fetch} to their corresponding remote-tracking branches, and
the tips of these tracking branches are merged. Defaults to true.

@item  merge.ff 
By default, Git does not create an extra merge commit when merging a commit
that is a descendant of the current commit. Instead, the tip of the current
branch is fast-forwarded. When set to @samp{false}, this variable tells Git to
create an extra merge commit in such a case (equivalent to giving the
@samp{--no-ff} option from the command line). When set to @samp{only}, only such
fast-forward merges are allowed (equivalent to giving the @samp{--ff-only} option
from the command line).

@item  merge.verifySignatures 
If true, this is equivalent to the --verify-signatures command line
option. See git-merge(1) for details.

@item  merge.branchdesc 
ブランチ名に加えて、それらに関連付けられたブランチの説明テキストをログメッセージに入力します。デフォルトはfalseです。

@item  merge.log 
ブランチ名に加えて、マージされる実際のコミットからの最大「指定の数」の親コミットの1行説明をログメッセージに入力します。デフォルトはfalseで、trueは20の同義語です。

@item  merge.suppressDest 
統合ブランチの名前に一致するグロブをこの複数値の構成変数(multi-valued configuration
variable)に追加することにより、これらの統合ブランチへのマージに対して計算されるデフォルトのマージメッセージは、タイトルから「into
<branch name>」を省略します。

空の値を持つ要素を使用して、以前の構成エントリから蓄積されたグロブのリストをクリアできます。 @samp{merge.suppressDest}
変数が定義されていない場合、下位互換性のためにデフォルト値の @samp{master} が使用されます。

@item  merge.renameLimit 
The number of files to consider in the exhaustive portion of rename
detection during a merge.  If not specified, defaults to the value of
diff.renameLimit.  If neither merge.renameLimit nor diff.renameLimit are
specified, currently defaults to 7000.  This setting has no effect if rename
detection is turned off.

@item  merge.renames 
Whether Git detects renames.  If set to "false", rename detection is
disabled. If set to "true", basic rename detection is enabled.  Defaults to
the value of diff.renames.

@item  merge.directoryRenames 
Whether Git detects directory renames, affecting what happens at merge time
to new files added to a directory on one side of history when that directory
was renamed on the other side of history.  If merge.directoryRenames is set
to "false", directory rename detection is disabled, meaning that such new
files will be left behind in the old directory.  If set to "true", directory
rename detection is enabled, meaning that such new files will be moved into
the new directory.  If set to "conflict", a conflict will be reported for
such paths.  If merge.renames is false, merge.directoryRenames is ignored
and treated as false.  Defaults to "conflict".

@item  merge.renormalize 
Tell Git that canonical representation of files in the repository has
changed over time (e.g. earlier commits record text files with CRLF line
endings, but recent ones use LF line endings).  In such a repository, Git
can convert the data recorded in commits to a canonical form before
performing a merge to reduce unnecessary conflicts.  For more information,
see section "Merging branches with differing checkin/checkout attributes" in
gitattributes(5).

@item  merge.stat 
Whether to print the diffstat between ORIG_HEAD and the merge result at the
end of the merge.  True by default.

@item  merge.autoStash 
When set to true, automatically create a temporary stash entry before the
operation begins, and apply it after the operation ends.  This means that
you can run merge on a dirty worktree.  However, use with care: the final
stash application after a successful merge might result in non-trivial
conflicts.  This option can be overridden by the @samp{--no-autostash} and
@samp{--autostash} options of git-merge(1).  Defaults to false.

@item  merge.tool 
Controls which merge tool is used by git-mergetool(1).  The list
below shows the valid built-in values.  Any other value is treated as a
custom merge tool and requires that a corresponding mergetool.<tool>.cmd
variable is defined.

@item  merge.guitool 
Controls which merge tool is used by git-mergetool(1) when the
-g/--gui flag is specified. The list below shows the valid built-in values.
Any other value is treated as a custom merge tool and requires that a
corresponding mergetool.<guitool>.cmd variable is defined.

@itemize 

@item
araxis

@item
bc

@item
bc3

@item
bc4

@item
codecompare

@item
deltawalker

@item
diffmerge

@item
diffuse

@item
ecmerge

@item
emerge

@item
examdiff

@item
guiffy

@item
gvimdiff

@item
gvimdiff1

@item
gvimdiff2

@item
gvimdiff3

@item
kdiff3

@item
meld

@item
nvimdiff

@item
nvimdiff1

@item
nvimdiff2

@item
nvimdiff3

@item
opendiff

@item
p4merge

@item
smerge

@item
tkdiff

@item
tortoisemerge

@item
vimdiff

@item
vimdiff1

@item
vimdiff2

@item
vimdiff3

@item
winmerge

@item
xxdiff
@end itemize

@item  merge.verbosity 
Controls the amount of output shown by the recursive merge strategy.  Level
0 outputs nothing except a final error message if conflicts were
detected. Level 1 outputs only conflicts, 2 outputs conflicts and file
changes.  Level 5 and above outputs debugging information.  The default is
level 2.  Can be overridden by the @samp{GIT_MERGE_VERBOSITY} environment
variable.

@item  merge.<driver>.name 
Defines a human-readable name for a custom low-level merge driver.  See
gitattributes(5) for details.

@item  merge.<driver>.driver 
Defines the command that implements a custom low-level merge driver.  See
gitattributes(5) for details.

@item  merge.<driver>.recursive 
Names a low-level merge driver to be used when performing an internal merge
between common ancestors.  See gitattributes(5) for details.

@item  branch.<name>.mergeOptions 
Sets default options for merging into branch <name>. The syntax and
supported options are the same as those of @emph{git merge}, but option values
containing whitespace characters are currently not supported.
@end table

@noindent

@chapheading SEE ALSO

git-fmt-merge-msg(1), git-pull(1), gitattributes(5),
git-reset(1), git-diff(1), git-ls-files(1),
git-add(1), git-rm(1), git-mergetool(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-mergetool--lib,,,Top
@chapheading Name

git-mergetool--lib — 共通 Gitマージツール シェル スクリプレット群

@noindent

@chapheading Synopsis

@display
TOOL_MODE=(diff|merge) . "$(git --exec-path)/git-mergetool--lib"
@end display


@noindent

@chapheading DESCRIPTION

これは、全くもってエンドユーザー向けコマンドではありません。この文書は、磁器風のスクリプトを研究している、および/または
新しいスクリプトを書いている人々を対象としています。

@emph{git-mergetool--lib}
スクリプトレットは、Gitマージツールを操作するための関数を設定するために、他のシェルスクリプトから(
`.`を使用して)呼び出される(source)されるように設計されています。

@emph{git-mergetool--lib} を(sourceで)実行する前に、スクリプトで @samp{TOOL_MODE}
を設定して、以下にリストされている関数の操作モードを定義する必要があります。 @emph{diff} と @emph{merge} は有効な値です。

@noindent

@chapheading FUNCTIONS

@table @asis

@item  get_merge_tool 
マージツールを返します。推測されたマージツールを返した場合、戻りコードは1です。それ以外の場合は0です。適切なGUIツールを検索するために、
@emph{$GIT_MERGETOOL_GUI} を @emph{true} に設定できます。

@item  get_merge_tool_cmd 
マージツールのカスタムコマンドを返します。

@item  get_merge_tool_path 
マージツールのカスタムパスを返します。

@item  initialize_merge_tool 
マージツール固有の関数をスコープに入れて、使用またはオーバーライドできるようにします。

@item  run_merge_tool 
ツール名と true/false フラグを指定してマージツールを起動し、マージベースが存在するかどうかを示します。 @emph{$MERGED} ・
@emph{$LOCAL} ・ @emph{$REMOTE} ・ @emph{$BASE} は、マージツールで使用するために定義する必要があります。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-mergetool,,,Top
@chapheading Name

git-mergetool — Run merge conflict resolution tools to resolve merge conflicts

@noindent

@chapheading Synopsis

@display
git mergetool [--tool=<tool>] [-y | --[no-]prompt] [<file>…]
@end display


@noindent

@chapheading DESCRIPTION

Use @samp{git mergetool} to run one of several merge utilities to resolve merge
conflicts.  It is typically run after @emph{git merge}.

If one or more <file> parameters are given, the merge tool program will be
run to resolve differences on each file (skipping those without conflicts).
Specifying a directory will include all unresolved files in that path.  If
no <file> names are specified, @emph{git mergetool} will run the merge tool
program on every file with merge conflicts.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-t <tool>} 
@itemx  @samp{--tool=<tool>} 
Use the merge resolution program specified by <tool>.  Valid values include
emerge, gvimdiff, kdiff3, meld, vimdiff, and tortoisemerge. Run @samp{git
mergetool --tool-help} for the list of valid <tool> settings.

If a merge resolution program is not specified, @emph{git mergetool} will use the
configuration variable @samp{merge.tool}.  If the configuration variable
@samp{merge.tool} is not set, @emph{git mergetool} will pick a suitable default.

You can explicitly provide a full path to the tool by setting the
configuration variable @samp{mergetool.<tool>.path}. For example, you can
configure the absolute path to kdiff3 by setting
@samp{mergetool.kdiff3.path}. Otherwise, @emph{git mergetool} assumes the tool is
available in PATH.

Instead of running one of the known merge tool programs, @emph{git mergetool} can
be customized to run an alternative program by specifying the command line
to invoke in a configuration variable @samp{mergetool.<tool>.cmd}.

When @emph{git mergetool} is invoked with this tool (either through the @samp{-t} or
@samp{--tool} option or the @samp{merge.tool} configuration variable) the configured
command line will be invoked with @samp{$BASE} set to the name of a temporary
file containing the common base for the merge, if available; @samp{$LOCAL} set to
the name of a temporary file containing the contents of the file on the
current branch; @samp{$REMOTE} set to the name of a temporary file containing the
contents of the file to be merged, and @samp{$MERGED} set to the name of the file
to which the merge tool should write the result of the merge resolution.

If the custom merge tool correctly indicates the success of a merge
resolution with its exit code, then the configuration variable
@samp{mergetool.<tool>.trustExitCode} can be set to @samp{true}.  Otherwise, @emph{git
mergetool} will prompt the user to indicate the success of the resolution
after the custom tool has exited.

@item  @samp{--tool-help} 
Print a list of merge tools that may be used with @samp{--tool}.

@item  @samp{-y} 
@itemx  @samp{--no-prompt} 
Don’t prompt before each invocation of the merge resolution program.  This
is the default if the merge resolution program is explicitly specified with
the @samp{--tool} option or with the @samp{merge.tool} configuration variable.

@item  @samp{--prompt} 
Prompt before each invocation of the merge resolution program to give the
user a chance to skip the path.

@item  @samp{-g} 
@itemx  @samp{--gui} 
When @emph{git-mergetool} is invoked with the @samp{-g} or @samp{--gui} option the default
merge tool will be read from the configured @samp{merge.guitool} variable instead
of @samp{merge.tool}. If @samp{merge.guitool} is not set, we will fallback to the tool
configured under @samp{merge.tool}.

@item  @samp{--no-gui} 
This overrides a previous @samp{-g} or @samp{--gui} setting and reads the default
merge tool will be read from the configured @samp{merge.tool} variable.

@item  @samp{-O<orderfile>} 
Process files in the order specified in the <orderfile>, which has one shell
glob pattern per line.  This overrides the @samp{diff.orderFile} configuration
variable (see git-config(1)).  To cancel @samp{diff.orderFile}, use
@samp{-O/dev/null}.
@end table

@noindent

@chapheading CONFIGURATION

@table @asis

@item  mergetool.<tool>.path 
Override the path for the given tool.  This is useful in case your tool is
not in the PATH.

@item  mergetool.<tool>.cmd 
Specify the command to invoke the specified merge tool.  The specified
command is evaluated in shell with the following variables available: @emph{BASE}
is the name of a temporary file containing the common base of the files to
be merged, if available; @emph{LOCAL} is the name of a temporary file containing
the contents of the file on the current branch; @emph{REMOTE} is the name of a
temporary file containing the contents of the file from the branch being
merged; @emph{MERGED} contains the name of the file to which the merge tool
should write the results of a successful merge.

@item  mergetool.<tool>.hideResolved 
Allows the user to override the global @samp{mergetool.hideResolved} value for a
specific tool. See @samp{mergetool.hideResolved} for the full description.

@item  mergetool.<tool>.trustExitCode 
For a custom merge command, specify whether the exit code of the merge
command can be used to determine whether the merge was successful.  If this
is not set to true then the merge target file timestamp is checked and the
merge assumed to have been successful if the file has been updated,
otherwise the user is prompted to indicate the success of the merge.

@item  mergetool.meld.hasOutput 
Older versions of @samp{meld} do not support the @samp{--output} option.  Git will
attempt to detect whether @samp{meld} supports @samp{--output} by inspecting the
output of @samp{meld --help}.  Configuring @samp{mergetool.meld.hasOutput} will make
Git skip these checks and use the configured value instead.  Setting
@samp{mergetool.meld.hasOutput} to @samp{true} tells Git to unconditionally use the
@samp{--output} option, and @samp{false} avoids using @samp{--output}.

@item  mergetool.meld.useAutoMerge 
When the @samp{--auto-merge} is given, meld will merge all non-conflicting parts
automatically, highlight the conflicting parts and wait for user decision.
Setting @samp{mergetool.meld.useAutoMerge} to @samp{true} tells Git to unconditionally
use the @samp{--auto-merge} option with @samp{meld}.  Setting this value to @samp{auto}
makes git detect whether @samp{--auto-merge} is supported and will only use
@samp{--auto-merge} when available.  A value of @samp{false} avoids using
@samp{--auto-merge} altogether, and is the default value.

@item  mergetool.hideResolved 
During a merge Git will automatically resolve as many conflicts as possible
and write the @emph{MERGED} file containing conflict markers around any conflicts
that it cannot resolve; @emph{LOCAL} and @emph{REMOTE} normally represent the versions
of the file from before Git’s conflict resolution. This flag causes @emph{LOCAL}
and @emph{REMOTE} to be overwriten so that only the unresolved conflicts are
presented to the merge tool. Can be configured per-tool via the
@samp{mergetool.<tool>.hideResolved} configuration variable. Defaults to @samp{false}.

@item  mergetool.keepBackup 
After performing a merge, the original file with conflict markers can be
saved as a file with a @samp{.orig} extension.  If this variable is set to
@samp{false} then this file is not preserved.  Defaults to @samp{true} (i.e. keep the
backup files).

@item  mergetool.keepTemporaries 
When invoking a custom merge tool, Git uses a set of temporary files to pass
to the tool. If the tool returns an error and this variable is set to
@samp{true}, then these temporary files will be preserved, otherwise they will be
removed after the tool has exited. Defaults to @samp{false}.

@item  mergetool.writeToTemp 
Git writes temporary @emph{BASE}, @emph{LOCAL}, and @emph{REMOTE} versions of conflicting
files in the worktree by default.  Git will attempt to use a temporary
directory for these files when set @samp{true}.  Defaults to @samp{false}.

@item  mergetool.prompt 
Prompt before each invocation of the merge resolution program.
@end table

@noindent

@chapheading TEMPORARY FILES

@samp{git mergetool} creates @samp{*.orig} backup files while resolving merges.  These
are safe to remove once a file has been merged and its @samp{git mergetool}
session has completed.

Setting the @samp{mergetool.keepBackup} configuration variable to @samp{false} causes
@samp{git mergetool} to automatically remove the backup as files are successfully
merged.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-mktag,,,Top
@chapheading Name

git-mktag — 追加の検証(extra validation)でタグオブジェクトを作成します

@noindent

@chapheading Synopsis

@display
git mktag
@end display


@noindent

@chapheading DESCRIPTION

標準入力でタグの内容を読み取り、タグオブジェクトを作成します。 出力は、新しいタグの <object> IDです。

このコマンドは、 git-hash-object(1) を @samp{-t tag -w --stdin}
オプションで呼び出すのとほとんど同じです。例:以下は両方とも、 @samp{my-tag}
ファイル中からタグの記述を見つけ、見つけたタグの記述からをタグオブジェクトを作成して書き込みます。

@example
git mktag <my-tag
git hash-object -t tag -w --stdin <my-tag
@end example

git-hash-object(1) の違いは、タグが git-fsck(1)
チェックに合格しない場合、タグを書き込む前にmktagが停止することです。

mktagで実行される「fsck」チェックは、すべての @samp{fsck.<msg-id>} メッセージが警告からエラーに昇格されるという点で
git-fsck(1) がデフォルトで実行するものよりも厳密(strict)です(たとえば、tagger行の欠落はエラーです)。

オブジェクトの余分なヘッダーもmktagではエラーになりますが、 git-fsck(1) では無視されます。この追加のチェックは、適切な
@samp{fsck.<msg-id>} 変数を設定することでオフにできます:

@example
git -c fsck.extraHeaderEntry=ignore mktag <my-tag-with-headers
@end example

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--strict} 
デフォルトでは、mktagは git-fsck(1) の @samp{--strict} モードに相当するものをオンにします。無効にするには、
@samp{--no-strict} を使用します。
@end table

@noindent

@chapheading Tag Format

このコマンドの標準入力に供給されるタグ署名ファイル(tag signature file)は、非常に単純な固定形式です。それは以下の4行からなります。

@example
object <hash>
type <typename>
tag <tagname>
tagger <tagger>
@end example

この後ろにいくつかのオプションの自由形式のメッセージが続きます(古いGitによって作成された一部のタグには @samp{tagger}
行がない場合があります)。メッセージが存在する場合は、ヘッダーとは空白行で区切られます。メッセージ部分には、Git自体は気にしない署名が含まれている場合がありますが、それはgpgで確認できます。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-mktree,,,Top
@chapheading Name

git-mktree — ls-tree形式のテキストからツリーオブジェクトを構築する

@noindent

@chapheading Synopsis

@display
git mktree [-z] [--missing] [--batch]
@end display


@noindent

@chapheading DESCRIPTION

非再帰的な @samp{ls-tree}
出力形式で標準入力を読み取り、ツリーオブジェクトを作成します。ツリーエントリの順序はmktreeによって正規化されるため、入力を事前に並べ替える必要はありません。構築されたツリーオブジェクトのオブジェクト名が標準出力に書き出されます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-z} 
通常の ls-tree 出力形式の代わりに、(行終端がNULLである) @samp{ls-tree -z} 出力形式を読み取ります。

@item  @samp{--missing} 
欠落しているオブジェクトを許可します。
(このオプションなしでの)デフォルトの動作では、各ツリーエントリのSHA1が、存在するオブジェクトを識別していることを確認します。なお、このオプションは、常に欠落していることが許可されている
gitlink エントリ(別名「サブモジュール」)の処理には影響しません。

@item  @samp{--batch} 
終了せずに、複数のツリーオブジェクトの構築をする事を許可します。入力の各ツリーは、空白行1行で区切られています。最後の改行はオプションです。注意:
@samp{-z} オプションを使用すると、行はNUL終端になります。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-multi-pack-index,,,Top
@chapheading Name

git-multi-pack-index — Write and verify multi-pack-indexes

@noindent

@chapheading Synopsis

@display
git multi-pack-index [--object-dir=<dir>] [--[no-]progress]
        [--preferred-pack=<pack>] [--[no-]bitmap] <subcommand>
@end display


@noindent

@chapheading DESCRIPTION

Write or verify a multi-pack-index (MIDX) file.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--object-dir=<dir>} 
Use given directory for the location of Git objects. We check
@samp{<dir>/packs/multi-pack-index} for the current MIDX file, and @samp{<dir>/packs}
for the pack-files to index.

@samp{<dir>} must be an alternate of the current repository.

@item  @samp{--[no-]progress} 
Turn progress on/off explicitly. If neither is specified, progress is shown
if standard error is connected to a terminal.
@end table

The following subcommands are available:

@table @asis

@item  write 
Write a new MIDX file. The following options are available for the @samp{write}
sub-command:

@table @asis

@item  --preferred-pack=<pack> 
Optionally specify the tie-breaking pack used when
multiple packs contain the same object. @samp{<pack>} must
contain at least one object. If not given, ties are
broken in favor of the pack with the lowest mtime.

@item  --[no-]bitmap 
Control whether or not a multi-pack bitmap is written.
@end table

@item  verify 
Verify the contents of the MIDX file.

@item  expire 
Delete the pack-files that are tracked  by the MIDX file, but have no
objects referenced by the MIDX. Rewrite the MIDX file afterward to remove
all references to these pack-files.

@item  repack 
Create a new pack-file containing objects in small pack-files referenced by
the multi-pack-index. If the size given by the @samp{--batch-size=<size>}
argument is zero, then create a pack containing all objects referenced by
the multi-pack-index. For a non-zero batch size, Select the pack-files by
examining packs from oldest-to-newest, computing the "expected size" by
counting the number of objects in the pack referenced by the
multi-pack-index, then divide by the total number of objects in the pack and
multiply by the pack size. We select packs with expected size below the
batch size until the set of packs have total expected size at least the
batch size, or all pack-files are considered. If only one pack-file is
selected, then do nothing. If a new pack-file is created, rewrite the
multi-pack-index to reference the new pack-file. A later run of @emph{git
multi-pack-index expire} will delete the pack-files that were part of this
batch.

If @samp{repack.packKeptObjects} is @samp{false}, then any pack-files with an
associated @samp{.keep} file will not be selected for the batch to repack.
@end table

@noindent

@chapheading EXAMPLES

@itemize 

@item
Write a MIDX file for the packfiles in the current .git folder.

@example
$ git multi-pack-index write
@end example


@item
Write a MIDX file for the packfiles in the current .git folder with a
corresponding bitmap.

@example
$ git multi-pack-index write --preferred-pack=<pack> --bitmap
@end example


@item
Write a MIDX file for the packfiles in an alternate object store.

@example
$ git multi-pack-index --object-dir <alt> write
@end example


@item
Verify the MIDX file for the packfiles in the current .git folder.

@example
$ git multi-pack-index verify
@end example

@end itemize

@noindent

@chapheading SEE ALSO

See @uref{technical/multi-pack-index.html,The Multi-Pack-Index Design Document} and @uref{technical/pack-format.html,The Multi-Pack-Index Format}
for more information on the multi-pack-index feature.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-mv,,,Top
@chapheading Name

git-mv — ファイルまたはディレクトリまたはシンボリックリンクを移動(move)または名前変更(rename)します

@noindent

@chapheading Synopsis

@display
git mv <options>… <args>…
@end display


@noindent

@chapheading DESCRIPTION

ファイルまたはディレクトリまたはシンボリックリンクを移動または名前変更します。

@example
git mv [-v] [-f] [-n] [-k] <source> <destination>
git mv [-v] [-f] [-n] [-k] <source> ... <destination directory>
@end example

最初の形式では、ファイル・シンボリックリンク・ディレクトリのいずれかである必要がある <source> の名前を <destination>
に変更します。2番目の形式では、最後の引数は既存のディレクトリである必要があります。指定のソースはこのディレクトリに移動されます。

正常に完了するとインデックスは更新されますが、変更はコミットする必要があります。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-f} 
@itemx  @samp{--force} 
ターゲットが存在する場合でも、ファイルの名前変更または移動を強制します

@item  @samp{-k} 
エラー状態になる移動または名前変更をスキップします。ソースが存在せず、Gitによって制御されていない場合、または @samp{-f}
が指定されていない限り、ソースが既存のファイルを上書きする場合、エラーが発生します。

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
何も操作しない。何が起こるかを示すだけです。

@item  @samp{-v} 
@itemx  @samp{--verbose} 
移動するファイルの名前を報告します。
@end table

@noindent

@chapheading SUBMODULES

gitfile(つまり、Gitバージョン1.7.8以降で複製された)を使用してサブモジュールを移動すると、gitfileとcore.worktreeの設定が更新され、サブモジュールが新しい場所で機能するようになります。また、
gitmodules(5) ファイルの submodule.<name>.path
設定を更新し、そのファイルをステージングしようとします( @samp{-n} が使用されている場合を除く)。

@noindent

@chapheading BUGS

スーパープロジェクトの更新により、入力されたサブモジュールが移動されるたびに(たとえば、移動の前後でコミットを切り替える場合)、古いサブモジュールのチェックアウトは古い場所に残り、空のディレクトリが新しい場所に表示されます。新しい場所にサブモジュールを再度入力するには、後で「git
submodule
update」を実行する必要があります。古いディレクトリの削除は、gitfileを使用している場合にのみ安全です。そうでなければ、サブモジュールの履歴も削除されます。再帰的なサブモジュールの更新が実装されている場合、これらの手順は廃止されるでしょう。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-name-rev,,,Top
@chapheading Name

git-name-rev — 指定のrevのシンボリック名を検索します

@noindent

@chapheading Synopsis

@display
git name-rev [--tags] [--refs=<pattern>]
               ( --all | --stdin | <commit-ish>… )
@end display


@noindent

@chapheading DESCRIPTION

@emph{gitrev-parse} で解析可能な任意の形式で指定されたリビジョンの、人間にとって読みやすい記号名を検索します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--tags} 
ブランチ名は使用せず、コミットに名前を付けるためにタグのみを使用します

@item  @samp{--refs=<pattern>} 
名前が特定のシェルパターンに一致するrefのみを使用します。
パターンは、ブランチ名、タグ名、または完全修飾ref名のいずれかです。複数回指定する場合は、指定したシェルパターンのいずれかに名前が一致するrefsを使用します。
@samp{--no-refs} を使用して、既に指定済のrefパターンをクリアします。

@item  @samp{--exclude=<pattern>} 
名前が特定のシェルパターンと一致するrefは使用しない。
パターンは、ブランチ名、タグ名、または完全修飾ref名のいずれかです。複数回指定された場合、指定されたパターンのいずれかに一致するrefは除外されます。
@samp{--refs} と一緒に使用すると、refは少なくとも1つの @samp{--refs} パターンに一致し、 @samp{--exclude}
パターンに一致しない場合にのみ一致として使用されます。 @samp{--no-exclude} を使用して、除外パターンのリストをクリアします。

@item  @samp{--all} 
すべてのrefから到達可能なすべてのコミットを一覧表示します

@item  @samp{--stdin} 
16死ん40文字のSHA-1($hexとする)をすべて "$hex ($rev_name)" に置き換えて、stdinを変換します。
@samp{--name-only} と一緒に使用する場合は、"$rev_name" に置き換えて、 $hex
を完全に省略します。スクリプトで使用することを目的としています。

@item  @samp{--name-only} 
SHA-1と名前の両方を印刷する代わりに、名前のみを印刷します。 @samp{--tags} を指定すると、通常のタグプレフィックス "tags/"
も名前から省略され、 `git-describe`の出力とより厳密に一致します。

@item  @samp{--no-undefined} 
参照が未定義の場合、 @samp{undefined} を出力する代わりに、エラーコード != 0 で終了します。

@item  @samp{--always} 
一意を保つように省略されたコミットオブジェクトをフォールバックとして表示します。
@end table

@noindent

@chapheading EXAMPLES

コミットが与えられたら、そのローカルrefsとの相対的な位置を見つけます。 誰かがその素晴らしいコミット
33db5f4d9027a10e477ccf054b2c1ab94f74c85a
についてあなたに述べたとしましょう。もちろん、あなたはそのコミットを調べますが、そこでは何が起こったのかを教えてくれるだけで、文脈は教えてくれません。

@emph{git name-rev} に入力します:

@example
% git name-rev 33db5f4d9027a10e477ccf054b2c1ab94f74c85a
33db5f4d9027a10e477ccf054b2c1ab94f74c85a tags/v0.99~940
@end example


あなたは今や、v0.99より前に940のリビジョンが発生したことが分かりましたね。

別の方法:

@example
% git log | git name-rev --stdin
@end example


@noindent

@chapheading GIT

Part of the git(1) suite

@node git-notes,,,Top
@chapheading Name

git-notes — Add or inspect object notes

@noindent

@chapheading Synopsis

@display
git notes [list [<object>]]
git notes add [-f] [--allow-empty] [-F <file> | -m <msg> | (-c | -C) <object>] [<object>]
git notes copy [-f] ( --stdin | <from-object> [<to-object>] )
git notes append [--allow-empty] [-F <file> | -m <msg> | (-c | -C) <object>] [<object>]
git notes edit [--allow-empty] [<object>]
git notes show [<object>]
git notes merge [-v | -q] [-s <strategy> ] <notes-ref>
git notes merge --commit [-v | -q]
git notes merge --abort [-v | -q]
git notes remove [--ignore-missing] [--stdin] [<object>…]
git notes prune [-n] [-v]
git notes get-ref
@end display


@noindent

@chapheading DESCRIPTION

Adds, removes, or reads notes attached to objects, without touching the
objects themselves.

By default, notes are saved to and read from @samp{refs/notes/commits}, but this
default can be overridden.  See the OPTIONS, CONFIGURATION, and ENVIRONMENT
sections below.  If this ref does not exist, it will be quietly created when
it is first needed to store a note.

A typical use of notes is to supplement a commit message without changing
the commit itself. Notes can be shown by @emph{git log} along with the original
commit message. To distinguish these notes from the message stored in the
commit object, the notes are indented like the message, after an unindented
line saying "Notes (<refname>):" (or "Notes:" for @samp{refs/notes/commits}).

Notes can also be added to patches prepared with @samp{git format-patch} by using
the @samp{--notes} option. Such notes are added as a patch commentary after a
three dash separator line.

To change which notes are shown by @emph{git log}, see the "notes.displayRef"
configuration in git-log(1).

See the "notes.rewrite.<command>" configuration for a way to carry notes
across commands that rewrite commits.

@noindent

@chapheading SUBCOMMANDS

@table @asis

@item  list 
List the notes object for a given object. If no object is given, show a list
of all note objects and the objects they annotate (in the format "<note
object> <annotated object>").  This is the default subcommand if no
subcommand is given.

@item  add 
Add notes for a given object (defaults to HEAD). Abort if the object already
has notes (use @samp{-f} to overwrite existing notes).  However, if you’re using
@samp{add} interactively (using an editor to supply the notes contents), then -
instead of aborting - the existing notes will be opened in the editor (like
the @samp{edit} subcommand).

@item  copy 
Copy the notes for the first object onto the second object (defaults to
HEAD). Abort if the second object already has notes, or if the first object
has none (use -f to overwrite existing notes to the second object). This
subcommand is equivalent to: @samp{git notes add [-f] -C $(git notes list
<from-object>) <to-object>}

In @samp{--stdin} mode, take lines in the format

@example
<from-object> SP <to-object> [ SP <rest> ] LF
@end example


on standard input, and copy the notes from each <from-object> to its
corresponding <to-object>.  (The optional @samp{<rest>} is ignored so that the
command can read the input given to the @samp{post-rewrite} hook.)

@item  append 
Append to the notes of an existing object (defaults to HEAD).  Creates a new
notes object if needed.

@item  edit 
Edit the notes for a given object (defaults to HEAD).

@item  show 
Show the notes for a given object (defaults to HEAD).

@item  merge 
Merge the given notes ref into the current notes ref.  This will try to
merge the changes made by the given notes ref (called "remote") since the
merge-base (if any) into the current notes ref (called "local").

If conflicts arise and a strategy for automatically resolving conflicting
notes (see the "NOTES MERGE STRATEGIES" section) is not given, the "manual"
resolver is used. This resolver checks out the conflicting notes in a
special worktree (@samp{.git/NOTES_MERGE_WORKTREE}), and instructs the user to
manually resolve the conflicts there.  When done, the user can either
finalize the merge with @emph{git notes merge --commit}, or abort the merge with
@emph{git notes merge --abort}.

@item  remove 
Remove the notes for given objects (defaults to HEAD). When giving zero or
one object from the command line, this is equivalent to specifying an empty
note message to the @samp{edit} subcommand.

@item  prune 
Remove all notes for non-existing/unreachable objects.

@item  get-ref 
Print the current notes ref. This provides an easy way to retrieve the
current notes ref (e.g. from scripts).
@end table

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-f} 
@itemx  @samp{--force} 
When adding notes to an object that already has notes, overwrite the
existing notes (instead of aborting).

@item  @samp{-m <msg>} 
@itemx  @samp{--message=<msg>} 
Use the given note message (instead of prompting).  If multiple @samp{-m} options
are given, their values are concatenated as separate paragraphs.  Lines
starting with @samp{#} and empty lines other than a single line between
paragraphs will be stripped out.

@item  @samp{-F <file>} 
@itemx  @samp{--file=<file>} 
Take the note message from the given file.  Use @emph{-} to read the note message
from the standard input.  Lines starting with @samp{#} and empty lines other than
a single line between paragraphs will be stripped out.

@item  @samp{-C <object>} 
@itemx  @samp{--reuse-message=<object>} 
Take the given blob object (for example, another note) as the note
message. (Use @samp{git notes copy <object>} instead to copy notes between
objects.)

@item  @samp{-c <object>} 
@itemx  @samp{--reedit-message=<object>} 
Like @emph{-C}, but with @samp{-c} the editor is invoked, so that the user can further
edit the note message.

@item  @samp{--allow-empty} 
Allow an empty note object to be stored. The default behavior is to
automatically remove empty notes.

@item  @samp{--ref <ref>} 
Manipulate the notes tree in <ref>.  This overrides @samp{GIT_NOTES_REF} and the
"core.notesRef" configuration.  The ref specifies the full refname when it
begins with @samp{refs/notes/}; when it begins with @samp{notes/}, @samp{refs/} and
otherwise @samp{refs/notes/} is prefixed to form a full name of the ref.

@item  @samp{--ignore-missing} 
Do not consider it an error to request removing notes from an object that
does not have notes attached to it.

@item  @samp{--stdin} 
Also read the object names to remove notes from the standard input (there is
no reason you cannot combine this with object names from the command line).

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
Do not remove anything; just report the object names whose notes would be
removed.

@item  @samp{-s <strategy>} 
@itemx  @samp{--strategy=<strategy>} 
When merging notes, resolve notes conflicts using the given strategy. The
following strategies are recognized: "manual" (default), "ours", "theirs",
"union" and "cat_sort_uniq".  This option overrides the
"notes.mergeStrategy" configuration setting.  See the "NOTES MERGE
STRATEGIES" section below for more information on each notes merge strategy.

@item  @samp{--commit} 
Finalize an in-progress @emph{git notes merge}. Use this option when you have
resolved the conflicts that @emph{git notes merge} stored in
.git/NOTES_MERGE_WORKTREE. This amends the partial merge commit created by
@emph{git notes merge} (stored in .git/NOTES_MERGE_PARTIAL) by adding the notes
in .git/NOTES_MERGE_WORKTREE. The notes ref stored in the
.git/NOTES_MERGE_REF symref is updated to the resulting commit.

@item  @samp{--abort} 
Abort/reset an in-progress @emph{git notes merge}, i.e. a notes merge with
conflicts. This simply removes all files related to the notes merge.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
When merging notes, operate quietly.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
When merging notes, be more verbose.  When pruning notes, report all object
names whose notes are removed.
@end table

@noindent

@chapheading DISCUSSION

Commit notes are blobs containing extra information about an object (usually
information to supplement a commit’s message).  These blobs are taken from
notes refs.  A notes ref is usually a branch which contains "files" whose
paths are the object names for the objects they describe, with some
directory separators included for performance reasons @footnote{Permitted
pathnames have the form @emph{bf}@samp{/}@emph{fe}@samp{/}@emph{30}@samp{/}@emph{…}@samp{/}@emph{680d5a…}: a sequence
of directory names of two hexadecimal digits each followed by a filename
with the rest of the object ID.}.

Every notes change creates a new commit at the specified notes ref.  You can
therefore inspect the history of the notes by invoking, e.g., @samp{git log -p
notes/commits}.  Currently the commit message only records which operation
triggered the update, and the commit authorship is determined according to
the usual rules (see git-commit(1)).  These details may change in
the future.

It is also permitted for a notes ref to point directly to a tree object, in
which case the history of the notes can be read with @samp{git log -p -g
<refname>}.

@noindent

@chapheading NOTES MERGE STRATEGIES

The default notes merge strategy is "manual", which checks out conflicting
notes in a special work tree for resolving notes conflicts
(@samp{.git/NOTES_MERGE_WORKTREE}), and instructs the user to resolve the
conflicts in that work tree.  When done, the user can either finalize the
merge with @emph{git notes merge --commit}, or abort the merge with @emph{git notes
merge --abort}.

Users may select an automated merge strategy from among the following using
either -s/--strategy option or configuring notes.mergeStrategy accordingly:

"ours" automatically resolves conflicting notes in favor of the local
version (i.e. the current notes ref).

"theirs" automatically resolves notes conflicts in favor of the remote
version (i.e. the given notes ref being merged into the current notes ref).

"union" automatically resolves notes conflicts by concatenating the local
and remote versions.

"cat_sort_uniq" is similar to "union", but in addition to concatenating the
local and remote versions, this strategy also sorts the resulting lines, and
removes duplicate lines from the result. This is equivalent to applying the
"cat | sort | uniq" shell pipeline to the local and remote versions. This
strategy is useful if the notes follow a line-based format where one wants
to avoid duplicated lines in the merge result.  Note that if either the
local or remote version contain duplicate lines prior to the merge, these
will also be removed by this notes merge strategy.

@noindent

@chapheading EXAMPLES

You can use notes to add annotations with information that was not available
at the time a commit was written.

@example
$ git notes add -m 'Tested-by: Johannes Sixt <j6t@@kdbg.org>' 72a144e2
$ git show -s 72a144e
[...]
    Signed-off-by: Junio C Hamano <gitster@@pobox.com>

Notes:
    Tested-by: Johannes Sixt <j6t@@kdbg.org>
@end example


In principle, a note is a regular Git blob, and any kind of (non-)format is
accepted.  You can binary-safely create notes from arbitrary files using
@emph{git hash-object}:

@example
$ cc *.c
$ blob=$(git hash-object -w a.out)
$ git notes --ref=built add --allow-empty -C "$blob" HEAD
@end example


(You cannot simply use @samp{git notes --ref=built add -F a.out HEAD} because
that is not binary-safe.)  Of course, it doesn’t make much sense to display
non-text-format notes with @emph{git log}, so if you use such notes, you’ll
probably need to write some special-purpose tools to do something useful
with them.

@noindent

@chapheading CONFIGURATION

@table @asis

@item  core.notesRef 
Notes ref to read and manipulate instead of @samp{refs/notes/commits}.  Must be
an unabbreviated ref name.  This setting can be overridden through the
environment and command line.

@item  notes.mergeStrategy 
Which merge strategy to choose by default when resolving notes conflicts.
Must be one of @samp{manual}, @samp{ours}, @samp{theirs}, @samp{union}, or @samp{cat_sort_uniq}.
Defaults to @samp{manual}.  See "NOTES MERGE STRATEGIES" section above for more
information on each strategy.

This setting can be overridden by passing the @samp{--strategy} option.

@item  notes.<name>.mergeStrategy 
Which merge strategy to choose when doing a notes merge into
refs/notes/<name>.  This overrides the more general "notes.mergeStrategy".
See the "NOTES MERGE STRATEGIES" section above for more information on each
available strategy.

@item  notes.displayRef 
Which ref (or refs, if a glob or specified more than once), in addition to
the default set by @samp{core.notesRef} or @samp{GIT_NOTES_REF}, to read notes from
when showing commit messages with the @emph{git log} family of commands.  This
setting can be overridden on the command line or by the
@samp{GIT_NOTES_DISPLAY_REF} environment variable.  See git-log(1).

@item  notes.rewrite.<command> 
When rewriting commits with <command> (currently @samp{amend} or @samp{rebase}), if
this variable is @samp{false}, git will not copy notes from the original to the
rewritten commit.  Defaults to @samp{true}.  See also "@samp{notes.rewriteRef}" below.

This setting can be overridden by the @samp{GIT_NOTES_REWRITE_REF} environment
variable.

@item  notes.rewriteMode 
When copying notes during a rewrite, what to do if the target commit already
has a note.  Must be one of @samp{overwrite}, @samp{concatenate}, @samp{cat_sort_uniq}, or
@samp{ignore}.  Defaults to @samp{concatenate}.

This setting can be overridden with the @samp{GIT_NOTES_REWRITE_MODE} environment
variable.

@item  notes.rewriteRef 
When copying notes during a rewrite, specifies the (fully qualified) ref
whose notes should be copied.  May be a glob, in which case notes in all
matching refs will be copied.  You may also specify this configuration
several times.

Does not have a default value; you must configure this variable to enable
note rewriting.

Can be overridden with the @samp{GIT_NOTES_REWRITE_REF} environment variable.
@end table

@noindent

@chapheading ENVIRONMENT

@table @asis

@item  @samp{GIT_NOTES_REF} 
Which ref to manipulate notes from, instead of @samp{refs/notes/commits}.  This
overrides the @samp{core.notesRef} setting.

@item  @samp{GIT_NOTES_DISPLAY_REF} 
Colon-delimited list of refs or globs indicating which refs, in addition to
the default from @samp{core.notesRef} or @samp{GIT_NOTES_REF}, to read notes from when
showing commit messages.  This overrides the @samp{notes.displayRef} setting.

A warning will be issued for refs that do not exist, but a glob that does
not match any refs is silently ignored.

@item  @samp{GIT_NOTES_REWRITE_MODE} 
When copying notes during a rewrite, what to do if the target commit already
has a note.  Must be one of @samp{overwrite}, @samp{concatenate}, @samp{cat_sort_uniq}, or
@samp{ignore}.  This overrides the @samp{core.rewriteMode} setting.

@item  @samp{GIT_NOTES_REWRITE_REF} 
When rewriting commits, which notes to copy from the original to the
rewritten commit.  Must be a colon-delimited list of refs or globs.

If not set in the environment, the list of notes to copy depends on the
@samp{notes.rewrite.<command>} and @samp{notes.rewriteRef} settings.
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-p4,,,Top
@chapheading Name

git-p4 — Perforceリポジトリからのインポートと、Perforceリポジトリへのsubmit

@noindent

@chapheading Synopsis

@display
git p4 clone [<sync options>] [<clone options>] <p4 depot path>…
git p4 sync [<sync options>] [<p4 depot path>…]
git p4 rebase
git p4 submit [<submit options>] [<master branch name>]
@end display


@noindent

@chapheading DESCRIPTION

このコマンドは、Gitを使用してp4リポジトリと対話する方法を提供します。

'git p4 clone’を使用して既存のp4リポジトリから新しいGitリポジトリを作成し、1つ以上のp4デポパス(depot
path)を指定します。'git
p4sync’を使用してp4の変更からの新しいコミットを組み込みます。'sync’コマンドは、他のp4デポパスからの新しいブランチを含めるためにも使用されます。'git
p4 submit’を使用してGitの変更をp4に送信します。 コマンド’git p4
rebase’は同期を実行し、現在のブランチを更新されたp4リモートブランチにリベースします。

@noindent

@chapheading EXAMPLES

@itemize 

@item
リポジトリをクローンします:

@example
$ git p4 clone //depot/path/project
@end example


@item
新しく作成されたGitリポジトリでいくつかの作業を行います:

@example
$ cd project
$ vi foo.h
$ git commit -a -m "edited foo.h"
@end example


@item
p4からの最近の変更でGitリポジトリを更新し、あなたの作業ツリーにリベースします:

@example
$ git p4 rebase
@end example


@item
あなたのコミットを送信しp4へ戻します:

@example
$ git p4 submit
@end example

@end itemize

@noindent

@chapheading COMMANDS

@noindent

@heading Clone

通常、'git p4 clone’は、既存のp4リポジトリから新しいGitディレクトリを作成するために使用されます:

@example
$ git p4 clone //depot/path/project
@end example


これは以下の事を行います:

@enumerate 

@item
@emph{project} というサブディレクトリに空のGitリポジトリを作成します。

@item
指定されたp4デポパス(p4 depot path)からGitブランチ @emph{refs/remotes/p4/master}
の単一のコミットにヘッドリビジョンの全内容をインポートします。

@item
このリモートからローカルブランチ @emph{master} を作成し、チェックアウトします。
@end enumerate

Gitでp4履歴全体を再現するには、デポパス(dept path)で @emph{@@all} 修飾子を使用します:

@example
$ git p4 clone //depot/path/project@@all
@end example


@noindent

@heading Sync

p4リポジトリで開発が継続されていて、それらの変更をGitリポジトリに取り込むには以下を使用します:

@example
$ git p4 sync
@end example


このコマンドは、p4の新しい変更を検出し、Gitがコミットするときにそれらをインポートします。

P4リポジトリは、 @emph{git p4 sync} を使用して既存のGitリポジトリに追加することもできます:

@example
$ mkdir repo-git
$ cd repo-git
$ git init
$ git p4 sync //path/in/your/perforce/depot
@end example


これにより、指定したデポが既存のGitリポジトリの @emph{refs/remotes/p4/master} にインポートされます。 @samp{--branch}
オプションを使用して、p4コンテンツに使用する別のブランチを指定することも可能です。

If a Git repository includes branches @emph{refs/remotes/origin/p4}, these will
be fetched and consulted first during a @emph{git p4 sync}.  Since importing
directly from p4 is considerably slower than pulling changes from a Git
remote, this can be useful in a multi-developer environment.

If there are multiple branches, doing @emph{git p4 sync} will automatically use
the "BRANCH DETECTION" algorithm to try to partition new changes into the
right branch.  This can be overridden with the @samp{--branch} option to specify
just a single branch to update.

@noindent

@heading Rebase

A common working pattern is to fetch the latest changes from the p4 depot
and merge them with local uncommitted changes.  Often, the p4 repository is
the ultimate location for all code, thus a rebase workflow makes sense.
This command does @emph{git p4 sync} followed by @emph{git rebase} to move local
commits on top of updated p4 changes.

@example
$ git p4 rebase
@end example


@noindent

@heading Submit

Submitting changes from a Git repository back to the p4 repository requires
a separate p4 client workspace.  This should be specified using the
@samp{P4CLIENT} environment variable or the Git configuration variable
@emph{git-p4.client}.  The p4 client must exist, but the client root will be
created and populated if it does not already exist.

To submit all changes that are in the current Git branch but not in the
@emph{p4/master} branch, use:

@example
$ git p4 submit
@end example


現在のブランチ以外のブランチを指定するには、以下を使用します:

@example
$ git p4 submit topicbranch
@end example


単一のコミットまたはコミットの範囲を指定するには、以下を使用します:

@example
$ git p4 submit --commit <sha1>
$ git p4 submit --commit <sha1..sha1>
@end example


The upstream reference is generally @emph{refs/remotes/p4/master}, but can be
overridden using the @samp{--origin=} command-line option.

The p4 changes will be created as the user invoking @emph{git p4 submit}. The
@samp{--preserve-user} option will cause ownership to be modified according to
the author of the Git commit.  This option requires admin privileges in p4,
which can be granted using @emph{p4 protect}.

To shelve changes instead of submitting, use @samp{--shelve} and
@samp{--update-shelve}:

@example
$ git p4 submit --shelve
$ git p4 submit --update-shelve 1234 --update-shelve 2345
@end example


@noindent

@heading Unshelve

Unshelving will take a shelved P4 changelist, and produce the equivalent git
commit in the branch refs/remotes/p4-unshelved/<changelist>.

The git commit is created relative to the current origin revision (HEAD by
default).  A parent commit is created based on the origin, and then the
unshelve commit is created based on that.

originリビジョンは、 "--origin" オプションで変更できます。

If the target branch in refs/remotes/p4-unshelved already exists, the old
one will be renamed.

@example
$ git p4 sync
$ git p4 unshelve 12345
$ git show p4-unshelved/12345
<submit more changes via p4 to the same files>
$ git p4 unshelve 12345
<refuses to unshelve until git is in sync with p4 again>
@end example


@noindent

@chapheading OPTIONS

@noindent

@heading General options

cloneを除くすべてのコマンドは、これらのオプションを受け入れます。

@table @asis

@item  @samp{--git-dir <dir>} 
@samp{GIT_DIR} 環境変数を設定します。 git(1) 参照。

@item  @samp{-v} 
@itemx  @samp{--verbose} 
より多くの進捗情報を提供します。
@end table

@noindent

@heading Sync options

These options can be used in the initial @emph{clone} as well as in subsequent
@emph{sync} operations.

@table @asis

@item  @samp{--branch <ref>} 
Import changes into <ref> instead of refs/remotes/p4/master.  If <ref>
starts with refs/, it is used as is.  Otherwise, if it does not start with
p4/, that prefix is added.

By default a <ref> not starting with refs/ is treated as the name of a
remote-tracking branch (under refs/remotes/).  This behavior can be modified
using the --import-local option.

<ref> のデフォルトは "master" です。

This example imports a new remote "p4/proj2" into an existing Git
repository:

@example
    $ git init
    $ git p4 sync --branch=refs/remotes/p4/proj2 //depot/proj2
@end example


@item  @samp{--detect-branches} 
Use the branch detection algorithm to find new paths in p4.  It is
documented below in "BRANCH DETECTION".

@item  @samp{--changesfile <file>} 
Import exactly the p4 change numbers listed in @emph{file}, one per line.
Normally, @emph{git p4} inspects the current p4 repository state and detects the
changes it should import.

@item  @samp{--silent} 
進捗情報を出力しません。

@item  @samp{--detect-labels} 
Query p4 for labels associated with the depot paths, and add them as tags in
Git. Limited usefulness as only imports labels associated with new
changelists. Deprecated.

@item  @samp{--import-labels} 
p4からGitにラベルをインポートします。

@item  @samp{--import-local} 
By default, p4 branches are stored in @emph{refs/remotes/p4/}, where they will be
treated as remote-tracking branches by git-branch(1) and other
commands.  This option instead puts p4 branches in @emph{refs/heads/p4/}.  Note
that future sync operations must specify @samp{--import-local} as well so that
they can find the p4 branches in refs/heads.

@item  @samp{--max-changes <n>} 
Import at most @emph{n} changes, rather than the entire range of changes included
in the given revision specifier. A typical usage would be use @emph{@@all} as the
revision specifier, but then to use @emph{--max-changes 1000} to import only the
last 1000 revisions rather than the entire revision history.

@item  @samp{--changes-block-size <n>} 
The internal block size to use when converting a revision specifier such as
@emph{@@all} into a list of specific change numbers. Instead of using a single
call to @emph{p4 changes} to find the full list of changes for the conversion,
there are a sequence of calls to @emph{p4 changes -m}, each of which requests one
block of changes of the given size. The default block size is 500, which
should usually be suitable.

@item  @samp{--keep-path} 
The mapping of file names from the p4 depot path to Git, by default,
involves removing the entire depot path.  With this option, the full p4
depot path is retained in Git.  For example, path @emph{//depot/main/foo/bar.c},
when imported from @emph{//depot/main/}, becomes @emph{foo/bar.c}.  With
@samp{--keep-path}, the Git path is instead @emph{depot/main/foo/bar.c}.

@item  @samp{--use-client-spec} 
Use a client spec to find the list of interesting files in p4.  See the
"CLIENT SPEC" section below.

@item  @samp{-/ <path>} 
Exclude selected depot paths when cloning or syncing.
@end table

@noindent

@heading Clone options

These options can be used in an initial @emph{clone}, along with the @emph{sync}
options described above.

@table @asis

@item  @samp{--destination <directory>} 
Where to create the Git repository.  If not provided, the last component in
the p4 depot path is used to create a new directory.

@item  @samp{--bare} 
Perform a bare clone.  See git-clone(1).
@end table

@noindent

@heading Submit options

These options can be used to modify @emph{git p4 submit} behavior.

@table @asis

@item  @samp{--origin <commit>} 
Upstream location from which commits are identified to submit to p4.  By
default, this is the most recent p4 commit reachable from @samp{HEAD}.

@item  @samp{-M} 
Detect renames.  See git-diff(1).  Renames will be represented in p4
using explicit @emph{move} operations.  There is no corresponding option to
detect copies, but there are variables for both moves and copies.

@item  @samp{--preserve-user} 
Re-author p4 changes before submitting to p4.  This option requires p4 admin
privileges.

@item  @samp{--export-labels} 
Export tags from Git as p4 labels. Tags found in Git are applied to the
perforce working directory.

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
Show just what commits would be submitted to p4; do not change state in Git
or p4.

@item  @samp{--prepare-p4-only} 
Apply a commit to the p4 workspace, opening, adding and deleting files in p4
as for a normal submit operation.  Do not issue the final "p4 submit", but
instead print a message about how to submit manually or revert.  This option
always stops after the first (oldest) commit.  Git tags are not exported to
p4.

@item  @samp{--shelve} 
Instead of submitting create a series of shelved changelists.  After
creating each shelve, the relevant files are reverted/deleted.  If you have
multiple commits pending multiple shelves will be created.

@item  @samp{--update-shelve CHANGELIST} 
Update an existing shelved changelist with this commit. Implies
--shelve. Repeat for multiple shelved changelists.

@item  @samp{--conflict=(ask|skip|quit)} 
Conflicts can occur when applying a commit to p4.  When this happens, the
default behavior ("ask") is to prompt whether to skip this commit and
continue, or quit.  This option can be used to bypass the prompt, causing
conflicting commits to be automatically skipped, or to quit trying to apply
commits, without prompting.

@item  @samp{--branch <branch>} 
After submitting, sync this named branch instead of the default p4/master.
See the "Sync options" section above for more information.

@item  @samp{--commit <sha1>|<sha1..sha1>} 
Submit only the specified commit or range of commits, instead of the full
list of changes that are in the current Git branch.

@item  @samp{--disable-rebase} 
Disable the automatic rebase after all commits have been successfully
submitted. Can also be set with git-p4.disableRebase.

@item  @samp{--disable-p4sync} 
Disable the automatic sync of p4/master from Perforce after commits have
been submitted. Implies --disable-rebase. Can also be set with
git-p4.disableP4Sync. Sync with origin/master still goes ahead if possible.
@end table

@noindent

@chapheading Hooks for submit

@noindent

@heading p4-pre-submit

The @samp{p4-pre-submit} hook is executed if it exists and is executable.  The
hook takes no parameters and nothing from standard input. Exiting with
non-zero status from this script prevents @samp{git-p4 submit} from launching.
It can be bypassed with the @samp{--no-verify} command line option.

One usage scenario is to run unit tests in the hook.

@noindent

@heading p4-prepare-changelist

The @samp{p4-prepare-changelist} hook is executed right after preparing the
default changelist message and before the editor is started.  It takes one
parameter, the name of the file that contains the changelist text. Exiting
with a non-zero status from the script will abort the process.

The purpose of the hook is to edit the message file in place, and it is not
suppressed by the @samp{--no-verify} option. This hook is called even if
@samp{--prepare-p4-only} is set.

@noindent

@heading p4-changelist

The @samp{p4-changelist} hook is executed after the changelist message has been
edited by the user. It can be bypassed with the @samp{--no-verify} option. It
takes a single parameter, the name of the file that holds the proposed
changelist text. Exiting with a non-zero status causes the command to abort.

The hook is allowed to edit the changelist file and can be used to normalize
the text into some project standard format. It can also be used to refuse
the Submit after inspect the message file.

@noindent

@heading p4-post-changelist

The @samp{p4-post-changelist} hook is invoked after the submit has successfully
occurred in P4. It takes no parameters and is meant primarily for
notification and cannot affect the outcome of the git p4 submit action.

@noindent

@heading Rebase options

These options can be used to modify @emph{git p4 rebase} behavior.

@table @asis

@item  @samp{--import-labels} 
p4ラベルのインポート。
@end table

@noindent

@heading Unshelve options

@table @asis

@item  @samp{--origin} 
Sets the git refspec against which the shelved P4 changelist is compared.
Defaults to p4/master.
@end table

@noindent

@chapheading DEPOT PATH SYNTAX

The p4 depot path argument to @emph{git p4 sync} and @emph{git p4 clone} can be one or
more space-separated p4 depot paths, with an optional p4 revision specifier
on the end:

@table @asis

@item  "//depot/my/project" 
Import one commit with all files in the @emph{#head} change under that tree.

@item  "//depot/my/project@@all" 
Import one commit for each change in the history of that depot path.

@item  "//depot/my/project@@1,6" 
1から6の変更のみをインポートする。

@item  "//depot/proj1@@all //depot/proj2@@all" 
Import all changes from both named depot paths into a single repository.
Only files below these directories are included.  There is not a
subdirectory in Git for each "proj1" and "proj2".  You must use the
@samp{--destination} option when specifying more than one depot path.  The
revision specifier must be specified identically on each depot path.  If
there are files in the depot paths with the same name, the path with the
most recently updated version of the file is the one that appears in Git.
@end table

See @emph{p4 help revisions} for the full syntax of p4 revision specifiers.

@noindent

@chapheading CLIENT SPEC

The p4 client specification is maintained with the @emph{p4 client} command and
contains among other fields, a View that specifies how the depot is mapped
into the client repository.  The @emph{clone} and @emph{sync} commands can consult the
client spec when given the @samp{--use-client-spec} option or when the
useClientSpec variable is true.  After @emph{git p4 clone}, the useClientSpec
variable is automatically set in the repository configuration file.  This
allows future @emph{git p4 submit} commands to work properly; the submit command
looks only at the variable and does not have a command-line option.

The full syntax for a p4 view is documented in @emph{p4 help views}.  @emph{git p4}
knows only a subset of the view syntax.  It understands multi-line mappings,
overlays with @emph{+}, exclusions with @emph{-} and double-quotes around whitespace.
Of the possible wildcards, @emph{git p4} only handles @emph{…}, and only when it is
at the end of the path.  @emph{git p4} will complain if it encounters an
unhandled wildcard.

Bugs in the implementation of overlap mappings exist.  If multiple depot
paths map through overlays to the same location in the repository, @emph{git p4}
can choose the wrong one.  This is hard to solve without dedicating a client
spec just for @emph{git p4}.

The name of the client can be given to @emph{git p4} in multiple ways.  The
variable @emph{git-p4.client} takes precedence if it exists.  Otherwise, normal
p4 mechanisms of determining the client are used: environment variable
@samp{P4CLIENT}, a file referenced by @samp{P4CONFIG}, or the local host name.

@noindent

@chapheading BRANCH DETECTION

P4 does not have the same concept of a branch as Git.  Instead, p4 organizes
its content as a directory tree, where by convention different logical
branches are in different locations in the tree.  The @emph{p4 branch} command is
used to maintain mappings between different areas in the tree, and indicate
related content.  @emph{git p4} can use these mappings to determine branch
relationships.

If you have a repository where all the branches of interest exist as
subdirectories of a single depot path, you can use @samp{--detect-branches} when
cloning or syncing to have @emph{git p4} automatically find subdirectories in p4,
and to generate these as branches in Git.

For example, if the P4 repository structure is:

@example
//depot/main/...
//depot/branch1/...
@end example


And "p4 branch -o branch1" shows a View line that looks like:

@example
//depot/main/... //depot/branch1/...
@end example


Then this @emph{git p4 clone} command:

@example
git p4 clone --detect-branches //depot@@all
@end example


produces a separate branch in @emph{refs/remotes/p4/} for //depot/main, called
@emph{master}, and one for //depot/branch1 called @emph{depot/branch1}.

However, it is not necessary to create branches in p4 to be able to use them
like branches.  Because it is difficult to infer branch relationships
automatically, a Git configuration setting @emph{git-p4.branchList} can be used
to explicitly identify branch relationships.  It is a list of
"source:destination" pairs, like a simple p4 branch specification, where the
"source" and "destination" are the path elements in the p4 repository.  The
example above relied on the presence of the p4 branch.  Without p4 branches,
the same result will occur with:

@example
git init depot
cd depot
git config git-p4.branchList main:branch1
git p4 clone --detect-branches //depot@@all .
@end example


@noindent

@chapheading PERFORMANCE

The fast-import mechanism used by @emph{git p4} creates one pack file for each
invocation of @emph{git p4 sync}.  Normally, Git garbage compression
(git-gc(1)) automatically compresses these to fewer pack files, but
explicit invocation of @emph{git repack -adf} may improve performance.

@noindent

@chapheading CONFIGURATION VARIABLES

The following config settings can be used to modify @emph{git p4} behavior.  They
all are in the @emph{git-p4} section.

@noindent

@heading General variables

@table @asis

@item  git-p4.user 
User specified as an option to all p4 commands, with @emph{-u <user>}.  The
environment variable @samp{P4USER} can be used instead.

@item  git-p4.password 
Password specified as an option to all p4 commands, with @emph{-P <password>}.
The environment variable @samp{P4PASS} can be used instead.

@item  git-p4.port 
Port specified as an option to all p4 commands, with @emph{-p <port>}.  The
environment variable @samp{P4PORT} can be used instead.

@item  git-p4.host 
Host specified as an option to all p4 commands, with @emph{-h <host>}.  The
environment variable @samp{P4HOST} can be used instead.

@item  git-p4.client 
Client specified as an option to all p4 commands, with @emph{-c <client>},
including the client spec.

@item  git-p4.retries 
Specifies the number of times to retry a p4 command (notably, @emph{p4 sync}) if
the network times out. The default value is 3.  Set the value to 0 to
disable retries or if your p4 version does not support retries (pre 2012.2).
@end table

@noindent

@heading Clone and sync variables

@table @asis

@item  git-p4.syncFromOrigin 
Because importing commits from other Git repositories is much faster than
importing them from p4, a mechanism exists to find p4 changes first in Git
remotes.  If branches exist under @emph{refs/remote/origin/p4}, those will be
fetched and used when syncing from p4.  This variable can be set to @emph{false}
to disable this behavior.

@item  git-p4.branchUser 
One phase in branch detection involves looking at p4 branches to find new
ones to import.  By default, all branches are inspected.  This option limits
the search to just those owned by the single user named in the variable.

@item  git-p4.branchList 
List of branches to be imported when branch detection is enabled.  Each
entry should be a pair of branch names separated by a colon (:).  This
example declares that both branchA and branchB were created from main:

@example
git config       git-p4.branchList main:branchA
git config --add git-p4.branchList main:branchB
@end example


@item  git-p4.ignoredP4Labels 
List of p4 labels to ignore. This is built automatically as unimportable
labels are discovered.

@item  git-p4.importLabels 
Import p4 labels into git, as per --import-labels.

@item  git-p4.labelImportRegexp 
Only p4 labels matching this regular expression will be imported. The
default value is @emph{[a-zA-Z0-9_\-.]+$}.

@item  git-p4.useClientSpec 
Specify that the p4 client spec should be used to identify p4 depot paths of
interest.  This is equivalent to specifying the option @samp{--use-client-spec}.
See the "CLIENT SPEC" section above.  This variable is a boolean, not the
name of a p4 client.

@item  git-p4.pathEncoding 
Perforce keeps the encoding of a path as given by the originating OS.  Git
expects paths encoded as UTF-8. Use this config to tell git-p4 what encoding
Perforce had used for the paths. This encoding is used to transcode the
paths to UTF-8. As an example, Perforce on Windows often uses "cp1252" to
encode path names.

@item  git-p4.largeFileSystem 
Specify the system that is used for large (binary) files. Please note that
large file systems do not support the @emph{git p4 submit} command.  Only Git LFS
is implemented right now (see @uref{https://git-lfs.github.com/,https://git-lfs.github.com/} for more
information). Download and install the Git LFS command line extension to use
this option and configure it like this:

@example
git config       git-p4.largeFileSystem GitLFS
@end example


@item  git-p4.largeFileExtensions 
All files matching a file extension in the list will be processed by the
large file system. Do not prefix the extensions with @emph{.}.

@item  git-p4.largeFileThreshold 
All files with an uncompressed size exceeding the threshold will be
processed by the large file system. By default the threshold is defined in
bytes. Add the suffix k, m, or g to change the unit.

@item  git-p4.largeFileCompressedThreshold 
All files with a compressed size exceeding the threshold will be processed
by the large file system. This option might slow down your clone/sync
process. By default the threshold is defined in bytes. Add the suffix k, m,
or g to change the unit.

@item  git-p4.largeFilePush 
Boolean variable which defines if large files are automatically pushed to a
server.

@item  git-p4.keepEmptyCommits 
A changelist that contains only excluded files will be imported as an empty
commit if this boolean option is set to true.

@item  git-p4.mapUser 
Map a P4 user to a name and email address in Git. Use a string with the
following format to create a mapping:

@example
git config --add git-p4.mapUser "p4user = First Last <mail@@address.com>"
@end example


A mapping will override any user information from P4. Mappings for multiple
P4 user can be defined.
@end table

@noindent

@heading Submit variables

@table @asis

@item  git-p4.detectRenames 
Detect renames.  See git-diff(1).  This can be true, false, or a
score as expected by @emph{git diff -M}.

@item  git-p4.detectCopies 
Detect copies.  See git-diff(1).  This can be true, false, or a
score as expected by @emph{git diff -C}.

@item  git-p4.detectCopiesHarder 
Detect copies harder.  See git-diff(1).  A boolean.

@item  git-p4.preserveUser 
On submit, re-author changes to reflect the Git author, regardless of who
invokes @emph{git p4 submit}.

@item  git-p4.allowMissingP4Users 
When @emph{preserveUser} is true, @emph{git p4} normally dies if it cannot find an
author in the p4 user map.  This setting submits the change regardless.

@item  git-p4.skipSubmitEdit 
The submit process invokes the editor before each p4 change is submitted.
If this setting is true, though, the editing step is skipped.

@item  git-p4.skipSubmitEditCheck 
After editing the p4 change message, @emph{git p4} makes sure that the
description really was changed by looking at the file modification time.
This option disables that test.

@item  git-p4.allowSubmit 
By default, any branch can be used as the source for a @emph{git p4 submit}
operation.  This configuration variable, if set, permits only the named
branches to be used as submit sources.  Branch names must be the short names
(no "refs/heads/"), and should be separated by commas (","), with no spaces.

@item  git-p4.skipUserNameCheck 
If the user running @emph{git p4 submit} does not exist in the p4 user map, @emph{git
p4} exits.  This option can be used to force submission regardless.

@item  git-p4.attemptRCSCleanup 
If enabled, @emph{git p4 submit} will attempt to cleanup RCS keywords ($Header$,
etc). These would otherwise cause merge conflicts and prevent the submit
going ahead. This option should be considered experimental at present.

@item  git-p4.exportLabels 
Export Git tags to p4 labels, as per --export-labels.

@item  git-p4.labelExportRegexp 
Only p4 labels matching this regular expression will be exported. The
default value is @emph{[a-zA-Z0-9_\-.]+$}.

@item  git-p4.conflict 
Specify submit behavior when a conflict with p4 is found, as per
--conflict.  The default behavior is @emph{ask}.

@item  git-p4.disableRebase 
Do not rebase the tree against p4/master following a submit.

@item  git-p4.disableP4Sync 
Do not sync p4/master with Perforce following a submit. Implies
git-p4.disableRebase.
@end table

@noindent

@chapheading IMPLEMENTATION DETAILS

@itemize 

@item
Changesets from p4 are imported using Git fast-import.

@item
Cloning or syncing does not require a p4 client; file contents are collected
using @emph{p4 print}.

@item
Submitting requires a p4 client, which is not in the same location as the
Git repository.  Patches are applied, one at a time, to this p4 client and
submitted from there.

@item
Each commit imported by @emph{git p4} has a line at the end of the log message
indicating the p4 depot location and change number.  This line is used by
later @emph{git p4 sync} operations to know which p4 changes are new.
@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-pack-objects,,,Top
@chapheading Name

git-pack-objects — Create a packed archive of objects

@noindent

@chapheading Synopsis

@display
git pack-objects [-q | --progress | --all-progress] [--all-progress-implied]
        [--no-reuse-delta] [--delta-base-offset] [--non-empty]
        [--local] [--incremental] [--window=<n>] [--depth=<n>]
        [--revs [--unpacked | --all]] [--keep-pack=<pack-name>]
        [--stdout [--filter=<filter-spec>] | base-name]
        [--shallow] [--keep-true-parents] [--[no-]sparse] < object-list
@end display


@noindent

@chapheading DESCRIPTION

Reads list of objects from the standard input, and writes either one or more
packed archives with the specified base-name to disk, or a packed archive to
the standard output.

A packed archive is an efficient way to transfer a set of objects between
two repositories as well as an access efficient archival format.  In a
packed archive, an object is either stored as a compressed whole or as a
difference from some other object.  The latter is often called a delta.

The packed archive format (.pack) is designed to be self-contained so that
it can be unpacked without any further information. Therefore, each object
that a delta depends upon must be present within the pack.

A pack index file (.idx) is generated for fast, random access to the objects
in the pack. Placing both the index file (.idx) and the packed archive
(.pack) in the pack/ subdirectory of $GIT_OBJECT_DIRECTORY (or any of the
directories on $GIT_ALTERNATE_OBJECT_DIRECTORIES)  enables Git to read from
the pack archive.

The @emph{git unpack-objects} command can read the packed archive and expand the
objects contained in the pack into "one-file one-object" format; this is
typically done by the smart-pull commands when a pack is created on-the-fly
for efficient network transport by their peers.

@noindent

@chapheading OPTIONS

@table @asis

@item  base-name 
Write into pairs of files (.pack and .idx), using <base-name> to determine
the name of the created file.  When this option is used, the two files in a
pair are written in <base-name>-<SHA-1>.@{pack,idx@} files.  <SHA-1> is a hash
based on the pack content and is written to the standard output of the
command.

@item  @samp{--stdout} 
Write the pack contents (what would have been written to .pack file) out to
the standard output.

@item  @samp{--revs} 
Read the revision arguments from the standard input, instead of individual
object names.  The revision arguments are processed the same way as @emph{git
rev-list} with the @samp{--objects} flag uses its @samp{commit} arguments to build the
list of objects it outputs.  The objects on the resulting list are packed.
Besides revisions, @samp{--not} or @samp{--shallow <SHA-1>} lines are also accepted.

@item  @samp{--unpacked} 
This implies @samp{--revs}.  When processing the list of revision arguments read
from the standard input, limit the objects packed to those that are not
already packed.

@item  @samp{--all} 
This implies @samp{--revs}.  In addition to the list of revision arguments read
from the standard input, pretend as if all refs under @samp{refs/} are specified
to be included.

@item  @samp{--include-tag} 
Include unasked-for annotated tags if the object they reference was included
in the resulting packfile.  This can be useful to send new tags to native
Git clients.

@item  @samp{--stdin-packs} 
Read the basenames of packfiles (e.g., @samp{pack-1234abcd.pack})  from the
standard input, instead of object names or revision arguments. The resulting
pack contains all objects listed in the included packs (those not beginning
with @samp{^}), excluding any objects listed in the excluded packs (beginning
with @samp{^}).

Incompatible with @samp{--revs}, or options that imply @samp{--revs} (such as
@samp{--all}), with the exception of @samp{--unpacked}, which is compatible.

@item  @samp{--window=<n>} 
@itemx  @samp{--depth=<n>} 
These two options affect how the objects contained in the pack are stored
using delta compression.  The objects are first internally sorted by type,
size and optionally names and compared against the other objects within
--window to see if using delta compression saves space.  --depth limits the
maximum delta depth; making it too deep affects the performance on the
unpacker side, because delta data needs to be applied that many times to get
to the necessary object.

The default value for --window is 10 and --depth is 50. The maximum depth is
4095.

@item  @samp{--window-memory=<n>} 
This option provides an additional limit on top of @samp{--window}; the window
size will dynamically scale down so as to not take up more than @emph{<n>} bytes
in memory.  This is useful in repositories with a mix of large and small
objects to not run out of memory with a large window, but still be able to
take advantage of the large window for the smaller objects.  The size can be
suffixed with "k", "m", or "g".  @samp{--window-memory=0} makes memory usage
unlimited.  The default is taken from the @samp{pack.windowMemory} configuration
variable.

@item  @samp{--max-pack-size=<n>} 
In unusual scenarios, you may not be able to create files larger than a
certain size on your filesystem, and this option can be used to tell the
command to split the output packfile into multiple independent packfiles,
each not larger than the given size. The size can be suffixed with "k", "m",
or "g". The minimum size allowed is limited to 1 MiB.  The default is
unlimited, unless the config variable @samp{pack.packSizeLimit} is set. Note that
this option may result in a larger and slower repository; see the discussion
in @samp{pack.packSizeLimit}.

@item  @samp{--honor-pack-keep} 
This flag causes an object already in a local pack that has a .keep file to
be ignored, even if it would have otherwise been packed.

@item  @samp{--keep-pack=<pack-name>} 
This flag causes an object already in the given pack to be ignored, even if
it would have otherwise been packed. @samp{<pack-name>} is the pack file name
without leading directory (e.g. @samp{pack-123.pack}). The option could be
specified multiple times to keep multiple packs.

@item  @samp{--incremental} 
This flag causes an object already in a pack to be ignored even if it would
have otherwise been packed.

@item  @samp{--local} 
This flag causes an object that is borrowed from an alternate object store
to be ignored even if it would have otherwise been packed.

@item  @samp{--non-empty} 
Only create a packed archive if it would contain at least one object.

@item  @samp{--progress} 
Progress status is reported on the standard error stream by default when it
is attached to a terminal, unless -q is specified. This flag forces progress
status even if the standard error stream is not directed to a terminal.

@item  @samp{--all-progress} 
When --stdout is specified then progress report is displayed during the
object count and compression phases but inhibited during the write-out
phase. The reason is that in some cases the output stream is directly linked
to another command which may wish to display progress status of its own as
it processes incoming pack data.  This flag is like --progress except that
it forces progress report for the write-out phase as well even if --stdout
is used.

@item  @samp{--all-progress-implied} 
This is used to imply --all-progress whenever progress display is
activated.  Unlike --all-progress this flag doesn’t actually force any
progress display by itself.

@item  @samp{-q} 
This flag makes the command not to report its progress on the standard error
stream.

@item  @samp{--no-reuse-delta} 
When creating a packed archive in a repository that has existing packs, the
command reuses existing deltas.  This sometimes results in a slightly
suboptimal pack.  This flag tells the command not to reuse existing deltas
but compute them from scratch.

@item  @samp{--no-reuse-object} 
This flag tells the command not to reuse existing object data at all,
including non deltified object, forcing recompression of everything.  This
implies --no-reuse-delta. Useful only in the obscure case where wholesale
enforcement of a different compression level on the packed data is desired.

@item  @samp{--compression=<n>} 
Specifies compression level for newly-compressed data in the generated
pack.  If not specified, pack compression level is determined first by
pack.compression, then by core.compression, and defaults to -1, the zlib
default, if neither is set.  Add --no-reuse-object if you want to force a
uniform compression level on all data no matter the source.

@item  @samp{--[no-]sparse} 
Toggle the "sparse" algorithm to determine which objects to include in the
pack, when combined with the "--revs" option. This algorithm only walks
trees that appear in paths that introduce new objects.  This can have
significant performance benefits when computing a pack to send a small
change. However, it is possible that extra objects are added to the
pack-file if the included commits contain certain types of direct
renames. If this option is not included, it defaults to the value of
@samp{pack.useSparse}, which is true unless otherwise specified.

@item  @samp{--thin} 
Create a "thin" pack by omitting the common objects between a sender and a
receiver in order to reduce network transfer. This option only makes sense
in conjunction with --stdout.

Note: A thin pack violates the packed archive format by omitting required
objects and is thus unusable by Git without making it self-contained. Use
@samp{git index-pack --fix-thin} (see git-index-pack(1)) to restore the
self-contained property.

@item  @samp{--shallow} 
Optimize a pack that will be provided to a client with a shallow
repository.  This option, combined with --thin, can result in a smaller pack
at the cost of speed.

@item  @samp{--delta-base-offset} 
A packed archive can express the base object of a delta as either a 20-byte
object name or as an offset in the stream, but ancient versions of Git don’t
understand the latter.  By default, @emph{git pack-objects} only uses the former
format for better compatibility.  This option allows the command to use the
latter format for compactness.  Depending on the average delta chain length,
this option typically shrinks the resulting packfile by 3-5 per-cent.

Note: Porcelain commands such as @samp{git gc} (see git-gc(1)), @samp{git
repack} (see git-repack(1)) pass this option by default in modern
Git when they put objects in your repository into pack files.  So does @samp{git
bundle} (see git-bundle(1)) when it creates a bundle.

@item  @samp{--threads=<n>} 
Specifies the number of threads to spawn when searching for best delta
matches.  This requires that pack-objects be compiled with pthreads
otherwise this option is ignored with a warning.  This is meant to reduce
packing time on multiprocessor machines.  The required amount of memory for
the delta search window is however multiplied by the number of threads.
Specifying 0 will cause Git to auto-detect the number of CPU’s and set the
number of threads accordingly.

@item  @samp{--index-version=<version>[,<offset>]} 
This is intended to be used by the test suite only. It allows to force the
version for the generated pack index, and to force 64-bit index entries on
objects located above the given offset.

@item  @samp{--keep-true-parents} 
With this option, parents that are hidden by grafts are packed nevertheless.

@item  @samp{--filter=<filter-spec>} 
Requires @samp{--stdout}.  Omits certain objects (usually blobs) from the
resulting packfile.  See git-rev-list(1) for valid @samp{<filter-spec>}
forms.

@item  @samp{--no-filter} 
Turns off any previous @samp{--filter=} argument.

@item  @samp{--missing=<missing-action>} 
A debug option to help with future "partial clone" development.  This option
specifies how missing objects are handled.

The form @emph{--missing=error} requests that pack-objects stop with an error if
a missing object is encountered.  If the repository is a partial clone, an
attempt to fetch missing objects will be made before declaring them
missing.  This is the default action.

The form @emph{--missing=allow-any} will allow object traversal to continue if a
missing object is encountered.  No fetch of a missing object will occur.
Missing objects will silently be omitted from the results.

The form @emph{--missing=allow-promisor} is like @emph{allow-any}, but will only allow
object traversal to continue for EXPECTED promisor missing objects.  No
fetch of a missing object will occur.  An unexpected missing object will
raise an error.

@item  @samp{--exclude-promisor-objects} 
Omit objects that are known to be in the promisor remote.  (This option has
the purpose of operating only on locally created objects, so that when we
repack, we still maintain a distinction between locally created objects
[without .promisor] and objects from the promisor remote [with .promisor].)
This is used with partial clone.

@item  @samp{--keep-unreachable} 
Objects unreachable from the refs in packs named with --unpacked= option are
added to the resulting pack, in addition to the reachable objects that are
not in packs marked with *.keep files. This implies @samp{--revs}.

@item  @samp{--pack-loose-unreachable} 
Pack unreachable loose objects (and their loose counterparts removed). This
implies @samp{--revs}.

@item  @samp{--unpack-unreachable} 
Keep unreachable objects in loose form. This implies @samp{--revs}.

@item  @samp{--delta-islands} 
Restrict delta matches based on "islands". See DELTA ISLANDS below.
@end table

@noindent

@chapheading DELTA ISLANDS

When possible, @samp{pack-objects} tries to reuse existing on-disk deltas to
avoid having to search for new ones on the fly. This is an important
optimization for serving fetches, because it means the server can avoid
inflating most objects at all and just send the bytes directly from
disk. This optimization can’t work when an object is stored as a delta
against a base which the receiver does not have (and which we are not
already sending). In that case the server "breaks" the delta and has to find
a new one, which has a high CPU cost. Therefore it’s important for
performance that the set of objects in on-disk delta relationships match
what a client would fetch.

In a normal repository, this tends to work automatically. The objects are
mostly reachable from the branches and tags, and that’s what clients
fetch. Any deltas we find on the server are likely to be between objects the
client has or will have.

But in some repository setups, you may have several related but separate
groups of ref tips, with clients tending to fetch those groups
independently. For example, imagine that you are hosting several "forks" of
a repository in a single shared object store, and letting clients view them
as separate repositories through @samp{GIT_NAMESPACE} or separate repos using the
alternates mechanism. A naive repack may find that the optimal delta for an
object is against a base that is only found in another fork. But when a
client fetches, they will not have the base object, and we’ll have to find a
new delta on the fly.

A similar situation may exist if you have many refs outside of @samp{refs/heads/}
and @samp{refs/tags/} that point to related objects (e.g., @samp{refs/pull} or
@samp{refs/changes} used by some hosting providers). By default, clients fetch
only heads and tags, and deltas against objects found only in those other
groups cannot be sent as-is.

Delta islands solve this problem by allowing you to group your refs into
distinct "islands". Pack-objects computes which objects are reachable from
which islands, and refuses to make a delta from an object @samp{A} against a base
which is not present in all of @samp{A}'s islands. This results in slightly
larger packs (because we miss some delta opportunities), but guarantees that
a fetch of one island will not have to recompute deltas on the fly due to
crossing island boundaries.

When repacking with delta islands the delta window tends to get clogged with
candidates that are forbidden by the config. Repacking with a big --window
helps (and doesn’t take as long as it otherwise might because we can reject
some object pairs based on islands before doing any computation on the
content).

Islands are configured via the @samp{pack.island} option, which can be specified
multiple times. Each value is a left-anchored regular expressions matching
refnames. For example:

@example
[pack]
island = refs/heads/
island = refs/tags/
@end example


puts heads and tags into an island (whose name is the empty string; see
below for more on naming). Any refs which do not match those regular
expressions (e.g., @samp{refs/pull/123}) is not in any island. Any object which
is reachable only from @samp{refs/pull/} (but not heads or tags) is therefore not
a candidate to be used as a base for @samp{refs/heads/}.

Refs are grouped into islands based on their "names", and two regexes that
produce the same name are considered to be in the same island. The names are
computed from the regexes by concatenating any capture groups from the
regex, with a @emph{-} dash in between. (And if there are no capture groups, then
the name is the empty string, as in the above example.) This allows you to
create arbitrary numbers of islands. Only up to 14 such capture groups are
supported though.

For example, imagine you store the refs for each fork in @samp{refs/virtual/ID},
where @samp{ID} is a numeric identifier. You might then configure:

@example
[pack]
island = refs/virtual/([0-9]+)/heads/
island = refs/virtual/([0-9]+)/tags/
island = refs/virtual/([0-9]+)/(pull)/
@end example


That puts the heads and tags for each fork in their own island (named "1234"
or similar), and the pull refs for each go into their own "1234-pull".

Note that we pick a single island for each regex to go into, using "last one
wins" ordering (which allows repo-specific config to take precedence over
user-wide config, and so forth).

@noindent

@chapheading CONFIGURATION

Various configuration variables affect packing, see git-config(1)
(search for "pack" and "delta").

Notably, delta compression is not used on objects larger than the
@samp{core.bigFileThreshold} configuration variable and on files with the
attribute @samp{delta} set to false.

@noindent

@chapheading SEE ALSO

git-rev-list(1) git-repack(1) git-prune-packed(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-pack-redundant,,,Top
@chapheading Name

git-pack-redundant — 無駄なパックファイルを探す

@noindent

@chapheading Synopsis

@display
git pack-redundant [ --verbose ] [ --alt-odb ] < --all | .pack filename … >
@end display


@noindent

@chapheading DESCRIPTION

このプログラムは、リポジトリ内のどのパックが無駄であるかを計算します。あなたがリポジトリのルートにいる場合、出力は @samp{xargsrm}
へのパイプに適しています。

@emph{git pack-redundant}
は、標準入力のオブジェクトのリストを受け入れます。無駄でない必要なパックを確認するとき、指定した任意のオブジェクトはすべて無視されます。これにより、到達不能なオブジェクトを含むパックを削除する場合に、以下のコマンドが役立ちます。

git fsck --full --unreachable | cut -d ' ' -f3 | \ git pack-redundant --all
| xargs rm

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--all} 
すべてのパックを処理します。コマンドラインのファイル名はすべて無視されます。

@item  @samp{--alt-odb} 
代替オブジェクトディレクトリのパックに存在するオブジェクトがローカルパックに存在する必要なしとします。

@item  @samp{--verbose} 
いくつかの統計をstderrに出力します。 パフォーマンスの低下はわずかです。
@end table

@noindent

@chapheading SEE ALSO

git-pack-objects(1) git-repack(1)
git-prune-packed(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-pack-refs,,,Top
@chapheading Name

git-pack-refs — 効率的なリポジトリアクセスのためにヘッド(heads)とタグ(tags)をパックします

@noindent

@chapheading Synopsis

@display
git pack-refs [--all] [--no-prune]
@end display


@noindent

@chapheading DESCRIPTION

旧来、ブランチとタグのヒント(まとめて「refs」と呼ばれます)は、refごとに1つのファイルを @samp{$GIT_DIR/refs}
ディレクトリの下のディレクトリ(サブディレクトリ)に保存していました。多くのブランチヒントは頻繁に更新される傾向がありますが、ほとんどのタグと一部のブランチヒントは更新されません。リポジトリに数百または数千のタグがある場合、この
1ファイル毎に1ref形式 はストレージを浪費し、パフォーマンスを低下させます。

このコマンドは、refを単一のファイル @samp{$GIT_DIR/packed-refs}
に保存することにより、ストレージとパフォーマンスの問題を解決するために使用されます。旧来の @samp{$GIT_DIR/refs}
ディレクトリ階層にrefがない場合、このファイルの中から探し、見つかればそれが使用されます。

その後のブランチの更新では、常に @samp{$GIT_DIR/refs} ディレクトリ階層の下に新しいファイルが作成されます。

refが多すぎるリポジトリを処理するための推奨される方法は、refを @samp{--all} で一度パックし、ときどき @samp{git pack-refs}
を実行することです。タグは定義上静止しており、変更されることは期待されていません。ブランチヘッドは最初の @samp{pack-refs --all}
でパックされますが、現在アクティブなブランチヘッドのみはアンパックされ、その後 @samp{pack-refs} ( @samp{--all}
なし)ではアンパックされたままになります。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--all} 
このコマンドはデフォルトでは、すでにパックされているすべてのタグとrefをパックし、他のrefはそのままにします。これは、ブランチが積極的に開発されることが期待されており、そのヒントをパックしてもパフォーマンスが向上しないためです。このオプションを使用すると、ブランチのヒントもパックされます。
歴史的な関心のある多くのブランチがあるリポジトリに役立ちます。

@item  @samp{--no-prune} 
コマンドは通常、それらをパックした後、 @samp{$GIT_DIR/refs} 階層の下の緩いrefを削除します。このオプションは、そうしないように指示します。
@end table

@noindent

@chapheading BUGS

pack-refs メカニズムが導入される前に作成された古い文書では、 "branch <branch> exists" という意味の場合でも
".git/refs/heads/<branch> file exists" などと紹介される場合があります。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-patch-id,,,Top
@chapheading Name

git-patch-id — パッチの一意のIDを計算します

@noindent

@chapheading Synopsis

@display
git patch-id [--stable | --unstable]
@end display


@noindent

@chapheading DESCRIPTION

標準入力からパッチを読み取り、そのパッチIDを計算します。

「パッチID」は、パッチに関連付けられたファイル差分のSHA-1の合計に過ぎず、空白と行番号は無視されます。そのため、「適度に安定」していますが、同時に適度に一意です。つまり、同じ「パッチID」を持つ2つのパッチは、ほぼ同じものであることが保証されています。

つまり、これを使用して、重複している可能性のあるコミットを探すことができます。

@emph{git diff-tree}
出力を処理する場合、パッチの前にコミットのオブジェクト名が付いているという事実を利用して、2つの40バイトの16進文字列を出力します。最初の文字列はパッチIDで、2番目の文字列はコミットIDです。これを使用して、パッチIDからコミットIDへのマッピングを作成できます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--stable} 
パッチIDとして「安定した」ハッシュの合計を使用します。 このオプションを使用すると:

@itemize 

@item
パッチを構成するファイル差分を並べ替えても、IDには影響しません。特に、 "-O<orderfile>"
の異なる2つの設定で同じ2つのツリーを比較することによって生成された2つのパッチは、同じパッチIDになります。これにより、計算結果をキーとして使用して、
2本のツリー間の変更に関するメタ情報にインデックスを付ける事ができます。

@item
結果として、 "-O<orderfile>" を使用せずに取得されたdiff出力で使用された場合でも、 git 1.9
以前で生成された値、または「unstable」ハッシュ(以下 @samp{--unstable}
を参照)が構成されたときに生成された値とは異なります。これにより、そのような「不安定な」または過去のパッチIDを格納している既存のデータベースが使用できなくなります。

@example
patchid.stable が true に設定されている場合は、こちらがデフォルトになります。
@end example
@end itemize

@item  @samp{--unstable} 
パッチIDとして「不安定な」ハッシュを使用します。このオプションを使用すると、生成される結果は git1.9 以前で生成される patch-id
値と互換性があります。git 1.9
以前で作成されたパッチIDを保存している既存のデータベースを使用しているユーザー(並べ替えられたパッチを処理しないユーザー)は、このオプションを使用することをお勧めします。

@example
※これがデフォルトです。
@end example
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-prune-packed,,,Top
@chapheading Name

git-prune-packed — すでにパックファイルにある余分なオブジェクトを削除します

@noindent

@chapheading Synopsis

@display
git prune-packed [-n|--dry-run] [-q|--quiet]
@end display


@noindent

@chapheading DESCRIPTION

このプログラムは、 パックファイルに現在存在するすべてのオブジェクトを、 @samp{$GIT_OBJECT_DIRECTORY}
で検索し、独立したオブジェクトディレクトリでも検索します。

余分なオブジェクトはすべて削除されます。

パックは、個別に圧縮され、デルタ圧縮が適用され、単一のファイルに格納され、関連付けられたインデックスファイルを持つオブジェクトのコレクションです。

パックは、ミラーシステム、バックアップエンジン、ディスクストレージなどの負荷を軽減するために使用されます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
実際にオブジェクトを削除するのではなく、削除されるはずのオブジェクトの表示のみを行います。

@item  @samp{-q} 
@itemx  @samp{--quiet} 
進行状況インジケーターを黙らせます。
@end table

@noindent

@chapheading SEE ALSO

git-pack-objects(1) git-repack(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-prune,,,Top
@chapheading Name

git-prune — オブジェクトデータベースで、到達不能なすべてのオブジェクトを剪定(prune)します

@noindent

@chapheading Synopsis

@display
git prune [-n] [-v] [--progress] [--expire <time>] [--] [<head>…]
@end display


@noindent

@chapheading DESCRIPTION

@quotation

@strong{Note}

ほとんどの場合、ユーザーは @emph{git prune} を呼び出す @emph{git gc} を実行する必要があります。
以下の「NOTES」セクションを参照してください。
@end quotation

これは、 @samp{refs/} で使用可能なすべてのrefを使用して @emph{git fsck --unreachable}
を実行し、オプションでコマンドラインで指定されたオブジェクトの追加セットを使用して、オブジェクトデータベースのこれらのヘッドオブジェクトから到達できないすべてのアンパックされたオブジェクトを剪定(prune)します。さらに、「git
prune-packed」を実行することにより、パック内にも同じモノがあるアンパックされたオブジェクトを剪定します。
また、どのrefからも到達できないエントリを .git/shallow から削除(removes)します。

注意: 到達不能なパックされたオブジェクトが残ることに注意してください。これが望ましくない場合は、 git-repack(1)
を参照してください。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
何も削除しません。何が削除される予定かを報告するだけです。

@item  @samp{-v} 
@itemx  @samp{--verbose} 
削除されたすべてのオブジェクトを報告します。

@item  @samp{--progress} 
進捗状況を表示します。

@item  @samp{--expire <time>} 
<time> より古いルーズオブジェクトのみを期限切れにします。

@item  @samp{--} 
これ以降の引数をオプションとして解釈しないでください。

@item  <head>… 
我々の任意の参照から到達可能なオブジェクトに加えて、リストされた <head>s から到達可能なオブジェクトを保持します。
@end table

@noindent

@chapheading EXAMPLES

リポジトリで使用されていないオブジェクト、またはリポジトリから @samp{.git/objects/info/alternates}
を介して借用しているオブジェクトを剪定(prune)するには:

@example
$ git prune $(cd ../another && git rev-parse --all)
@end example


@noindent

@chapheading NOTES

ほとんどの場合、ユーザーは「git prune」を直接呼び出す必要はありませんが、代わりに「git
gc」を呼び出す必要があります。これは、他の多くのハウスキーピングタスクとともに剪定(plune)を処理します。

剪定(prune)の対象と見なされるオブジェクトの説明については、「git fsck」の @samp{--unreachable} オプションを参照してください。

@noindent

@chapheading SEE ALSO

git-fsck(1), git-gc(1), git-reflog(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-pull,,,Top
@chapheading Name

git-pull — Fetch from and integrate with another repository or a local branch

@noindent

@chapheading Synopsis

@display
git pull [<options>] [<repository> [<refspec>…]]
@end display


@noindent

@chapheading DESCRIPTION

Incorporates changes from a remote repository into the current branch.  If
the current branch is behind the remote, then by default it will
fast-forward the current branch to match the remote.  If the current branch
and the remote have diverged, the user needs to specify how to reconcile the
divergent branches with @samp{--rebase} or @samp{--no-rebase} (or the corresponding
configuration option in @samp{pull.rebase}).

More precisely, @samp{git pull} runs @samp{git fetch} with the given parameters and
then depending on configuration options or command line flags, will call
either @samp{git rebase} or @samp{git merge} to reconcile diverging branches.

<repository> should be the name of a remote repository as passed to
git-fetch(1).  <refspec> can name an arbitrary remote ref (for
example, the name of a tag) or even a collection of refs with corresponding
remote-tracking branches (e.g.,
refs/heads/*:refs/remotes/origin/*), but usually it is the
name of a branch in the remote repository.

Default values for <repository> and <branch> are read from the "remote" and
"merge" configuration for the current branch as set by git-branch(1)
@samp{--track}.

Assume the following history exists and the current branch is "@samp{master}":

@example
          A---B---C master on origin
         /
    D---E---F---G master
        ^
        origin/master in your repository
@end example


Then "@samp{git pull}" will fetch and replay the changes from the remote @samp{master}
branch since it diverged from the local @samp{master} (i.e., @samp{E})  until its
current commit (@samp{C}) on top of @samp{master} and record the result in a new
commit along with the names of the two parent commits and a log message from
the user describing the changes.

@example
          A---B---C origin/master
         /         \
    D---E---F---G---H master
@end example


See git-merge(1) for details, including how conflicts are presented
and handled.

In Git 1.7.0 or later, to cancel a conflicting merge, use @samp{git reset
--merge}.  @strong{Warning}: In older versions of Git, running @emph{git pull} with
uncommitted changes is discouraged: while possible, it leaves you in a state
that may be hard to back out of in the case of a conflict.

If any of the remote changes overlap with local uncommitted changes, the
merge will be automatically canceled and the work tree untouched.  It is
generally best to get any local changes in working order before pulling or
stash them away with git-stash(1).

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-q} 
@itemx  @samp{--quiet} 
This is passed to both underlying git-fetch to squelch reporting of during
transfer, and underlying git-merge to squelch output during merging.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Pass --verbose to git-fetch and git-merge.

@item  @samp{--[no-]recurse-submodules[=yes|on-demand|no]} 
This option controls if new commits of populated submodules should be
fetched, and if the working trees of active submodules should be updated,
too (see git-fetch(1), git-config(1) and
gitmodules(5)).

If the checkout is done via rebase, local submodule commits are rebased as
well.

If the update is done via merge, the submodule conflicts are resolved and
checked out.
@end table

@noindent

@heading Options related to merging

@table @asis

@item  @samp{--commit} 
@itemx  @samp{--no-commit} 
Perform the merge and commit the result. This option can be used to override
--no-commit.
Only useful when merging.

With --no-commit perform the merge and stop just before creating a merge
commit, to give the user a chance to inspect and further tweak the merge
result before committing.

Note that fast-forward updates do not create a merge commit and therefore
there is no way to stop those merges with --no-commit.  Thus, if you want to
ensure your branch is not changed or updated by the merge command, use
--no-ff with --no-commit.

@item  @samp{--edit} 
@itemx  @samp{-e} 
@itemx  @samp{--no-edit} 
Invoke an editor before committing successful mechanical merge to further
edit the auto-generated merge message, so that the user can explain and
justify the merge. The @samp{--no-edit} option can be used to accept the
auto-generated message (this is generally discouraged).

Older scripts may depend on the historical behaviour of not allowing the
user to edit the merge log message. They will see an editor opened when they
run @samp{git merge}. To make it easier to adjust such scripts to the updated
behaviour, the environment variable @samp{GIT_MERGE_AUTOEDIT} can be set to @samp{no}
at the beginning of them.

@item  @samp{--cleanup=<mode>} 
This option determines how the merge message will be cleaned up before
committing. See git-commit(1) for more details. In addition, if the
@emph{<mode>} is given a value of @samp{scissors}, scissors will be appended to
@samp{MERGE_MSG} before being passed on to the commit machinery in the case of a
merge conflict.

@item  @samp{--ff-only} 
Only update to the new history if there is no divergent local history.  This
is the default when no method for reconciling divergent histories is
provided (via the --rebase=* flags).

@item  @samp{--ff} 
@itemx  @samp{--no-ff} 
When merging rather than rebasing, specifies how a merge is handled when the
merged-in history is already a descendant of the current history.  If
merging is requested, @samp{--ff} is the default unless merging an annotated (and
possibly signed) tag that is not stored in its natural place in the
@samp{refs/tags/} hierarchy, in which case @samp{--no-ff} is assumed.

With @samp{--ff}, when possible resolve the merge as a fast-forward (only update
the branch pointer to match the merged branch; do not create a merge
commit).  When not possible (when the merged-in history is not a descendant
of the current history), create a merge commit.

With @samp{--no-ff}, create a merge commit in all cases, even when the merge
could instead be resolved as a fast-forward.

@item  @samp{-S[<keyid>]} 
@itemx  @samp{--gpg-sign[=<keyid>]} 
@itemx  @samp{--no-gpg-sign} 
GPG-sign the resulting merge commit. The @samp{keyid} argument is optional and
defaults to the committer identity; if specified, it must be stuck to the
option without a space. @samp{--no-gpg-sign} is useful to countermand both
@samp{commit.gpgSign} configuration variable, and earlier @samp{--gpg-sign}.

@item  @samp{--log[=<n>]} 
@itemx  @samp{--no-log} 
In addition to branch names, populate the log message with one-line
descriptions from at most <n> actual commits that are being merged. See also
git-fmt-merge-msg(1).
Only useful when merging.

With --no-log do not list one-line descriptions from the actual commits
being merged.

@item  @samp{--signoff} 
@itemx  @samp{--no-signoff} 
コミットログメッセージの最後に、コミッターによる「Signed-off-by」トレーラーを追加します。signoffの意味は、コミットしているプロジェクトによって異なります。たとえば、コミッターがプロジェクトのライセンスに基づいて作品を提出する権利を持っていることを証明したり、開発者の原産地証明書などの寄稿者の代表に同意したりする場合があります。(LinuxカーネルおよびGitプロジェクトで使用されるものについては、http：//developercertificate.orgを参照してください)。プロジェクトでsignoffがどのように使用されるかを理解するには、貢献しているプロジェクトのドキュメントまたはリーダーシップ(leadership)を参照してください。

@samp{--no-signoff} オプションを使用すると、コマンドラインで以前の @samp{--signoff} オプションを無効にすることができます。

@item  @samp{--stat} 
@itemx  @samp{-n} 
@itemx  @samp{--no-stat} 
Show a diffstat at the end of the merge. The diffstat is also controlled by
the configuration option merge.stat.

With -n or --no-stat do not show a diffstat at the end of the merge.

@item  @samp{--squash} 
@itemx  @samp{--no-squash} 
Produce the working tree and index state as if a real merge happened (except
for the merge information), but do not actually make a commit, move the
@samp{HEAD}, or record @samp{$GIT_DIR/MERGE_HEAD} (to cause the next @samp{git commit}
command to create a merge commit).  This allows you to create a single
commit on top of the current branch whose effect is the same as merging
another branch (or more in case of an octopus).

With --no-squash perform the merge and commit the result. This option can be
used to override --squash.

With --squash, --commit is not allowed, and will fail.

Only useful when merging.

@item  @samp{--no-verify} 
This option bypasses the pre-merge and commit-msg hooks.  See also
githooks(5).
Only useful when merging.

@item  @samp{-s <strategy>} 
@itemx  @samp{--strategy=<strategy>} 
Use the given merge strategy; can be supplied more than once to specify them
in the order they should be tried.  If there is no @samp{-s} option, a built-in
list of strategies is used instead (@samp{ort} when merging a single head,
@samp{octopus} otherwise).

@item  @samp{-X <option>} 
@itemx  @samp{--strategy-option=<option>} 
Pass merge strategy specific option through to the merge strategy.

@item  @samp{--verify-signatures} 
@itemx  @samp{--no-verify-signatures} 
Verify that the tip commit of the side branch being merged is signed with a
valid key, i.e. a key that has a valid uid: in the default trust model, this
means the signing key has been signed by a trusted key.  If the tip commit
of the side branch is not signed with a valid key, the merge is aborted.

Only useful when merging.

@item  @samp{--summary} 
@itemx  @samp{--no-summary} 
Synonyms to --stat and --no-stat; these are deprecated and will be removed
in the future.

@item  @samp{--autostash} 
@itemx  @samp{--no-autostash} 
Automatically create a temporary stash entry before the operation begins,
record it in the special ref @samp{MERGE_AUTOSTASH} and apply it after the
operation ends.  This means that you can run the operation on a dirty
worktree.  However, use with care: the final stash application after a
successful merge might result in non-trivial conflicts.

@item  @samp{--allow-unrelated-histories} 
By default, @samp{git merge} command refuses to merge histories that do not share
a common ancestor.  This option can be used to override this safety when
merging histories of two projects that started their lives independently. As
that is a very rare occasion, no configuration variable to enable this by
default exists and will not be added.

Only useful when merging.

@item  @samp{-r} 
@itemx  @samp{--rebase[=false|true|merges|preserve|interactive]} 
When true, rebase the current branch on top of the upstream branch after
fetching. If there is a remote-tracking branch corresponding to the upstream
branch and the upstream branch was rebased since last fetched, the rebase
uses that information to avoid rebasing non-local changes.

When set to @samp{merges}, rebase using @samp{git rebase --rebase-merges} so that the
local merge commits are included in the rebase (see git-rebase(1)
for details).

When set to @samp{preserve} (deprecated in favor of @samp{merges}), rebase with the
@samp{--preserve-merges} option passed to @samp{git rebase} so that locally created
merge commits will not be flattened.

When false, merge the upstream branch into the current branch.

When @samp{interactive}, enable the interactive mode of rebase.

See @samp{pull.rebase}, @samp{branch.<name>.rebase} and @samp{branch.autoSetupRebase} in
git-config(1) if you want to make @samp{git pull} always use @samp{--rebase}
instead of merging.

@quotation

@strong{Note}

This is a potentially @emph{dangerous} mode of operation.  It rewrites history,
which does not bode well when you published that history already.  Do @strong{not}
use this option unless you have read git-rebase(1) carefully.
@end quotation

@item  @samp{--no-rebase} 
This is shorthand for --rebase=false.
@end table

@noindent

@heading Options related to fetching

@table @asis

@item  @samp{--all} 
Fetch all remotes.

@item  @samp{-a} 
@itemx  @samp{--append} 
Append ref names and object names of fetched refs to the existing contents
of @samp{.git/FETCH_HEAD}.  Without this option old data in @samp{.git/FETCH_HEAD}
will be overwritten.

@item  @samp{--atomic} 
Use an atomic transaction to update local refs. Either all refs are updated,
or on error, no refs are updated.

@item  @samp{--depth=<depth>} 
Limit fetching to the specified number of commits from the tip of each
remote branch history. If fetching to a @emph{shallow} repository created by @samp{git
clone} with @samp{--depth=<depth>} option (see git-clone(1)), deepen or
shorten the history to the specified number of commits. Tags for the
deepened commits are not fetched.

@item  @samp{--deepen=<depth>} 
Similar to --depth, except it specifies the number of commits from the
current shallow boundary instead of from the tip of each remote branch
history.

@item  @samp{--shallow-since=<date>} 
Deepen or shorten the history of a shallow repository to include all
reachable commits after <date>.

@item  @samp{--shallow-exclude=<revision>} 
Deepen or shorten the history of a shallow repository to exclude commits
reachable from a specified remote branch or tag.  This option can be
specified multiple times.

@item  @samp{--unshallow} 
If the source repository is complete, convert a shallow repository to a
complete one, removing all the limitations imposed by shallow repositories.

If the source repository is shallow, fetch as much as possible so that the
current repository has the same history as the source repository.

@item  @samp{--update-shallow} 
By default when fetching from a shallow repository, @samp{git fetch} refuses refs
that require updating .git/shallow. This option updates .git/shallow and
accept such refs.

@item  @samp{--negotiation-tip=<commit|glob>} 
By default, Git will report, to the server, commits reachable from all local
refs to find common commits in an attempt to reduce the size of the
to-be-received packfile. If specified, Git will only report commits
reachable from the given tips.  This is useful to speed up fetches when the
user knows which local ref is likely to have commits in common with the
upstream ref being fetched.

This option may be specified more than once; if so, Git will report commits
reachable from any of the given commits.

The argument to this option may be a glob on ref names, a ref, or the
(possibly abbreviated) SHA-1 of a commit. Specifying a glob is equivalent to
specifying this option multiple times, one for each matching ref name.

See also the @samp{fetch.negotiationAlgorithm} and @samp{push.negotiate} configuration
variables documented in git-config(1), and the @samp{--negotiate-only}
option below.

@item  @samp{--negotiate-only} 
Do not fetch anything from the server, and instead print the ancestors of
the provided @samp{--negotiation-tip=*} arguments, which we have in common with
the server.

Internally this is used to implement the @samp{push.negotiate} option, see
git-config(1).

@item  @samp{--dry-run} 
Show what would be done, without making any changes.

@item  @samp{-f} 
@itemx  @samp{--force} 
When @emph{git fetch} is used with @samp{<src>:<dst>} refspec it may refuse to update
the local branch as discussed
in the @samp{<refspec>} part of the git-fetch(1)
documentation.
This option overrides that check.

@item  @samp{-k} 
@itemx  @samp{--keep} 
Keep downloaded pack.

@item  @samp{--prefetch} 
Modify the configured refspec to place all refs into the @samp{refs/prefetch/}
namespace. See the @samp{prefetch} task in git-maintenance(1).

@item  @samp{-p} 
@itemx  @samp{--prune} 
Before fetching, remove any remote-tracking references that no longer exist
on the remote.  Tags are not subject to pruning if they are fetched only
because of the default tag auto-following or due to a --tags option.
However, if tags are fetched due to an explicit refspec (either on the
command line or in the remote configuration, for example if the remote was
cloned with the --mirror option), then they are also subject to
pruning. Supplying @samp{--prune-tags} is a shorthand for providing the tag
refspec.

@item  @samp{--no-tags} 
By default, tags that point at objects that are downloaded from the remote
repository are fetched and stored locally.  This option disables this
automatic tag following. The default behavior for a remote may be specified
with the remote.<name>.tagOpt setting. See git-config(1).

@item  @samp{--refmap=<refspec>} 
When fetching refs listed on the command line, use the specified refspec
(can be given more than once) to map the refs to remote-tracking branches,
instead of the values of @samp{remote.*.fetch} configuration variables for the
remote repository.  Providing an empty @samp{<refspec>} to the @samp{--refmap} option
causes Git to ignore the configured refspecs and rely entirely on the
refspecs supplied as command-line arguments. See section on "Configured
Remote-tracking Branches" for details.

@item  @samp{-t} 
@itemx  @samp{--tags} 
Fetch all tags from the remote (i.e., fetch remote tags @samp{refs/tags/*} into
local tags with the same name), in addition to whatever else would otherwise
be fetched.  Using this option alone does not subject tags to pruning, even
if --prune is used (though tags may be pruned anyway if they are also the
destination of an explicit refspec; see @samp{--prune}).

@item  @samp{-j} 
@itemx  @samp{--jobs=<n>} 
Number of parallel children to be used for all forms of fetching.

If the @samp{--multiple} option was specified, the different remotes will be
fetched in parallel. If multiple submodules are fetched, they will be
fetched in parallel. To control them independently, use the config settings
@samp{fetch.parallel} and @samp{submodule.fetchJobs} (see git-config(1)).

Typically, parallel recursive and multi-remote fetches will be faster. By
default fetches are performed sequentially, not in parallel.

@item  @samp{--set-upstream} 
If the remote is fetched successfully, add upstream (tracking) reference,
used by argument-less git-pull(1) and other commands. For more
information, see @samp{branch.<name>.merge} and @samp{branch.<name>.remote} in
git-config(1).

@item  @samp{--upload-pack <upload-pack>} 
When given, and the repository to fetch from is handled by @emph{git fetch-pack},
@samp{--exec=<upload-pack>} is passed to the command to specify non-default path
for the command run on the other end.

@item  @samp{--progress} 
Progress status is reported on the standard error stream by default when it
is attached to a terminal, unless -q is specified. This flag forces progress
status even if the standard error stream is not directed to a terminal.

@item  @samp{-o <option>} 
@itemx  @samp{--server-option=<option>} 
Transmit the given string to the server when communicating using protocol
version 2.  The given string must not contain a NUL or LF character.  The
server’s handling of server options, including unknown ones, is
server-specific.  When multiple @samp{--server-option=<option>} are given, they
are all sent to the other side in the order listed on the command line.

@item  @samp{--show-forced-updates} 
By default, git checks if a branch is force-updated during fetch. This can
be disabled through fetch.showForcedUpdates, but the --show-forced-updates
option guarantees this check occurs.  See git-config(1).

@item  @samp{--no-show-forced-updates} 
By default, git checks if a branch is force-updated during fetch. Pass
--no-show-forced-updates or set fetch.showForcedUpdates to false to skip
this check for performance reasons. If used during @emph{git-pull} the --ff-only
option will still check for forced updates before attempting a fast-forward
update. See git-config(1).

@item  @samp{-4} 
@itemx  @samp{--ipv4} 
Use IPv4 addresses only, ignoring IPv6 addresses.

@item  @samp{-6} 
@itemx  @samp{--ipv6} 
Use IPv6 addresses only, ignoring IPv4 addresses.

@item  <repository> 
The "remote" repository that is the source of a fetch or pull operation.
This parameter can be either a URL (see the section GIT URLS  below)
or the name of a remote (see the section REMOTES  below).

@item  <refspec> 
Specifies which refs to fetch and which local refs to update.  When no
<refspec>s appear on the command line, the refs to fetch are read from
@samp{remote.<repository>.fetch} variables instead
(see the section "CONFIGURED REMOTE-TRACKING BRANCHES"
in git-fetch(1)).

The format of a <refspec> parameter is an optional plus @samp{+}, followed by the
source <src>, followed by a colon @samp{:}, followed by the destination ref
<dst>.  The colon can be omitted when <dst> is empty.  <src> is typically a
ref, but it can also be a fully spelled hex object name.

A <refspec> may contain a @samp{*} in its <src> to indicate a simple pattern
match. Such a refspec functions like a glob that matches any ref with the
same prefix. A pattern <refspec> must have a @samp{*} in both the <src> and
<dst>. It will map refs to the destination by replacing the @samp{*} with the
contents matched from the source.

If a refspec is prefixed by @samp{^}, it will be interpreted as a negative
refspec. Rather than specifying which refs to fetch or which local refs to
update, such a refspec will instead specify refs to exclude. A ref will be
considered to match if it matches at least one positive refspec, and does
not match any negative refspec. Negative refspecs can be useful to restrict
the scope of a pattern refspec so that it will not include specific refs.
Negative refspecs can themselves be pattern refspecs. However, they may only
contain a <src> and do not specify a <dst>. Fully spelled out hex object
names are also not supported.

@samp{tag <tag>} means the same as @samp{refs/tags/<tag>:refs/tags/<tag>}; it requests
fetching everything up to the given tag.

The remote ref that matches <src> is fetched, and if <dst> is not an empty
string, an attempt is made to update the local ref that matches it.

Whether that update is allowed without @samp{--force} depends on the ref
namespace it’s being fetched to, the type of object being fetched, and
whether the update is considered to be a fast-forward. Generally, the same
rules apply for fetching as when pushing, see the @samp{<refspec>...} section of
git-push(1) for what those are. Exceptions to those rules particular
to @emph{git fetch} are noted below.

Until Git version 2.20, and unlike when pushing with git-push(1),
any updates to @samp{refs/tags/*} would be accepted without @samp{+} in the refspec
(or @samp{--force}). When fetching, we promiscuously considered all tag updates
from a remote to be forced fetches.  Since Git version 2.20, fetching to
update @samp{refs/tags/*} works the same way as when pushing. I.e. any updates
will be rejected without @samp{+} in the refspec (or @samp{--force}).

Unlike when pushing with git-push(1), any updates outside of
@samp{refs/@{tags,heads@}/*} will be accepted without @samp{+} in the refspec (or
@samp{--force}), whether that’s swapping e.g. a tree object for a blob, or a
commit for another commit that’s doesn’t have the previous commit as an
ancestor etc.

Unlike when pushing with git-push(1), there is no configuration
which’ll amend these rules, and nothing like a @samp{pre-fetch} hook analogous to
the @samp{pre-receive} hook.

As with pushing with git-push(1), all of the rules described above
about what’s not allowed as an update can be overridden by adding an the
optional leading @samp{+} to a refspec (or using @samp{--force} command line
option). The only exception to this is that no amount of forcing will make
the @samp{refs/heads/*} namespace accept a non-commit object.

@quotation

@strong{Note}

When the remote branch you want to fetch is known to be rewound and rebased
regularly, it is expected that its new tip will not be descendant of its
previous tip (as stored in your remote-tracking branch the last time you
fetched).  You would want to use the @samp{+} sign to indicate non-fast-forward
updates will be needed for such branches.  There is no way to determine or
declare that a branch will be made available in a repository with this
behavior; the pulling user simply must know this is the expected usage
pattern for a branch.
@end quotation

@quotation

@strong{Note}

There is a difference between listing multiple <refspec> directly on @emph{git
pull} command line and having multiple @samp{remote.<repository>.fetch} entries
in your configuration for a <repository> and running a @emph{git pull} command
without any explicit <refspec> parameters.  <refspec>s listed explicitly on
the command line are always merged into the current branch after fetching.
In other words, if you list more than one remote ref, @emph{git pull} will create
an Octopus merge.  On the other hand, if you do not list any explicit
<refspec> parameter on the command line, @emph{git pull} will fetch all the
<refspec>s it finds in the @samp{remote.<repository>.fetch} configuration and
merge only the first <refspec> found into the current branch.  This is
because making an Octopus from remote refs is rarely done, while keeping
track of multiple remote heads in one-go by fetching more than one is often
useful.
@end quotation
@end table

@noindent

@chapheading GIT URLS

一般に、URLには、トランスポートプロトコル、リモートサーバーのアドレス、およびリポジトリへのパスに関する情報が含まれています。トランスポートプロトコルによっては、一部の情報が欠落している場合があります。

Gitはsshとgitとhttpとhttpsプロトコルをサポートします(さらにftpとftpsをフェッチに使用できますが、これは非効率的で非推奨です。使用しないでください)。

ネイティブトランスポート(つまり、 git://
URL)は認証を行わないため、セキュリティで保護されていないネットワークでは注意して使用する必要があります。

以下の構文を使用できます:

@itemize 

@item
ssh://[user@@]host.xz[:port]/path/to/repo.git/

@item
git://host.xz[:port]/path/to/repo.git/

@item
http[s]://host.xz[:port]/path/to/repo.git/

@item
ftp[s]://host.xz[:port]/path/to/repo.git/
@end itemize

代替のscpのような構文をsshプロトコルで使用することもできます:

@itemize 

@item
[user@@]host.xz:path/to/repo.git/
@end itemize

この構文は、最初のコロン(:)の前にスラッシュがない場合にのみ認識されます。これは、コロンを含むローカルパスを区別するのに役立ちます。たとえば、ローカルパス
@samp{foo:bar} を、絶対パスまたは @samp{./foo:bar} として指定して、 ssh url として誤って解釈されないようにすることができます。

sshおよびgitプロトコルは、さらに ~username 拡張をサポートします:

@itemize 

@item
ssh://[user@@]host.xz[:port]/~[user]/path/to/repo.git/

@item
git://host.xz[:port]/~[user]/path/to/repo.git/

@item
[user@@]host.xz:/~[user]/path/to/repo.git/
@end itemize

Gitでもネイティブにサポートされているローカルリポジトリの場合、以下の構文を使用できます:

@itemize 

@item
/path/to/repo.git/

@item
file:///path/to/repo.git/
@end itemize

これらの2つの構文は、前者が @samp{--local} オプションの機能を含むクローン作成の場合を除いて、ほとんど同等です。 詳細については、
git-clone(1) を参照してください。

「git clone」と「git fetch」と「git pull」は、「git push」と違って適切なバンドルファイルを受け入れます。
git-bundle(1) を参照してください。

Gitが特定のトランスポートプロトコルを処理する方法を知らない場合、Gitは @emph{remote-<transport>}
リモートヘルパー(存在する場合)を使用しようとします。リモートヘルパーを明示的に要求するには、以下の構文を使用できます:

@itemize 

@item
<transport>::<address>
@end itemize

ここで、 <address>
は、パス、サーバーとパス、または呼び出されている特定のリモートヘルパーによって認識される任意のURLのような文字列です。詳細については、
gitremote-helpers(7) を参照してください。

同じ名前のリモートリポジトリが多数あり、それらに異なる形式を使用する場合(あなたの使用するURLが機能するURLに書き換えられるように)、以下の形式の構成セクションを作成できます:

@example
        [url "<actual url base>"]
                insteadOf = <other url base>
@end example


例えば、以下のようになります:

@example
        [url "git://git.host.xz/"]
                insteadOf = host.xz:/path/to/
                insteadOf = work:
@end example


"work:repo.git" や "host.xz:/path/to/repo.git"
のようなURLは、任意のコンテキストで、"git://git.host.xz/repo.git" に書き換えられます。

プッシュ専用のURLを書き換えたい場合は、以下の形式の構成セクションを作成できます:

@example
        [url "<actual url base>"]
                pushInsteadOf = <other url base>
@end example


例えば、以下のようになります:

@example
        [url "ssh://example.org/"]
                pushInsteadOf = git://example.org/
@end example


"git://example.org/path/to/repo.git" のようなURLは、プッシュの場合は
"ssh://example.org/path/to/repo.git" に書き換えられますが、プルは引き続き元のURLのままです。

@noindent

@chapheading REMOTES

@samp{<repository>} 引数として、URLの代わりに以下のいずれかの名前を使用できます:

@itemize 

@item
Git構成ファイル(configuration file)内のリモート(remote)として、 @samp{$GIT_DIR/config} または

@item
@samp{$GIT_DIR/remotes} ディレクトリ内のファイル または

@item
@samp{$GIT_DIR/branches} ディレクトリ内のファイル
@end itemize

これらはすべて、gitがデフォルトで使用するrefspecをそれぞれ含んでいるため、コマンドラインからrefspecを省略できます。

@noindent

@heading Named remote in configuration file

あなたは、 git-remote(1) を使うか、または git-config(1) を使うか、または
@samp{$GIT_DIR/config}
ファイルを手動で編集して、これ以前に構成したリモートの名前から選択できます。このリモートのURLは、リポジトリへのアクセスに使用されます。コマンドラインでrefspecを指定しない場合、このリモートのrefspecがデフォルトで使用されます。構成ファイルのエントリは以下のようになります:

@example
        [remote "<name>"]
                url = <url>
                pushurl = <pushurl>
                push = <refspec>
                fetch = <refspec>
@end example


@samp{<pushurl>} はプッシュにのみ使用されます。 これはオプションであり、デフォルトは @samp{<url>} です。

@noindent

@heading Named file in $GIT_DIR/remotes

あなたは、 @samp{$GIT_DIR/remotes}
でファイル名を指定できます。このファイルのURLは、リポジトリへのアクセスに使用されます。コマンドラインでrefspecを指定しない場合、このファイルのrefspecがデフォルトとして使用されます。このファイルの形式は以下のとおりです:

@example
        URL: one of the above URL format
        Push: <refspec>
        Pull: <refspec>
@end example


@samp{Push:} 行は @emph{git push} で使用され、 @samp{Pull:} 行は @emph{git pull} と @emph{git fetch}
で使用されます。追加のブランチマッピングのために、複数の @samp{Push:} および @samp{Pull:} 行を指定できます。

@noindent

@heading Named file in $GIT_DIR/branches

@samp{$GIT_DIR/branches} でファイル名を指定できます。このファイルのURLは、リポジトリへのアクセスに使用されます。
このファイルの形式は以下のとおりです:

@example
        <url>#<head>
@end example


@samp{<url>} は必須です。 @samp{#<head>} はオプションです。

コマンドラインで指定しない場合、操作に応じて、gitは以下のrefspecのいずれかを使用します。 @samp{<branch>} は
@samp{$GIT_DIR/branchs} 内のこのファイルの名前であり、 @samp{<head>`はデフォルトで `master} になります。

git fetch は以下を使用します:

@example
        refs/heads/<head>:refs/heads/<branch>
@end example


git push は以下を使用します:

@example
        HEAD:refs/heads/<head>
@end example


@noindent

@chapheading MERGE STRATEGIES

The merge mechanism (@samp{git merge} and @samp{git pull} commands) allows the backend
@emph{merge strategies} to be chosen with @samp{-s} option.  Some strategies can also
take their own options, which can be passed by giving @samp{-X<option>} arguments
to @samp{git merge} and/or @samp{git pull}.

@table @asis

@item  ort 
This is the default merge strategy when pulling or merging one branch.  This
strategy can only resolve two heads using a 3-way merge algorithm.  When
there is more than one common ancestor that can be used for 3-way merge, it
creates a merged tree of the common ancestors and uses that as the reference
tree for the 3-way merge.  This has been reported to result in fewer merge
conflicts without causing mismerges by tests done on actual merge commits
taken from Linux 2.6 kernel development history.  Additionally this strategy
can detect and handle merges involving renames.  It does not make use of
detected copies.  The name for this algorithm is an acronym ("Ostensibly
Recursive’s Twin") and came from the fact that it was written as a
replacement for the previous default algorithm, @samp{recursive}.

The @emph{ort} strategy can take the following options:

@table @asis

@item  ours 
This option forces conflicting hunks to be auto-resolved cleanly by favoring
@emph{our} version.  Changes from the other tree that do not conflict with our
side are reflected in the merge result.  For a binary file, the entire
contents are taken from our side.

This should not be confused with the @emph{ours} merge strategy, which does not
even look at what the other tree contains at all.  It discards everything
the other tree did, declaring @emph{our} history contains all that happened in
it.

@item  theirs 
This is the opposite of @emph{ours}; note that, unlike @emph{ours}, there is no
@emph{theirs} merge strategy to confuse this merge option with.

@item  ignore-space-change 
@itemx  ignore-all-space 
@itemx  ignore-space-at-eol 
@itemx  ignore-cr-at-eol 
Treats lines with the indicated type of whitespace change as unchanged for
the sake of a three-way merge.  Whitespace changes mixed with other changes
to a line are not ignored.  See also git-diff(1) @samp{-b}, @samp{-w},
@samp{--ignore-space-at-eol}, and @samp{--ignore-cr-at-eol}.

@itemize 

@item
If @emph{their} version only introduces whitespace changes to a line, @emph{our}
version is used;

@item
If @emph{our} version introduces whitespace changes but @emph{their} version includes
a substantial change, @emph{their} version is used;

@item
Otherwise, the merge proceeds in the usual way.
@end itemize

@item  renormalize 
This runs a virtual check-out and check-in of all three stages of a file
when resolving a three-way merge.  This option is meant to be used when
merging branches with different clean filters or end-of-line normalization
rules.  See "Merging branches with differing checkin/checkout attributes" in
gitattributes(5) for details.

@item  no-renormalize 
Disables the @samp{renormalize} option.  This overrides the @samp{merge.renormalize}
configuration variable.

@item  find-renames[=<n>] 
Turn on rename detection, optionally setting the similarity threshold.  This
is the default. This overrides the @emph{merge.renames} configuration variable.
See also git-diff(1) @samp{--find-renames}.

@item  rename-threshold=<n> 
Deprecated synonym for @samp{find-renames=<n>}.

@item  subtree[=<path>] 
This option is a more advanced form of @emph{subtree} strategy, where the
strategy makes a guess on how two trees must be shifted to match with each
other when merging.  Instead, the specified path is prefixed (or stripped
from the beginning) to make the shape of two trees to match.
@end table

@item  recursive 
This can only resolve two heads using a 3-way merge algorithm.  When there
is more than one common ancestor that can be used for 3-way merge, it
creates a merged tree of the common ancestors and uses that as the reference
tree for the 3-way merge.  This has been reported to result in fewer merge
conflicts without causing mismerges by tests done on actual merge commits
taken from Linux 2.6 kernel development history.  Additionally this can
detect and handle merges involving renames.  It does not make use of
detected copies.  This was the default strategy for resolving two heads from
Git v0.99.9k until v2.33.0.

The @emph{recursive} strategy takes the same options as @emph{ort}.  However, there
are three additional options that @emph{ort} ignores (not documented above) that
are potentially useful with the @emph{recursive} strategy:

@table @asis

@item  patience 
Deprecated synonym for @samp{diff-algorithm=patience}.

@item  diff-algorithm=[patience|minimal|histogram|myers] 
Use a different diff algorithm while merging, which can help avoid mismerges
that occur due to unimportant matching lines (such as braces from distinct
functions).  See also git-diff(1) @samp{--diff-algorithm}.  Note that
@samp{ort} specifically uses @samp{diff-algorithm=histogram}, while @samp{recursive}
defaults to the @samp{diff.algorithm} config setting.

@item  no-renames 
Turn off rename detection. This overrides the @samp{merge.renames} configuration
variable.  See also git-diff(1) @samp{--no-renames}.
@end table

@item  resolve 
This can only resolve two heads (i.e. the current branch and another branch
you pulled from) using a 3-way merge algorithm.  It tries to carefully
detect criss-cross merge ambiguities.  It does not handle renames.

@item  octopus 
This resolves cases with more than two heads, but refuses to do a complex
merge that needs manual resolution.  It is primarily meant to be used for
bundling topic branch heads together.  This is the default merge strategy
when pulling or merging more than one branch.

@item  ours 
This resolves any number of heads, but the resulting tree of the merge is
always that of the current branch head, effectively ignoring all changes
from all other branches.  It is meant to be used to supersede old
development history of side branches.  Note that this is different from the
-Xours option to the @emph{recursive} merge strategy.

@item  subtree 
This is a modified @samp{ort} strategy. When merging trees A and B, if B
corresponds to a subtree of A, B is first adjusted to match the tree
structure of A, instead of reading the trees at the same level. This
adjustment is also done to the common ancestor tree.
@end table

With the strategies that use 3-way merge (including the default, @emph{ort}), if
a change is made on both branches, but later reverted on one of the
branches, that change will be present in the merged result; some people find
this behavior confusing.  It occurs because only the heads and the merge
base are considered when performing a merge, not the individual commits.
The merge algorithm therefore considers the reverted change as no change at
all, and substitutes the changed version instead.

@noindent

@chapheading DEFAULT BEHAVIOUR

Often people use @samp{git pull} without giving any parameter.  Traditionally,
this has been equivalent to saying @samp{git pull origin}.  However, when
configuration @samp{branch.<name>.remote} is present while on branch @samp{<name>},
that value is used instead of @samp{origin}.

In order to determine what URL to use to fetch from, the value of the
configuration @samp{remote.<origin>.url} is consulted and if there is not any
such variable, the value on the @samp{URL:} line in @samp{$GIT_DIR/remotes/<origin>}
is used.

In order to determine what remote branches to fetch (and optionally store in
the remote-tracking branches) when the command is run without any refspec
parameters on the command line, values of the configuration variable
@samp{remote.<origin>.fetch} are consulted, and if there aren’t any,
@samp{$GIT_DIR/remotes/<origin>} is consulted and its @samp{Pull:} lines are used.  In
addition to the refspec formats described in the OPTIONS section, you can
have a globbing refspec that looks like this:

@example
refs/heads/*:refs/remotes/origin/*
@end example


A globbing refspec must have a non-empty RHS (i.e. must store what were
fetched in remote-tracking branches), and its LHS and RHS must end with
@samp{/*}.  The above specifies that all remote branches are tracked using
remote-tracking branches in @samp{refs/remotes/origin/} hierarchy under the same
name.

The rule to determine which remote branch to merge after fetching is a bit
involved, in order not to break backward compatibility.

If explicit refspecs were given on the command line of @samp{git pull}, they are
all merged.

When no refspec was given on the command line, then @samp{git pull} uses the
refspec from the configuration or @samp{$GIT_DIR/remotes/<origin>}.  In such
cases, the following rules apply:

@enumerate 

@item
If @samp{branch.<name>.merge} configuration for the current branch @samp{<name>}
exists, that is the name of the branch at the remote site that is merged.

@item
If the refspec is a globbing one, nothing is merged.

@item
Otherwise the remote branch of the first refspec is merged.
@end enumerate

@noindent

@chapheading EXAMPLES

@itemize 

@item
Update the remote-tracking branches for the repository you cloned from, then
merge one of them into your current branch:

@example
$ git pull
$ git pull origin
@end example


Normally the branch merged in is the HEAD of the remote repository, but the
choice is determined by the branch.<name>.remote and branch.<name>.merge
options; see git-config(1) for details.

@item
Merge into the current branch the remote branch @samp{next}:

@example
$ git pull origin next
@end example


This leaves a copy of @samp{next} temporarily in FETCH_HEAD, and updates the
remote-tracking branch @samp{origin/next}.  The same can be done by invoking
fetch and merge:

@example
$ git fetch origin
$ git merge origin/next
@end example

@end itemize

If you tried a pull which resulted in complex conflicts and would want to
start over, you can recover with @emph{git reset}.

@noindent

@chapheading SECURITY

フェッチおよびプッシュプロトコルは、共有することを意図していない一方の側が他方のリポジトリからデータを盗むのを防ぐようには設計されていません。悪意のある者から保護する必要のあるプライベートデータがある場合、最善のオプションはそれを別のリポジトリに保存することです。これは、クライアントとサーバーの両方に適用されます。特に、サーバー上の名前空間は、読み取りアクセス制御には効果的ではありません。リポジトリ全体への読み取りアクセスで信頼できるクライアントにのみ、名前空間への読み取りアクセスを許可する必要があります。

既知の攻撃ベクトル(attack vectors)は以下のとおりです:

@enumerate 

@item
被害者は、明示的に共有することを意図していないオブジェクトのIDをアドバタイズする "have"
行を送信しますが、他にもIDを持っている者が居る場合は、転送を最適化するために使用できます。攻撃者はオブジェクトID
Xを選択して盗み、refをXに送信しますが、被害者はすでにXのコンテンツを持っているため、Xのコンテンツを送信する必要はありません。
これで、被害者は攻撃者がXを持っていると信じ、Xのコンテンツを後で攻撃者に送り返します。
(この攻撃は、クライアントがアクセスできる名前空間にXへのrefを作成してフェッチすることにより、クライアントがサーバー上で実行するのが最も簡単です。サーバーがクライアント上で実行する最も可能性の高い方法は、Xをパブリックブランチにマージし、ユーザーがこのブランチで追加の作業を行い、マージに気付かずにサーバーにプッシュバックすることを期待します。)

@item
#1 と同様に、攻撃者は盗むオブジェクトID
Xを選択します。被害者は、攻撃者がすでに持っているオブジェクトYを送信し、攻撃者はYではなくXを持っていると誤って主張するため、被害者はYをXに対するデルタとして送信します。デルタは、攻撃者にYに類似したXの領域を明らかにします。
@end enumerate

@noindent

@chapheading BUGS

Using --recurse-submodules can only fetch new commits in already checked out
submodules right now. When e.g. upstream added a new submodule in the just
fetched commits of the superproject the submodule itself cannot be fetched,
making it impossible to check out that submodule later without having to do
a fetch again. This is expected to be fixed in a future Git version.

@noindent

@chapheading SEE ALSO

git-fetch(1), git-merge(1), git-config(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-push,,,Top
@chapheading Name

git-push — Update remote refs along with associated objects

@noindent

@chapheading Synopsis

@display
git push [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=<git-receive-pack>]
           [--repo=<repository>] [-f | --force] [-d | --delete] [--prune] [-v | --verbose]
           [-u | --set-upstream] [-o <string> | --push-option=<string>]
           [--[no-]signed|--signed=(true|false|if-asked)]
           [--force-with-lease[=<refname>[:<expect>]] [--force-if-includes]]
           [--no-verify] [<repository> [<refspec>…]]
@end display


@noindent

@chapheading DESCRIPTION

Updates remote refs using local refs, while sending objects necessary to
complete the given refs.

You can make interesting things happen to a repository every time you push
into it, by setting up @emph{hooks} there.  See documentation for
git-receive-pack(1).

When the command line does not specify where to push with the @samp{<repository>}
argument, @samp{branch.*.remote} configuration for the current branch is
consulted to determine where to push.  If the configuration is missing, it
defaults to @emph{origin}.

When the command line does not specify what to push with @samp{<refspec>...}
arguments or @samp{--all}, @samp{--mirror}, @samp{--tags} options, the command finds the
default @samp{<refspec>} by consulting @samp{remote.*.push} configuration, and if it
is not found, honors @samp{push.default} configuration to decide what to push
(See git-config(1) for the meaning of @samp{push.default}).

When neither the command-line nor the configuration specify what to push,
the default behavior is used, which corresponds to the @samp{simple} value for
@samp{push.default}: the current branch is pushed to the corresponding upstream
branch, but as a safety measure, the push is aborted if the upstream branch
does not have the same name as the local one.

@noindent

@chapheading OPTIONS

@table @asis

@item  <repository> 
The "remote" repository that is destination of a push operation.  This
parameter can be either a URL (see the section GIT URLS  below) or
the name of a remote (see the section REMOTES  below).

@item  <refspec>… 
Specify what destination ref to update with what source object.  The format
of a <refspec> parameter is an optional plus @samp{+}, followed by the source
object <src>, followed by a colon @samp{:}, followed by the destination ref
<dst>.

The <src> is often the name of the branch you would want to push, but it can
be any arbitrary "SHA-1 expression", such as @samp{master~4} or @samp{HEAD} (see
gitrevisions(7)).

The <dst> tells which ref on the remote side is updated with this
push. Arbitrary expressions cannot be used here, an actual ref must be
named.  If @samp{git push [<repository>]} without any @samp{<refspec>} argument is set
to update some ref at the destination with @samp{<src>} with
@samp{remote.<repository>.push} configuration variable, @samp{:<dst>} part can be
omitted—such a push will update a ref that @samp{<src>} normally updates without
any @samp{<refspec>} on the command line.  Otherwise, missing @samp{:<dst>} means to
update the same ref as the @samp{<src>}.

If <dst> doesn’t start with @samp{refs/} (e.g. @samp{refs/heads/master}) we will try
to infer where in @samp{refs/*} on the destination <repository> it belongs based
on the type of <src> being pushed and whether <dst> is ambiguous.

@itemize 

@item
If <dst> unambiguously refers to a ref on the <repository> remote, then push
to that ref.

@item
If <src> resolves to a ref starting with refs/heads/ or refs/tags/, then
prepend that to <dst>.

@item
Other ambiguity resolutions might be added in the future, but for now any
other cases will error out with an error indicating what we tried, and
depending on the @samp{advice.pushUnqualifiedRefname} configuration (see
git-config(1)) suggest what refs/ namespace you may have wanted to
push to.
@end itemize

The object referenced by <src> is used to update the <dst> reference on the
remote side. Whether this is allowed depends on where in @samp{refs/*} the <dst>
reference lives as described in detail below, in those sections "update"
means any modifications except deletes, which as noted after the next few
sections are treated differently.

The @samp{refs/heads/*} namespace will only accept commit objects, and updates
only if they can be fast-forwarded.

The @samp{refs/tags/*} namespace will accept any kind of object (as commits,
trees and blobs can be tagged), and any updates to them will be rejected.

It’s possible to push any type of object to any namespace outside of
@samp{refs/@{tags,heads@}/*}. In the case of tags and commits, these will be
treated as if they were the commits inside @samp{refs/heads/*} for the purposes
of whether the update is allowed.

I.e. a fast-forward of commits and tags outside @samp{refs/@{tags,heads@}/*} is
allowed, even in cases where what’s being fast-forwarded is not a commit,
but a tag object which happens to point to a new commit which is a
fast-forward of the commit the last tag (or commit) it’s
replacing. Replacing a tag with an entirely different tag is also allowed,
if it points to the same commit, as well as pushing a peeled tag,
i.e. pushing the commit that existing tag object points to, or a new tag
object which an existing commit points to.

Tree and blob objects outside of @samp{refs/@{tags,heads@}/*} will be treated the
same way as if they were inside @samp{refs/tags/*}, any update of them will be
rejected.

All of the rules described above about what’s not allowed as an update can
be overridden by adding an the optional leading @samp{+} to a refspec (or using
@samp{--force} command line option). The only exception to this is that no amount
of forcing will make the @samp{refs/heads/*} namespace accept a non-commit
object. Hooks and configuration can also override or amend these rules, see
e.g. @samp{receive.denyNonFastForwards} in git-config(1) and
@samp{pre-receive} and @samp{update} in githooks(5).

Pushing an empty <src> allows you to delete the <dst> ref from the remote
repository. Deletions are always accepted without a leading @samp{+} in the
refspec (or @samp{--force}), except when forbidden by configuration or hooks. See
@samp{receive.denyDeletes} in git-config(1) and @samp{pre-receive} and
@samp{update} in githooks(5).

The special refspec @samp{:} (or @samp{+:} to allow non-fast-forward updates)  directs
Git to push "matching" branches: for every branch that exists on the local
side, the remote side is updated if a branch of the same name already exists
on the remote side.

@samp{tag <tag>} means the same as @samp{refs/tags/<tag>:refs/tags/<tag>}.

@item  @samp{--all} 
Push all branches (i.e. refs under @samp{refs/heads/}); cannot be used with other
<refspec>.

@item  @samp{--prune} 
Remove remote branches that don’t have a local counterpart. For example a
remote branch @samp{tmp} will be removed if a local branch with the same name
doesn’t exist any more. This also respects refspecs, e.g.  @samp{git push --prune
remote refs/heads/*:refs/tmp/*} would make sure that remote @samp{refs/tmp/foo}
will be removed if @samp{refs/heads/foo} doesn’t exist.

@item  @samp{--mirror} 
Instead of naming each ref to push, specifies that all refs under @samp{refs/}
(which includes but is not limited to @samp{refs/heads/}, @samp{refs/remotes/}, and
@samp{refs/tags/})  be mirrored to the remote repository.  Newly created local
refs will be pushed to the remote end, locally updated refs will be force
updated on the remote end, and deleted refs will be removed from the remote
end.  This is the default if the configuration option
@samp{remote.<remote>.mirror} is set.

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
Do everything except actually send the updates.

@item  @samp{--porcelain} 
Produce machine-readable output.  The output status line for each ref will
be tab-separated and sent to stdout instead of stderr.  The full symbolic
names of the refs will be given.

@item  @samp{-d} 
@itemx  @samp{--delete} 
All listed refs are deleted from the remote repository. This is the same as
prefixing all refs with a colon.

@item  @samp{--tags} 
All refs under @samp{refs/tags} are pushed, in addition to refspecs explicitly
listed on the command line.

@item  @samp{--follow-tags} 
Push all the refs that would be pushed without this option, and also push
annotated tags in @samp{refs/tags} that are missing from the remote but are
pointing at commit-ish that are reachable from the refs being pushed.  This
can also be specified with configuration variable @samp{push.followTags}.  For
more information, see @samp{push.followTags} in git-config(1).

@item  @samp{--[no-]signed} 
@itemx  @samp{--signed=(true|false|if-asked)} 
GPG-sign the push request to update refs on the receiving side, to allow it
to be checked by the hooks and/or be logged.  If @samp{false} or @samp{--no-signed},
no signing will be attempted.  If @samp{true} or @samp{--signed}, the push will fail
if the server does not support signed pushes.  If set to @samp{if-asked}, sign if
and only if the server supports signed pushes.  The push will also fail if
the actual call to @samp{gpg --sign} fails.  See git-receive-pack(1) for
the details on the receiving end.

@item  @samp{--[no-]atomic} 
Use an atomic transaction on the remote side if available.  Either all refs
are updated, or on error, no refs are updated.  If the server does not
support atomic pushes the push will fail.

@item  @samp{-o <option>} 
@itemx  @samp{--push-option=<option>} 
Transmit the given string to the server, which passes them to the
pre-receive as well as the post-receive hook. The given string must not
contain a NUL or LF character.  When multiple @samp{--push-option=<option>} are
given, they are all sent to the other side in the order listed on the
command line.  When no @samp{--push-option=<option>} is given from the command
line, the values of configuration variable @samp{push.pushOption} are used
instead.

@item  @samp{--receive-pack=<git-receive-pack>} 
@itemx  @samp{--exec=<git-receive-pack>} 
Path to the @emph{git-receive-pack} program on the remote end.  Sometimes useful
when pushing to a remote repository over ssh, and you do not have the
program in a directory on the default $PATH.

@item  @samp{--[no-]force-with-lease} 
@itemx  @samp{--force-with-lease=<refname>} 
@itemx  @samp{--force-with-lease=<refname>:<expect>} 
Usually, "git push" refuses to update a remote ref that is not an ancestor
of the local ref used to overwrite it.

This option overrides this restriction if the current value of the remote
ref is the expected value.  "git push" fails otherwise.

Imagine that you have to rebase what you have already published.  You will
have to bypass the "must fast-forward" rule in order to replace the history
you originally published with the rebased history.  If somebody else built
on top of your original history while you are rebasing, the tip of the
branch at the remote may advance with their commit, and blindly pushing with
@samp{--force} will lose their work.

This option allows you to say that you expect the history you are updating
is what you rebased and want to replace. If the remote ref still points at
the commit you specified, you can be sure that no other people did anything
to the ref. It is like taking a "lease" on the ref without explicitly
locking it, and the remote ref is updated only if the "lease" is still
valid.

@samp{--force-with-lease} alone, without specifying the details, will protect all
remote refs that are going to be updated by requiring their current value to
be the same as the remote-tracking branch we have for them.

@samp{--force-with-lease=<refname>}, without specifying the expected value, will
protect the named ref (alone), if it is going to be updated, by requiring
its current value to be the same as the remote-tracking branch we have for
it.

@samp{--force-with-lease=<refname>:<expect>} will protect the named ref (alone),
if it is going to be updated, by requiring its current value to be the same
as the specified value @samp{<expect>} (which is allowed to be different from the
remote-tracking branch we have for the refname, or we do not even have to
have such a remote-tracking branch when this form is used).  If @samp{<expect>}
is the empty string, then the named ref must not already exist.

Note that all forms other than @samp{--force-with-lease=<refname>:<expect>} that
specifies the expected current value of the ref explicitly are still
experimental and their semantics may change as we gain experience with this
feature.

"--no-force-with-lease" will cancel all the previous --force-with-lease on
the command line.

A general note on safety: supplying this option without an expected value,
i.e. as @samp{--force-with-lease} or @samp{--force-with-lease=<refname>} interacts
very badly with anything that implicitly runs @samp{git fetch} on the remote to
be pushed to in the background, e.g. @samp{git fetch origin} on your repository
in a cronjob.

The protection it offers over @samp{--force} is ensuring that subsequent changes
your work wasn’t based on aren’t clobbered, but this is trivially defeated
if some background process is updating refs in the background. We don’t have
anything except the remote tracking info to go by as a heuristic for refs
you’re expected to have seen & are willing to clobber.

If your editor or some other system is running @samp{git fetch} in the background
for you a way to mitigate this is to simply set up another remote:

@example
git remote add origin-push $(git config remote.origin.url)
git fetch origin-push
@end example

Now when the background process runs @samp{git fetch origin} the references on
@samp{origin-push} won’t be updated, and thus commands like:

@example
git push --force-with-lease origin-push
@end example

Will fail unless you manually run @samp{git fetch origin-push}. This method is of
course entirely defeated by something that runs @samp{git fetch --all}, in that
case you’d need to either disable it or do something more tedious like:

@example
git fetch              # update 'master' from remote
git tag base master    # mark our base point
git rebase -i master   # rewrite some commits
git push --force-with-lease=master:base master:master
@end example

I.e. create a @samp{base} tag for versions of the upstream code that you’ve seen
and are willing to overwrite, then rewrite history, and finally force push
changes to @samp{master} if the remote version is still at @samp{base}, regardless of
what your local @samp{remotes/origin/master} has been updated to in the
background.

Alternatively, specifying @samp{--force-if-includes} as an ancillary option along
with @samp{--force-with-lease[=<refname>]} (i.e., without saying what exact
commit the ref on the remote side must be pointing at, or which refs on the
remote side are being protected) at the time of "push" will verify if
updates from the remote-tracking refs that may have been implicitly updated
in the background are integrated locally before allowing a forced update.

@item  @samp{-f} 
@itemx  @samp{--force} 
Usually, the command refuses to update a remote ref that is not an ancestor
of the local ref used to overwrite it.  Also, when @samp{--force-with-lease}
option is used, the command refuses to update a remote ref whose current
value does not match what is expected.

This flag disables these checks, and can cause the remote repository to lose
commits; use it with care.

Note that @samp{--force} applies to all the refs that are pushed, hence using it
with @samp{push.default} set to @samp{matching} or with multiple push destinations
configured with @samp{remote.*.push} may overwrite refs other than the current
branch (including local refs that are strictly behind their remote
counterpart).  To force a push to only one branch, use a @samp{+} in front of the
refspec to push (e.g @samp{git push origin +master} to force a push to the
@samp{master} branch). See the @samp{<refspec>...} section above for details.

@item  @samp{--[no-]force-if-includes} 
Force an update only if the tip of the remote-tracking ref has been
integrated locally.

This option enables a check that verifies if the tip of the remote-tracking
ref is reachable from one of the "reflog" entries of the local branch based
in it for a rewrite. The check ensures that any updates from the remote have
been incorporated locally by rejecting the forced update if that is not the
case.

If the option is passed without specifying @samp{--force-with-lease}, or
specified along with @samp{--force-with-lease=<refname>:<expect>}, it is a
"no-op".

Specifying @samp{--no-force-if-includes} disables this behavior.

@item  @samp{--repo=<repository>} 
This option is equivalent to the <repository> argument. If both are
specified, the command-line argument takes precedence.

@item  @samp{-u} 
@itemx  @samp{--set-upstream} 
For every branch that is up to date or successfully pushed, add upstream
(tracking) reference, used by argument-less git-pull(1) and other
commands. For more information, see @samp{branch.<name>.merge} in
git-config(1).

@item  @samp{--[no-]thin} 
These options are passed to git-send-pack(1). A thin transfer
significantly reduces the amount of sent data when the sender and receiver
share many of the same objects in common. The default is @samp{--thin}.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Suppress all output, including the listing of updated refs, unless an error
occurs. Progress is not reported to the standard error stream.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Run verbosely.

@item  @samp{--progress} 
Progress status is reported on the standard error stream by default when it
is attached to a terminal, unless -q is specified. This flag forces progress
status even if the standard error stream is not directed to a terminal.

@item  @samp{--no-recurse-submodules} 
@itemx  @samp{--recurse-submodules=check|on-demand|only|no} 
May be used to make sure all submodule commits used by the revisions to be
pushed are available on a remote-tracking branch.  If @emph{check} is used Git
will verify that all submodule commits that changed in the revisions to be
pushed are available on at least one remote of the submodule. If any commits
are missing the push will be aborted and exit with non-zero status. If
@emph{on-demand} is used all submodules that changed in the revisions to be
pushed will be pushed. If on-demand was not able to push all necessary
revisions it will also be aborted and exit with non-zero status. If @emph{only}
is used all submodules will be recursively pushed while the superproject is
left unpushed. A value of @emph{no} or using @samp{--no-recurse-submodules} can be
used to override the push.recurseSubmodules configuration variable when no
submodule recursion is required.

@item  @samp{--[no-]verify} 
Toggle the pre-push hook (see githooks(5)).  The default is
--verify, giving the hook a chance to prevent the push.  With --no-verify,
the hook is bypassed completely.

@item  @samp{-4} 
@itemx  @samp{--ipv4} 
Use IPv4 addresses only, ignoring IPv6 addresses.

@item  @samp{-6} 
@itemx  @samp{--ipv6} 
Use IPv6 addresses only, ignoring IPv4 addresses.
@end table

@noindent

@chapheading GIT URLS

一般に、URLには、トランスポートプロトコル、リモートサーバーのアドレス、およびリポジトリへのパスに関する情報が含まれています。トランスポートプロトコルによっては、一部の情報が欠落している場合があります。

Gitはsshとgitとhttpとhttpsプロトコルをサポートします(さらにftpとftpsをフェッチに使用できますが、これは非効率的で非推奨です。使用しないでください)。

ネイティブトランスポート(つまり、 git://
URL)は認証を行わないため、セキュリティで保護されていないネットワークでは注意して使用する必要があります。

以下の構文を使用できます:

@itemize 

@item
ssh://[user@@]host.xz[:port]/path/to/repo.git/

@item
git://host.xz[:port]/path/to/repo.git/

@item
http[s]://host.xz[:port]/path/to/repo.git/

@item
ftp[s]://host.xz[:port]/path/to/repo.git/
@end itemize

代替のscpのような構文をsshプロトコルで使用することもできます:

@itemize 

@item
[user@@]host.xz:path/to/repo.git/
@end itemize

この構文は、最初のコロン(:)の前にスラッシュがない場合にのみ認識されます。これは、コロンを含むローカルパスを区別するのに役立ちます。たとえば、ローカルパス
@samp{foo:bar} を、絶対パスまたは @samp{./foo:bar} として指定して、 ssh url として誤って解釈されないようにすることができます。

sshおよびgitプロトコルは、さらに ~username 拡張をサポートします:

@itemize 

@item
ssh://[user@@]host.xz[:port]/~[user]/path/to/repo.git/

@item
git://host.xz[:port]/~[user]/path/to/repo.git/

@item
[user@@]host.xz:/~[user]/path/to/repo.git/
@end itemize

Gitでもネイティブにサポートされているローカルリポジトリの場合、以下の構文を使用できます:

@itemize 

@item
/path/to/repo.git/

@item
file:///path/to/repo.git/
@end itemize

これらの2つの構文は、前者が @samp{--local} オプションの機能を含むクローン作成の場合を除いて、ほとんど同等です。 詳細については、
git-clone(1) を参照してください。

「git clone」と「git fetch」と「git pull」は、「git push」と違って適切なバンドルファイルを受け入れます。
git-bundle(1) を参照してください。

Gitが特定のトランスポートプロトコルを処理する方法を知らない場合、Gitは @emph{remote-<transport>}
リモートヘルパー(存在する場合)を使用しようとします。リモートヘルパーを明示的に要求するには、以下の構文を使用できます:

@itemize 

@item
<transport>::<address>
@end itemize

ここで、 <address>
は、パス、サーバーとパス、または呼び出されている特定のリモートヘルパーによって認識される任意のURLのような文字列です。詳細については、
gitremote-helpers(7) を参照してください。

同じ名前のリモートリポジトリが多数あり、それらに異なる形式を使用する場合(あなたの使用するURLが機能するURLに書き換えられるように)、以下の形式の構成セクションを作成できます:

@example
        [url "<actual url base>"]
                insteadOf = <other url base>
@end example


例えば、以下のようになります:

@example
        [url "git://git.host.xz/"]
                insteadOf = host.xz:/path/to/
                insteadOf = work:
@end example


"work:repo.git" や "host.xz:/path/to/repo.git"
のようなURLは、任意のコンテキストで、"git://git.host.xz/repo.git" に書き換えられます。

プッシュ専用のURLを書き換えたい場合は、以下の形式の構成セクションを作成できます:

@example
        [url "<actual url base>"]
                pushInsteadOf = <other url base>
@end example


例えば、以下のようになります:

@example
        [url "ssh://example.org/"]
                pushInsteadOf = git://example.org/
@end example


"git://example.org/path/to/repo.git" のようなURLは、プッシュの場合は
"ssh://example.org/path/to/repo.git" に書き換えられますが、プルは引き続き元のURLのままです。

@noindent

@chapheading REMOTES

@samp{<repository>} 引数として、URLの代わりに以下のいずれかの名前を使用できます:

@itemize 

@item
Git構成ファイル(configuration file)内のリモート(remote)として、 @samp{$GIT_DIR/config} または

@item
@samp{$GIT_DIR/remotes} ディレクトリ内のファイル または

@item
@samp{$GIT_DIR/branches} ディレクトリ内のファイル
@end itemize

これらはすべて、gitがデフォルトで使用するrefspecをそれぞれ含んでいるため、コマンドラインからrefspecを省略できます。

@noindent

@heading Named remote in configuration file

あなたは、 git-remote(1) を使うか、または git-config(1) を使うか、または
@samp{$GIT_DIR/config}
ファイルを手動で編集して、これ以前に構成したリモートの名前から選択できます。このリモートのURLは、リポジトリへのアクセスに使用されます。コマンドラインでrefspecを指定しない場合、このリモートのrefspecがデフォルトで使用されます。構成ファイルのエントリは以下のようになります:

@example
        [remote "<name>"]
                url = <url>
                pushurl = <pushurl>
                push = <refspec>
                fetch = <refspec>
@end example


@samp{<pushurl>} はプッシュにのみ使用されます。 これはオプションであり、デフォルトは @samp{<url>} です。

@noindent

@heading Named file in $GIT_DIR/remotes

あなたは、 @samp{$GIT_DIR/remotes}
でファイル名を指定できます。このファイルのURLは、リポジトリへのアクセスに使用されます。コマンドラインでrefspecを指定しない場合、このファイルのrefspecがデフォルトとして使用されます。このファイルの形式は以下のとおりです:

@example
        URL: one of the above URL format
        Push: <refspec>
        Pull: <refspec>
@end example


@samp{Push:} 行は @emph{git push} で使用され、 @samp{Pull:} 行は @emph{git pull} と @emph{git fetch}
で使用されます。追加のブランチマッピングのために、複数の @samp{Push:} および @samp{Pull:} 行を指定できます。

@noindent

@heading Named file in $GIT_DIR/branches

@samp{$GIT_DIR/branches} でファイル名を指定できます。このファイルのURLは、リポジトリへのアクセスに使用されます。
このファイルの形式は以下のとおりです:

@example
        <url>#<head>
@end example


@samp{<url>} は必須です。 @samp{#<head>} はオプションです。

コマンドラインで指定しない場合、操作に応じて、gitは以下のrefspecのいずれかを使用します。 @samp{<branch>} は
@samp{$GIT_DIR/branchs} 内のこのファイルの名前であり、 @samp{<head>`はデフォルトで `master} になります。

git fetch は以下を使用します:

@example
        refs/heads/<head>:refs/heads/<branch>
@end example


git push は以下を使用します:

@example
        HEAD:refs/heads/<head>
@end example


@noindent

@chapheading OUTPUT

The output of "git push" depends on the transport method used; this section
describes the output when pushing over the Git protocol (either locally or
via ssh).

The status of the push is output in tabular form, with each line
representing the status of a single ref. Each line is of the form:

@example
 <flag> <summary> <from> -> <to> (<reason>)
@end example


If --porcelain is used, then each line of the output is of the form:

@example
 <flag> \t <from>:<to> \t <summary> (<reason>)
@end example


The status of up-to-date refs is shown only if --porcelain or --verbose
option is used.

@table @asis

@item  flag 
A single character indicating the status of the ref:

@table @asis

@item  (space) 
for a successfully pushed fast-forward;

@item  @samp{+} 
for a successful forced update;

@item  @samp{-} 
for a successfully deleted ref;

@item  @samp{*} 
for a successfully pushed new ref;

@item  @samp{!} 
for a ref that was rejected or failed to push; and

@item  @samp{=} 
for a ref that was up to date and did not need pushing.
@end table

@item  summary 
For a successfully pushed ref, the summary shows the old and new values of
the ref in a form suitable for using as an argument to @samp{git log} (this is
@samp{<old>..<new>} in most cases, and @samp{<old>...<new>} for forced
non-fast-forward updates).

For a failed update, more details are given:

@table @asis

@item  rejected 
Git did not try to send the ref at all, typically because it is not a
fast-forward and you did not force the update.

@item  remote rejected 
The remote end refused the update.  Usually caused by a hook on the remote
side, or because the remote repository has one of the following safety
options in effect: @samp{receive.denyCurrentBranch} (for pushes to the checked
out branch), @samp{receive.denyNonFastForwards} (for forced non-fast-forward
updates), @samp{receive.denyDeletes} or @samp{receive.denyDeleteCurrent}.  See
git-config(1).

@item  remote failure 
The remote end did not report the successful update of the ref, perhaps
because of a temporary error on the remote side, a break in the network
connection, or other transient error.
@end table

@item  from 
The name of the local ref being pushed, minus its @samp{refs/<type>/} prefix. In
the case of deletion, the name of the local ref is omitted.

@item  to 
The name of the remote ref being updated, minus its @samp{refs/<type>/} prefix.

@item  reason 
A human-readable explanation. In the case of successfully pushed refs, no
explanation is needed. For a failed ref, the reason for failure is
described.
@end table

@noindent

@chapheading NOTE ABOUT FAST-FORWARDS

When an update changes a branch (or more in general, a ref) that used to
point at commit A to point at another commit B, it is called a fast-forward
update if and only if B is a descendant of A.

In a fast-forward update from A to B, the set of commits that the original
commit A built on top of is a subset of the commits the new commit B builds
on top of.  Hence, it does not lose any history.

In contrast, a non-fast-forward update will lose history.  For example,
suppose you and somebody else started at the same commit X, and you built a
history leading to commit B while the other person built a history leading
to commit A.  The history looks like this:

@example
      B
     /
 ---X---A
@end example


Further suppose that the other person already pushed changes leading to A
back to the original repository from which you two obtained the original
commit X.

The push done by the other person updated the branch that used to point at
commit X to point at commit A.  It is a fast-forward.

But if you try to push, you will attempt to update the branch (that now
points at A) with commit B.  This does @emph{not} fast-forward.  If you did so,
the changes introduced by commit A will be lost, because everybody will now
start building on top of B.

The command by default does not allow an update that is not a fast-forward
to prevent such loss of history.

If you do not want to lose your work (history from X to B) or the work by
the other person (history from X to A), you would need to first fetch the
history from the repository, create a history that contains changes done by
both parties, and push the result back.

You can perform "git pull", resolve potential conflicts, and "git push" the
result.  A "git pull" will create a merge commit C between commits A and B.

@example
      B---C
     /   /
 ---X---A
@end example


Updating A with the resulting merge commit will fast-forward and your push
will be accepted.

Alternatively, you can rebase your change between X and B on top of A, with
"git pull --rebase", and push the result back.  The rebase will create a new
commit D that builds the change between X and B on top of A.

@example
      B   D
     /   /
 ---X---A
@end example


Again, updating A with this commit will fast-forward and your push will be
accepted.

There is another common situation where you may encounter non-fast-forward
rejection when you try to push, and it is possible even when you are pushing
into a repository nobody else pushes into. After you push commit A yourself
(in the first picture in this section), replace it with "git commit --amend"
to produce commit B, and you try to push it out, because forgot that you
have pushed A out already. In such a case, and only if you are certain that
nobody in the meantime fetched your earlier commit A (and started building
on top of it), you can run "git push --force" to overwrite it. In other
words, "git push --force" is a method reserved for a case where you do mean
to lose history.

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git push} 
Works like @samp{git push <remote>}, where <remote> is the current branch’s
remote (or @samp{origin}, if no remote is configured for the current branch).

@item  @samp{git push origin} 
Without additional configuration, pushes the current branch to the
configured upstream (@samp{branch.<name>.merge} configuration variable) if it has
the same name as the current branch, and errors out without pushing
otherwise.

The default behavior of this command when no <refspec> is given can be
configured by setting the @samp{push} option of the remote, or the @samp{push.default}
configuration variable.

For example, to default to pushing only the current branch to @samp{origin} use
@samp{git config remote.origin.push HEAD}.  Any valid <refspec> (like the ones in
the examples below) can be configured as the default for @samp{git push origin}.

@item  @samp{git push origin :} 
Push "matching" branches to @samp{origin}. See <refspec> in the
OPTIONS (@pxref{[OPTIONS]}) section above for a description of "matching" branches.

@item  @samp{git push origin master} 
Find a ref that matches @samp{master} in the source repository (most likely, it
would find @samp{refs/heads/master}), and update the same ref
(e.g. @samp{refs/heads/master}) in @samp{origin} repository with it.  If @samp{master} did
not exist remotely, it would be created.

@item  @samp{git push origin HEAD} 
A handy way to push the current branch to the same name on the remote.

@item  @samp{git push mothership master:satellite/master dev:satellite/dev} 
Use the source ref that matches @samp{master} (e.g. @samp{refs/heads/master})  to
update the ref that matches @samp{satellite/master} (most probably
@samp{refs/remotes/satellite/master}) in the @samp{mothership} repository; do the same
for @samp{dev} and @samp{satellite/dev}.

See the section describing @samp{<refspec>...} above for a discussion of the
matching semantics.

This is to emulate @samp{git fetch} run on the @samp{mothership} using @samp{git push} that
is run in the opposite direction in order to integrate the work done on
@samp{satellite}, and is often necessary when you can only make connection in one
way (i.e. satellite can ssh into mothership but mothership cannot initiate
connection to satellite because the latter is behind a firewall or does not
run sshd).

After running this @samp{git push} on the @samp{satellite} machine, you would ssh into
the @samp{mothership} and run @samp{git merge} there to complete the emulation of @samp{git
pull} that were run on @samp{mothership} to pull changes made on @samp{satellite}.

@item  @samp{git push origin HEAD:master} 
Push the current branch to the remote ref matching @samp{master} in the @samp{origin}
repository. This form is convenient to push the current branch without
thinking about its local name.

@item  @samp{git push origin master:refs/heads/experimental} 
Create the branch @samp{experimental} in the @samp{origin} repository by copying the
current @samp{master} branch.  This form is only needed to create a new branch or
tag in the remote repository when the local name and the remote name are
different; otherwise, the ref name on its own will work.

@item  @samp{git push origin :experimental} 
Find a ref that matches @samp{experimental} in the @samp{origin} repository
(e.g. @samp{refs/heads/experimental}), and delete it.

@item  @samp{git push origin +dev:master} 
Update the origin repository’s master branch with the dev branch, allowing
non-fast-forward updates.  @strong{This can leave unreferenced commits dangling in
the origin repository.} Consider the following situation, where a
fast-forward is not possible:

@example
            o---o---o---A---B  origin/master
                     \
                      X---Y---Z  dev
@end example


The above command would change the origin repository to

@example
                      A---B  (unnamed branch)
                     /
            o---o---o---X---Y---Z  master
@end example


Commits A and B would no longer belong to a branch with a symbolic name, and
so would be unreachable.  As such, these commits would be removed by a @samp{git
gc} command on the origin repository.
@end table

@noindent

@chapheading SECURITY

フェッチおよびプッシュプロトコルは、共有することを意図していない一方の側が他方のリポジトリからデータを盗むのを防ぐようには設計されていません。悪意のある者から保護する必要のあるプライベートデータがある場合、最善のオプションはそれを別のリポジトリに保存することです。これは、クライアントとサーバーの両方に適用されます。特に、サーバー上の名前空間は、読み取りアクセス制御には効果的ではありません。リポジトリ全体への読み取りアクセスで信頼できるクライアントにのみ、名前空間への読み取りアクセスを許可する必要があります。

既知の攻撃ベクトル(attack vectors)は以下のとおりです:

@enumerate 

@item
被害者は、明示的に共有することを意図していないオブジェクトのIDをアドバタイズする "have"
行を送信しますが、他にもIDを持っている者が居る場合は、転送を最適化するために使用できます。攻撃者はオブジェクトID
Xを選択して盗み、refをXに送信しますが、被害者はすでにXのコンテンツを持っているため、Xのコンテンツを送信する必要はありません。
これで、被害者は攻撃者がXを持っていると信じ、Xのコンテンツを後で攻撃者に送り返します。
(この攻撃は、クライアントがアクセスできる名前空間にXへのrefを作成してフェッチすることにより、クライアントがサーバー上で実行するのが最も簡単です。サーバーがクライアント上で実行する最も可能性の高い方法は、Xをパブリックブランチにマージし、ユーザーがこのブランチで追加の作業を行い、マージに気付かずにサーバーにプッシュバックすることを期待します。)

@item
#1 と同様に、攻撃者は盗むオブジェクトID
Xを選択します。被害者は、攻撃者がすでに持っているオブジェクトYを送信し、攻撃者はYではなくXを持っていると誤って主張するため、被害者はYをXに対するデルタとして送信します。デルタは、攻撃者にYに類似したXの領域を明らかにします。
@end enumerate

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-quiltimport,,,Top
@chapheading Name

git-quiltimport — quilt(キルト)パッチセットを現在のブランチに適用します

@noindent

@chapheading Synopsis

@display
git quiltimport [--dry-run | -n] [--author <author>] [--patches <dir>]
                [--series <file>] [--keep-non-patch]
@end display


@noindent

@chapheading DESCRIPTION

quiltパッチセットを現在のGitブランチに適用し、quiltパッチセットに存在するパッチ境界、パッチ順序、およびパッチの説明を保持します。

パッチごとに、コードはパッチの説明から作者を抽出しようとします。それが失敗した場合は、 @samp{--author} で指定された作者にフォールバックします。
@samp{--author} フラグが指定されていない場合、パッチの説明が表示され、ユーザーはパッチの作者をインタラクティブに入力するように求められます。

パッチの説明に件名が見つからない場合、パッチ名はGitの説明の1行の件名として保持されます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
一連(series)のパッチをウォークスルーし、パッチをコミットするために必要なすべての情報が見つからない場合は警告します。この記事の執筆時点では、欠落している作者情報のみを警告します。

@item  @samp{--author Author Name <Author Email>} 
パッチの説明に作者情報が見つからない場合に使用する作者名と電子メールアドレス。

@item  @samp{--patches <dir>} 
quiltパッチを見つけるためのディレクトリ。

パッチディレクトリのデフォルトは、 patches または @samp{$QUILT_PATCHES} 環境変数の値です。

@item  @samp{--series <file>} 
キルトシリーズファイル(quilt series file)。

シリーズファイルのデフォルトは、 <patches>/series または @samp{$QUILT_SERIES} 環境変数の値です。

@item  @samp{--keep-non-patch} 
@samp{-b} フラグを @emph{git mailinfo} に渡します(git-mailinfo(1) 参照)。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-range-diff,,,Top
@chapheading Name

git-range-diff — Compare two commit ranges (e.g. two versions of a branch)

@noindent

@chapheading Synopsis

@display
git range-diff [--color=[<when>]] [--no-color] [<diff-options>]
        [--no-dual-color] [--creation-factor=<factor>]
        [--left-only | --right-only]
        ( <range1> <range2> | <rev1>…<rev2> | <base> <rev1> <rev2> )
@end display


@noindent

@chapheading DESCRIPTION

This command shows the differences between two versions of a patch series,
or more generally, two commit ranges (ignoring merge commits).

To that end, it first finds pairs of commits from both commit ranges that
correspond with each other. Two commits are said to correspond when the diff
between their patches (i.e. the author information, the commit message and
the commit diff) is reasonably small compared to the patches' size. See
``Algorithm`` below for details.

Finally, the list of matching commits is shown in the order of the second
commit range, with unmatched commits being inserted just after all of their
ancestors have been shown.

There are three ways to specify the commit ranges:

@itemize 

@item
@samp{<range1> <range2>}: Either commit range can be of the form @samp{<base>..<rev>},
@samp{<rev>^!} or @samp{<rev>^-<n>}. See @samp{SPECIFYING RANGES} in
gitrevisions(7) for more details.

@item
@samp{<rev1>...<rev2>}. This is equivalent to @samp{<rev2>..<rev1> <rev1>..<rev2>}.

@item
@samp{<base> <rev1> <rev2>}: This is equivalent to @samp{<base>..<rev1>
<base>..<rev2>}.
@end itemize

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--no-dual-color} 
When the commit diffs differ, ‘git range-diff` recreates the original diffs’
coloring, and adds outer -/+ diff markers with the @strong{background} being
red/green to make it easier to see e.g.  when there was a change in what
exact lines were added.

Additionally, the commit diff lines that are only present in the first
commit range are shown "dimmed" (this can be overridden using the
@samp{color.diff.<slot>} config setting where @samp{<slot>} is one of @samp{contextDimmed},
@samp{oldDimmed} and @samp{newDimmed}), and the commit diff lines that are only
present in the second commit range are shown in bold (which can be
overridden using the config settings @samp{color.diff.<slot>} with @samp{<slot>} being
one of @samp{contextBold}, @samp{oldBold} or @samp{newBold}).

This is known to @samp{range-diff} as "dual coloring". Use @samp{--no-dual-color} to
revert to color all lines according to the outer diff markers (and
completely ignore the inner diff when it comes to color).

@item  @samp{--creation-factor=<percent>} 
Set the creation/deletion cost fudge factor to @samp{<percent>}.  Defaults to

@enumerate 

@item
Try a larger value if @samp{git range-diff} erroneously considers a large
change a total rewrite (deletion of one commit and addition of another), and
a smaller one in the reverse case.  See the ``Algorithm`` section below for
an explanation why this is needed.
@end enumerate

@item  @samp{--left-only} 
Suppress commits that are missing from the first specified range (or the
"left range" when using the @samp{<rev1>...<rev2>} format).

@item  @samp{--right-only} 
Suppress commits that are missing from the second specified range (or the
"right range" when using the @samp{<rev1>...<rev2>} format).

@item  @samp{--[no-]notes[=<ref>]} 
This flag is passed to the @samp{git log} program (see git-log(1)) that
generates the patches.

@item  <range1> <range2> 
Compare the commits specified by the two ranges, where @samp{<range1>} is
considered an older version of @samp{<range2>}.

@item  <rev1>…<rev2> 
Equivalent to passing @samp{<rev2>..<rev1>} and @samp{<rev1>..<rev2>}.

@item  <base> <rev1> <rev2> 
Equivalent to passing @samp{<base>..<rev1>} and @samp{<base>..<rev2>}.  Note that
@samp{<base>} does not need to be the exact branch point of the
branches. Example: after rebasing a branch @samp{my-topic}, @samp{git range-diff
my-topic@@@{u@} my-topic@@@{1@} my-topic} would show the differences introduced by
the rebase.
@end table

@samp{git range-diff} also accepts the regular diff options (see
git-diff(1)), most notably the @samp{--color=[<when>]} and @samp{--no-color}
options. These options are used when generating the "diff between patches",
i.e. to compare the author, commit message and diff of corresponding old/new
commits. There is currently no means to tweak most of the diff options
passed to @samp{git log} when generating those patches.

@noindent

@chapheading OUTPUT STABILITY

The output of the @samp{range-diff} command is subject to change. It is intended
to be human-readable porcelain output, not something that can be used across
versions of Git to get a textually stable @samp{range-diff} (as opposed to
something like the @samp{--stable} option to git-patch-id(1)). There’s
also no equivalent of git-apply(1) for @samp{range-diff}, the output is
not intended to be machine-readable.

This is particularly true when passing in diff options. Currently some
options like @samp{--stat} can, as an emergent effect, produce output that’s
quite useless in the context of @samp{range-diff}. Future versions of
@samp{range-diff} may learn to interpret such options in a manner specific to
@samp{range-diff} (e.g. for @samp{--stat} producing human-readable output which
summarizes how the diffstat changed).

@noindent

@chapheading CONFIGURATION

This command uses the @samp{diff.color.*} and @samp{pager.range-diff} settings (the
latter is on by default).  See git-config(1).

@noindent

@chapheading EXAMPLES

When a rebase required merge conflicts to be resolved, compare the changes
introduced by the rebase directly afterwards using:

@example
$ git range-diff @@@{u@} @@@{1@} @@
@end example


A typical output of @samp{git range-diff} would look like this:

@example
-:  ------- > 1:  0ddba11 Prepare for the inevitable!
1:  c0debee = 2:  cab005e Add a helpful message at the start
2:  f00dbal ! 3:  decafe1 Describe a bug
    @@@@ -1,3 +1,3 @@@@
     Author: A U Thor <author@@example.com>

    -TODO: Describe a bug
    +Describe a bug
    @@@@ -324,5 +324,6
      This is expected.

    -+What is unexpected is that it will also crash.
    ++Unexpectedly, it also crashes. This is a bug, and the jury is
    ++still out there how to fix it best. See ticket #314 for details.

      Contact
3:  bedead < -:  ------- TO-UNDO
@end example


In this example, there are 3 old and 3 new commits, where the developer
removed the 3rd, added a new one before the first two, and modified the
commit message of the 2nd commit as well its diff.

When the output goes to a terminal, it is color-coded by default, just like
regular @samp{git diff}'s output. In addition, the first line (adding a commit)
is green, the last line (deleting a commit) is red, the second line (with a
perfect match) is yellow like the commit header of @samp{git show}'s output, and
the third line colors the old commit red, the new one green and the rest
like @samp{git show}'s commit header.

A naive color-coded diff of diffs is actually a bit hard to read, though, as
it colors the entire lines red or green. The line that added "What is
unexpected" in the old commit, for example, is completely red, even if the
intent of the old commit was to add something.

To help with that, @samp{range} uses the @samp{--dual-color} mode by default. In this
mode, the diff of diffs will retain the original diff colors, and prefix the
lines with -/+ markers that have their @strong{background} red or green, to make it
more obvious that they describe how the diff itself changed.

@noindent

@chapheading Algorithm

The general idea is this: we generate a cost matrix between the commits in
both commit ranges, then solve the least-cost assignment.

The cost matrix is populated thusly: for each pair of commits, both diffs
are generated and the "diff of diffs" is generated, with 3 context lines,
then the number of lines in that diff is used as cost.

To avoid false positives (e.g. when a patch has been removed, and an
unrelated patch has been added between two iterations of the same patch
series), the cost matrix is extended to allow for that, by adding fixed-cost
entries for wholesale deletes/adds.

Example: Let commits @samp{1--2} be the first iteration of a patch series and
@samp{A--C} the second iteration. Let’s assume that @samp{A} is a cherry-pick of @samp{2,}
and @samp{C} is a cherry-pick of @samp{1} but with a small modification (say, a fixed
typo). Visualize the commits as a bipartite graph:

@example
    1            A

    2            B

                 C
@end example


We are looking for a "best" explanation of the new series in terms of the
old one. We can represent an "explanation" as an edge in the graph:

@example
    1            A
               /
    2 --------'  B

                 C
@end example


This explanation comes for "free" because there was no change. Similarly @samp{C}
could be explained using @samp{1}, but that comes at some cost c>0 because of the
modification:

@example
    1 ----.      A
          |    /
    2 ----+---'  B
          |
          `----- C
          c>0
@end example


In mathematical terms, what we are looking for is some sort of a minimum
cost bipartite matching; ‘1` is matched to @samp{C} at some cost, etc. The
underlying graph is in fact a complete bipartite graph; the cost we
associate with every edge is the size of the diff between the two commits’
patches. To explain also new commits, we introduce dummy nodes on both
sides:

@example
    1 ----.      A
          |    /
    2 ----+---'  B
          |
    o     `----- C
          c>0
    o            o

    o            o
@end example


The cost of an edge @samp{o--C} is the size of @samp{C}'s diff, modified by a fudge
factor that should be smaller than 100%. The cost of an edge @samp{o--o} is
free. The fudge factor is necessary because even if @samp{1} and @samp{C} have nothing
in common, they may still share a few empty lines and such, possibly making
the assignment @samp{1--C}, @samp{o--o} slightly cheaper than @samp{1--o}, @samp{o--C} even if
@samp{1} and @samp{C} have nothing in common. With the fudge factor we require a much
larger common part to consider patches as corresponding.

The overall time needed to compute this algorithm is the time needed to
compute n+m commit diffs and then n*m diffs of patches, plus the time needed
to compute the least-cost assignment between n and m diffs. Git uses an
implementation of the Jonker-Volgenant algorithm to solve the assignment
problem, which has cubic runtime complexity. The matching found in this case
will look like this:

@example
    1 ----.      A
          |    /
    2 ----+---'  B
       .--+-----'
    o -'  `----- C
          c>0
    o ---------- o

    o ---------- o
@end example


@noindent

@chapheading SEE ALSO

git-log(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-read-tree,,,Top
@chapheading Name

git-read-tree — Reads tree information into the index

@noindent

@chapheading Synopsis

@display
git read-tree [[-m [--trivial] [--aggressive] | --reset | --prefix=<prefix>]
                [-u [--exclude-per-directory=<gitignore>] | -i]]
                [--index-output=<file>] [--no-sparse-checkout]
                (--empty | <tree-ish1> [<tree-ish2> [<tree-ish3>]])
@end display


@noindent

@chapheading DESCRIPTION

Reads the tree information given by <tree-ish> into the index, but does not
actually @strong{update} any of the files it "caches". (see:
git-checkout-index(1))

Optionally, it can merge a tree into the index, perform a fast-forward
(i.e. 2-way) merge, or a 3-way merge, with the @samp{-m} flag.  When used with
@samp{-m}, the @samp{-u} flag causes it to also update the files in the work tree with
the result of the merge.

Trivial merges are done by @emph{git read-tree} itself.  Only conflicting paths
will be in unmerged state when @emph{git read-tree} returns.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-m} 
Perform a merge, not just a read.  The command will refuse to run if your
index file has unmerged entries, indicating that you have not finished
previous merge you started.

@item  @samp{--reset} 
Same as -m, except that unmerged entries are discarded instead of
failing. When used with @samp{-u}, updates leading to loss of working tree
changes will not abort the operation.

@item  @samp{-u} 
After a successful merge, update the files in the work tree with the result
of the merge.

@item  @samp{-i} 
Usually a merge requires the index file as well as the files in the working
tree to be up to date with the current head commit, in order not to lose
local changes.  This flag disables the check with the working tree and is
meant to be used when creating a merge of trees that are not directly
related to the current working tree status into a temporary index file.

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
Check if the command would error out, without updating the index or the
files in the working tree for real.

@item  @samp{-v} 
Show the progress of checking files out.

@item  @samp{--trivial} 
Restrict three-way merge by @emph{git read-tree} to happen only if there is no
file-level merging required, instead of resolving merge for trivial cases
and leaving conflicting files unresolved in the index.

@item  @samp{--aggressive} 
Usually a three-way merge by @emph{git read-tree} resolves the merge for really
trivial cases and leaves other cases unresolved in the index, so that
porcelains can implement different merge policies.  This flag makes the
command resolve a few more cases internally:

@itemize 

@item
when one side removes a path and the other side leaves the path unmodified.
The resolution is to remove that path.

@item
when both sides remove a path.  The resolution is to remove that path.

@item
when both sides add a path identically.  The resolution is to add that path.
@end itemize

@item  @samp{--prefix=<prefix>} 
Keep the current index contents, and read the contents of the named tree-ish
under the directory at @samp{<prefix>}.  The command will refuse to overwrite
entries that already existed in the original index file.

@item  @samp{--exclude-per-directory=<gitignore>} 
When running the command with @samp{-u} and @samp{-m} options, the merge result may
need to overwrite paths that are not tracked in the current branch.  The
command usually refuses to proceed with the merge to avoid losing such a
path.  However this safety valve sometimes gets in the way.  For example, it
often happens that the other branch added a file that used to be a generated
file in your branch, and the safety valve triggers when you try to switch to
that branch after you ran @samp{make} but before running @samp{make clean} to remove
the generated file.  This option tells the command to read per-directory
exclude file (usually @emph{.gitignore}) and allows such an untracked but
explicitly ignored file to be overwritten.

@item  @samp{--index-output=<file>} 
Instead of writing the results out to @samp{$GIT_INDEX_FILE}, write the resulting
index in the named file.  While the command is operating, the original index
file is locked with the same mechanism as usual.  The file must allow to be
rename(2)ed into from a temporary file that is created next to the usual
index file; typically this means it needs to be on the same filesystem as
the index file itself, and you need write permission to the directories the
index file and index output file are located in.

@item  @samp{--[no-]recurse-submodules} 
Using --recurse-submodules will update the content of all active submodules
according to the commit recorded in the superproject by calling read-tree
recursively, also setting the submodules' HEAD to be detached at that
commit.

@item  @samp{--no-sparse-checkout} 
Disable sparse checkout support even if @samp{core.sparseCheckout} is true.

@item  @samp{--empty} 
Instead of reading tree object(s) into the index, just empty it.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Quiet, suppress feedback messages.

@item  <tree-ish#> 
The id of the tree object(s) to be read/merged.
@end table

@noindent

@chapheading MERGING

If @samp{-m} is specified, @emph{git read-tree} can perform 3 kinds of merge, a single
tree merge if only 1 tree is given, a fast-forward merge with 2 trees, or a
3-way merge if 3 or more trees are provided.

@noindent

@heading Single Tree Merge

If only 1 tree is specified, @emph{git read-tree} operates as if the user did not
specify @samp{-m}, except that if the original index has an entry for a given
pathname, and the contents of the path match with the tree being read, the
stat info from the index is used. (In other words, the index’s stat()s take
precedence over the merged tree’s).

That means that if you do a @samp{git read-tree -m <newtree>} followed by a @samp{git
checkout-index -f -u -a}, the @emph{git checkout-index} only checks out the stuff
that really changed.

This is used to avoid unnecessary false hits when @emph{git diff-files} is run
after @emph{git read-tree}.

@noindent

@heading Two Tree Merge

Typically, this is invoked as @samp{git read-tree -m $H $M}, where $H is the head
commit of the current repository, and $M is the head of a foreign tree,
which is simply ahead of $H (i.e. we are in a fast-forward situation).

When two trees are specified, the user is telling @emph{git read-tree} the
following:

@enumerate 

@item
The current index and work tree is derived from $H, but
the user may have local changes in them since $H.

@item
The user wants to fast-forward to $M.
@end enumerate

In this case, the @samp{git read-tree -m $H $M} command makes sure that no local
change is lost as the result of this "merge".  Here are the "carry forward"
rules, where "I" denotes the index, "clean" means that index and work tree
coincide, and "exists"/"nothing" refer to the presence of a path in the
specified commit:

@example
        I                   H        M        Result
       -------------------------------------------------------
     0  nothing             nothing  nothing  (does not happen)
     1  nothing             nothing  exists   use M
     2  nothing             exists   nothing  remove path from index
     3  nothing             exists   exists,  use M if "initial checkout",
                                     H == M   keep index otherwise
                                     exists,  fail
                                     H != M

        clean I==H  I==M
       ------------------
     4  yes   N/A   N/A     nothing  nothing  keep index
     5  no    N/A   N/A     nothing  nothing  keep index

     6  yes   N/A   yes     nothing  exists   keep index
     7  no    N/A   yes     nothing  exists   keep index
     8  yes   N/A   no      nothing  exists   fail
     9  no    N/A   no      nothing  exists   fail

     10 yes   yes   N/A     exists   nothing  remove path from index
     11 no    yes   N/A     exists   nothing  fail
     12 yes   no    N/A     exists   nothing  fail
     13 no    no    N/A     exists   nothing  fail

        clean (H==M)
       ------
     14 yes                 exists   exists   keep index
     15 no                  exists   exists   keep index

        clean I==H  I==M (H!=M)
       ------------------
     16 yes   no    no      exists   exists   fail
     17 no    no    no      exists   exists   fail
     18 yes   no    yes     exists   exists   keep index
     19 no    no    yes     exists   exists   keep index
     20 yes   yes   no      exists   exists   use M
     21 no    yes   no      exists   exists   fail
@end example

In all "keep index" cases, the index entry stays as in the original index
file.  If the entry is not up to date, @emph{git read-tree} keeps the copy in the
work tree intact when operating under the -u flag.

When this form of @emph{git read-tree} returns successfully, you can see which of
the "local changes" that you made were carried forward by running @samp{git
diff-index --cached $M}.  Note that this does not necessarily match what
@samp{git diff-index --cached $H} would have produced before such a two tree
merge.  This is because of cases 18 and 19 --- if you already had the
changes in $M (e.g. maybe you picked it up via e-mail in a patch form), @samp{git
diff-index --cached $H} would have told you about the change before this
merge, but it would not show in @samp{git diff-index --cached $M} output after
the two-tree merge.

Case 3 is slightly tricky and needs explanation.  The result from this rule
logically should be to remove the path if the user staged the removal of the
path and then switching to a new branch.  That however will prevent the
initial checkout from happening, so the rule is modified to use M (new tree)
only when the content of the index is empty.  Otherwise the removal of the
path is kept as long as $H and $M are the same.

@noindent

@heading 3-Way Merge

Each "index" entry has two bits worth of "stage" state. stage 0 is the
normal one, and is the only one you’d see in any kind of normal use.

However, when you do @emph{git read-tree} with three trees, the "stage" starts
out at 1.

This means that you can do

@example
$ git read-tree -m <tree1> <tree2> <tree3>
@end example


and you will end up with an index with all of the <tree1> entries in
"stage1", all of the <tree2> entries in "stage2" and all of the <tree3>
entries in "stage3".  When performing a merge of another branch into the
current branch, we use the common ancestor tree as <tree1>, the current
branch head as <tree2>, and the other branch head as <tree3>.

Furthermore, @emph{git read-tree} has special-case logic that says: if you see a
file that matches in all respects in the following states, it "collapses"
back to "stage0":

@itemize 

@item
stage 2 and 3 are the same; take one or the other (it makes no difference -
the same work has been done on our branch in stage 2 and their branch in
stage 3)

@item
stage 1 and stage 2 are the same and stage 3 is different; take stage 3 (our
branch in stage 2 did not do anything since the ancestor in stage 1 while
their branch in stage 3 worked on it)

@item
stage 1 and stage 3 are the same and stage 2 is different take stage 2 (we
did something while they did nothing)
@end itemize

The @emph{git write-tree} command refuses to write a nonsensical tree, and it
will complain about unmerged entries if it sees a single entry that is not
stage 0.

OK, this all sounds like a collection of totally nonsensical rules, but it’s
actually exactly what you want in order to do a fast merge. The different
stages represent the "result tree" (stage 0, aka "merged"), the original
tree (stage 1, aka "orig"), and the two trees you are trying to merge (stage
2 and 3 respectively).

The order of stages 1, 2 and 3 (hence the order of three <tree-ish>
command-line arguments) are significant when you start a 3-way merge with an
index file that is already populated.  Here is an outline of how the
algorithm works:

@itemize 

@item
if a file exists in identical format in all three trees, it will
automatically collapse to "merged" state by @emph{git read-tree}.

@item
a file that has @emph{any} difference what-so-ever in the three trees will stay
as separate entries in the index. It’s up to "porcelain policy" to determine
how to remove the non-0 stages, and insert a merged version.

@item
the index file saves and restores with all this information, so you can
merge things incrementally, but as long as it has entries in stages 1/2/3
(i.e., "unmerged entries") you can’t write the result. So now the merge
algorithm ends up being really simple:

@itemize 

@item
you walk the index in order, and ignore all entries of stage 0, since
they’ve already been done.

@item
if you find a "stage1", but no matching "stage2" or "stage3", you know it’s
been removed from both trees (it only existed in the original tree), and you
remove that entry.

@item
if you find a matching "stage2" and "stage3" tree, you remove one of them,
and turn the other into a "stage0" entry. Remove any matching "stage1" entry
if it exists too.  .. all the normal trivial rules ..
@end itemize
@end itemize

You would normally use @emph{git merge-index} with supplied @emph{git merge-one-file}
to do this last step.  The script updates the files in the working tree as
it merges each path and at the end of a successful merge.

When you start a 3-way merge with an index file that is already populated,
it is assumed that it represents the state of the files in your work tree,
and you can even have files with changes unrecorded in the index file.  It
is further assumed that this state is "derived" from the stage 2 tree.  The
3-way merge refuses to run if it finds an entry in the original index file
that does not match stage 2.

This is done to prevent you from losing your work-in-progress changes, and
mixing your random changes in an unrelated merge commit.  To illustrate,
suppose you start from what has been committed last to your repository:

@example
$ JC=`git rev-parse --verify "HEAD^0"`
$ git checkout-index -f -u -a $JC
@end example


You do random edits, without running @emph{git update-index}.  And then you
notice that the tip of your "upstream" tree has advanced since you pulled
from him:

@example
$ git fetch git://.... linus
$ LT=`git rev-parse FETCH_HEAD`
@end example


Your work tree is still based on your HEAD ($JC), but you have some edits
since.  Three-way merge makes sure that you have not added or modified index
entries since $JC, and if you haven’t, then does the right thing.  So with
the following sequence:

@example
$ git read-tree -m -u `git merge-base $JC $LT` $JC $LT
$ git merge-index git-merge-one-file -a
$ echo "Merge with Linus" | \
  git commit-tree `git write-tree` -p $JC -p $LT
@end example


what you would commit is a pure merge between $JC and $LT without your
work-in-progress changes, and your work tree would be updated to the result
of the merge.

However, if you have local changes in the working tree that would be
overwritten by this merge, @emph{git read-tree} will refuse to run to prevent
your changes from being lost.

In other words, there is no need to worry about what exists only in the
working tree.  When you have local changes in a part of the project that is
not involved in the merge, your changes do not interfere with the merge, and
are kept intact.  When they @strong{do} interfere, the merge does not even start
(@emph{git read-tree} complains loudly and fails without modifying anything).  In
such a case, you can simply continue doing what you were in the middle of
doing, and when your working tree is ready (i.e. you have finished your
work-in-progress), attempt the merge again.

@noindent

@chapheading SPARSE CHECKOUT

"Sparse checkout" allows populating the working directory sparsely.  It uses
the skip-worktree bit (see git-update-index(1)) to tell Git whether
a file in the working directory is worth looking at.

@emph{git read-tree} and other merge-based commands (@emph{git merge}, @emph{git
checkout}…) can help maintaining the skip-worktree bitmap and working
directory update. @samp{$GIT_DIR/info/sparse-checkout} is used to define the
skip-worktree reference bitmap. When @emph{git read-tree} needs to update the
working directory, it resets the skip-worktree bit in the index based on
this file, which uses the same syntax as .gitignore files.  If an entry
matches a pattern in this file, skip-worktree will not be set on that
entry. Otherwise, skip-worktree will be set.

Then it compares the new skip-worktree value with the previous one. If
skip-worktree turns from set to unset, it will add the corresponding file
back. If it turns from unset to set, that file will be removed.

While @samp{$GIT_DIR/info/sparse-checkout} is usually used to specify what files
are in, you can also specify what files are @emph{not} in, using negate
patterns. For example, to remove the file @samp{unwanted}:

@example
/*
!unwanted
@end example


Another tricky thing is fully repopulating the working directory when you no
longer want sparse checkout. You cannot just disable "sparse checkout"
because skip-worktree bits are still in the index and your working directory
is still sparsely populated. You should re-populate the working directory
with the @samp{$GIT_DIR/info/sparse-checkout} file content as follows:

@example
/*
@end example


Then you can disable sparse checkout. Sparse checkout support in @emph{git
read-tree} and similar commands is disabled by default. You need to turn
@samp{core.sparseCheckout} on in order to have sparse checkout support.

@noindent

@chapheading SEE ALSO

git-write-tree(1); git-ls-files(1); gitignore(5);
git-sparse-checkout(1);

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-rebase,,,Top
@chapheading Name

git-rebase — Reapply commits on top of another base tip

@noindent

@chapheading Synopsis

@display
git rebase [-i | --interactive] [<options>] [--exec <cmd>]
        [--onto <newbase> | --keep-base] [<upstream> [<branch>]]
git rebase [-i | --interactive] [<options>] [--exec <cmd>] [--onto <newbase>]
        --root [<branch>]
git rebase (--continue | --skip | --abort | --quit | --edit-todo | --show-current-patch)
@end display


@noindent

@chapheading DESCRIPTION

If <branch> is specified, @emph{git rebase} will perform an automatic @samp{git switch
<branch>} before doing anything else.  Otherwise it remains on the current
branch.

If <upstream> is not specified, the upstream configured in
branch.<name>.remote and branch.<name>.merge options will be used (see
git-config(1) for details) and the @samp{--fork-point} option is
assumed.  If you are currently not on any branch or if the current branch
does not have a configured upstream, the rebase will abort.

All changes made by commits in the current branch but that are not in
<upstream> are saved to a temporary area.  This is the same set of commits
that would be shown by @samp{git log <upstream>..HEAD}; or by @samp{git log
'fork_point'..HEAD}, if @samp{--fork-point} is active (see the description on
@samp{--fork-point} below); or by @samp{git log HEAD}, if the @samp{--root} option is
specified.

The current branch is reset to <upstream>, or <newbase> if the --onto option
was supplied.  This has the exact same effect as @samp{git reset --hard
<upstream>} (or <newbase>).  ORIG_HEAD is set to point at the tip of the
branch before the reset.

The commits that were previously saved into the temporary area are then
reapplied to the current branch, one by one, in order. Note that any commits
in HEAD which introduce the same textual changes as a commit in
HEAD..<upstream> are omitted (i.e., a patch already accepted upstream with a
different commit message or timestamp will be skipped).

It is possible that a merge failure will prevent this process from being
completely automatic.  You will have to resolve any such merge failure and
run @samp{git rebase --continue}.  Another option is to bypass the commit that
caused the merge failure with @samp{git rebase --skip}.  To check out the
original <branch> and remove the .git/rebase-apply working files, use the
command @samp{git rebase --abort} instead.

Assume the following history exists and the current branch is "topic":

@example
          A---B---C topic
         /
    D---E---F---G master
@end example


From this point, the result of either of the following commands:

@example
git rebase master
git rebase master topic
@end example

would be:

@example
                  A'--B'--C' topic
                 /
    D---E---F---G master
@end example


@strong{NOTE:} The latter form is just a short-hand of @samp{git checkout topic}
followed by @samp{git rebase master}. When rebase exits @samp{topic} will
remain the checked-out branch.

If the upstream branch already contains a change you have made (e.g.,
because you mailed a patch which was applied upstream), then that commit
will be skipped and warnings will be issued (if the @samp{merge} backend is
used).  For example, running @samp{git rebase master} on the following history
(in which @samp{A'} and @samp{A} introduce the same set of changes, but have different
committer information):

@example
          A---B---C topic
         /
    D---E---A'---F master
@end example


will result in:

@example
                   B'---C' topic
                  /
    D---E---A'---F master
@end example


Here is how you would transplant a topic branch based on one branch to
another, to pretend that you forked the topic branch from the latter branch,
using @samp{rebase --onto}.

First let’s assume your @emph{topic} is based on branch @emph{next}.  For example, a
feature developed in @emph{topic} depends on some functionality which is found in
@emph{next}.

@example
    o---o---o---o---o  master
         \
          o---o---o---o---o  next
                           \
                            o---o---o  topic
@end example


We want to make @emph{topic} forked from branch @emph{master}; for example, because
the functionality on which @emph{topic} depends was merged into the more stable
@emph{master} branch. We want our tree to look like this:

@example
    o---o---o---o---o  master
        |            \
        |             o'--o'--o'  topic
         \
          o---o---o---o---o  next
@end example


We can get this using the following command:

@example
git rebase --onto master next topic
@end example

Another example of --onto option is to rebase part of a branch.  If we have
the following situation:

@example
                            H---I---J topicB
                           /
                  E---F---G  topicA
                 /
    A---B---C---D  master
@end example


then the command

@example
git rebase --onto master topicA topicB
@end example

would result in:

@example
                 H'--I'--J'  topicB
                /
                | E---F---G  topicA
                |/
    A---B---C---D  master
@end example


This is useful when topicB does not depend on topicA.

A range of commits could also be removed with rebase.  If we have the
following situation:

@example
    E---F---G---H---I---J  topicA
@end example


then the command

@example
git rebase --onto topicA~5 topicA~3 topicA
@end example

would result in the removal of commits F and G:

@example
    E---H'---I'---J'  topicA
@end example


This is useful if F and G were flawed in some way, or should not be part of
topicA.  Note that the argument to --onto and the <upstream> parameter can
be any valid commit-ish.

In case of conflict, @emph{git rebase} will stop at the first problematic commit
and leave conflict markers in the tree.  You can use @emph{git diff} to locate
the markers (<<<<<<) and make edits to resolve the conflict.  For each file
you edit, you need to tell Git that the conflict has been resolved,
typically this would be done with

@example
git add <filename>
@end example

After resolving the conflict manually and updating the index with the
desired resolution, you can continue the rebasing process with

@example
git rebase --continue
@end example

Alternatively, you can undo the @emph{git rebase} with

@example
git rebase --abort
@end example

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--onto <newbase>} 
Starting point at which to create the new commits. If the --onto option is
not specified, the starting point is <upstream>.  May be any valid commit,
and not just an existing branch name.

As a special case, you may use "A...B" as a shortcut for the merge base of
A and B if there is exactly one merge base. You can leave out at most one of
A and B, in which case it defaults to HEAD.

@item  @samp{--keep-base} 
Set the starting point at which to create the new commits to the merge base
of <upstream> <branch>. Running @emph{git rebase --keep-base <upstream> <branch>}
is equivalent to running @emph{git rebase --onto <upstream>… <upstream>}.

This option is useful in the case where one is developing a feature on top
of an upstream branch. While the feature is being worked on, the upstream
branch may advance and it may not be the best idea to keep rebasing on top
of the upstream but to keep the base commit as-is.

Although both this option and --fork-point find the merge base between
<upstream> and <branch>, this option uses the merge base as the @emph{starting
point} on which new commits will be created, whereas --fork-point uses the
merge base to determine the @emph{set of commits} which will be rebased.

See also INCOMPATIBLE OPTIONS below.

@item  <upstream> 
Upstream branch to compare against.  May be any valid commit, not just an
existing branch name. Defaults to the configured upstream for the current
branch.

@item  <branch> 
Working branch; defaults to HEAD.

@item  @samp{--continue} 
Restart the rebasing process after having resolved a merge conflict.

@item  @samp{--abort} 
Abort the rebase operation and reset HEAD to the original branch. If
<branch> was provided when the rebase operation was started, then HEAD will
be reset to <branch>. Otherwise HEAD will be reset to where it was when the
rebase operation was started.

@item  @samp{--quit} 
Abort the rebase operation but HEAD is not reset back to the original
branch. The index and working tree are also left unchanged as a result. If a
temporary stash entry was created using --autostash, it will be saved to the
stash list.

@item  @samp{--apply} 
Use applying strategies to rebase (calling @samp{git-am} internally).  This
option may become a no-op in the future once the merge backend handles
everything the apply one does.

See also INCOMPATIBLE OPTIONS below.

@item  @samp{--empty=@{drop,keep,ask@}} 
How to handle commits that are not empty to start and are not clean
cherry-picks of any upstream commit, but which become empty after rebasing
(because they contain a subset of already upstream changes).  With drop (the
default), commits that become empty are dropped.  With keep, such commits
are kept.  With ask (implied by --interactive), the rebase will halt when an
empty commit is applied allowing you to choose whether to drop it, edit
files more, or just commit the empty changes.  Other options, like --exec,
will use the default of drop unless -i/--interactive is explicitly
specified.

Note that commits which start empty are kept (unless --no-keep-empty is
specified), and commits which are clean cherry-picks (as determined by @samp{git
log --cherry-mark ...}) are detected and dropped as a preliminary step
(unless --reapply-cherry-picks is passed).

See also INCOMPATIBLE OPTIONS below.

@item  @samp{--no-keep-empty} 
@itemx  @samp{--keep-empty} 
Do not keep commits that start empty before the rebase (i.e. that do not
change anything from its parent) in the result.  The default is to keep
commits which start empty, since creating such commits requires passing the
--allow-empty override flag to @samp{git commit}, signifying that a user is very
intentionally creating such a commit and thus wants to keep it.

Usage of this flag will probably be rare, since you can get rid of commits
that start empty by just firing up an interactive rebase and removing the
lines corresponding to the commits you don’t want.  This flag exists as a
convenient shortcut, such as for cases where external tools generate many
empty commits and you want them all removed.

For commits which do not start empty but become empty after rebasing, see
the --empty flag.

See also INCOMPATIBLE OPTIONS below.

@item  @samp{--reapply-cherry-picks} 
@itemx  @samp{--no-reapply-cherry-picks} 
Reapply all clean cherry-picks of any upstream commit instead of
preemptively dropping them. (If these commits then become empty after
rebasing, because they contain a subset of already upstream changes, the
behavior towards them is controlled by the @samp{--empty} flag.)

By default (or if @samp{--no-reapply-cherry-picks} is given), these commits will
be automatically dropped.  Because this necessitates reading all upstream
commits, this can be expensive in repos with a large number of upstream
commits that need to be read.  When using the @samp{merge} backend, warnings will
be issued for each dropped commit (unless @samp{--quiet} is given). Advice will
also be issued unless @samp{advice.skippedCherryPicks} is set to false (see
git-config(1)).

@samp{--reapply-cherry-picks} allows rebase to forgo reading all upstream
commits, potentially improving performance.

See also INCOMPATIBLE OPTIONS below.

@item  @samp{--allow-empty-message} 
No-op.  Rebasing commits with an empty message used to fail and this option
would override that behavior, allowing commits with empty messages to be
rebased.  Now commits with an empty message do not cause rebasing to halt.

See also INCOMPATIBLE OPTIONS below.

@item  @samp{--skip} 
Restart the rebasing process by skipping the current patch.

@item  @samp{--edit-todo} 
Edit the todo list during an interactive rebase.

@item  @samp{--show-current-patch} 
Show the current patch in an interactive rebase or when rebase is stopped
because of conflicts. This is the equivalent of @samp{git show REBASE_HEAD}.

@item  @samp{-m} 
@itemx  @samp{--merge} 
Using merging strategies to rebase (default).

Note that a rebase merge works by replaying each commit from the working
branch on top of the <upstream> branch.  Because of this, when a merge
conflict happens, the side reported as @emph{ours} is the so-far rebased series,
starting with <upstream>, and @emph{theirs} is the working branch.  In other
words, the sides are swapped.

See also INCOMPATIBLE OPTIONS below.

@item  @samp{-s <strategy>} 
@itemx  @samp{--strategy=<strategy>} 
Use the given merge strategy, instead of the default @samp{ort}.  This implies
@samp{--merge}.

Because @emph{git rebase} replays each commit from the working branch on top of
the <upstream> branch using the given strategy, using the @emph{ours} strategy
simply empties all patches from the <branch>, which makes little sense.

See also INCOMPATIBLE OPTIONS below.

@item  @samp{-X <strategy-option>} 
@itemx  @samp{--strategy-option=<strategy-option>} 
Pass the <strategy-option> through to the merge strategy.  This implies
@samp{--merge} and, if no strategy has been specified, @samp{-s ort}.  Note the
reversal of @emph{ours} and @emph{theirs} as noted above for the @samp{-m} option.

See also INCOMPATIBLE OPTIONS below.

@item  @samp{--rerere-autoupdate} 
@itemx  @samp{--no-rerere-autoupdate} 
Allow the rerere mechanism to update the index with the result of
auto-conflict resolution if possible.

@item  @samp{-S[<keyid>]} 
@itemx  @samp{--gpg-sign[=<keyid>]} 
@itemx  @samp{--no-gpg-sign} 
GPG-sign commits. The @samp{keyid} argument is optional and defaults to the
committer identity; if specified, it must be stuck to the option without a
space. @samp{--no-gpg-sign} is useful to countermand both @samp{commit.gpgSign}
configuration variable, and earlier @samp{--gpg-sign}.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Be quiet. Implies --no-stat.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Be verbose. Implies --stat.

@item  @samp{--stat} 
Show a diffstat of what changed upstream since the last rebase. The diffstat
is also controlled by the configuration option rebase.stat.

@item  @samp{-n} 
@itemx  @samp{--no-stat} 
Do not show a diffstat as part of the rebase process.

@item  @samp{--no-verify} 
This option bypasses the pre-rebase hook.  See also githooks(5).

@item  @samp{--verify} 
Allows the pre-rebase hook to run, which is the default.  This option can be
used to override --no-verify.  See also githooks(5).

@item  @samp{-C<n>} 
Ensure at least <n> lines of surrounding context match before and after each
change.  When fewer lines of surrounding context exist they all must match.
By default no context is ever ignored.  Implies --apply.

See also INCOMPATIBLE OPTIONS below.

@item  @samp{--no-ff} 
@itemx  @samp{--force-rebase} 
@itemx  @samp{-f} 
Individually replay all rebased commits instead of fast-forwarding over the
unchanged ones.  This ensures that the entire history of the rebased branch
is composed of new commits.

You may find this helpful after reverting a topic branch merge, as this
option recreates the topic branch with fresh commits so it can be remerged
successfully without needing to "revert the reversion" (see the
@uref{howto/revert-a-faulty-merge.html,revert-a-faulty-merge How-To} for
details).

@item  @samp{--fork-point} 
@itemx  @samp{--no-fork-point} 
Use reflog to find a better common ancestor between <upstream> and <branch>
when calculating which commits have been introduced by <branch>.

When --fork-point is active, @emph{fork_point} will be used instead of <upstream>
to calculate the set of commits to rebase, where @emph{fork_point} is the result
of @samp{git merge-base --fork-point <upstream> <branch>} command (see
git-merge-base(1)).  If @emph{fork_point} ends up being empty, the
<upstream> will be used as a fallback.

If <upstream> is given on the command line, then the default is
@samp{--no-fork-point}, otherwise the default is @samp{--fork-point}.

If your branch was based on <upstream> but <upstream> was rewound and your
branch contains commits which were dropped, this option can be used with
@samp{--keep-base} in order to drop those commits from your branch.

See also INCOMPATIBLE OPTIONS below.

@item  @samp{--ignore-whitespace} 
Ignore whitespace differences when trying to reconcile
differences. Currently, each backend implements an approximation of this
behavior:

apply backend: When applying a patch, ignore changes in whitespace in
context lines. Unfortunately, this means that if the "old" lines being
replaced by the patch differ only in whitespace from the existing file, you
will get a merge conflict instead of a successful patch application.

merge backend: Treat lines with only whitespace changes as unchanged when
merging. Unfortunately, this means that any patch hunks that were intended
to modify whitespace and nothing else will be dropped, even if the other
side had no changes that conflicted.

@item  @samp{--whitespace=<option>} 
This flag is passed to the @emph{git apply} program (see git-apply(1))
that applies the patch.  Implies --apply.

See also INCOMPATIBLE OPTIONS below.

@item  @samp{--committer-date-is-author-date} 
Instead of using the current time as the committer date, use the author date
of the commit being rebased as the committer date. This option implies
@samp{--force-rebase}.

@item  @samp{--ignore-date} 
@itemx  @samp{--reset-author-date} 
Instead of using the author date of the original commit, use the current
time as the     author date of the rebased commit.  This option implies
@samp{--force-rebase}.

See also INCOMPATIBLE OPTIONS below.

@item  @samp{--signoff} 
Add a @samp{Signed-off-by} trailer to all the rebased commits. Note that if
@samp{--interactive} is given then only commits marked to be picked, edited or
reworded will have the trailer added.

See also INCOMPATIBLE OPTIONS below.

@item  @samp{-i} 
@itemx  @samp{--interactive} 
Make a list of the commits which are about to be rebased.  Let the user edit
that list before rebasing.  This mode can also be used to split commits (see
SPLITTING COMMITS below).

The commit list format can be changed by setting the configuration option
rebase.instructionFormat.  A customized instruction format will
automatically have the long commit hash prepended to the format.

See also INCOMPATIBLE OPTIONS below.

@item  @samp{-r} 
@itemx  @samp{--rebase-merges[=(rebase-cousins|no-rebase-cousins)]} 
By default, a rebase will simply drop merge commits from the todo list, and
put the rebased commits into a single, linear branch.  With
@samp{--rebase-merges}, the rebase will instead try to preserve the branching
structure within the commits that are to be rebased, by recreating the merge
commits. Any resolved merge conflicts or manual amendments in these merge
commits will have to be resolved/re-applied manually.

By default, or when @samp{no-rebase-cousins} was specified, commits which do not
have @samp{<upstream>} as direct ancestor will keep their original branch point,
i.e. commits that would be excluded by git-log(1)'s
@samp{--ancestry-path} option will keep their original ancestry by default. If
the @samp{rebase-cousins} mode is turned on, such commits are instead rebased
onto @samp{<upstream>} (or @samp{<onto>}, if specified).

The @samp{--rebase-merges} mode is similar in spirit to the deprecated
@samp{--preserve-merges} but works with interactive rebases, where commits can be
reordered, inserted and dropped at will.

It is currently only possible to recreate the merge commits using the @samp{ort}
merge strategy; different merge strategies can be used only via explicit
@samp{exec git merge -s <strategy> [...]} commands.

See also REBASING MERGES and INCOMPATIBLE OPTIONS below.

@item  @samp{-p} 
@itemx  @samp{--preserve-merges} 
[DEPRECATED: use @samp{--rebase-merges} instead] Recreate merge commits instead
of flattening the history by replaying commits a merge commit
introduces. Merge conflict resolutions or manual amendments to merge commits
are not preserved.

This uses the @samp{--interactive} machinery internally, but combining it with
the @samp{--interactive} option explicitly is generally not a good idea unless
you know what you are doing (see BUGS below).

See also INCOMPATIBLE OPTIONS below.

@item  @samp{-x <cmd>} 
@itemx  @samp{--exec <cmd>} 
Append "exec <cmd>" after each line creating a commit in the final
history. <cmd> will be interpreted as one or more shell commands. Any
command that fails will interrupt the rebase, with exit code 1.

You may execute several commands by either using one instance of @samp{--exec}
with several commands:

@example
git rebase -i --exec "cmd1 && cmd2 && ..."
@end example

or by giving more than one @samp{--exec}:

@example
git rebase -i --exec "cmd1" --exec "cmd2" --exec ...
@end example

If @samp{--autosquash} is used, "exec" lines will not be appended for the
intermediate commits, and will only appear at the end of each squash/fixup
series.

This uses the @samp{--interactive} machinery internally, but it can be run
without an explicit @samp{--interactive}.

See also INCOMPATIBLE OPTIONS below.

@item  @samp{--root} 
Rebase all commits reachable from <branch>, instead of limiting them with an
<upstream>.  This allows you to rebase the root commit(s) on a branch.  When
used with --onto, it will skip changes already contained in <newbase>
(instead of <upstream>) whereas without --onto it will operate on every
change.  When used together with both --onto and --preserve-merges, @emph{all}
root commits will be rewritten to have <newbase> as parent instead.

See also INCOMPATIBLE OPTIONS below.

@item  @samp{--autosquash} 
@itemx  @samp{--no-autosquash} 
When the commit log message begins with "squash! …" or "fixup! …" or
"amend! …", and there is already a commit in the todo list that matches
the same @samp{...}, automatically modify the todo list of @samp{rebase -i}, so that
the commit marked for squashing comes right after the commit to be modified,
and change the action of the moved commit from @samp{pick} to @samp{squash} or @samp{fixup}
or @samp{fixup -C} respectively. A commit matches the @samp{...} if the commit subject
matches, or if the @samp{...} refers to the commit’s hash. As a fall-back,
partial matches of the commit subject work, too. The recommended way to
create fixup/amend/squash commits is by using the @samp{--fixup},
@samp{--fixup=amend:} or @samp{--fixup=reword:} and @samp{--squash} options respectively of
git-commit(1).

If the @samp{--autosquash} option is enabled by default using the configuration
variable @samp{rebase.autoSquash}, this option can be used to override and
disable this setting.

See also INCOMPATIBLE OPTIONS below.

@item  @samp{--autostash} 
@itemx  @samp{--no-autostash} 
Automatically create a temporary stash entry before the operation begins,
and apply it after the operation ends.  This means that you can run rebase
on a dirty worktree.  However, use with care: the final stash application
after a successful rebase might result in non-trivial conflicts.

@item  @samp{--reschedule-failed-exec} 
@itemx  @samp{--no-reschedule-failed-exec} 
Automatically reschedule @samp{exec} commands that failed. This only makes sense
in interactive mode (or when an @samp{--exec} option was provided).

Even though this option applies once a rebase is started, it’s set for the
whole rebase at the start based on either the @samp{rebase.rescheduleFailedExec}
configuration (see git-config(1) or "CONFIGURATION" below) or
whether this option is provided. Otherwise an explicit
@samp{--no-reschedule-failed-exec} at the start would be overridden by the
presence of @samp{rebase.rescheduleFailedExec=true} configuration.
@end table

@noindent

@chapheading INCOMPATIBLE OPTIONS

The following options:

@itemize 

@item
--apply

@item
--whitespace

@item
-C
@end itemize

are incompatible with the following options:

@itemize 

@item
--merge

@item
--strategy

@item
--strategy-option

@item
--allow-empty-message

@item
--[no-]autosquash

@item
--rebase-merges

@item
--preserve-merges

@item
--interactive

@item
--exec

@item
--no-keep-empty

@item
--empty=

@item
--reapply-cherry-picks

@item
--edit-todo

@item
--root when used in combination with --onto
@end itemize

In addition, the following pairs of options are incompatible:

@itemize 

@item
--preserve-merges and --interactive

@item
--preserve-merges and --signoff

@item
--preserve-merges and --rebase-merges

@item
--preserve-merges and --empty=

@item
--preserve-merges and --ignore-whitespace

@item
--preserve-merges and --committer-date-is-author-date

@item
--preserve-merges and --ignore-date

@item
--keep-base and --onto

@item
--keep-base and --root

@item
--fork-point and --root
@end itemize

@noindent

@chapheading BEHAVIORAL DIFFERENCES

git rebase has two primary backends: apply and merge.  (The apply
backend used to be known as the @emph{am} backend, but the name led to
confusion as it looks like a verb instead of a noun.  Also, the merge
backend used to be known as the interactive backend, but it is now
used for non-interactive cases as well.  Both were renamed based on
lower-level functionality that underpinned each.) There are some
subtle differences in how these two backends behave:

@noindent

@heading Empty commits

The apply backend unfortunately drops intentionally empty commits, i.e.
commits that started empty, though these are rare in practice.  It
also drops commits that become empty and has no option for controlling
this behavior.

The merge backend keeps intentionally empty commits by default (though
with -i they are marked as empty in the todo list editor, or they can
be dropped automatically with --no-keep-empty).

Similar to the apply backend, by default the merge backend drops
commits that become empty unless -i/--interactive is specified (in
which case it stops and asks the user what to do).  The merge backend
also has an --empty=@{drop,keep,ask@} option for changing the behavior
of handling commits that become empty.

@noindent

@heading Directory rename detection

Due to the lack of accurate tree information (arising from
constructing fake ancestors with the limited information available in
patches), directory rename detection is disabled in the apply backend.
Disabled directory rename detection means that if one side of history
renames a directory and the other adds new files to the old directory,
then the new files will be left behind in the old directory without
any warning at the time of rebasing that you may want to move these
files into the new directory.

Directory rename detection works with the merge backend to provide you
warnings in such cases.

@noindent

@heading Context

The apply backend works by creating a sequence of patches (by calling
@samp{format-patch} internally), and then applying the patches in sequence
(calling @samp{am} internally).  Patches are composed of multiple hunks,
each with line numbers, a context region, and the actual changes.  The
line numbers have to be taken with some fuzz, since the other side
will likely have inserted or deleted lines earlier in the file.  The
context region is meant to help find how to adjust the line numbers in
order to apply the changes to the right lines.  However, if multiple
areas of the code have the same surrounding lines of context, the
wrong one can be picked.  There are real-world cases where this has
caused commits to be reapplied incorrectly with no conflicts reported.
Setting diff.context to a larger value may prevent such types of
problems, but increases the chance of spurious conflicts (since it
will require more lines of matching context to apply).

The merge backend works with a full copy of each relevant file,
insulating it from these types of problems.

@noindent

@heading Labelling of conflicts markers

When there are content conflicts, the merge machinery tries to
annotate each side’s conflict markers with the commits where the
content came from.  Since the apply backend drops the original
information about the rebased commits and their parents (and instead
generates new fake commits based off limited information in the
generated patches), those commits cannot be identified; instead it has
to fall back to a commit summary.  Also, when merge.conflictStyle is
set to diff3, the apply backend will use "constructed merge base" to
label the content from the merge base, and thus provide no information
about the merge base commit whatsoever.

The merge backend works with the full commits on both sides of history
and thus has no such limitations.

@noindent

@heading Hooks

The apply backend has not traditionally called the post-commit hook,
while the merge backend has.  Both have called the post-checkout hook,
though the merge backend has squelched its output.  Further, both
backends only call the post-checkout hook with the starting point
commit of the rebase, not the intermediate commits nor the final
commit.  In each case, the calling of these hooks was by accident of
implementation rather than by design (both backends were originally
implemented as shell scripts and happened to invoke other commands
like @emph{git checkout} or @emph{git commit} that would call the hooks).  Both
backends should have the same behavior, though it is not entirely
clear which, if any, is correct.  We will likely make rebase stop
calling either of these hooks in the future.

@noindent

@heading Interruptability

The apply backend has safety problems with an ill-timed interrupt; if
the user presses Ctrl-C at the wrong time to try to abort the rebase,
the rebase can enter a state where it cannot be aborted with a
subsequent @samp{git rebase --abort}.  The merge backend does not appear to
suffer from the same shortcoming.  (See
@uref{https://lore.kernel.org/git/20200207132152.GC2868@@szeder.dev/,https://lore.kernel.org/git/20200207132152.GC2868@@szeder.dev/} for
details.)

@noindent

@heading Commit Rewording

When a conflict occurs while rebasing, rebase stops and asks the user
to resolve.  Since the user may need to make notable changes while
resolving conflicts, after conflicts are resolved and the user has run
@samp{git rebase --continue}, the rebase should open an editor and ask the
user to update the commit message.  The merge backend does this, while
the apply backend blindly applies the original commit message.

@noindent

@heading Miscellaneous differences

There are a few more behavioral differences that most folks would
probably consider inconsequential but which are mentioned for
completeness:

@itemize 

@item
Reflog: The two backends will use different wording when describing
the changes made in the reflog, though both will make use of the
word "rebase".

@item
Progress, informational, and error messages: The two backends
provide slightly different progress and informational messages.
Also, the apply backend writes error messages (such as "Your files
would be overwritten…") to stdout, while the merge backend writes
them to stderr.

@item
State directories: The two backends keep their state in different
directories under .git/
@end itemize

@noindent

@chapheading MERGE STRATEGIES

The merge mechanism (@samp{git merge} and @samp{git pull} commands) allows the backend
@emph{merge strategies} to be chosen with @samp{-s} option.  Some strategies can also
take their own options, which can be passed by giving @samp{-X<option>} arguments
to @samp{git merge} and/or @samp{git pull}.

@table @asis

@item  ort 
This is the default merge strategy when pulling or merging one branch.  This
strategy can only resolve two heads using a 3-way merge algorithm.  When
there is more than one common ancestor that can be used for 3-way merge, it
creates a merged tree of the common ancestors and uses that as the reference
tree for the 3-way merge.  This has been reported to result in fewer merge
conflicts without causing mismerges by tests done on actual merge commits
taken from Linux 2.6 kernel development history.  Additionally this strategy
can detect and handle merges involving renames.  It does not make use of
detected copies.  The name for this algorithm is an acronym ("Ostensibly
Recursive’s Twin") and came from the fact that it was written as a
replacement for the previous default algorithm, @samp{recursive}.

The @emph{ort} strategy can take the following options:

@table @asis

@item  ours 
This option forces conflicting hunks to be auto-resolved cleanly by favoring
@emph{our} version.  Changes from the other tree that do not conflict with our
side are reflected in the merge result.  For a binary file, the entire
contents are taken from our side.

This should not be confused with the @emph{ours} merge strategy, which does not
even look at what the other tree contains at all.  It discards everything
the other tree did, declaring @emph{our} history contains all that happened in
it.

@item  theirs 
This is the opposite of @emph{ours}; note that, unlike @emph{ours}, there is no
@emph{theirs} merge strategy to confuse this merge option with.

@item  ignore-space-change 
@itemx  ignore-all-space 
@itemx  ignore-space-at-eol 
@itemx  ignore-cr-at-eol 
Treats lines with the indicated type of whitespace change as unchanged for
the sake of a three-way merge.  Whitespace changes mixed with other changes
to a line are not ignored.  See also git-diff(1) @samp{-b}, @samp{-w},
@samp{--ignore-space-at-eol}, and @samp{--ignore-cr-at-eol}.

@itemize 

@item
If @emph{their} version only introduces whitespace changes to a line, @emph{our}
version is used;

@item
If @emph{our} version introduces whitespace changes but @emph{their} version includes
a substantial change, @emph{their} version is used;

@item
Otherwise, the merge proceeds in the usual way.
@end itemize

@item  renormalize 
This runs a virtual check-out and check-in of all three stages of a file
when resolving a three-way merge.  This option is meant to be used when
merging branches with different clean filters or end-of-line normalization
rules.  See "Merging branches with differing checkin/checkout attributes" in
gitattributes(5) for details.

@item  no-renormalize 
Disables the @samp{renormalize} option.  This overrides the @samp{merge.renormalize}
configuration variable.

@item  find-renames[=<n>] 
Turn on rename detection, optionally setting the similarity threshold.  This
is the default. This overrides the @emph{merge.renames} configuration variable.
See also git-diff(1) @samp{--find-renames}.

@item  rename-threshold=<n> 
Deprecated synonym for @samp{find-renames=<n>}.

@item  subtree[=<path>] 
This option is a more advanced form of @emph{subtree} strategy, where the
strategy makes a guess on how two trees must be shifted to match with each
other when merging.  Instead, the specified path is prefixed (or stripped
from the beginning) to make the shape of two trees to match.
@end table

@item  recursive 
This can only resolve two heads using a 3-way merge algorithm.  When there
is more than one common ancestor that can be used for 3-way merge, it
creates a merged tree of the common ancestors and uses that as the reference
tree for the 3-way merge.  This has been reported to result in fewer merge
conflicts without causing mismerges by tests done on actual merge commits
taken from Linux 2.6 kernel development history.  Additionally this can
detect and handle merges involving renames.  It does not make use of
detected copies.  This was the default strategy for resolving two heads from
Git v0.99.9k until v2.33.0.

The @emph{recursive} strategy takes the same options as @emph{ort}.  However, there
are three additional options that @emph{ort} ignores (not documented above) that
are potentially useful with the @emph{recursive} strategy:

@table @asis

@item  patience 
Deprecated synonym for @samp{diff-algorithm=patience}.

@item  diff-algorithm=[patience|minimal|histogram|myers] 
Use a different diff algorithm while merging, which can help avoid mismerges
that occur due to unimportant matching lines (such as braces from distinct
functions).  See also git-diff(1) @samp{--diff-algorithm}.  Note that
@samp{ort} specifically uses @samp{diff-algorithm=histogram}, while @samp{recursive}
defaults to the @samp{diff.algorithm} config setting.

@item  no-renames 
Turn off rename detection. This overrides the @samp{merge.renames} configuration
variable.  See also git-diff(1) @samp{--no-renames}.
@end table

@item  resolve 
This can only resolve two heads (i.e. the current branch and another branch
you pulled from) using a 3-way merge algorithm.  It tries to carefully
detect criss-cross merge ambiguities.  It does not handle renames.

@item  octopus 
This resolves cases with more than two heads, but refuses to do a complex
merge that needs manual resolution.  It is primarily meant to be used for
bundling topic branch heads together.  This is the default merge strategy
when pulling or merging more than one branch.

@item  ours 
This resolves any number of heads, but the resulting tree of the merge is
always that of the current branch head, effectively ignoring all changes
from all other branches.  It is meant to be used to supersede old
development history of side branches.  Note that this is different from the
-Xours option to the @emph{recursive} merge strategy.

@item  subtree 
This is a modified @samp{ort} strategy. When merging trees A and B, if B
corresponds to a subtree of A, B is first adjusted to match the tree
structure of A, instead of reading the trees at the same level. This
adjustment is also done to the common ancestor tree.
@end table

With the strategies that use 3-way merge (including the default, @emph{ort}), if
a change is made on both branches, but later reverted on one of the
branches, that change will be present in the merged result; some people find
this behavior confusing.  It occurs because only the heads and the merge
base are considered when performing a merge, not the individual commits.
The merge algorithm therefore considers the reverted change as no change at
all, and substitutes the changed version instead.

@noindent

@chapheading NOTES

You should understand the implications of using @emph{git rebase} on a repository
that you share.  See also RECOVERING FROM UPSTREAM REBASE below.

When the git-rebase command is run, it will first execute a "pre-rebase"
hook if one exists.  You can use this hook to do sanity checks and reject
the rebase if it isn’t appropriate.  Please see the template pre-rebase hook
script for an example.

Upon completion, <branch> will be the current branch.

@noindent

@chapheading INTERACTIVE MODE

Rebasing interactively means that you have a chance to edit the commits
which are rebased.  You can reorder the commits, and you can remove them
(weeding out bad or otherwise unwanted patches).

The interactive mode is meant for this type of workflow:

@enumerate 

@item
have a wonderful idea

@item
hack on the code

@item
prepare a series for submission

@item
submit
@end enumerate

where point 2. consists of several instances of

a) regular use

@enumerate 

@item
finish something worthy of a commit

@item
commit
@end enumerate

b) independent fixup

@enumerate 

@item
realize that something does not work

@item
fix that

@item
commit it
@end enumerate

Sometimes the thing fixed in b.2. cannot be amended to the not-quite perfect
commit it fixes, because that commit is buried deeply in a patch series.
That is exactly what interactive rebase is for: use it after plenty of "a"s
and "b"s, by rearranging and editing commits, and squashing multiple commits
into one.

Start it with the last commit you want to retain as-is:

@example
git rebase -i <after-this-commit>
@end example

An editor will be fired up with all the commits in your current branch
(ignoring merge commits), which come after the given commit.  You can
reorder the commits in this list to your heart’s content, and you can remove
them.  The list looks more or less like this:

@example
pick deadbee The oneline of this commit
pick fa1afe1 The oneline of the next commit
...
@end example


The oneline descriptions are purely for your pleasure; @emph{git rebase} will not
look at them but at the commit names ("deadbee" and "fa1afe1" in this
example), so do not delete or edit the names.

By replacing the command "pick" with the command "edit", you can tell @emph{git
rebase} to stop after applying that commit, so that you can edit the files
and/or the commit message, amend the commit, and continue rebasing.

To interrupt the rebase (just like an "edit" command would do, but without
cherry-picking any commit first), use the "break" command.

If you just want to edit the commit message for a commit, replace the
command "pick" with the command "reword".

To drop a commit, replace the command "pick" with "drop", or just delete the
matching line.

If you want to fold two or more commits into one, replace the command "pick"
for the second and subsequent commits with "squash" or "fixup".  If the
commits had different authors, the folded commit will be attributed to the
author of the first commit.  The suggested commit message for the folded
commit is the concatenation of the first commit’s message with those
identified by "squash" commands, omitting the messages of commits identified
by "fixup" commands, unless "fixup -c" is used.  In that case the suggested
commit message is only the message of the "fixup -c" commit, and an editor
is opened allowing you to edit the message.  The contents (patch) of the
"fixup -c" commit are still incorporated into the folded commit. If there is
more than one "fixup -c" commit, the message from the final one is used.
You can also use "fixup -C" to get the same behavior as "fixup -c" except
without opening an editor.

@emph{git rebase} will stop when "pick" has been replaced with "edit" or when a
command fails due to merge errors. When you are done editing and/or
resolving conflicts you can continue with @samp{git rebase --continue}.

For example, if you want to reorder the last 5 commits, such that what was
HEAD~4 becomes the new HEAD. To achieve that, you would call @emph{git rebase}
like this:

@example
$ git rebase -i HEAD~5
@end example


And move the first patch to the end of the list.

You might want to recreate merge commits, e.g. if you have a history like
this:

@example
           X
            \
         A---M---B
        /
---o---O---P---Q
@end example


Suppose you want to rebase the side branch starting at "A" to "Q". Make sure
that the current HEAD is "B", and call

@example
$ git rebase -i -r --onto Q O
@end example


Reordering and editing commits usually creates untested intermediate steps.
You may want to check that your history editing did not break anything by
running a test, or at least recompiling at intermediate points in history by
using the "exec" command (shortcut "x").  You may do so by creating a todo
list like this one:

@example
pick deadbee Implement feature XXX
fixup f1a5c00 Fix to feature XXX
exec make
pick c0ffeee The oneline of the next commit
edit deadbab The oneline of the commit after
exec cd subdir; make test
...
@end example


The interactive rebase will stop when a command fails (i.e. exits with non-0
status) to give you an opportunity to fix the problem. You can continue with
@samp{git rebase --continue}.

The "exec" command launches the command in a shell (the one specified in
@samp{$SHELL}, or the default shell if @samp{$SHELL} is not set), so you can use shell
features (like "cd", ">", ";" …). The command is run from the root of the
working tree.

@example
$ git rebase -i --exec "make test"
@end example


This command lets you check that intermediate commits are compilable.  The
todo list becomes like that:

@example
pick 5928aea one
exec make test
pick 04d0fda two
exec make test
pick ba46169 three
exec make test
pick f4593f9 four
exec make test
@end example


@noindent

@chapheading SPLITTING COMMITS

In interactive mode, you can mark commits with the action "edit".  However,
this does not necessarily mean that @emph{git rebase} expects the result of this
edit to be exactly one commit.  Indeed, you can undo the commit, or you can
add other commits.  This can be used to split a commit into two:

@itemize 

@item
Start an interactive rebase with @samp{git rebase -i <commit>^}, where <commit>
is the commit you want to split.  In fact, any commit range will do, as long
as it contains that commit.

@item
Mark the commit you want to split with the action "edit".

@item
When it comes to editing that commit, execute @samp{git reset HEAD^}.  The effect
is that the HEAD is rewound by one, and the index follows suit.  However,
the working tree stays the same.

@item
Now add the changes to the index that you want to have in the first commit.
You can use @samp{git add} (possibly interactively) or @emph{git gui} (or both) to do
that.

@item
Commit the now-current index with whatever commit message is appropriate
now.

@item
Repeat the last two steps until your working tree is clean.

@item
Continue the rebase with @samp{git rebase --continue}.
@end itemize

If you are not absolutely sure that the intermediate revisions are
consistent (they compile, pass the testsuite, etc.) you should use @emph{git
stash} to stash away the not-yet-committed changes after each commit, test,
and amend the commit if fixes are necessary.

@noindent

@chapheading RECOVERING FROM UPSTREAM REBASE

Rebasing (or any other form of rewriting) a branch that others have based
work on is a bad idea: anyone downstream of it is forced to manually fix
their history.  This section explains how to do the fix from the
downstream’s point of view.  The real fix, however, would be to avoid
rebasing the upstream in the first place.

To illustrate, suppose you are in a situation where someone develops a
@emph{subsystem} branch, and you are working on a @emph{topic} that is dependent on
this @emph{subsystem}.  You might end up with a history like the following:

@example
    o---o---o---o---o---o---o---o  master
         \
          o---o---o---o---o  subsystem
                           \
                            *---*---*  topic
@end example


If @emph{subsystem} is rebased against @emph{master}, the following happens:

@example
    o---o---o---o---o---o---o---o  master
         \                       \
          o---o---o---o---o       o'--o'--o'--o'--o'  subsystem
                           \
                            *---*---*  topic
@end example


If you now continue development as usual, and eventually merge @emph{topic} to
@emph{subsystem}, the commits from @emph{subsystem} will remain duplicated forever:

@example
    o---o---o---o---o---o---o---o  master
         \                       \
          o---o---o---o---o       o'--o'--o'--o'--o'--M  subsystem
                           \                         /
                            *---*---*-..........-*--*  topic
@end example


Such duplicates are generally frowned upon because they clutter up history,
making it harder to follow.  To clean things up, you need to transplant the
commits on @emph{topic} to the new @emph{subsystem} tip, i.e., rebase @emph{topic}.  This
becomes a ripple effect: anyone downstream from @emph{topic} is forced to rebase
too, and so on!

There are two kinds of fixes, discussed in the following subsections:

@table @asis

@item  Easy case: The changes are literally the same. 
This happens if the @emph{subsystem} rebase was a simple rebase and had no
conflicts.

@item  Hard case: The changes are not the same. 
This happens if the @emph{subsystem} rebase had conflicts, or used
@samp{--interactive} to omit, edit, squash, or fixup commits; or if the upstream
used one of @samp{commit --amend}, @samp{reset}, or a full history rewriting command
like @uref{https://github.com/newren/git-filter-repo,@samp{filter-repo}}.
@end table

@noindent

@heading The easy case

Only works if the changes (patch IDs based on the diff contents) on
@emph{subsystem} are literally the same before and after the rebase @emph{subsystem}
did.

In that case, the fix is easy because @emph{git rebase} knows to skip changes
that are already present in the new upstream (unless
@samp{--reapply-cherry-picks} is given). So if you say (assuming you’re on
@emph{topic})

@example
    $ git rebase subsystem
@end example


you will end up with the fixed history

@example
    o---o---o---o---o---o---o---o  master
                                 \
                                  o'--o'--o'--o'--o'  subsystem
                                                   \
                                                    *---*---*  topic
@end example


@noindent

@heading The hard case

Things get more complicated if the @emph{subsystem} changes do not exactly
correspond to the ones before the rebase.

@quotation

@strong{Note}

While an "easy case recovery" sometimes appears to be successful
even in the hard case, it may have unintended consequences.  For
example, a commit that was removed via @samp{git rebase
--interactive} will be @strong{resurrected}!
@end quotation

The idea is to manually tell @emph{git rebase} "where the old @emph{subsystem} ended
and your @emph{topic} began", that is, what the old merge base between them was.
You will have to find a way to name the last commit of the old @emph{subsystem},
for example:

@itemize 

@item
With the @emph{subsystem} reflog: after @emph{git fetch}, the old tip of @emph{subsystem}
is at @samp{subsystem@@@{1@}}.  Subsequent fetches will increase the number.  (See
git-reflog(1).)

@item
Relative to the tip of @emph{topic}: knowing that your @emph{topic} has three commits,
the old tip of @emph{subsystem} must be @samp{topic~3}.
@end itemize

You can then transplant the old @samp{subsystem..topic} to the new tip by saying
(for the reflog case, and assuming you are on @emph{topic} already):

@example
    $ git rebase --onto subsystem subsystem@@@{1@}
@end example


The ripple effect of a "hard case" recovery is especially bad: @emph{everyone}
downstream from @emph{topic} will now have to perform a "hard case" recovery too!

@noindent

@chapheading REBASING MERGES

The interactive rebase command was originally designed to handle individual
patch series. As such, it makes sense to exclude merge commits from the todo
list, as the developer may have merged the then-current @samp{master} while
working on the branch, only to rebase all the commits onto @samp{master}
eventually (skipping the merge commits).

However, there are legitimate reasons why a developer may want to recreate
merge commits: to keep the branch structure (or "commit topology") when
working on multiple, inter-related branches.

In the following example, the developer works on a topic branch that
refactors the way buttons are defined, and on another topic branch that uses
that refactoring to implement a "Report a bug" button. The output of @samp{git
log --graph --format=%s -5} may look like this:

@example
*   Merge branch 'report-a-bug'
|\
| * Add the feedback button
* | Merge branch 'refactor-button'
|\ \
| |/
| * Use the Button class for all buttons
| * Extract a generic Button class from the DownloadButton one
@end example


The developer might want to rebase those commits to a newer @samp{master} while
keeping the branch topology, for example when the first topic branch is
expected to be integrated into @samp{master} much earlier than the second one,
say, to resolve merge conflicts with changes to the DownloadButton class
that made it into @samp{master}.

This rebase can be performed using the @samp{--rebase-merges} option.  It will
generate a todo list looking like this:

@example
label onto

# Branch: refactor-button
reset onto
pick 123456 Extract a generic Button class from the DownloadButton one
pick 654321 Use the Button class for all buttons
label refactor-button

# Branch: report-a-bug
reset refactor-button # Use the Button class for all buttons
pick abcdef Add the feedback button
label report-a-bug

reset onto
merge -C a1b2c3 refactor-button # Merge 'refactor-button'
merge -C 6f5e4d report-a-bug # Merge 'report-a-bug'
@end example


In contrast to a regular interactive rebase, there are @samp{label}, @samp{reset} and
@samp{merge} commands in addition to @samp{pick} ones.

The @samp{label} command associates a label with the current HEAD when that
command is executed. These labels are created as worktree-local refs
(@samp{refs/rewritten/<label>}) that will be deleted when the rebase
finishes. That way, rebase operations in multiple worktrees linked to the
same repository do not interfere with one another. If the @samp{label} command
fails, it is rescheduled immediately, with a helpful message how to proceed.

The @samp{reset} command resets the HEAD, index and worktree to the specified
revision. It is similar to an @samp{exec git reset --hard <label>}, but refuses
to overwrite untracked files. If the @samp{reset} command fails, it is
rescheduled immediately, with a helpful message how to edit the todo list
(this typically happens when a @samp{reset} command was inserted into the todo
list manually and contains a typo).

The @samp{merge} command will merge the specified revision(s) into whatever is
HEAD at that time. With @samp{-C <original-commit>}, the commit message of the
specified merge commit will be used. When the @samp{-C} is changed to a
lower-case @samp{-c}, the message will be opened in an editor after a successful
merge so that the user can edit the message.

If a @samp{merge} command fails for any reason other than merge conflicts (i.e.
when the merge operation did not even start), it is rescheduled immediately.

By default, the @samp{merge} command will use the @samp{ort} merge strategy for
regular merges, and @samp{octopus} for octopus merges.  One can specify a default
strategy for all merges using the @samp{--strategy} argument when invoking
rebase, or can override specific merges in the interactive list of commands
by using an @samp{exec} command to call @samp{git merge} explicitly with a
@samp{--strategy} argument.  Note that when calling @samp{git merge} explicitly like
this, you can make use of the fact that the labels are worktree-local refs
(the ref @samp{refs/rewritten/onto} would correspond to the label @samp{onto}, for
example) in order to refer to the branches you want to merge.

Note: the first command (@samp{label onto}) labels the revision onto which the
commits are rebased; The name @samp{onto} is just a convention, as a nod to the
@samp{--onto} option.

It is also possible to introduce completely new merge commits from scratch
by adding a command of the form @samp{merge <merge-head>}. This form will
generate a tentative commit message and always open an editor to let the
user edit it. This can be useful e.g. when a topic branch turns out to
address more than a single concern and wants to be split into two or even
more topic branches. Consider this todo list:

@example
pick 192837 Switch from GNU Makefiles to CMake
pick 5a6c7e Document the switch to CMake
pick 918273 Fix detection of OpenSSL in CMake
pick afbecd http: add support for TLS v1.3
pick fdbaec Fix detection of cURL in CMake on Windows
@end example


The one commit in this list that is not related to CMake may very well have
been motivated by working on fixing all those bugs introduced by switching
to CMake, but it addresses a different concern. To split this branch into
two topic branches, the todo list could be edited like this:

@example
label onto

pick afbecd http: add support for TLS v1.3
label tlsv1.3

reset onto
pick 192837 Switch from GNU Makefiles to CMake
pick 918273 Fix detection of OpenSSL in CMake
pick fdbaec Fix detection of cURL in CMake on Windows
pick 5a6c7e Document the switch to CMake
label cmake

reset onto
merge tlsv1.3
merge cmake
@end example


@noindent

@chapheading CONFIGURATION

@table @asis

@item  rebase.backend 
Default backend to use for rebasing.  Possible choices are @emph{apply} or
@emph{merge}.  In the future, if the merge backend gains all remaining
capabilities of the apply backend, this setting may become unused.

@item  rebase.stat 
Whether to show a diffstat of what changed upstream since the last
rebase. False by default.

@item  rebase.autoSquash 
If set to true enable @samp{--autosquash} option by default.

@item  rebase.autoStash 
When set to true, automatically create a temporary stash entry before the
operation begins, and apply it after the operation ends.  This means that
you can run rebase on a dirty worktree.  However, use with care: the final
stash application after a successful rebase might result in non-trivial
conflicts.  This option can be overridden by the @samp{--no-autostash} and
@samp{--autostash} options of git-rebase(1).  Defaults to false.

@item  rebase.missingCommitsCheck 
If set to "warn", git rebase -i will print a warning if some commits are
removed (e.g. a line was deleted), however the rebase will still proceed. If
set to "error", it will print the previous warning and stop the rebase, @emph{git
rebase --edit-todo} can then be used to correct the error. If set to
"ignore", no checking is done.  To drop a commit without warning or error,
use the @samp{drop} command in the todo list.  Defaults to "ignore".

@item  rebase.instructionFormat 
A format string, as specified in git-log(1), to be used for the todo
list during an interactive rebase.  The format will automatically have the
long commit hash prepended to the format.

@item  rebase.abbreviateCommands 
If set to true, @samp{git rebase} will use abbreviated command names in the todo
list resulting in something like this:

@example
        p deadbee The oneline of the commit
        p fa1afe1 The oneline of the next commit
        ...
@end example


instead of:

@example
        pick deadbee The oneline of the commit
        pick fa1afe1 The oneline of the next commit
        ...
@end example


Defaults to false.

@item  rebase.rescheduleFailedExec 
Automatically reschedule @samp{exec} commands that failed. This only makes sense
in interactive mode (or when an @samp{--exec} option was provided).  This is the
same as specifying the @samp{--reschedule-failed-exec} option.

@item  rebase.forkPoint 
If set to false set @samp{--no-fork-point} option by default.

@item  sequence.editor 
Text editor used by @samp{git rebase -i} for editing the rebase instruction
file.  The value is meant to be interpreted by the shell when it is used.
It can be overridden by the @samp{GIT_SEQUENCE_EDITOR} environment variable.
When not configured the default commit message editor is used instead.
@end table

@noindent

@chapheading BUGS

The todo list presented by the deprecated @samp{--preserve-merges --interactive}
does not represent the topology of the revision graph (use @samp{--rebase-merges}
instead).  Editing commits and rewording their commit messages should work
fine, but attempts to reorder commits tend to produce counterintuitive
results.  Use @samp{--rebase-merges} in such scenarios instead.

For example, an attempt to rearrange

@example
1 --- 2 --- 3 --- 4 --- 5
@end example


to

@example
1 --- 2 --- 4 --- 3 --- 5
@end example


by moving the "pick 4" line will result in the following history:

@example
        3
       /
1 --- 2 --- 4 --- 5
@end example


@noindent

@chapheading GIT

Part of the git(1) suite

@node git-receive-pack,,,Top
@chapheading Name

git-receive-pack — Receive what is pushed into the repository

@noindent

@chapheading Synopsis

@display
git-receive-pack <directory>
@end display


@noindent

@chapheading DESCRIPTION

Invoked by @emph{git send-pack} and updates the repository with the information
fed from the remote end.

This command is usually not invoked directly by the end user.  The UI for
the protocol is on the @emph{git send-pack} side, and the program pair is meant
to be used to push updates to remote repository.  For pull operations, see
git-fetch-pack(1).

The command allows for creation and fast-forwarding of sha1 refs
(heads/tags) on the remote end (strictly speaking, it is the local end
@emph{git-receive-pack} runs, but to the user who is sitting at the send-pack
end, it is updating the remote.  Confused?)

There are other real-world examples of using update and post-update hooks
found in the Documentation/howto directory.

@emph{git-receive-pack} honours the receive.denyNonFastForwards config option,
which tells it if updates to a ref should be denied if they are not
fast-forwards.

A number of other receive.* config options are available to tweak its
behavior, see git-config(1).

@noindent

@chapheading OPTIONS

@table @asis

@item  <directory> 
The repository to sync into.

@item  @samp{--http-backend-info-refs} 
Used by git-http-backend(1) to serve up
@samp{$GIT_URL/info/refs?service=git-receive-pack} requests. See
@samp{--http-backend-info-refs} in git-upload-pack(1).
@end table

@noindent

@chapheading PRE-RECEIVE HOOK

Before any ref is updated, if $GIT_DIR/hooks/pre-receive file exists and is
executable, it will be invoked once with no parameters.  The standard input
of the hook will be one line per ref to be updated:

@example
sha1-old SP sha1-new SP refname LF
@end example

The refname value is relative to $GIT_DIR; e.g. for the master head this is
"refs/heads/master".  The two sha1 values before each refname are the object
names for the refname before and after the update.  Refs to be created will
have sha1-old equal to 0@{40@}, while refs to be deleted will have sha1-new
equal to 0@{40@}, otherwise sha1-old and sha1-new should be valid objects in
the repository.

When accepting a signed push (see git-push(1)), the signed push
certificate is stored in a blob and an environment variable @samp{GIT_PUSH_CERT}
can be consulted for its object name.  See the description of @samp{post-receive}
hook for an example.  In addition, the certificate is verified using GPG and
the result is exported with the following environment variables:

@table @asis

@item  @samp{GIT_PUSH_CERT_SIGNER} 
The name and the e-mail address of the owner of the key that signed the push
certificate.

@item  @samp{GIT_PUSH_CERT_KEY} 
The GPG key ID of the key that signed the push certificate.

@item  @samp{GIT_PUSH_CERT_STATUS} 
The status of GPG verification of the push certificate, using the same
mnemonic as used in @samp{%G?} format of @samp{git log} family of commands (see
git-log(1)).

@item  @samp{GIT_PUSH_CERT_NONCE} 
The nonce string the process asked the signer to include in the push
certificate.  If this does not match the value recorded on the "nonce"
header in the push certificate, it may indicate that the certificate is a
valid one that is being replayed from a separate "git push" session.

@item  @samp{GIT_PUSH_CERT_NONCE_STATUS} 
@table @asis

@item  @samp{UNSOLICITED} 
"git push --signed" sent a nonce when we did not ask it to send one.

@item  @samp{MISSING} 
"git push --signed" did not send any nonce header.

@item  @samp{BAD} 
"git push --signed" sent a bogus nonce.

@item  @samp{OK} 
"git push --signed" sent the nonce we asked it to send.

@item  @samp{SLOP} 
"git push --signed" sent a nonce different from what we asked it to send
now, but in a previous session.  See @samp{GIT_PUSH_CERT_NONCE_SLOP} environment
variable.
@end table

@item  @samp{GIT_PUSH_CERT_NONCE_SLOP} 
"git push --signed" sent a nonce different from what we asked it to send
now, but in a different session whose starting time is different by this
many seconds from the current session.  Only meaningful when
@samp{GIT_PUSH_CERT_NONCE_STATUS} says @samp{SLOP}.  Also read about
@samp{receive.certNonceSlop} variable in git-config(1).
@end table

This hook is called before any refname is updated and before any
fast-forward checks are performed.

If the pre-receive hook exits with a non-zero exit status no updates will be
performed, and the update, post-receive and post-update hooks will not be
invoked either.  This can be useful to quickly bail out if the update is not
to be supported.

See the notes on the quarantine environment below.

@noindent

@chapheading UPDATE HOOK

Before each ref is updated, if $GIT_DIR/hooks/update file exists and is
executable, it is invoked once per ref, with three parameters:

@example
$GIT_DIR/hooks/update refname sha1-old sha1-new
@end example

The refname parameter is relative to $GIT_DIR; e.g. for the master head this
is "refs/heads/master".  The two sha1 arguments are the object names for the
refname before and after the update.  Note that the hook is called before
the refname is updated, so either sha1-old is 0@{40@} (meaning there is no
such ref yet), or it should match what is recorded in refname.

The hook should exit with non-zero status if it wants to disallow updating
the named ref.  Otherwise it should exit with zero.

Successful execution (a zero exit status) of this hook does not ensure the
ref will actually be updated, it is only a prerequisite.  As such it is not
a good idea to send notices (e.g. email) from this hook.  Consider using the
post-receive hook instead.

@noindent

@chapheading POST-RECEIVE HOOK

After all refs were updated (or attempted to be updated), if any ref update
was successful, and if $GIT_DIR/hooks/post-receive file exists and is
executable, it will be invoked once with no parameters.  The standard input
of the hook will be one line for each successfully updated ref:

@example
sha1-old SP sha1-new SP refname LF
@end example

The refname value is relative to $GIT_DIR; e.g. for the master head this is
"refs/heads/master".  The two sha1 values before each refname are the object
names for the refname before and after the update.  Refs that were created
will have sha1-old equal to 0@{40@}, while refs that were deleted will have
sha1-new equal to 0@{40@}, otherwise sha1-old and sha1-new should be valid
objects in the repository.

The @samp{GIT_PUSH_CERT*} environment variables can be inspected, just as in
@samp{pre-receive} hook, after accepting a signed push.

Using this hook, it is easy to generate mails describing the updates to the
repository.  This example script sends one mail message per ref listing the
commits pushed to the repository, and logs the push certificates of signed
pushes with good signatures to a logger service:

@example
#!/bin/sh
# mail out commit update information.
while read oval nval ref
do
        if expr "$oval" : '0*$' >/dev/null
        then
                echo "Created a new ref, with the following commits:"
                git rev-list --pretty "$nval"
        else
                echo "New commits:"
                git rev-list --pretty "$nval" "^$oval"
        fi |
        mail -s "Changes to ref $ref" commit-list@@mydomain
done
# log signed push certificate, if any
if test -n "$@{GIT_PUSH_CERT-@}" && test $@{GIT_PUSH_CERT_STATUS@} = G
then
        (
                echo expected nonce is $@{GIT_PUSH_NONCE@}
                git cat-file blob $@{GIT_PUSH_CERT@}
        ) | mail -s "push certificate from $GIT_PUSH_CERT_SIGNER" push-log@@mydomain
fi
exit 0
@end example


The exit code from this hook invocation is ignored, however a non-zero exit
code will generate an error message.

Note that it is possible for refname to not have sha1-new when this hook
runs.  This can easily occur if another user modifies the ref after it was
updated by @emph{git-receive-pack}, but before the hook was able to evaluate it.
It is recommended that hooks rely on sha1-new rather than the current value
of refname.

@noindent

@chapheading POST-UPDATE HOOK

After all other processing, if at least one ref was updated, and if
$GIT_DIR/hooks/post-update file exists and is executable, then post-update
will be called with the list of refs that have been updated.  This can be
used to implement any repository wide cleanup tasks.

The exit code from this hook invocation is ignored; the only thing left for
@emph{git-receive-pack} to do at that point is to exit itself anyway.

This hook can be used, for example, to run @samp{git update-server-info} if the
repository is packed and is served via a dumb transport.

@example
#!/bin/sh
exec git update-server-info
@end example


@noindent

@chapheading QUARANTINE ENVIRONMENT

When @samp{receive-pack} takes in objects, they are placed into a temporary
"quarantine" directory within the @samp{$GIT_DIR/objects} directory and migrated
into the main object store only after the @samp{pre-receive} hook has
completed. If the push fails before then, the temporary directory is removed
entirely.

This has a few user-visible effects and caveats:

@enumerate 

@item
Pushes which fail due to problems with the incoming pack, missing objects,
or due to the @samp{pre-receive} hook will not leave any on-disk data. This is
usually helpful to prevent repeated failed pushes from filling up your disk,
but can make debugging more challenging.

@item
Any objects created by the @samp{pre-receive} hook will be created in the
quarantine directory (and migrated only if it succeeds).

@item
The @samp{pre-receive} hook MUST NOT update any refs to point to quarantined
objects. Other programs accessing the repository will not be able to see the
objects (and if the pre-receive hook fails, those refs would become
corrupted). For safety, any ref updates from within @samp{pre-receive} are
automatically rejected.
@end enumerate

@noindent

@chapheading SEE ALSO

git-send-pack(1), gitnamespaces(7)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-reflog,,,Top
@chapheading Name

git-reflog — Manage reflog information

@noindent

@chapheading Synopsis

@display
git reflog <subcommand> <options>
@end display


@noindent

@chapheading DESCRIPTION

The command takes various subcommands, and different options depending on
the subcommand:

@display
git reflog [show] [log-options] [<ref>]
git reflog expire [--expire=<time>] [--expire-unreachable=<time>]
        [--rewrite] [--updateref] [--stale-fix]
        [--dry-run | -n] [--verbose] [--all [--single-worktree] | <refs>…]
git reflog delete [--rewrite] [--updateref]
        [--dry-run | -n] [--verbose] ref@@@{specifier@}…
git reflog exists <ref>
@end display


Reference logs, or "reflogs", record when the tips of branches and other
references were updated in the local repository. Reflogs are useful in
various Git commands, to specify the old value of a reference. For example,
@samp{HEAD@@@{2@}} means "where HEAD used to be two moves ago",
@samp{master@@@{one.week.ago@}} means "where master used to point to one week ago in
this local repository", and so on. See gitrevisions(7) for more
details.

This command manages the information recorded in the reflogs.

The "show" subcommand (which is also the default, in the absence of any
subcommands) shows the log of the reference provided in the command-line (or
@samp{HEAD}, by default). The reflog covers all recent actions, and in addition
the @samp{HEAD} reflog records branch switching.  @samp{git reflog show} is an alias
for @samp{git log -g --abbrev-commit --pretty=oneline}; see git-log(1)
for more information.

The "expire" subcommand prunes older reflog entries. Entries older than
@samp{expire} time, or entries older than @samp{expire-unreachable} time and not
reachable from the current tip, are removed from the reflog.  This is
typically not used directly by end users — instead, see git-gc(1).

The "delete" subcommand deletes single entries from the reflog. Its argument
must be an @emph{exact} entry (e.g. "@samp{git reflog delete master@@@{2@}}"). This
subcommand is also typically not used directly by end users.

The "exists" subcommand checks whether a ref has a reflog.  It exits with
zero status if the reflog exists, and non-zero status if it does not.

@noindent

@chapheading OPTIONS

@noindent

@heading Options for show

@samp{git reflog show} accepts any of the options accepted by @samp{git log}.

@noindent

@heading Options for expire

@table @asis

@item  @samp{--all} 
Process the reflogs of all references.

@item  @samp{--single-worktree} 
By default when @samp{--all} is specified, reflogs from all working trees are
processed. This option limits the processing to reflogs from the current
working tree only.

@item  @samp{--expire=<time>} 
Prune entries older than the specified time. If this option is not
specified, the expiration time is taken from the configuration setting
@samp{gc.reflogExpire}, which in turn defaults to 90 days. @samp{--expire=all} prunes
entries regardless of their age; @samp{--expire=never} turns off pruning of
reachable entries (but see @samp{--expire-unreachable}).

@item  @samp{--expire-unreachable=<time>} 
Prune entries older than @samp{<time>} that are not reachable from the current
tip of the branch. If this option is not specified, the expiration time is
taken from the configuration setting @samp{gc.reflogExpireUnreachable}, which in
turn defaults to 30 days. @samp{--expire-unreachable=all} prunes unreachable
entries regardless of their age; @samp{--expire-unreachable=never} turns off
early pruning of unreachable entries (but see @samp{--expire}).

@item  @samp{--updateref} 
Update the reference to the value of the top reflog entry (i.e.
<ref>@@@{0@}) if the previous top entry was pruned.  (This option is ignored
for symbolic references.)

@item  @samp{--rewrite} 
If a reflog entry’s predecessor is pruned, adjust its "old" SHA-1 to be
equal to the "new" SHA-1 field of the entry that now precedes it.

@item  @samp{--stale-fix} 
Prune any reflog entries that point to "broken commits". A broken commit is
a commit that is not reachable from any of the reference tips and that
refers, directly or indirectly, to a missing commit, tree, or blob object.

This computation involves traversing all the reachable objects, i.e. it has
the same cost as @emph{git prune}.  It is primarily intended to fix corruption
caused by garbage collecting using older versions of Git, which didn’t
protect objects referred to by reflogs.

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
Do not actually prune any entries; just show what would have been pruned.

@item  @samp{--verbose} 
Print extra information on screen.
@end table

@noindent

@heading Options for delete

@samp{git reflog delete} accepts options @samp{--updateref}, @samp{--rewrite}, @samp{-n},
@samp{--dry-run}, and @samp{--verbose}, with the same meanings as when they are used
with @samp{expire}.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-remote-ext,,,Top
@chapheading Name

git-remote-ext — Bridge smart transport to external command.

@noindent

@chapheading Synopsis

@display
git remote add <nick> "ext::<command>[ <arguments>…]"
@end display


@noindent

@chapheading DESCRIPTION

This remote helper uses the specified @emph{<command>} to connect to a remote Git
server.

Data written to stdin of the specified @emph{<command>} is assumed to be sent to
a git:// server, git-upload-pack, git-receive-pack or git-upload-archive
(depending on situation), and data read from stdout of <command> is assumed
to be received from the same service.

Command and arguments are separated by an unescaped space.

The following sequences have a special meaning:

@table @asis

@item  '% ' 
Literal space in command or argument.

@item  @emph{%%} 
Literal percent sign.

@item  @emph{%s} 
Replaced with name (receive-pack, upload-pack, or upload-archive) of the
service Git wants to invoke.

@item  @emph{%S} 
Replaced with long name (git-receive-pack, git-upload-pack, or
git-upload-archive) of the service Git wants to invoke.

@item  @emph{%G} (must be the first characters in an argument) 
This argument will not be passed to @emph{<command>}. Instead, it will cause the
helper to start by sending git:// service requests to the remote side with
the service field set to an appropriate value and the repository field set
to rest of the argument. Default is not to send such a request.

This is useful if remote side is git:// server accessed over some tunnel.

@item  @emph{%V} (must be first characters in argument) 
This argument will not be passed to @emph{<command>}. Instead it sets the vhost
field in the git:// service request (to rest of the argument).  Default is
not to send vhost in such request (if sent).
@end table

@noindent

@chapheading ENVIRONMENT VARIABLES

@table @asis

@item  GIT_TRANSLOOP_DEBUG 
If set, prints debugging information about various reads/writes.
@end table

@noindent

@chapheading ENVIRONMENT VARIABLES PASSED TO COMMAND

@table @asis

@item  GIT_EXT_SERVICE 
Set to long name (git-upload-pack, etc…) of service helper needs to
invoke.

@item  GIT_EXT_SERVICE_NOPREFIX 
Set to long name (upload-pack, etc…) of service helper needs to invoke.
@end table

@noindent

@chapheading EXAMPLES

This remote helper is transparently used by Git when you use commands such
as "git fetch <URL>", "git clone <URL>", , "git push <URL>" or "git remote
add <nick> <URL>", where <URL> begins with @samp{ext::}.  Examples:

@table @asis

@item  "ext::ssh -i /home/foo/.ssh/somekey user@@host.example %S @emph{foo/repo}" 
Like host.example:foo/repo, but use /home/foo/.ssh/somekey as keypair and
user as user on remote side. This avoids needing to edit .ssh/config.

@item  "ext::socat -t3600 - ABSTRACT-CONNECT:/git-server %G/somerepo" 
Represents repository with path /somerepo accessible over git protocol at
abstract namespace address /git-server.

@item  "ext::git-server-alias foo %G/repo" 
Represents a repository with path /repo accessed using the helper program
"git-server-alias foo".  The path to the repository and type of request are
not passed on the command line but as part of the protocol stream, as usual
with git:// protocol.

@item  "ext::git-server-alias foo %G/repo %Vfoo" 
Represents a repository with path /repo accessed using the helper program
"git-server-alias foo".  The hostname for the remote server passed in the
protocol stream will be "foo" (this allows multiple virtual Git servers to
share a link-level address).

@item  "ext::git-server-alias foo %G/repo% with% spaces %Vfoo" 
Represents a repository with path @samp{/repo with spaces} accessed using the
helper program "git-server-alias foo".  The hostname for the remote server
passed in the protocol stream will be "foo" (this allows multiple virtual
Git servers to share a link-level address).

@item  "ext::git-ssl foo.example /bar" 
Represents a repository accessed using the helper program "git-ssl
foo.example /bar".  The type of request can be determined by the helper
using environment variables (see above).
@end table

@noindent

@chapheading SEE ALSO

gitremote-helpers(7)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-remote-fd,,,Top
@chapheading Name

git-remote-fd — スマートトランスポートストリームを呼び出し元に反映します(Reflect smart transport stream back to caller)

@noindent

@chapheading Synopsis

"fd::<infd>[,<outfd>][/<anything>]" (as URL)

@noindent

@chapheading DESCRIPTION

このヘルパーは、指定のファイルデスクリプタを使用してリモートGitサーバーに接続します。これはエンドユーザー向けではなく、git
fetch、pushまたはarchiveを呼び出すプログラムとスクリプトを対象としています。

<infd> のみが指定されている場合は、リモートGitサーバー(git-upload-pack、git-receive-pack または
git-upload-archive)に接続されている双方向ソケットであると見なされます。 <infd> と <outfd>
の両方が指定されている場合、それらはリモートGitサーバーに接続されているパイプであると見なされます( <infd> は入力パイプ、 <outfd>
は出力パイプです)。

このヘルパーが開始される前に、ハンドシェイク手順(git:// のサービスリクエストの送信など)がすでに完了していることを前提としています。

<anything>
は任意の文字列にすることができます。それは無視されます。これは、URLが何らかのコンテキストで表示される場合に、URLでユーザーに情報を提供するためのものです。

@noindent

@chapheading ENVIRONMENT VARIABLES

@table @asis

@item  GIT_TRANSLOOP_DEBUG 
設定されている場合、さまざまな 読み取り/書き込み に関するデバッグ情報を出力します。
@end table

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git fetch fd::17 master} 
ファイルデスクリプタ #17 使用して master を Fetch し、 git-upload-pack と通信します。

@item  @samp{git fetch fd::17/foo master} 
同上。

@item  @samp{git push fd::7,8 master (as URL)} 
master を push し、ファイルデスクリプタ #7 を使用して git-receive-pack からデータを読み取り、ファイルデスクリプタ
#8 を使用して同じサービスにデータを書き込みます。

@item  @samp{git push fd::7,8/bar master} 
同上。
@end table

@noindent

@chapheading SEE ALSO

gitremote-helpers(7)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-remote,,,Top
@chapheading Name

git-remote — Manage set of tracked repositories

@noindent

@chapheading Synopsis

@display
git remote [-v | --verbose]
git remote add [-t <branch>] [-m <master>] [-f] [--[no-]tags] [--mirror=(fetch|push)] <name> <url>
git remote rename <old> <new>
git remote remove <name>
git remote set-head <name> (-a | --auto | -d | --delete | <branch>)
git remote set-branches [--add] <name> <branch>…
git remote get-url [--push] [--all] <name>
git remote set-url [--push] <name> <newurl> [<oldurl>]
git remote set-url --add [--push] <name> <newurl>
git remote set-url --delete [--push] <name> <url>
git remote [-v | --verbose] show [-n] <name>…
git remote prune [-n | --dry-run] <name>…
git remote [-v | --verbose] update [-p | --prune] [(<group> | <remote>)…]
@end display


@noindent

@chapheading DESCRIPTION

Manage the set of repositories ("remotes") whose branches you track.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Be a little more verbose and show remote url after name.  NOTE: This must be
placed between @samp{remote} and subcommand.
@end table

@noindent

@chapheading COMMANDS

With no arguments, shows a list of existing remotes.  Several subcommands
are available to perform operations on the remotes.

@table @asis

@item  @emph{add} 
Add a remote named <name> for the repository at <url>.  The command @samp{git
fetch <name>} can then be used to create and update remote-tracking branches
<name>/<branch>.

With @samp{-f} option, @samp{git fetch <name>} is run immediately after the remote
information is set up.

With @samp{--tags} option, @samp{git fetch <name>} imports every tag from the remote
repository.

With @samp{--no-tags} option, @samp{git fetch <name>} does not import tags from the
remote repository.

By default, only tags on fetched branches are imported (see
git-fetch(1)).

With @samp{-t <branch>} option, instead of the default glob refspec for the
remote to track all branches under the @samp{refs/remotes/<name>/} namespace, a
refspec to track only @samp{<branch>} is created.  You can give more than one @samp{-t
<branch>} to track multiple branches without grabbing all branches.

With @samp{-m <master>} option, a symbolic-ref @samp{refs/remotes/<name>/HEAD} is set
up to point at remote’s @samp{<master>} branch. See also the set-head command.

When a fetch mirror is created with @samp{--mirror=fetch}, the refs will not be
stored in the @emph{refs/remotes/} namespace, but rather everything in @emph{refs/} on
the remote will be directly mirrored into @emph{refs/} in the local
repository. This option only makes sense in bare repositories, because a
fetch would overwrite any local commits.

When a push mirror is created with @samp{--mirror=push}, then @samp{git push} will
always behave as if @samp{--mirror} was passed.

@item  @emph{rename} 
Rename the remote named <old> to <new>. All remote-tracking branches and
configuration settings for the remote are updated.

In case <old> and <new> are the same, and <old> is a file under
@samp{$GIT_DIR/remotes} or @samp{$GIT_DIR/branches}, the remote is converted to the
configuration file format.

@item  @emph{remove} 
@itemx  @emph{rm} 
Remove the remote named <name>. All remote-tracking branches and
configuration settings for the remote are removed.

@item  @emph{set-head} 
Sets or deletes the default branch (i.e. the target of the symbolic-ref
@samp{refs/remotes/<name>/HEAD}) for the named remote. Having a default branch
for a remote is not required, but allows the name of the remote to be
specified in lieu of a specific branch. For example, if the default branch
for @samp{origin} is set to @samp{master}, then @samp{origin} may be specified wherever you
would normally specify @samp{origin/master}.

With @samp{-d} or @samp{--delete}, the symbolic ref @samp{refs/remotes/<name>/HEAD} is
deleted.

With @samp{-a} or @samp{--auto}, the remote is queried to determine its @samp{HEAD}, then
the symbolic-ref @samp{refs/remotes/<name>/HEAD} is set to the same branch. e.g.,
if the remote @samp{HEAD} is pointed at @samp{next}, @samp{git remote set-head origin -a}
will set the symbolic-ref @samp{refs/remotes/origin/HEAD} to
@samp{refs/remotes/origin/next}. This will only work if
@samp{refs/remotes/origin/next} already exists; if not it must be fetched first.

Use @samp{<branch>} to set the symbolic-ref @samp{refs/remotes/<name>/HEAD}
explicitly. e.g., @samp{git remote set-head origin master} will set the
symbolic-ref @samp{refs/remotes/origin/HEAD} to
@samp{refs/remotes/origin/master}. This will only work if
@samp{refs/remotes/origin/master} already exists; if not it must be fetched
first.

@item  @emph{set-branches} 
Changes the list of branches tracked by the named remote.  This can be used
to track a subset of the available remote branches after the initial setup
for a remote.

The named branches will be interpreted as if specified with the @samp{-t} option
on the @samp{git remote add} command line.

With @samp{--add}, instead of replacing the list of currently tracked branches,
adds to that list.

@item  @emph{get-url} 
Retrieves the URLs for a remote. Configurations for @samp{insteadOf} and
@samp{pushInsteadOf} are expanded here. By default, only the first URL is listed.

With @samp{--push}, push URLs are queried rather than fetch URLs.

With @samp{--all}, all URLs for the remote will be listed.

@item  @emph{set-url} 
Changes URLs for the remote. Sets first URL for remote <name> that matches
regex <oldurl> (first URL if no <oldurl> is given) to <newurl>. If <oldurl>
doesn’t match any URL, an error occurs and nothing is changed.

With @samp{--push}, push URLs are manipulated instead of fetch URLs.

With @samp{--add}, instead of changing existing URLs, new URL is added.

With @samp{--delete}, instead of changing existing URLs, all URLs matching regex
<url> are deleted for remote <name>.  Trying to delete all non-push URLs is
an error.

Note that the push URL and the fetch URL, even though they can be set
differently, must still refer to the same place.  What you pushed to the
push URL should be what you would see if you immediately fetched from the
fetch URL.  If you are trying to fetch from one place (e.g. your upstream)
and push to another (e.g.  your publishing repository), use two separate
remotes.

@item  @emph{show} 
Gives some information about the remote <name>.

With @samp{-n} option, the remote heads are not queried first with @samp{git ls-remote
<name>}; cached information is used instead.

@item  @emph{prune} 
Deletes stale references associated with <name>. By default, stale
remote-tracking branches under <name> are deleted, but depending on global
configuration and the configuration of the remote we might even prune local
tags that haven’t been pushed there. Equivalent to @samp{git fetch --prune
<name>}, except that no new references will be fetched.

See the PRUNING section of git-fetch(1) for what it’ll prune
depending on various configuration.

With @samp{--dry-run} option, report what branches would be pruned, but do not
actually prune them.

@item  @emph{update} 
Fetch updates for remotes or remote groups in the repository as defined by
@samp{remotes.<group>}. If neither group nor remote is specified on the command
line, the configuration parameter remotes.default will be used; if
remotes.default is not defined, all remotes which do not have the
configuration parameter @samp{remote.<name>.skipDefaultUpdate} set to true will
be updated.  (See git-config(1)).

With @samp{--prune} option, run pruning against all the remotes that are updated.
@end table

@noindent

@chapheading DISCUSSION

The remote configuration is achieved using the @samp{remote.origin.url} and
@samp{remote.origin.fetch} configuration variables.  (See git-config(1)).

@noindent

@chapheading EXIT STATUS

On success, the exit status is @samp{0}.

When subcommands such as @emph{add}, @emph{rename}, and @emph{remove} can’t find the remote
in question, the exit status is @samp{2}. When the remote already exists, the
exit status is @samp{3}.

On any other error, the exit status may be any other non-zero value.

@noindent

@chapheading EXAMPLES

@itemize 

@item
Add a new remote, fetch, and check out a branch from it

@example
$ git remote
origin
$ git branch -r
  origin/HEAD -> origin/master
  origin/master
$ git remote add staging git://git.kernel.org/.../gregkh/staging.git
$ git remote
origin
staging
$ git fetch staging
...
From git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging
 * [new branch]      master     -> staging/master
 * [new branch]      staging-linus -> staging/staging-linus
 * [new branch]      staging-next -> staging/staging-next
$ git branch -r
  origin/HEAD -> origin/master
  origin/master
  staging/master
  staging/staging-linus
  staging/staging-next
$ git switch -c staging staging/master
...
@end example


@item
Imitate @emph{git clone} but track only selected branches

@example
$ mkdir project.git
$ cd project.git
$ git init
$ git remote add -f -t master -m master origin git://example.com/git.git/
$ git merge origin
@end example

@end itemize

@noindent

@chapheading SEE ALSO

git-fetch(1) git-branch(1) git-config(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-repack,,,Top
@chapheading Name

git-repack — リポジトリ内のアンパックオブジェクトをパックする

@noindent

@chapheading Synopsis

@display
git repack [-a] [-A] [-d] [-f] [-F] [-l] [-n] [-q] [-b] [--window=<n>] [--depth=<n>] [--threads=<n>] [--keep-pack=<pack-name>]
@end display


@noindent

@chapheading DESCRIPTION

このコマンドは、現在パック内に存在しないすべてのオブジェクトを1つのパックに結合するために使用されます。また、既存のパックを単一のより効率的なパックに再編成するために使用することもできます。

パックは、個別に圧縮され、デルタ圧縮が適用され、関連付けられたインデックスファイルとともに単一のファイルに格納されたオブジェクトのコレクションです。

パックは、ミラーシステム、バックアップエンジン、ディスクストレージなどの負荷を軽減するために使用されます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-a} 
パックされていないオブジェクトを段階的にパックする代わりに、参照されるすべてのものを1つのパックにパックします。プライベート開発に使用されるリポジトリをパックする場合に特に便利です。
@samp{-d} と一緒に使用します。 これにより、 @samp{git prune} が残したオブジェクトがクリーンアップされますが、 @samp{git fsck --full
--dangling} ではぶら下がりを表示します。

馬鹿プロトコル(dumb
protocol)を介してフェッチするユーザーは、含まれているオブジェクトを取得するために、そのパック内にすでにローカルにある他のオブジェクトの数に関係なく、まったく新しいパックをフェッチする必要があることに注意してください。

promisorパックファイルは個別に再パックされます。「.promisor」ファイルに関連付けられているパックファイルがある場合、これらのパックファイルは別の個別パックに再パックされ、新しい個別パックに対応する空の「.promisor」ファイルが書き込まれます。

@item  @samp{-A} 
Same as @samp{-a}, unless @samp{-d} is used.  Then any unreachable objects in a
previous pack become loose, unpacked objects, instead of being left in the
old pack.  Unreachable objects are never intentionally added to a pack, even
when repacking.  This option prevents unreachable objects from being
immediately deleted by way of being left in the old pack and then removed.
Instead, the loose unreachable objects will be pruned according to normal
expiry rules with the next @emph{git gc} invocation. See git-gc(1).

@item  @samp{-d} 
After packing, if the newly created packs make some existing packs
redundant, remove the redundant packs.  Also run @emph{git prune-packed} to
remove redundant loose object files.

@item  @samp{-l} 
Pass the @samp{--local} option to @emph{git pack-objects}. See
git-pack-objects(1).

@item  @samp{-f} 
Pass the @samp{--no-reuse-delta} option to @samp{git-pack-objects}, see
git-pack-objects(1).

@item  @samp{-F} 
Pass the @samp{--no-reuse-object} option to @samp{git-pack-objects}, see
git-pack-objects(1).

@item  @samp{-q} 
Pass the @samp{-q} option to @emph{git pack-objects}. See git-pack-objects(1).

@item  @samp{-n} 
Do not update the server information with @emph{git update-server-info}.  This
option skips updating local catalog files needed to publish this repository
(or a direct copy of it)  over HTTP or FTP.  See
git-update-server-info(1).

@item  @samp{--window=<n>} 
@itemx  @samp{--depth=<n>} 
これらの2つのオプションは、パックに含まれるオブジェクトがデルタ圧縮を使用して格納される方法に影響します。オブジェクトは最初にタイプ、サイズ、およびオプションで名前で内部的にソートされ、
@samp{--window} 内の他のオブジェクトと比較されて、デルタ圧縮を使用することでスペースが節約されるかどうかが確認されます。 @samp{--depth}
は最大デルタ深度を制限します。深くしすぎると、必要なオブジェクトに到達するためにデルタデータを何度も適用する必要があるため、アンパッカー側(unpacker
side)のパフォーマンスに影響します。

@samp{--window} のデフォルト値は10で、 @samp{--depth} は50です。最大深度(maximum depth)は4095です。

@item  @samp{--threads=<n>} 
このオプションは @samp{git pack-objects} に渡されます。

@item  @samp{--window-memory=<n>} 
This option provides an additional limit on top of @samp{--window}; the window
size will dynamically scale down so as to not take up more than @emph{<n>} bytes
in memory.  This is useful in repositories with a mix of large and small
objects to not run out of memory with a large window, but still be able to
take advantage of the large window for the smaller objects.  The size can be
suffixed with "k", "m", or "g".  @samp{--window-memory=0} makes memory usage
unlimited.  The default is taken from the @samp{pack.windowMemory} configuration
variable.  Note that the actual memory usage will be the limit multiplied by
the number of threads used by git-pack-objects(1).

@item  @samp{--max-pack-size=<n>} 
Maximum size of each output pack file. The size can be suffixed with "k",
"m", or "g". The minimum size allowed is limited to 1 MiB.  If specified,
multiple packfiles may be created, which also prevents the creation of a
bitmap index.  The default is unlimited, unless the config variable
@samp{pack.packSizeLimit} is set. Note that this option may result in a larger
and slower repository; see the discussion in @samp{pack.packSizeLimit}.

@item  @samp{-b} 
@itemx  @samp{--write-bitmap-index} 
Write a reachability bitmap index as part of the repack. This only makes
sense when used with @samp{-a} or @samp{-A}, as the bitmaps must be able to refer to
all reachable objects. This option overrides the setting of
@samp{repack.writeBitmaps}.  This option has no effect if multiple packfiles are
created.

@item  @samp{--pack-kept-objects} 
Include objects in @samp{.keep} files when repacking.  Note that we still do not
delete @samp{.keep} packs after @samp{pack-objects} finishes.  This means that we may
duplicate objects, but this makes the option safe to use when there are
concurrent pushes or fetches.  This option is generally only useful if you
are writing bitmaps with @samp{-b} or @samp{repack.writeBitmaps}, as it ensures that
the bitmapped packfile has the necessary objects.

@item  @samp{--keep-pack=<pack-name>} 
Exclude the given pack from repacking. This is the equivalent of having
@samp{.keep} file on the pack. @samp{<pack-name>} is the pack file name without
leading directory (e.g. @samp{pack-123.pack}).  The option could be specified
multiple times to keep multiple packs.

@item  @samp{--unpack-unreachable=<when>} 
When loosening unreachable objects, do not bother loosening any objects
older than @samp{<when>}. This can be used to optimize out the write of any
objects that would be immediately pruned by a follow-up @samp{git prune}.

@item  @samp{-k} 
@itemx  @samp{--keep-unreachable} 
When used with @samp{-ad}, any unreachable objects from existing packs will be
appended to the end of the packfile instead of being removed. In addition,
any unreachable loose objects will be packed (and their loose counterparts
removed).

@item  @samp{-i} 
@itemx  @samp{--delta-islands} 
Pass the @samp{--delta-islands} option to @samp{git-pack-objects}, see
git-pack-objects(1).

@item  @samp{-g=<factor>} 
@itemx  @samp{--geometric=<factor>} 
Arrange resulting pack structure so that each successive pack contains at
least @samp{<factor>} times the number of objects as the next-largest pack.

@samp{git repack} ensures this by determining a "cut" of packfiles that need to
be repacked into one in order to ensure a geometric progression. It picks
the smallest set of packfiles such that as many of the larger packfiles (by
count of objects contained in that pack) may be left intact.

Unlike other repack modes, the set of objects to pack is determined uniquely
by the set of packs being "rolled-up"; in other words, the packs determined
to need to be combined in order to restore a geometric progression.

When @samp{--unpacked} is specified, loose objects are implicitly included in
this "roll-up", without respect to their reachability. This is subject to
change in the future. This option (implying a drastically different repack
mode) is not guaranteed to work with all other combinations of option to
@samp{git repack}.
@end table

@noindent

@chapheading CONFIGURATION

Various configuration variables affect packing, see git-config(1)
(search for "pack" and "delta").

By default, the command passes @samp{--delta-base-offset} option to @emph{git
pack-objects}; this typically results in slightly smaller packs, but the
generated packs are incompatible with versions of Git older than version
1.4.4. If you need to share your repository with such ancient Git versions,
either directly or via the dumb http protocol, then you need to set the
configuration variable @samp{repack.UseDeltaBaseOffset} to "false" and
repack. Access from old Git versions over the native protocol is unaffected
by this option as the conversion is performed on the fly as needed in that
case.

Delta compression is not used on objects larger than the
@samp{core.bigFileThreshold} configuration variable and on files with the
attribute @samp{delta} set to false.

@noindent

@chapheading SEE ALSO

git-pack-objects(1) git-prune-packed(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-replace,,,Top
@chapheading Name

git-replace — オブジェクトを置き換えるためのrefsの作成、一覧表示、削除

@noindent

@chapheading Synopsis

@display
git replace [-f] <object> <replacement>
git replace [-f] --edit <object>
git replace [-f] --graft <commit> [<parent>…]
git replace [-f] --convert-graft-file
git replace -d <object>…
git replace [--format=<format>] [-l [<pattern>]]
@end display


@noindent

@chapheading DESCRIPTION

@samp{refs/replace/} 名前空間に @emph{replace} 参照を追加します。

@emph{replace} 参照の名前は、置き換えられるオブジェクトのSHA-1です。 @emph{replace}
参照の内容は、置き換えるオブジェクトのSHA-1です。

置き換えられるオブジェクトと置き換えるオブジェクトは同じタイプである必要があります。 この制限は、 @samp{-f} を使用して迂回(bypass)できます。

@samp{-f} が指定されていない限り、 @emph{replace} 参照はまだ存在していてはなりません。

置換されるオブジェクトと置換するオブジェクトに他の制限はありません。マージコミットは非マージコミットに置き換えることができ、その逆も可能です。

置換する参照は、デフォルトでは、到達可能性トラバーサル(剪定(prune)とパックと転送とfsck)実行するコマンドを除くすべてのGitコマンドで使用されます。

@emph{git} の直後に @samp{--no-replace-objects} オプションを使用すると、任意のコマンドでの置換参照の使用を無効にすることができます。

たとえば、 コミット @emph{foo} がコミット @emph{bar} に置き換えられた場合:

@example
$ git --no-replace-objects cat-file commit foo
@end example


上記は、コミット @emph{foo} に関する情報を表示します。

@example
$ git cat-file commit foo
@end example


これはコミット @emph{bar} に関する情報を表示します。

@samp{GIT_NO_REPLACE_OBJECTS} 環境変数は、 @samp{--no-replace-objects}
オプションと同じ効果を達成するように設定できます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-f} 
@itemx  @samp{--force} 
同じオブジェクトの既存の置換refが存在する場合、(失敗するのではなく)上書きされます。

@item  @samp{-d} 
@itemx  @samp{--delete} 
指定されたオブジェクトの既存の置換refsを削除します。

@item  @samp{--edit <object>} 
オブジェクトのコンテンツを対話的に編集します。 <object>
の既存のコンテンツは一時ファイルにきれいに表示(pretty-printed)され、そのファイルでエディタが起動され、エディタの編集結果がパースされて
<object> と同じタイプの新しいオブジェクトが作成されます。続いて、置換refが作成され、 <object>
が新しく作成されたオブジェクトに置き換えられます。エディタの選択方法の詳細については git-var(1) を参照してください。

@item  @samp{--raw} 
編集するときにきれいに出力されたものではなく、生のオブジェクトの内容を提供します。現在、これはツリーにのみ影響し、バイナリ形式で表示されます。これは扱いが難しいですが、きれいに出力できないほど破損しているツリーを修復するときに役立ちます。バイナリデータをきれいに読み書きできるようにエディタを設定する必要がある場合があることに注意してください。

@item  @samp{--graft <commit> [<parent>...]} 
graftコミットを作成します。 <commit> と同じ内容で新しいコミットが作成されますが、その親は <commit> の親ではなく
[<parent>…] になります。続けて、置換refが作成され、 <commit> が新しく作成されたコミットに置き換えられます。
@samp{--convert-graft-file} を使用して @samp{$GIT_DIR/info/grafts}
ファイルを変換し、代わりに置換refsを使用します。

@item  @samp{--convert-graft-file} 
@samp{$GIT_DIR/info/grafts}
のすべてのエントリに対してgraftコミットを作成し、成功するとそのファイルを削除します。目的は、現在非推奨のgraftファイルからの移行の為にユーザーを支援することです。

@item  @samp{-l <pattern>} 
@itemx  @samp{--list <pattern>} 
指定されたパターンに一致する(またはパターンが指定されていない場合はすべての)オブジェクトの置換refをリストします。引数なしで「git
replace」と入力すると、すべての置換refが一覧表示されます。

@item  @samp{--format=<format>} 
リストするときに、指定の <format> を使用します。これには、「short」および「medium」および「long」のいずれかになります。
省略した場合、フォーマットはデフォルトで「short」になります。
@end table

@noindent

@chapheading FORMATS

以下の形式を使用できます:

@itemize 

@item
@emph{short}:
<置換された sha1>

@item
@emph{medium}:
<置換された sha1> → <置換する sha1>

@item
@emph{long}:
<置換された sha1> (<置換された sha1 のタイプ>) → <置換する sha1> (<置換する sha1 のタイプ>)
@end itemize

@noindent

@chapheading CREATING REPLACEMENT OBJECTS

git-hash-object(1) と git-rebase(1) と
@uref{https://github.com/newren/git-filter-repo,git-filter-repo} は、他のgitコマンドの中でも特に
既存のオブジェクトから置換オブジェクトを作成するために使用されます。 @samp{--edit} オプションを @emph{git replace}
と一緒に使用して、既存のオブジェクトを編集することで置換オブジェクトを作成することもできます。

コミットの文字列の一部である多くの、ブロブまたはツリーまたはコミットを置き換える場合は、コミットの置換文字列を作成してから、コミットのターゲット文字列の先端にあるコミットのみを、コミットの置換文字列の先端にあるコミットに置き換えることができます。

@noindent

@chapheading BUGS

置き換えられたブロブまたはツリーをそれらを置き換えるものと比較すると、正しく機能しません。 また、 @samp{git reset --hard}
を使用して置換されたコミットに戻ると、ブランチは置換されたコミットではなく置換されたコミットに移動します。

保留中のオブジェクトに関連する「git rev-list」を使用すると、他の問題が発生する可能性があります。

@noindent

@chapheading SEE ALSO

git-hash-object(1) git-rebase(1) git-tag(1)
git-branch(1) git-commit(1) git-var(1)
git(1) @uref{https://github.com/newren/git-filter-repo,git-filter-repo}

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-request-pull,,,Top
@chapheading Name

git-request-pull — 保留中の変更の概要を生成します

@noindent

@chapheading Synopsis

@display
git request-pull [-p] <start> <url> [<end>]
@end display


@noindent

@chapheading DESCRIPTION

アップストリームプロジェクトに変更をツリーにプルするように要求するリクエストを生成します。標準出力に出力される要求は、ブランチの説明で始まり、変更を要約し、どこからプルできるかを示します。

アップストリームプロジェクトには  @samp{<start>} という名前のコミットがあると予想され、出力では、そのコミット以降に行った変更を
@samp{<url>`という名前のリポジトリの、}<end>` という名前のコミットまで統合するように求められます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-p} 
出力にパッチテキストを含めます。

@item  <start> 
開始コミット。これは、すでにアップストリーム履歴に存在するコミットを指定します。

@item  <url> 
プル元のリポジトリURL。

@item  <end> 
終了コミット(省略時デフォルトはHEAD)。プルを要求している履歴の先端にあるコミットを指定します。

@samp{<url>} で指定されたリポジトリの、ローカルにあるrefとは異なるrefの先端にコミットがある場合、「ローカル名 コロン(:)
リモート名」である、 @samp{<local>:<remote>} 構文を使用することができます。
@end table

@noindent

@chapheading EXAMPLES

@samp{v1.0} リリースの上にある @samp{master} ブランチで作業を構築し、それをプロジェクトに統合したいとします。
まず、他の人が見ることができるように、その変更をパブリックリポジトリにプッシュします:

@example
git push https://git.ko.xz/project master
@end example

それから、あなたは以下のコマンドを実行します:

@example
git request-pull v1.0 https://git.ko.xz/project master
@end example

これにより、アップストリームへのリクエストが生成され、 @samp{v1.0} リリースと @samp{master}
の間の変更が要約されて、パブリックリポジトリからプルされます。

ローカルにあるブランチとは名前が異なるブランチに変更をプッシュする場合、例えば、

@example
git push https://git.ko.xz/project master:for-linus
@end example

それからあなたはそれをプルするように頼むことができます

@example
git request-pull v1.0 https://git.ko.xz/project master:for-linus
@end example

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-rerere,,,Top
@chapheading Name

git-rerere — 競合するマージの記録された競合解決決定を再利用する

@noindent

@chapheading Synopsis

@display
git rerere [clear|forget <pathspec>|diff|remaining|status|gc]
@end display


@noindent

@chapheading DESCRIPTION

比較的長期間存続するトピックブランチを使用するワークフローでは、開発者は、トピックブランチが完了するまで(「リリース」ブランチにマージされるか、アップストリームに送信されて受け入れられるまで)、同じ競合を何度も解決する必要がある場合があります。

このコマンドは、最初の手動マージにて、自動マージ結果の競合とそれに対応した手動解決結果を記録しておいて、以後の自動マージ結果の競合に、その記録した手動競合解決決定を適用することにより、この処理において開発者を支援します。

@quotation

@strong{Note}

あなたがこのコマンドを有効にするには、構成変数 @samp{rerere.enabled} を設定する必要があります。
@end quotation

@noindent

@chapheading COMMANDS

通常、「git rerere」は、引数やユーザーの介入なしで実行されます。 ただし、動作状態との対話を可能にするいくつかのコマンドがあります。

@table @asis

@item  @emph{clear} 
マージ競合解決決定を中止する場合は、rerereが使用するメタデータをリセットします。 @samp{git am [--skip|--abort]} または
@samp{git rebase [--skip|--abort]} を呼び出すと、このコマンドが自動的に呼び出されます。

@item  @emph{forget} <pathspec> 
<pathspec> の現在の競合について rerere が記録した競合解決決定をリセットします。

@item  @emph{diff} 
競合解決決定の現在の状態の差分を表示します。これは、ユーザーが競合を解決している間に何が変更されたかを追跡するのに役立ちます。追加の引数は、PATHにインストールされているシステムの「diff」コマンドに直接渡されます。

@item  @emph{status} 
マージ競合解決決定がrerereで記録される競合のあるパスをプリントする。

@item  @emph{remaining} 
rerereによって自動解決されていない競合のあるパスをプリントする。これには、競合するサブモジュールなど、rerereで競合解決決定を追跡できないパスが含まれます。

@item  @emph{gc} 
ずっと前に発生した競合するマージのレコードを剪定(prune)します。デフォルトでは、15日より古い未解決の競合と、60日より古い解決済みの競合は剪定されます。これらのデフォルトは、それぞれ
@samp{gc.rerereUnresolved} および @samp{gc.rerereResolved} 構成変数を介して制御されます。
@end table

@noindent

@chapheading DISCUSSION

トピックブランチが分岐してからマスターブランチ(またはアップストリーム)が触れた重複領域をトピックブランチが変更する場合、トピックブランチをアップストリームにプッシュする準備ができる前であっても、最新のマスターでテストすることをお勧めします:

@example
              o---*---o topic
             /
    o---o---o---*---o---o master
@end example


このようなテストでは、マスターとトピックを何らかの方法でマージする必要があります。これを行う1つの方法は、マスターをトピックブランチにプルすることです:

@example
        $ git switch topic
        $ git merge master

              o---*---o---+ topic
             /           /
    o---o---o---*---o---o master
@end example


@samp{*} でマークされたコミットは、同じファイルの同じ領域にアクセスします。 @samp{+}
でマークされたコミットを作成するときに競合を解決する必要があります。次に、結果をテストして、進行中の作業が最新のマスターにあるもので引き続き機能することを確認できます。

このテストマージの後、トピックの作業を続行するには2つの方法があります。最も簡単なのは、テストマージコミット @samp{+}
の上に構築することです。トピックブランチでの作業の準備ができたら、トピックブランチをマスターにプルするか、アップストリームにプルするように依頼します。ただし、その時点で、テストマージ
@samp{+} 以降、マスターまたはアップストリームが進んでいる可能性があります。その場合、最終的なコミットグラフは以下のようになります:

@example
        $ git switch topic
        $ git merge master
        $ ... work on both topic and master branches
        $ git switch master
        $ git merge topic

              o---*---o---+---o---o topic
             /           /         \
    o---o---o---*---o---o---o---o---+ master
@end example


けれども、トピックブランチの存続期間が長い場合、トピックブランチにはそのような「マスターからのマージ」コミットが多数含まれることになり、開発履歴が不必要に乱雑になります。Linuxカーネルメーリングリストの読者は、サブシステムのメンテナが「役に立たないマージ」でいっぱいのブランチからプルするように要求したときに、Linusがテストマージの頻度が高すぎると不平を言ったことを覚えているかもしれません。

別の方法として、トピックブランチでテストマージをクリーンに保つために、テストマージを吹き飛ばし、テストマージの前に、先端の先に構築し続けることができます:

@example
        $ git switch topic
        $ git merge master
        $ git reset --hard HEAD^ ;# rewind the test merge
        $ ... work on both topic and master branches
        $ git switch master
        $ git merge topic

              o---*---o-------o---o topic
             /                     \
    o---o---o---*---o---o---o---o---+ master
@end example


これにより、トピックブランチの準備が整い、マスターブランチにマージされたときに、マージコミットが1つだけ残ります。 このマージでは、 @samp{*}
でマークされたコミットによって導入された競合を解決する必要があります。ただし、この競合は、多くの場合、吹き飛ばしたテストマージを作成したときに解決した競合と同じです。
@emph{git rerere} は、以前の手動解決からの情報を使用して、この最後の競合するマージを解決するのに役立ちます。

競合する自動マージの直後に「git rerere」コマンドを実行すると、それらの中の、通常の競合マーカー @samp{<<<<<<<} と @samp{=======} と
@samp{>>>>>>>} を使用して、競合する作業ツリーファイルが記録されます。後で、競合の解決が完了した後、「git
rerere」を再度実行すると、これらのファイルの解決された状態が記録されます。
masterのトピックブランチへのテストマージを作成したときにこれを行ったとします。

次回、同じ競合する自動マージを確認した後、「git
rerere」を実行すると、以前の競合する自動マージ、以前の手動解決、および現在の競合する自動マージの間で3方向のマージが実行されます。この3方向マージが正常に解決される場合、結果は作業ツリーファイルに書き出されるため、手動で解決する必要はありません。注意:
@emph{git rerere} はインデックスファイルをそのままにしておくので、結果に満足のいく場合は、 @samp{git diff} (または @samp{git diff
-c})を使用して最終的な健全性チェックを行い、そして、 @emph{git add} する必要があることに注意してください。

より便利な方法として、「git merge」は、失敗した自動マージで終了すると自動的に「git rerere」を呼び出し、「git
rerere」は、新しい競合の場合は手動解決を記録し、そうでない場合は以前の手動解決を再利用します。「git
commit」は、マージ結果をコミットするときに「git rerere」も呼び出します。
これが意味することは、（rerere.enabled構成変数を有効にする以外に）自分で特別なことをする必要がないということです。

この例では、テストマージを実行すると、手動の競合解決決定が記録され、記録された競合解決決定が引き続き適用可能である限り、後で更新されたマスターブランチとトピックブランチを使用して実際のマージを実行するときに再利用されます。

「git rerere」レコードの情報は、「git rebase」を実行するときにも使用されます。
テストマージを吹き飛ばし、トピックブランチで開発を続けた後:

@example
              o---*---o-------o---o topic
             /
    o---o---o---*---o---o---o---o   master

        $ git rebase master topic

                                  o---*---o-------o---o topic
                                 /
    o---o---o---*---o---o---o---o   master
@end example


@samp{git rebase master topic}
を実行して、トピックをアップストリームに送信する準備ができる前に最新の状態にすることができます。これにより、3方向マージにフォールバックし、前に解決したテストマージと同じように競合します。
「git rerere」は「git rebase」によって実行され、この競合を解決するのに役立ちます。

[注] @emph{git rerere}
は、ファイル内の競合マーカーに依存して競合を検出します。ファイルに競合マーカーのある行と同じように見える行がすでに含まれている場合、「git
rerere」は競合解決の記録に失敗する可能性があります。これを回避するには、 gitattributes(5) の
@samp{conflict-marker-size} 設定を使用できます。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-reset,,,Top
@chapheading Name

git-reset — Reset current HEAD to the specified state

@noindent

@chapheading Synopsis

@display
git reset [-q] [<tree-ish>] [--] <pathspec>…
git reset [-q] [--pathspec-from-file=<file> [--pathspec-file-nul]] [<tree-ish>]
git reset (--patch | -p) [<tree-ish>] [--] [<pathspec>…]
git reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [<commit>]
@end display


@noindent

@chapheading DESCRIPTION

In the first three forms, copy entries from @samp{<tree-ish>} to the index.  In
the last form, set the current branch head (@samp{HEAD}) to @samp{<commit>},
optionally modifying index and working tree to match.  The
@samp{<tree-ish>}/@samp{<commit>} defaults to @samp{HEAD} in all forms.

@table @asis

@item  @emph{git reset} [-q] [<tree-ish>] [--] <pathspec>… 
@itemx  @emph{git reset} [-q] [--pathspec-from-file=<file> [--pathspec-file-nul]] [<tree-ish>] 
These forms reset the index entries for all paths that match the
@samp{<pathspec>} to their state at @samp{<tree-ish>}.  (It does not affect the
working tree or the current branch.)

This means that @samp{git reset <pathspec>} is the opposite of @samp{git add
<pathspec>}. This command is equivalent to @samp{git restore
[--source=<tree-ish>] --staged <pathspec>...}.

After running @samp{git reset <pathspec>} to update the index entry, you can use
git-restore(1) to check the contents out of the index to the working
tree. Alternatively, using git-restore(1) and specifying a commit
with @samp{--source}, you can copy the contents of a path out of a commit to the
index and to the working tree in one go.

@item  @emph{git reset} (--patch | -p) [<tree-ish>] [--] [<pathspec>…] 
Interactively select hunks in the difference between the index and
@samp{<tree-ish>} (defaults to @samp{HEAD}).  The chosen hunks are applied in reverse
to the index.

This means that @samp{git reset -p} is the opposite of @samp{git add -p}, i.e.  you
can use it to selectively reset hunks. See the “Interactive Mode” section
of git-add(1) to learn how to operate the @samp{--patch} mode.

@item  @emph{git reset} [<mode>] [<commit>] 
This form resets the current branch head to @samp{<commit>} and possibly updates
the index (resetting it to the tree of @samp{<commit>}) and the working tree
depending on @samp{<mode>}. If @samp{<mode>} is omitted, defaults to @samp{--mixed}. The
@samp{<mode>} must be one of the following:

@table @asis

@item  @samp{--soft} 
Does not touch the index file or the working tree at all (but resets the
head to @samp{<commit>}, just like all modes do). This leaves all your changed
files "Changes to be committed", as @samp{git status} would put it.

@item  @samp{--mixed} 
Resets the index but not the working tree (i.e., the changed files are
preserved but not marked for commit) and reports what has not been
updated. This is the default action.

If @samp{-N} is specified, removed paths are marked as intent-to-add (see
git-add(1)).

@item  @samp{--hard} 
Resets the index and working tree. Any changes to tracked files in the
working tree since @samp{<commit>} are discarded.

@item  @samp{--merge} 
Resets the index and updates the files in the working tree that are
different between @samp{<commit>} and @samp{HEAD}, but keeps those which are different
between the index and working tree (i.e. which have changes which have not
been added).  If a file that is different between @samp{<commit>} and the index
has unstaged changes, reset is aborted.

In other words, @samp{--merge} does something like a @samp{git read-tree -u -m
<commit>}, but carries forward unmerged index entries.

@item  @samp{--keep} 
Resets index entries and updates files in the working tree that are
different between @samp{<commit>} and @samp{HEAD}.  If a file that is different
between @samp{<commit>} and @samp{HEAD} has local changes, reset is aborted.

@item  @samp{--[no-]recurse-submodules} 
When the working tree is updated, using --recurse-submodules will also
recursively reset the working tree of all active submodules according to the
commit recorded in the superproject, also setting the submodules' HEAD to be
detached at that commit.
@end table
@end table

See "Reset, restore and revert" in git(1) for the differences
between the three commands.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-q} 
@itemx  @samp{--quiet} 
@itemx  @samp{--no-quiet} 
Be quiet, only report errors. The default behavior is set by the
@samp{reset.quiet} config option. @samp{--quiet} and @samp{--no-quiet} will override the
default behavior.

@item  @samp{--pathspec-from-file=<file>} 
Pathspec is passed in @samp{<file>} instead of commandline args. If @samp{<file>} is
exactly @samp{-} then standard input is used. Pathspec elements are separated by
LF or CR/LF. Pathspec elements can be quoted as explained for the
configuration variable @samp{core.quotePath} (see git-config(1)). See
also @samp{--pathspec-file-nul} and global @samp{--literal-pathspecs}.

@item  @samp{--pathspec-file-nul} 
Only meaningful with @samp{--pathspec-from-file}. Pathspec elements are separated
with NUL character and all other characters are taken literally (including
newlines and quotes).

@item  -- 
Do not interpret any more arguments as options.

@item  <pathspec>… 
Limits the paths affected by the operation.

For more details, see the @emph{pathspec} entry in gitglossary(7).
@end table

@noindent

@chapheading EXAMPLES

@table @asis

@item  Undo add 
@example
$ edit                                     (1)
$ git add frotz.c filfre.c
$ mailx                                    (2)
$ git reset                                (3)
$ git pull git://info.example.com/ nitfol  (4)
@end example


@table @asis

@item @pxref{CO1-1,,(1)}
You are happily working on something, and find the changes in these files
are in good order.  You do not want to see them when you run @samp{git diff},
because you plan to work on other files and changes with these files are
distracting.

@item @pxref{CO1-2,,(2)}
Somebody asks you to pull, and the changes sound worthy of merging.

@item @pxref{CO1-3,,(3)}
However, you already dirtied the index (i.e. your index does not match the
@samp{HEAD} commit).  But you know the pull you are going to make does not affect
@samp{frotz.c} or @samp{filfre.c}, so you revert the index changes for these two
files.  Your changes in working tree remain there.

@item @pxref{CO1-4,,(4)}
Then you can pull and merge, leaving @samp{frotz.c} and @samp{filfre.c} changes still
in the working tree.
@end table

@item  Undo a commit and redo 
@example
$ git commit ...
$ git reset --soft HEAD^      (1)
$ edit                        (2)
$ git commit -a -c ORIG_HEAD  (3)
@end example


@table @asis

@item @pxref{CO2-1,,(1)}
This is most often done when you remembered what you just committed is
incomplete, or you misspelled your commit message, or both.  Leaves working
tree as it was before "reset".

@item @pxref{CO2-2,,(2)}
Make corrections to working tree files.

@item @pxref{CO2-3,,(3)}
"reset" copies the old head to @samp{.git/ORIG_HEAD}; redo the commit by starting
with its log message.  If you do not need to edit the message further, you
can give @samp{-C} option instead.

See also the @samp{--amend} option to git-commit(1).
@end table

@item  Undo a commit, making it a topic branch 
@example
$ git branch topic/wip          (1)
$ git reset --hard HEAD~3       (2)
$ git switch topic/wip          (3)
@end example


@table @asis

@item @pxref{CO3-1,,(1)}
You have made some commits, but realize they were premature to be in the
@samp{master} branch.  You want to continue polishing them in a topic branch, so
create @samp{topic/wip} branch off of the current @samp{HEAD}.

@item @pxref{CO3-2,,(2)}
Rewind the master branch to get rid of those three commits.

@item @pxref{CO3-3,,(3)}
Switch to @samp{topic/wip} branch and keep working.
@end table

@item  Undo commits permanently 
@example
$ git commit ...
$ git reset --hard HEAD~3   (1)
@end example


@table @asis

@item @pxref{CO4-1,,(1)}
The last three commits (@samp{HEAD}, @samp{HEAD^}, and @samp{HEAD~2}) were bad and you do
not want to ever see them again.  Do @strong{not} do this if you have already given
these commits to somebody else.  (See the "RECOVERING FROM UPSTREAM REBASE"
section in git-rebase(1) for the implications of doing so.)
@end table

@item  Undo a merge or pull 
@example
$ git pull                         (1)
Auto-merging nitfol
CONFLICT (content): Merge conflict in nitfol
Automatic merge failed; fix conflicts and then commit the result.
$ git reset --hard                 (2)
$ git pull . topic/branch          (3)
Updating from 41223... to 13134...
Fast-forward
$ git reset --hard ORIG_HEAD       (4)
@end example


@table @asis

@item @pxref{CO5-1,,(1)}
Try to update from the upstream resulted in a lot of conflicts; you were not
ready to spend a lot of time merging right now, so you decide to do that
later.

@item @pxref{CO5-2,,(2)}
"pull" has not made merge commit, so @samp{git reset --hard} which is a synonym
for @samp{git reset --hard HEAD} clears the mess from the index file and the
working tree.

@item @pxref{CO5-3,,(3)}
Merge a topic branch into the current branch, which resulted in a
fast-forward.

@item @pxref{CO5-4,,(4)}
But you decided that the topic branch is not ready for public consumption
yet.  "pull" or "merge" always leaves the original tip of the current branch
in @samp{ORIG_HEAD}, so resetting hard to it brings your index file and the
working tree back to that state, and resets the tip of the branch to that
commit.
@end table

@item  Undo a merge or pull inside a dirty working tree 
@example
$ git pull                         (1)
Auto-merging nitfol
Merge made by recursive.
 nitfol                |   20 +++++----
 ...
$ git reset --merge ORIG_HEAD      (2)
@end example


@table @asis

@item @pxref{CO6-1,,(1)}
Even if you may have local modifications in your working tree, you can
safely say @samp{git pull} when you know that the change in the other branch does
not overlap with them.

@item @pxref{CO6-2,,(2)}
After inspecting the result of the merge, you may find that the change in
the other branch is unsatisfactory.  Running @samp{git reset --hard ORIG_HEAD}
will let you go back to where you were, but it will discard your local
changes, which you do not want.  @samp{git reset --merge} keeps your local
changes.
@end table

@item  Interrupted workflow 
Suppose you are interrupted by an urgent fix request while you are in the
middle of a large change.  The files in your working tree are not in any
shape to be committed yet, but you need to get to the other branch for a
quick bugfix.

@example
$ git switch feature  ;# you were working in "feature" branch and
$ work work work      ;# got interrupted
$ git commit -a -m "snapshot WIP"                 (1)
$ git switch master
$ fix fix fix
$ git commit ;# commit with real log
$ git switch feature
$ git reset --soft HEAD^ ;# go back to WIP state  (2)
$ git reset                                       (3)
@end example


@table @asis

@item @pxref{CO7-1,,(1)}
This commit will get blown away so a throw-away log message is OK.

@item @pxref{CO7-2,,(2)}
This removes the @emph{WIP} commit from the commit history, and sets your working
tree to the state just before you made that snapshot.

@item @pxref{CO7-3,,(3)}
At this point the index file still has all the WIP changes you committed as
@emph{snapshot WIP}.  This updates the index to show your WIP files as
uncommitted.

See also git-stash(1).
@end table

@item  Reset a single file in the index 
Suppose you have added a file to your index, but later decide you do not
want to add it to your commit. You can remove the file from the index while
keeping your changes with git reset.

@example
$ git reset -- frotz.c                      (1)
$ git commit -m "Commit files in index"     (2)
$ git add frotz.c                           (3)
@end example


@table @asis

@item @pxref{CO8-1,,(1)}
This removes the file from the index while keeping it in the working
directory.

@item @pxref{CO8-2,,(2)}
This commits all other changes in the index.

@item @pxref{CO8-3,,(3)}
Adds the file to the index again.
@end table

@item  Keep changes in working tree while discarding some previous commits 
Suppose you are working on something and you commit it, and then you
continue working a bit more, but now you think that what you have in your
working tree should be in another branch that has nothing to do with what
you committed previously. You can start a new branch and reset it while
keeping the changes in your working tree.

@example
$ git tag start
$ git switch -c branch1
$ edit
$ git commit ...                            (1)
$ edit
$ git switch -c branch2                     (2)
$ git reset --keep start                    (3)
@end example


@table @asis

@item @pxref{CO9-1,,(1)}
This commits your first edits in @samp{branch1}.

@item @pxref{CO9-2,,(2)}
In the ideal world, you could have realized that the earlier commit did not
belong to the new topic when you created and switched to @samp{branch2}
(i.e. @samp{git switch -c branch2 start}), but nobody is perfect.

@item @pxref{CO9-3,,(3)}
But you can use @samp{reset --keep} to remove the unwanted commit after you
switched to @samp{branch2}.
@end table

@item  Split a commit apart into a sequence of commits 
Suppose that you have created lots of logically separate changes and
committed them together. Then, later you decide that it might be better to
have each logical chunk associated with its own commit. You can use git
reset to rewind history without changing the contents of your local files,
and then successively use @samp{git add -p} to interactively select which hunks
to include into each commit, using @samp{git commit -c} to pre-populate the
commit message.

@example
$ git reset -N HEAD^                        (1)
$ git add -p                                (2)
$ git diff --cached                         (3)
$ git commit -c HEAD@@@{1@}                    (4)
...                                         (5)
$ git add ...                               (6)
$ git diff --cached                         (7)
$ git commit ...                            (8)
@end example


@table @asis

@item @pxref{CO10-1,,(1)}
First, reset the history back one commit so that we remove the original
commit, but leave the working tree with all the changes. The -N ensures that
any new files added with @samp{HEAD} are still marked so that @samp{git add -p} will
find them.

@item @pxref{CO10-2,,(2)}
Next, we interactively select diff hunks to add using the @samp{git add -p}
facility. This will ask you about each diff hunk in sequence and you can use
simple commands such as "yes, include this", "No don’t include this" or even
the very powerful "edit" facility.

@item @pxref{CO10-3,,(3)}
Once satisfied with the hunks you want to include, you should verify what
has been prepared for the first commit by using @samp{git diff --cached}. This
shows all the changes that have been moved into the index and are about to
be committed.

@item @pxref{CO10-4,,(4)}
Next, commit the changes stored in the index. The @samp{-c} option specifies to
pre-populate the commit message from the original message that you started
with in the first commit. This is helpful to avoid retyping it. The
@samp{HEAD@@@{1@}} is a special notation for the commit that @samp{HEAD} used to be at
prior to the original reset commit (1 change ago).  See
git-reflog(1) for more details. You may also use any other valid
commit reference.

@item @pxref{CO10-5,,(5)}
You can repeat steps 2-4 multiple times to break the original code into any
number of commits.

@item @pxref{CO10-6,,(6)}
Now you’ve split out many of the changes into their own commits, and might
no longer use the patch mode of @samp{git add}, in order to select all remaining
uncommitted changes.

@item @pxref{CO10-7,,(7)}
Once again, check to verify that you’ve included what you want to. You may
also wish to verify that git diff doesn’t show any remaining changes to be
committed later.

@item @pxref{CO10-8,,(8)}
And finally create the final commit.
@end table
@end table

@noindent

@chapheading DISCUSSION

The tables below show what happens when running:

@example
git reset --option target
@end example


to reset the @samp{HEAD} to another commit (@samp{target}) with the different reset
options depending on the state of the files.

In these tables, @samp{A}, @samp{B}, @samp{C} and @samp{D} are some different states of a
file. For example, the first line of the first table means that if a file is
in state @samp{A} in the working tree, in state @samp{B} in the index, in state @samp{C} in
@samp{HEAD} and in state @samp{D} in the target, then @samp{git reset --soft target} will
leave the file in the working tree in state @samp{A} and in the index in state
@samp{B}.  It resets (i.e. moves) the @samp{HEAD} (i.e. the tip of the current branch,
if you are on one) to @samp{target} (which has the file in state @samp{D}).

@example
working index HEAD target         working index HEAD
----------------------------------------------------
 A       B     C    D     --soft   A       B     D
                          --mixed  A       D     D
                          --hard   D       D     D
                          --merge (disallowed)
                          --keep  (disallowed)
@end example

@example
working index HEAD target         working index HEAD
----------------------------------------------------
 A       B     C    C     --soft   A       B     C
                          --mixed  A       C     C
                          --hard   C       C     C
                          --merge (disallowed)
                          --keep   A       C     C
@end example

@example
working index HEAD target         working index HEAD
----------------------------------------------------
 B       B     C    D     --soft   B       B     D
                          --mixed  B       D     D
                          --hard   D       D     D
                          --merge  D       D     D
                          --keep  (disallowed)
@end example

@example
working index HEAD target         working index HEAD
----------------------------------------------------
 B       B     C    C     --soft   B       B     C
                          --mixed  B       C     C
                          --hard   C       C     C
                          --merge  C       C     C
                          --keep   B       C     C
@end example

@example
working index HEAD target         working index HEAD
----------------------------------------------------
 B       C     C    D     --soft   B       C     D
                          --mixed  B       D     D
                          --hard   D       D     D
                          --merge (disallowed)
                          --keep  (disallowed)
@end example

@example
working index HEAD target         working index HEAD
----------------------------------------------------
 B       C     C    C     --soft   B       C     C
                          --mixed  B       C     C
                          --hard   C       C     C
                          --merge  B       C     C
                          --keep   B       C     C
@end example

@samp{reset --merge} is meant to be used when resetting out of a conflicted
merge. Any mergy operation guarantees that the working tree file that is
involved in the merge does not have a local change with respect to the index
before it starts, and that it writes the result out to the working tree. So
if we see some difference between the index and the target and also between
the index and the working tree, then it means that we are not resetting out
from a state that a mergy operation left after failing with a conflict. That
is why we disallow @samp{--merge} option in this case.

@samp{reset --keep} is meant to be used when removing some of the last commits in
the current branch while keeping changes in the working tree. If there could
be conflicts between the changes in the commit we want to remove and the
changes in the working tree we want to keep, the reset is disallowed. That’s
why it is disallowed if there are both changes between the working tree and
@samp{HEAD}, and between @samp{HEAD} and the target. To be safe, it is also disallowed
when there are unmerged entries.

The following tables show what happens when there are unmerged entries:

@example
working index HEAD target         working index HEAD
----------------------------------------------------
 X       U     A    B     --soft  (disallowed)
                          --mixed  X       B     B
                          --hard   B       B     B
                          --merge  B       B     B
                          --keep  (disallowed)
@end example

@example
working index HEAD target         working index HEAD
----------------------------------------------------
 X       U     A    A     --soft  (disallowed)
                          --mixed  X       A     A
                          --hard   A       A     A
                          --merge  A       A     A
                          --keep  (disallowed)
@end example

@samp{X} means any state and @samp{U} means an unmerged index.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-restore,,,Top
@chapheading Name

git-restore — 作業ツリーファイルを復元します

@noindent

@chapheading Synopsis

@display
git restore [<options>] [--source=<tree>] [--staged] [--worktree] [--] <pathspec>…
git restore [<options>] [--source=<tree>] [--staged] [--worktree] --pathspec-from-file=<file> [--pathspec-file-nul]
git restore (-p|--patch) [<options>] [--source=<tree>] [--staged] [--worktree] [--] [<pathspec>…]
@end display


@noindent

@chapheading DESCRIPTION

復元ソースからのコンテンツを使用して、作業ツリー内の指定されたパスを復元します。パスが追跡されているが、復元ソースに存在しない場合、復元ソースと一致するように削除されます。

このコマンドを使用して、 @samp{--staged} を使用してインデックスのコンテンツを復元したり、 @samp{--staged--worktree}
を使用して作業ツリーとインデックスの両方を復元したりすることもできます。

デフォルトでは、 @samp{--staged} が指定されている場合、コンテンツは @samp{HEAD}
から復元され、そうでない場合はインデックスから復元されます。別のコミットから復元するには、 @samp{--source} を使用します。

3つのコマンドの違いについては、 git(1) の "Reset, restore and revert" を参照してください。

!!このコマンドは実験的なものです。 動作が変わる可能性があります!!

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-s <tree>} 
@itemx  @samp{--source=<tree>} 
指定のツリーのコンテンツを使用して、作業ツリーファイルを復元します。ソースツリーに関連付けられているコミット、ブランチ、またはタグに名前を付けてソースツリーを指定するのが一般的です。

このオプションを指定しない場合で、 @samp{--staged} が指定されている場合は @samp{HEAD}
から、それ以外の場合はインデックスから内容が復元されます。

特別な場合として、マージベースが1つしかない場合は、 @samp{A} と @samp{B} のマージベースのショートカットとして @samp{A...B} を使用できます。 @samp{A}
と @samp{B} の片方を省略できます。その場合、省略した方はデフォルトで @samp{HEAD} になります。

@item  @samp{-p} 
@itemx  @samp{--patch} 
復元ソースと復元場所の違いでハンクを対話的に選択します。 @samp{--patch} モードの操作方法については、 git-add(1)
の「Interactive Mode」セクションを参照してください。

注意: @samp{--patch} はpathspecを受け入れることができず、変更されたすべてのパスを復元するように求められることに注意してください。

@item  @samp{-W} 
@itemx  @samp{--worktree} 
@itemx  @samp{-S} 
@itemx  @samp{--staged} 
復元場所を指定します。どちらのオプションも指定されていない場合、デフォルトで作業ツリーが復元されます。 @samp{--staged}
を指定すると、インデックスのみが復元されます。両方を指定すると、両方が復元されます。

@item  @samp{-q} 
@itemx  @samp{--quiet} 
静かにします。フィードバックメッセージを抑制します。 @samp{--no-progress} を含んでいます。

@item  @samp{--progress} 
@itemx  @samp{--no-progress} 
@samp{--quiet} が指定されていない限り、進行状況は、端末に接続されている場合、デフォルトで標準エラーストリームに報告されます。このフラグは、
@samp{--quiet} に関係なく、端末に接続されていない場合でも進行状況のレポートを有効にします。

@item  @samp{--ours} 
@itemx  @samp{--theirs} 
作業ツリー内のファイルをインデックスから復元する場合は、マージされていないパスにステージ#2(@emph{ours})または#3(@emph{theirs})を使用します。

注意: @samp{git rebase`と `git pull --rebase}
での作業中、「ours」と「theirs」が入れ替わっているように見える場合があることに注意してください。 詳細については、
git-checkout(1) の同じオプションの説明を参照してください。

@item  @samp{-m} 
@itemx  @samp{--merge} 
作業ツリー上のファイルをインデックスから復元する場合は、マージされていないパスで競合するマージを再作成してください。

@item  @samp{--conflict=<style>} 
上記の @samp{--merge} オプションと同じですが、競合するハンクの表示方法を変更し、 @samp{merge.conflictStyle}
構成変数をオーバーライドします。
可能な値は「merge」(デフォルト)と「diff3」(「merge」スタイルで表示されるものに加えて、元のコンテンツを表示します)です。

@item  @samp{--ignore-unmerged} 
作業ツリー上のファイルをインデックスから復元するときに、マージされていないエントリがあり、 @samp{--ours} 、@samp{--theirs} 、
@samp{--merge} または @samp{--conflict}
のいずれも指定されていない場合は、操作を中止しないでください。作業ツリー上のマージされていないパスはそのままになります。

@item  @samp{--ignore-skip-worktree-bits} 
スパースチェックアウトモード(sparse checkout mode)では、デフォルトでは、 @samp{<pathspec>} に一致するエントリと、
$GIT_DIR/info/sparse-checkout のスパースパターンのみが更新されます。このオプションは、スパースパターンを無視し、
@samp{<pathspec>} 内のすべてのファイルを無条件に復元します。

@item  @samp{--recurse-submodules} 
@itemx  @samp{--no-recurse-submodules} 
@samp{<pathspec>}
がアクティブなサブモジュールを指定し、復元場所に作業ツリーが含まれている場合、このオプションが指定されている場合にのみサブモジュールが更新されます。この場合、その作業ツリーはスーパープロジェクトに記録されたコミットに復元されます。ローカルの変更は上書きされます。何も使用されていない場合(または
@samp{--no-recurse-submodules} の場合)、サブモジュールの作業ツリーは更新されません。
git-checkout(1) と同様に、これはサブモジュールの @samp{HEAD} を切り離します(detach)。

@item  @samp{--overlay} 
@itemx  @samp{--no-overlay} 
オーバーレイモード(overlay mode)では、コマンドは復元時にファイルを削除しません。オーバーレイなしモード(no-overlay
mode)では、 @samp{--source} ツリーに表示されない追跡ファイルが削除され、 @samp{<tree>} と完全に一致するようになります。
デフォルトはオーバーレイなしモード(no-overlay mode)です。

@item  @samp{--pathspec-from-file=<file>} 
pathspecは、コマンドライン引数の代わりに @samp{<file>} で渡されます。 @samp{<file>} が正確に @samp{-}
の場合、標準入力が使用されます。pathspec要素はLFまたはCR/LFで区切られます。pathspec要素は、構成変数
@samp{core.quotePath} で説明されているように引用できます(git-config(1) 参照)。
@samp{--pathspec-file-nul} およびグローバルの @samp{--literal-pathspecs} も参照してください。

@item  @samp{--pathspec-file-nul} 
@samp{--pathspec-from-file}
でのみ意味があります。pathspec要素はNUL文字で区切られ、他のすべての文字は文字通りに解釈されます(改行と引用符を含む)。

@item  @samp{--} 
これより後ろの引数をオプションとして解釈しないでください。

@item  <pathspec>… 
操作の影響を受けるパスを制限します。

詳細については、 gitglossary(7) の「pathspec」エントリを参照してください。
@end table

@noindent

@chapheading EXAMPLES

以下のシーケンスは、 @samp{master} ブランチに切り替え、@samp{Makefile} を2つ前のリビジョンに戻し、誤って hello.c
を削除して、インデックスから戻します。

@example
$ git switch master
$ git restore --source master~2 Makefile  (1)
$ rm -f hello.c
$ git restore hello.c                     (2)
@end example


@table @asis

@item @pxref{CO1-1,,(1)}
別のコミットからファイルを取り出します

@item @pxref{CO1-2,,(2)}
インデックスから hello.c を復元します。
@end table

あなたが、インデックス内のバージョンと一致するように「すべての」Cソースファイルを復元する場合は、以下のように書くことができます。

@example
$ git restore '*.c'
@end example


注意: @samp{*.c} を囲む引用符に注意してください。 ファイル @samp{hello.c}
は、作業ツリーに存在しなくなった場合でも復元されます。これは、ファイルグロブがインデックス内のエントリを照合するために使用されるためです(シェルによる作業ツリー内ではありません)。

現在のディレクトリ内のすべてのファイルを復元するには

@example
$ git restore .
@end example


または、@emph{top} pathspec魔法を使用してすべての作業ツリーファイルを復元します(gitglossary(7) 参照)。

@example
$ git restore :/
@end example


@samp{HEAD} のバージョンと一致するようにインデックス内のファイルを復元するには(これは git-reset(1)
を使用するのと同じです)

@example
$ git restore --staged hello.c
@end example


または、インデックスと作業ツリーの両方を復元できます(これは、 git-checkout(1) を使用する場合と同じです)。

@example
$ git restore --source=HEAD --staged --worktree hello.c
@end example


または、より実用的で読みにくい短い形式:

@example
$ git restore -s@@ -SW hello.c
@end example


@noindent

@chapheading SEE ALSO

git-checkout(1), git-reset(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-rev-list,,,Top
@chapheading Name

git-rev-list — コミットオブジェクトを新しい順に一覧表示します

@noindent

@chapheading Synopsis

@display
git rev-list [<options>] <commit>… [[--] <path>…]
@end display


@noindent

@chapheading DESCRIPTION

指定されたコミットから「親」リンクをたどることによって到達可能なコミットをリストしますが、その前に @emph{^}
が付いているコミットから到達可能なコミットは除外します。デフォルトでは、出力は時系列の逆順で表示されます。

これは集合演算と考えることができます。 コマンドラインで指定されたコミットのいずれかから到達可能なコミットのセットを形成し、 @emph{^}
が前に付いたコミットのいずれかから到達可能なコミットがそのセットから差し引かれます。差し引かれた残りのコミットは、コマンドの出力に出力されるものです。他のさまざまなオプションとパスパラメータ(pats
parameters)を使用して、結果をさらに制限できます。

したがって、以下のコマンド:

@example
$ git rev-list foo bar ^baz
@end example


は、「 @emph{foo} または @emph{bar} から到達可能であるが、 @emph{baz} からは到達できないすべてのコミットをリストする」を意味します。

特別な表記 "@emph{<commit1>}..@emph{<commit2>}" は、 "^@emph{<commit1>} @emph{<commit2>}"
の省略形として使用できます。たとえば、以下のどちらかを同じ意味で使用できます:

@example
$ git rev-list origin..HEAD
$ git rev-list HEAD ^origin
@end example


もう1つの特別な表記法は、マージに役立つ "@emph{<commit1>}…@emph{<commit2>}"
です。結果として得られるコミットのセットは、2つのオペランド間の対称差(symmetric difference)です。以下の2つのコマンドは同等です:

@example
$ git rev-list A B --not $(git merge-base --all A B)
$ git rev-list A...B
@end example


'rev-list’は、コミットの祖先グラフ作成およびトラバースする機能を提供するため、非常に重要なGitコマンドです。 このため、'git
bisect’や'git repack’などのさまざまなコマンドで使用できるようにするさまざまなオプションがあります。

@noindent

@chapheading OPTIONS

@noindent

@heading Commit Limiting

ここで説明されている特別な表記法を使用してリストする必要があるコミットの範囲を指定することに加えて、追加のコミット制限が適用される場合があります。

より多くのオプションを使用すると、通常、出力がさらに制限されます(たとえば、@samp{--since=<date1>`は}<date1>@samp{より新しいコミットに制限され、}--grep=<pattern>@samp{と一緒に使用すると、ログメッセージに}<pattern>`と一致する行があるコミットにさらに制限されます)。

注意: これらは、`--reverse`などのコミット順序およびフォーマットオプションの前に適用されることに注意してください。

@table @asis

@item  @samp{-<number>} 
@itemx  @samp{-n <number>} 
@itemx  @samp{--max-count=<number>} 
出力するコミットの数を制限します。

@item  @samp{--skip=<number>} 
コミット出力の表示を開始する前に、'number’個のコミットをスキップします。

@item  --since=<date> 
@itemx  @samp{--after=<date>} 
指定の日付よりも新しいコミットを表示します。

@item  @samp{--until=<date>} 
@itemx  @samp{--before=<date>} 
指定の日付より古いコミットを表示します。

@item  @samp{--max-age=<timestamp>} 
@itemx  @samp{--min-age=<timestamp>} 
コミット出力を指定された時間範囲に制限します。

@item  @samp{--author=<pattern>} 
@itemx  @samp{--committer=<pattern>} 
コミット出力を、指定されたパターン(正規表現)に一致する作者(author)/コミッター(committer)ヘッダー行を持つものに制限します。複数の
@samp{--author=<pattern>} がある場合、作者が指定されたパターンのいずれかに一致するコミットが選択されます(複数の
@samp{--committer=<pattern>} の場合も同様)。

@item  @samp{--grep-reflog=<pattern>} 
コミット出力を、指定されたパターン(正規表現)に一致するreflogエントリを持つものに制限します。複数の`--grep-reflog`を使用すると、指定されたパターンのいずれかに一致するreflogメッセージを持つコミットが選択されます。`--walk-reflogs`が使用されていない限り、このオプションを使用するとエラーになります。

@item  @samp{--grep=<pattern>} 
コミット出力を、指定されたパターン(正規表現)に一致するログメッセージを持つものに制限します。複数の`--grep=<pattern>@samp{を使用すると、指定されたパターンのいずれかにメッセージが一致するコミットが選択されます(全てに一致するコミットだけを選択したい場合、}--all-match`を参照してください)。

@item  @samp{--all-match} 
コミット出力を、少なくとも1つに一致するものではなく、指定されたすべての`--grep`に一致するものに制限します。

@item  @samp{--invert-grep} 
コミット出力を、`--grep=<pattern>`で指定されたパターンと一致しないログメッセージを持つものに制限します。

@item  @samp{-i} 
@itemx  @samp{--regexp-ignore-case} 
大文字小文字に関係なく、正規表現の制限パターンに一致します。

@item  @samp{--basic-regexp} 
制限パターンを基本正規表現として扱います。これがデフォルトです。

@item  @samp{-E} 
@itemx  @samp{--extended-regexp} 
制限パターンを、デフォルトの基本正規表現の代わりに拡張正規表現として扱います。

@item  @samp{-F} 
@itemx  @samp{--fixed-strings} 
制限パターンを固定文字列として扱います(パターンを正規表現として解釈しないでください)。

@item  @samp{-P} 
@itemx  @samp{--perl-regexp} 
制限パターンをPerl互換の正規表現として扱います。

これらのタイプの正規表現のサポートは、コンパイル時オプションに依存します。Gitが当該のサポート付きでコンパイルされていない場合、このオプションを提供すると、Gitが死にます(die)。

@item  @samp{--remove-empty} 
指定されたパスがツリーから見えなくなったら停止(stop)します。

@item  @samp{--merges} 
マージコミットのみを印刷します。これは`--min-parents=2`とまったく同じです。

@item  @samp{--no-merges} 
複数の親を持つコミットを出力しない。これは`--max-parents=1`とまったく同じです。

@item  @samp{--min-parents=<number>} 
@itemx  @samp{--max-parents=<number>} 
@itemx  @samp{--no-min-parents} 
@itemx  @samp{--no-max-parents} 
量の多少に関わらず、とにかく複数の親コミットがあるコミットのみを表示します。特に、@samp{--max-parents=1`は}--no-merges`と同じであり、@samp{--min-parents=2`は}--merges`と同じです。@samp{--max-parents=0`はすべてのルートコミットを提供し、}--min-parents=3`はすべてのタコ足マージ(octopus
merges)を示します。

@samp{--no-min-parents`と}--no-max-parents`は、これらの制限を(制限なしに)再度リセットします。同等の形式は、@samp{--min-parents=0}(すべてのコミットに0個以上の親があります)および`--max-parents=-1`(マイナスの数は上限がないことを示します)です。

@item  @samp{--first-parent} 
マージコミットを確認したら、最初の親コミットのみを探索します。このオプションは、特定のトピックブランチの進化を表示するときに、より良い概要を提供できます。トピックブランチへのマージは、時々更新されるアップストリームに調整することだけである傾向があり、このオプションを使用すると、そのようなマージによって履歴に取り込まれた個々のコミットを無視できます。

@item  @samp{--not} 
次に現れる`--not`までの間、後続のすべてのリビジョン指定子の'^'プレフィックス(またはその欠如)の意味を逆にします。

@item  @samp{--all} 
‘refs/`内のすべてのrefが`HEAD`とともに、コマンドラインに’<commit>'としてリストされているかのように見せかけます。

@item  @samp{--branches[=<pattern>]} 
‘refs/heads`内のすべてのrefがコマンドラインに’<commit>'としてリストされているかのように見せかけます。@emph{<pattern>'が指定されている場合、ブランチを指定されたシェルグロブ(shell
glob)に一致するものに制限します。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--tags[=<pattern>]} 
‘refs/tags`内のすべてのrefがコマンドラインに’<commit>'としてリストされているかのように見せかけます。@emph{<pattern>'が指定されている場合は、指定されたシェルグロブ(shell
glob)に一致するタグにタグを制限します。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--remotes[=<pattern>]} 
‘refs/remotes`内のすべてのrefがコマンドラインに’<commit>'としてリストされているかのように見せかけます。@emph{<pattern>'が指定されている場合、リモート追跡ブランチを指定されたシェルグロブ(shell
glob)に一致するものに制限します。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--glob=<glob-pattern>} 
シェルグロブ'<glob-pattern>'に一致するすべてのrefがコマンドラインに'<commit>'としてリストされているかのように見せかけます。先頭の’refs/@emph{は、欠落している場合は自動的に先頭に追加されます。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--exclude=<glob-pattern>} 
次の`--all`または`--branches`または`--tags`または`--remotes`または`--glob`が別の方法で考慮する'<glob-pattern>'に一致するrefを含めないでください。このオプションを繰り返すと、次の`--all`または`--branches`または`--tags`または`--remotes`または`--glob`オプションまで除外パターンが蓄積されます(他のオプションまたは引数は、蓄積されたパターンをクリアしません)。

与えられたパターンは、それぞれ`--branches`または`
--tags`または`--remotes`に適用される場合、‘refs/heads`または`refs/tags`または`refs/remotes`で始まるべきではありません。@samp{--glob`または}--all`に適用する場合は、`refs/`で始める必要があります。末尾の’/*'を意図している場合は、明示的に指定する必要があります。

@item  @samp{--reflog} 
reflogsで言及されているすべてのオブジェクトがコマンドラインに`<commit>`としてリストされているかのように見せかけます。

@item  @samp{--alternate-refs} 
代替リポジトリのref先端として言及されているすべてのオブジェクトがコマンドラインにリストされているかのように見せかけます。代替リポジトリは、オブジェクトディレクトリが`objects/info/alternates`で指定されているリポジトリです。インクルードされたオブジェクトのセットは、`core.alternateRefsCommand`などによって変更できます。git-config(1)を参照してください。

@item  @samp{--single-worktree} 
デフォルトでは、作業ツリーが複数ある場合、@samp{--all`と}-reflog`と`--indexed-objects`では、すべての作業ツリーが検査されます(git-worktree(1)を参照)。このオプションは、現在の作業ツリーのみを調べるように強制します。

@item  @samp{--ignore-missing} 
入力に無効なオブジェクト名が含まれている場合、そもそもその不正な入力が行われていないかのように見せかけます。

@item  @samp{--stdin} 
コマンドラインにリストされている'<commit>'に加えて、標準入力からそれらを読み取ります。`--`区切り文字が表示された場合は、コミットの読み取りを停止し、パスの読み取りを開始して結果を制限します。

@item  @samp{--quiet} 
標準出力には何も出力しないでください。この形式は主に、呼び出し元が終了ステータスをテストして、オブジェクトの範囲が完全に接続されているかどうかを確認できるようにすることを目的としています。出力をフォーマットする必要がないため、stdoutを`/dev/null`にリダイレクトするよりも高速です。

@item  @samp{--disk-usage} 
通常の出力を抑制します。代わりに、選択したコミットまたはオブジェクトによってディスク上のストレージに使用されたバイトの合計を出力します。これは、出力が(特に`--use-bitmap-index`を伴った場合)はるかに高速に実行されることを除いて、出力を`git
cat-file --batch-check=@emph{%(objectsize:disk)}`にパイプすることと同じです。"on-disk
storage"の意味する制限については、git-cat-file(1)の`CAVEATS`節を参照してください。

@item  @samp{--cherry-mark} 
@samp{--cherry-pick}（以下を参照）と同様ですが、同等のコミットを省略せずに`=@samp{と印し、同等でないコミットを}+`と印します。

@item  @samp{--cherry-pick} 
コミットの組を対称差(symmetric difference)に制限する場合、「反対側」の別のコミットと同じ変更を導入するコミットを省略します。

たとえば、@samp{A`と`B`の2つのブランチがある場合、それらの片側だけですべてのコミットを一覧表示する通常の方法は、}--left-right`を使用することです(`--left-right`オプションの説明の以下の例を参照してください)。ただし、他のブランチからは(ブランチAと重複しない)厳選されたコミットが表示されます(たとえば、「3rd
onb」はブランチAからチェリーピックされる可能性があります)。このオプションを使用すると、そのようなコミットのペアは出力から除外されます。

@item  @samp{--left-only} 
@itemx  @samp{--right-only} 
リストは、対称差のそれぞれの側でのみコミットします。つまり、@samp{--left-right`で `<}
と印されるのだけか、あるいは`--left-right`で`>`と印されるものだけです。

たとえば、@samp{--cherry-pick --right-only
A...B`は、`A`にある、または`A`のコミットとパッチと同等のコミットを`B`から省略します。つまり、これは`git cherry A
B`からの}+@samp{コミットをリストします。より正確に書くと、}--cherry-pick --right-only
--no-merges`により正確なリストを提供します。

@item  @samp{--cherry} 
`--right-only --cherry-mark
--no-merges`の同義語です。出力を私たちの側のコミットに制限し、フォークされた履歴の反対の側に適用されたものを、`git cherry
upstream mybranch`と同様に`git log --cherry upstream…mybranch`で印するのに役立ちます。

@item  @samp{-g} 
@itemx  @samp{--walk-reflogs} 
コミットの祖先チェーンをたどる代わりに、reflogエントリを最新のものから古いものに移動します。このオプションを使用する場合、除外するコミットを指定することはできません(つまり、'^commit’や'commit1..commit2’や'commit1...commit2’表記は使用できません)。

(明らかな理由で、)@samp{oneline`と`reference`以外の}--pretty`形式では、これにより、出力にreflogから取得された2行の追加情報が含まれます。出力のreflog指定子は、@samp{ref@@@{Nth@}}(@samp{Nth`はreflogの逆時系列インデックス(reverse-chronological
index))または`ref@@@{timestamp@}}(そのエントリのタイムスタンプ付き)として表示されます。表示は下記のいくつかのルールに依存します:

@enumerate 

@item
開始点が @samp{ref@@@{Nth@}} として指定されている場合は、インデックス形式を表示します。

@item
開始点が @samp{ref@@@{now@}} として指定されている場合は、タイムスタンプ形式を表示します。

@item
上記のどちらも使用されていないが、コマンドラインで`--date`が指定されている場合は、`--date`で要求された形式でタイムスタンプを表示します。

@item
それ以外の場合は、インデックス形式を表示します。
@end enumerate

@samp{--pretty =
oneline`では、コミットメッセージの前にこの情報が同じ行に付けられます。このオプションを}--reverse`と組み合わせることはできません。git-reflog(1)も参照してください。

`--pretty=reference`では、この情報はまったく表示されません。

@item  @samp{--merge} 
マージが失敗した後、競合があり、マージするすべてのheadに存在しないファイルに関連(touch)するrefを表示します。

@item  @samp{--boundary} 
除外された境界コミットを出力します。 境界コミットの前には `-`が付いています。

@item  @samp{--use-bitmap-index} 
(使用可能な場合は、)パックビットマップインデックスを使用して、トラバーサルを高速化しようと試みます。`--objects`でトラバースする場合、ツリーとブロブには関連するパスが出力されないことに注意してください。

@item  @samp{--progress=<header>} 
オブジェクトが対称になるときに、stderrに進捗レポートを表示します。`<header>`テキストは、進行状況が更新されるたびに印刷されます。
@end table

@noindent

@heading History Simplification

特定の<path>を変更するコミットなど、履歴の一部のみに関心がある場合があります。ただし、「履歴の簡略化」(History
Simplification)は2つの部分から成ります。履歴を簡略化するためにはさまざまな戦略があるためです。その1つはコミットの選択であり、もう1つはそれを行う方法です。

以下のオプションは、表示するコミットを選択します:

@table @asis

@item  <paths> 
指定された<パス>を変更するコミットが選択されます。

@item  @samp{--simplify-by-decoration} 
いくつかのブランチまたはタグによって参照されるコミットが選択されます。
@end table

注意: 意味のある重要な履歴のために、追加のコミットを表示できることに注意してください。

以下のオプションは、簡略化の実行方法に影響します。

@table @asis

@item  Default mode 
履歴を、ツリーの最終状態を説明する最も単純な履歴に単純化します。最終結果が同じである場合(つまり、同じコンテンツのブランチをマージする場合)、いくつかの傍流ブランチ(side
branches)を削除するため、最も単純です。

@item  @samp{--show-pulls} 
デフォルトモードからのすべてのコミットを含めますが、最初の親へのTREESAMEではなく、後の親へのTREESAMEであるマージコミットも含めます。このモードは、ブランチに変更を「最初に導入した」マージコミットを表示するのに役立ちます。(訳注:TREESAME=pathspecが全く同一であるツリー)

@item  @samp{--full-history} 
デフォルトモードと同じですが、一部の履歴を削除しません。

@item  @samp{--dense} 
選択したコミットのみが表示され、重大で意味のある履歴を持つコミットもいくつか表示されます。

@item  @samp{--sparse} 
簡略化された履歴内のすべてのコミットが表示されます。

@item  @samp{--simplify-merges} 
このマージに寄与する選択されたコミットがないため、結果の履歴からいくつかの不要なマージを削除するための`--full-history`への追加オプション。

@item  @samp{--ancestry-path} 
表示するコミットの範囲が指定されている場合(たとえば、@emph{commit1..commit2’または’commit2 ^commit1})、
@emph{commit1} と @emph{commit2} の間の祖先チェーンに直接存在するコミットのみ、つまり、 @emph{commit1} の子孫であり、
@emph{commit2} の祖先であるコミットを表示します。
@end table

より詳細な説明は以下のとおりです。

<paths> として @samp{foo} を指定したとします。 @samp{foo} !TREESAME
を変更するコミットを呼び出し、残りをTREESAMEと呼びます。( @samp{foo}
のためにフィルタリングされた差分では、それぞれ異なって見えたりたり等しく見えたりします。）

以下、簡略化設定の違いを説明するために、同じ履歴例を使います。このコミットグラフでは、ファイル @samp{foo} をフィルタリングしていると想定しています:

@example
          .-A---M---N---O---P---Q
         /     /   /   /   /   /
        I     B   C   D   E   Y
         \   /   /   /   /   /
          `-------------'   X
@end example


履歴 A---Q の水平線は、各マージの最初の親と見なされます。その各コミットは以下のとおりです:

@itemize 

@item
@samp{I} は最初のコミットであり、ファイル @samp{foo} が内容 “asdf” で存在し、ファイル @samp{quux} は内容 “quux”
で存在します。最初のコミットは空のツリーと比較されるため、@samp{I} は !TREESAME です。

@item
@samp{A} では、 @samp{foo} には “foo” だけが含まれています。

@item
@samp{B} には @samp{A} と同じ変更が含まれています。そのマージ @samp{M} は些細なことであり、したがってすべての親にとって TREESAME です。

@item
@samp{C} は @samp{foo} を変更しませんが、そのマージ @samp{N} はそれを “foobar” に変更するので、どの親にとっても TREESAME
ではありません。

@item
@samp{D} は @samp{foo} を “baz” に設定します。そのマージ @samp{O} は、 @samp{N} と @samp{D} から “foobarbaz”
への文字列を結合します。つまり、どの親にとっても TREESAME ではありません。

@item
@samp{E} は @samp{quux} を “xyzzy” に変更し、そのマージ @samp{P} は文字列を “quuxxyzzy” に結合します。 @samp{P} は
@samp{O} に対して TREESAME ですが、 @samp{E} に対してはそうではありません。

@item
@samp{X} は、新ファイル @samp{side} を追加し、 @samp{Y} がそれを変更した独立したルートコミットです。 @samp{Y} は @samp{X}
へのTREESAMEです。そのマージ @samp{Q} は @samp{P} に @samp{side} を追加し、 @samp{Q} は @samp{P} にはTREESAMEですが、@samp{Y}
に対してはそうではありません。
@end itemize

@samp{rev-list} は、 @samp{--full-history} および/または、( @samp{--parents} または @samp{--children}
を介して)親の書き換えが使用されているかどうかに基づいて、コミットを含めたり除外したりして、履歴を逆方向にウォークスルーします。以下の設定が可能です。

@table @asis

@item  Default mode 
コミットは、どの親に対してもTREESAMEでない場合に含まれます(これは変更できますが、以下の @samp{--sparse}
を参照してください)。コミットがマージであり、一方の親に対するTREESAMEであった場合は、その親のみをフォローします。(TREESAMEの親が複数ある場合でも、そのうちの1つだけをフォローします)。それ以外の場合は、すべての親をフォローします。

これにより、以下のようになります:

@example
          .-A---N---O
         /     /   /
        I---------D
@end example


TREESAMEの親のみに従うルールが利用可能な場合は、 @samp{B} を検討対象から完全に削除したことに注意してください。 @samp{C} は @samp{N}
を介して考慮されましたが、しかしそれはTREESAMEです。ルートコミットは空のツリーと比較されるため、 @samp{I} は !TREESAME です。

親子関係は @samp{--parents} でのみ表示されますが、デフォルトモードで選択されたコミットには影響しないため、親の行を示しました。

@item  @samp{--full-history without parent rewriting} 
このモードは、デフォルトとはある一点で異なります。つまり、いずれかの親に対してTREESAMEであっても、常にマージのすべての親に従います。マージの複数の側にコミットが含まれている場合でも、これはマージ自体が含まれていることを意味するものではありません！
例では以下のようになります。

@example
        I  A  B  N  D  O  P  Q
@end example


@samp{M} は、両方の親にとってTREESAMEであるため、除外されました。 @samp{E} と @samp{C} と @samp{B} をすべて巡りましたが、 @samp{B} だけが
!TREESAME だったので、他は表示されません。

注意:
親の書き換え(rewrite)がないと、コミット間の親子関係について話す(talk)ことは実際には不可能であるため、それらが切断されている(disconnected)ことを示していることに注意してください。

@item  @samp{--full-history with parent rewriting} 
通常のコミットは !TREESAME の場合にのみ含まれます(これは変更できますが、以下の @samp{--sparse} を参照してください)。

マージは常に含まれます。ただし、親リストは書き直されます。各親に沿って、自分自身に含まれていないコミットを削除します。 これにより以下のようになります。

@example
          .-A---M---N---O---P---Q
         /     /   /   /   /
        I     B   /   D   /
         \   /   /   /   /
          `-------------'
@end example


上記を書き直さずに @samp{--full-history} と比較してください。 @samp{E} はTREESAMEであるため削除されましたが、Pの親リストは @samp{E}
の親 @samp{I} を含むように書き直されていることに注意してください。 @samp{C} と @samp{N} および @samp{X} と @samp{Y} と @samp{Q}
についても同じことが起こりました。
@end table

上記の設定に加えて、あなたはTREESAMEが包含に影響を与えるかどうかを変更できます:

@table @asis

@item  @samp{--dense} 
巡ったコミットは、親にとってTREESAMEでない場合に含まれます。

@item  @samp{--sparse} 
巡ったすべてのコミットが含まれます。

@samp{--full-history}
がなくても、これによりマージが単純化されることに注意してください。親の1つがTREESAMEの場合、その1つだけに従うため、マージの反対側を巡ることはありません。

@item  @samp{--simplify-merges} 
最初に、親を書き換えた @samp{--full-history} と同じ方法で履歴グラフを作成します(上記を参照)。

それから、以下のルールに従って、各コミット @samp{C} を最終履歴内の置換 @samp{C'} に単純化します:

@itemize 

@item
@samp{C'} を @samp{C} にセットします。

@item
@samp{C'} の各親 @samp{P} をその簡略化された @samp{P'}
に置き換えます。その過程で、他の親の祖先であるか、ルートである親を削除すると、TREESAMEが空のツリーにコミットされ、重複が削除されますが、TREESAMEであるすべての親を削除しないように注意してください。

@item
この親の書き換え後、 @samp{C'} がルートまたはマージコミット(0または >1 の親を持つ)、境界コミット、または
!TREESAMEである場合、それは残ります。それ以外の場合は、唯一の親に置き換えられます。
@end itemize

この効果は、親の書き換えを使用した @samp{--full-history} と比較することで最もよく示されます。例は以下のようになります:

@example
          .-A---M---N---O
         /     /       /
        I     B       D
         \   /       /
          `---------'
@end example


注意: @samp{--full-history} に対する @samp{N} と @samp{P} と @samp{Q} の主な違いに注意してください:

@itemize 

@item
@samp{N} の親リストは、他の親 @samp{M} の祖先であるため、 @samp{I} が削除されました。それでも、 !TREESAME なので @samp{N} が残りました。

@item
@samp{P} の親リストも同様に @samp{I} が削除されました。 @samp{P} は、親が1つで TREESAMEであるため、完全に削除されました。

@item
@samp{Q} の親リストでは、 @samp{Y} が @samp{X} に簡略化されていました。その後、 @samp{X} はTREESAMEルートであったため、削除されました。 @samp{Q}
は、親が1つで TREESAMEであるため、完全に削除されました。
@end itemize
@end table

利用可能な別の簡略化モードがあります:

@table @asis

@item  @samp{--ancestry-path} 
表示されるコミットを、指定されたコミット範囲内の “from” コミットと “to”
コミットの間の祖先チェーンに直接あるコミットに制限します。つまり、 “to” コミットの祖先であるコミットと “from”
コミットの子孫であるコミットのみを表示します。

ユースケースの例として、以下のコミット履歴について考えます:

@example
            D---E-------F
           /     \       \
          B---C---G---H---I---J
         /                     \
        A-------K---------------L--M
@end example


通常の @emph{D..M} は、 @samp{M} の祖先であるコミットのセットを計算しますが、 @samp{D} の祖先であるコミットは除外します。 これは、「 @samp{M} には
@samp{D} には存在しなかったものがある」という意味で、 @samp{D} 以降の @samp{M`に至るまでの歴史に何が起こったのかを知るのに役立ちます。この例の結果は、
`A} と @samp{B} (そしてもちろん @samp{D} 自体)を除くすべてのコミットになります。

ただし、 @samp{M} のコミットが @samp{D} で入ったバグで汚染されており、修正が必要な場合は、実際には @samp{D} の子孫である @emph{D..M}
のサブセットのみを表示する必要があります。つまり、 @samp{C} と @samp{K} を除外します。これはまさに @samp{--ancestry-path}
オプションが行うことです。これを @emph{D..M} 範囲に適用すると、以下のようになります:

@example
                E-------F
                 \       \
                  G---H---I---J
                               \
                                L--M
@end example

@end table

別のオプション @samp{--show-pulls} について説明する前に、新しいサンプル履歴を作成する必要があります。

簡略化された履歴を見るときにユーザーが直面する一般的な問題は、ファイルを変更したことがわかっているコミットが、ファイルの簡略化された履歴に表示されないことです。そこで、新しい例を示し、その場合に
@samp{--full-history} や @samp{--simplify-merges} などのオプションがどのように機能するかを示しましょう。

@example
          .-A---M-----C--N---O---P
         /     / \  \  \/   /   /
        I     B   \  R-'`-Z'   /
         \   /     \/         /
          \ /      /\        /
           `---X--'  `---Y--'
@end example


この例では、 @samp{I} が @samp{file.txt} を作成し、それが @samp{A} と`B` と @samp{X}
にてさまざまな方法で変更されたとします。ひとり親のコミット @samp{C} と @samp{Z} と @samp{Y} は @samp{file.txt} を変更していません。マージコミット
@samp{M} は、マージの競合を解決して、 @samp{A} と @samp{B}
の両方の変更を含めることによって作成されたため、どちらにもTREESAMEではありません。ただし、マージコミット @samp{R} は、 @samp{M} の
@samp{file.txt`の内容を無視し、 `X} の @samp{file.txt} の内容のみを取得することによって作成されました。 したがって、 @samp{R} は
@samp{X} へのTREESAMEですが、 @samp{M} はそうではありません。最後に、 @samp{N} を作成するための自然なマージ解決は、 @samp{R} で
@samp{file.txt} の内容を取得することです。したがって、 @samp{N} は @samp{C} ではなく @samp{R} へのTREESAMEです。マージコミット @samp{O} と
@samp{P} は、最初の親にはTREESAMEですが、2番目の親である @samp{Z} と @samp{Y} にはついてはそうではありません。

デフォルトモードを使用する場合、 @samp{N} と @samp{R}
は両方ともTREESAMEの親を持っているため、これらのエッジはウォークされ、他のエッジは無視されます。結果の履歴グラフは以下のとおりです:

@example
        I---X
@end example


@samp{--full-history} を使用する場合、Gitはすべてのエッジを巡ります。これにより、コミット @samp{A} と @samp{B} と マージ @samp{M}
が検出されますが、マージコミット @samp{O} と @samp{P} も明らかになります。 親を書き換えると、結果のグラフは以下のようになります:

@example
          .-A---M--------N---O---P
         /     / \  \  \/   /   /
        I     B   \  R-'`--'   /
         \   /     \/         /
          \ /      /\        /
           `---X--'  `------'
@end example


ここで、マージコミット @samp{O} と @samp{P} は、実際には @samp{file.txt} への変更を提供しなかったため、余分なノイズを提供します。古いバージョンの
@samp{file.txt}
に基づいたトピックのみをマージしました。これは、多くの寄稿者が並行して作業し、トピックブランチを単一のトランクに沿ってマージするワークフローを使用するリポジトリの一般的な問題です。開発に関係のないマージが
@samp{--full-history} の結果に表示されます。

@samp{--simplify-merges} オプションを使用すると、コミット @samp{O} と @samp{P} が結果から消えます。 これは、 @samp{O} と @samp{P}
の書き直された2番目の親が、最初の親から到達可能であるためです。これらのエッジが削除されると、コミットは、親にとってTREESAMEである単一の親のコミットのように見えます。これはコミット
@samp{N} にも発生し、以下のような履歴ビューが表示されます:

@example
          .-A---M--.
         /     /    \
        I     B      R
         \   /      /
          \ /      /
           `---X--'
@end example


このビューでは、 @samp{A} と @samp{B} と @samp{X} からの重要なひとり親の変更がすべて表示されます。また、慎重に解決されたマージ @samp{M}
とそれほど慎重に解決されていないマージ @samp{R} も表示されます。これは通常、コミット @samp{A} と @samp{B}
がデフォルトのビューの履歴から「消えた」理由を判断するのに十分な情報です。ただし、このアプローチにはいくつかの問題があります。

最初の問題はパフォーマンスです。以前のオプションとは異なり、 @samp{--simplify-merges}
オプションでは、単一の結果を返す前にコミット履歴全体をウォークする必要があります。これにより、非常に大規模なリポジトリでこのオプションを使用するのが難しくなる可能性があります。

2番目の問題は監査の1つです。多くの寄稿者が同じリポジトリで作業している場合、どのマージコミットが重要なブランチに変更を導入したかが重要です。上記の問題のあるマージ
@samp{R} は、重要なブランチにマージするために使用されたマージコミットではない可能性があります。 代わりに、マージ @samp{N} を使用して @samp{R} と @samp{X}
を重要なブランチにマージしました。このコミットには、変更 @samp{X} がコミットメッセージの @samp{A} と @samp{B}
からの変更を上書きするようになった理由に関する情報が含まれている可能性があります。

@table @asis

@item  @samp{--show-pulls} 
デフォルトの履歴に表示されるコミットに加えて、最初の親にはTREESAMEではなく、後の親にはTREESAMEである各マージコミットを表示します。

マージコミットが @samp{--show-pulls} に含まれている場合、マージは別のブランチから変更を「プル」したかのように扱われます。この例で
@samp{--show-pulls} を使用すると(他のオプションは使用しない場合、)結果のグラフは行かのようになります:

@example
        I---X---R---N
@end example


ここで、コミット @samp{X} と @samp{R} をそれぞれベースブランチにプルしたため、マージコミット @samp{R} と @samp{N}
が含まれています。これらのマージは、コミット @samp{A} と @samp{B} がデフォルトの履歴に表示されない理由です。

@samp{--show-pulls} が @samp{--simplify-merges} とペアになっている場合、グラフには必要なすべての情報が含まれます:

@example
          .-A---M--.   N
         /     /    \ /
        I     B      R
         \   /      /
          \ /      /
           `---X--'
@end example


@samp{M} は @samp{R} から到達可能であるため、 @samp{N} から @samp{M} へのエッジが単純化されていることに注意してください。ただし、 @samp{N} は、変更
@samp{R} をメインブランチに「プル」したため、重要なコミットとして履歴に表示されます。
@end table

@samp{--simplify-by-decoration}
オプションを使用すると、タグで参照されていないコミットを省略して、履歴のトポロジの全体像のみを表示できます。コミットは、(1)タグによって参照されている場合、または
(2)コマンドラインで指定されたパスの内容を変更した場合に、!TREESAMEとしてマークされます(つまり、上記の履歴簡略化ルールの後に保持されます)。他のすべてのコミットはTREESAMEとしてマークされます(簡略化される可能性があります)。

@noindent

@heading Bisection Helpers

@table @asis

@item  @samp{--bisect} 
含まれるコミットと除外されるコミットのほぼ中間にある1つのコミットオブジェクトに出力を制限します。(存在する場合)bad bisection ref
@samp{refs/bisect/bad} が含まれるコミットに追加され、（存在する場合)good bisection ref
@samp{refs/bisect/good-*} が除外されるコミットに追加されることに注意してください。したがって、 @samp{refs/bisect/}
にrefsがないと仮定すると、

@example
        $ git rev-list --bisect foo ^bar ^baz
@end example


は、2つのコマンドの出力である中間点(midpoint)を出力します

@example
        $ git rev-list foo ^midpoint
        $ git rev-list midpoint ^bar ^baz
@end example


上記は、ほぼ同じ長さになります。 したがって、回帰を導入する変更を見つけることは、バイナリ検索(binary
search)に還元されます。コミットチェーンの長さが1になるまで、新しい中間点(midpoint)を繰り返し生成してテストします。

@item  @samp{--bisect-vars} 
これは、 @samp{refs/bisect/} 内のrefが使用されないこと、およびシェルによって評価される準備ができているテキストを出力することを除いて、
@samp{--bisect} と同じように計算されます。これらの行は、中間点リビジョンの名前を変数 @samp{bisect_rev} に割り当て、
@samp{bisect_rev} が @samp{bisect_nr} にテストされた後にテストされるコミットの予想数、 @samp{bisect_rev} が
@samp{bisect_good`に適していることが判明した場合にテストされるコミットの予想数、 `bisect_rev} が @samp{bisect_bad}
に不適切であることが判明した場合にテストされるコミットの予想数、および現在 @samp{bisect_all} に二等分しているコミットの数です。

@item  @samp{--bisect-all} 
これにより、含まれるコミットと除外されるコミットの間のすべてのコミットオブジェクトが、含まれるコミットと除外されるコミットまでの距離順に出力されます。
@samp{refs/bisect/} のrefは使用されません。それらから最も遠いものが最初に表示されます。(これは @samp{--bisect}
によって表示される唯一のものです。)

これは、何らかの理由(たとえば、コンパイルできない場合など)でそれらの一部をテストすることを避けたい場合に、テストするための適切なコミットを簡単に選択できるため便利です。

このオプションは @samp{--bisect-vars} と一緒に使用できます。この場合、ソートされたすべてのコミットオブジェクトの後に、
@samp{--bisect-vars} が単独で使用された場合と同じテキストが表示されます。
@end table

@noindent

@heading Commit Ordering

デフォルトでは、コミットは新しい順に表示されます。

@table @asis

@item  @samp{--date-order} 
すべての子が表示されるまで親を表示しませんが、それ以外の場合はコミットタイムスタンプの順序でコミットを表示します。

@item  @samp{--author-date-order} 
すべての子が表示されるまで親を表示しませんが、それ以外の場合は、作者(author)のタイムスタンプ順にコミットを表示します。

@item  @samp{--topo-order} 
すべての子が表示されるまで親を表示せず、複数の履歴行が混在するコミットを表示しないようにします。

たとえば、以下のようなコミット履歴があります:

@example
    ---1----2----4----7
        \              \
         3----5----6----8---
@end example


ここで、数字はコミットタイムスタンプの順序を示し、 @samp{gitrev-list} と @samp{--date-order}
のある友達は、タイムスタンプの順序でコミットを示します。つまり、8 7 6 5 4 3 2 1

@samp{--topo-order} を使用すると、8 6 5 3 7 4 2 1（または8 7 4 2 6 5 3
1）が表示されます。2つの並列開発トラックからのコミットが混在して表示されないようにするために、いくつかの古いコミットが新しいコミットの前に表示されます。

@item  @samp{--reverse} 
表示するように選択したコミットを逆の順序で出力します(上記の Commit Limiting 節を参照)。 @samp{--walk-reflogs}
と組み合わせることはできません。
@end table

@noindent

@heading Object Traversal

これらのオプションは、主にGitリポジトリのパッキングを対象としています。

@table @asis

@item  @samp{--objects} 
リストされたコミットによって参照されるオブジェクトのオブジェクトIDを出力します。 したがって、 @samp{--objects foo ^bar}
「コミットオブジェクトが @emph{bar} であるが @emph{foo}
でない場合にダウンロードする必要があるすべてのオブジェクトIDを送ってください」という意味です。

@item  @samp{--in-commit-order} 
ツリーIDとブロブのIDをコミット順に出力します。 ツリーIDとブロブのIDは、コミットによって最初に参照された後に出力されます。

@item  @samp{--objects-edge} 
@samp{--objects} に似ていますが、接頭辞 “-” 文字が付いた除外されたコミットのIDも出力します。これは
git-pack-objects(1)
によって使用され、ネットワークトラフィックを削減するために、これらの除外されたコミットに含まれるオブジェクトに基づいてオブジェクトを削除された形式で記録する「薄い」パック(thin
pack)を構築します。

@item  @samp{--objects-edge-aggressive} 
@samp{--objects-edge}
に似ていますが、時間がかかるという犠牲を払って、除外されたコミットを見つけためにもっともっと頑張ります。これは、@samp{--objects-edge}
の代わりに使用されて浅いリポジトリ(shallow repositories)用の「薄い」パック(thin pack)を構築します。

@item  @samp{--indexed-objects} 
インデックスで使用されるすべてのツリーとブロブがコマンドラインにリストされているかのように見せかけます。 注意: たぶんあなたは一緒に
@samp{--objects} も使用したいと思うでしょう。

@item  @samp{--unpacked} 
@samp{--objects} と一緒の時のみ役立ちます。パックに含まれていないオブジェクトIDを出力します。

@item  @samp{--object-names} 
@samp{--objects} と一緒の時のみ役立ちます。見つかったオブジェクトIDの名前を出力します。これがデフォルトの動作です。

@item  @samp{--no-object-names} 
@samp{--objects} と一緒の時のみ役立ちます。見つかったオブジェクトIDの名前は出力されません。これにより、 @samp{--object-names}
が反転します。 このフラグを使用すると、 git-cat-file(1) などのコマンドで出力をより簡単に解析できます。

@item  @samp{--filter=<filter-spec>} 
@samp{--objectsほげほげ}
のどれかと一緒の時のみ役立ちます。印刷されたオブジェクトのリストからオブジェクト(通常はブロブ)を省略します。@emph{<filter-spec>}
は、以下のいずれかになります:

@emph{--filter=blob:none} の形式では、すべてのブロブが省略されます。

@emph{--filter=blob:limit=<n>[kmg]}
の形式では、nバイトまたは指定の単位より大きいブロブが省略されます。nはゼロの場合があります。
接尾辞kとmとgを使用して、KiBまたはMiBまたはGiBの単位にすることができます。 たとえば、 @emph{blob:limit=1k} は
@emph{blob:limit=1024} と同じです。

@emph{--filter=object:type=(tag|commit|tree|blob)}
の形式では、要求されたタイプではないすべてのオブジェクトが省略されます。

@emph{--filter=sparse:oid=<blob-ish>} の形式は、ブロブ(またはブロブ式) @emph{<blob-ish>}
に含まれるsparse-checkout仕様を使用して、 要求されたrefsでsparse checkoutに必要のないブロブを省略します。

@emph{--filter=tree:<depth>} の形式は、ルートツリーからの深さが >= <depth>
(オブジェクトがトラバースされたコミットの複数の深さにある場合の最小深さ)であるすべてのブロブとツリーを省略します。 <depth>=0
は、コマンドライン(または --stdin が使用されている場合は標準入力)に明示的に含まれていない限り、ツリーやブロブを含みません。
<depth>=1 は、 <commit>
から到達可能なコミットまたは明示的に指定されたオブジェクトによって直接参照されるツリーとブロブのみが含まれます。 <depth>=2 は
<depth>=1 に似ていますが、明示的に指定されたコミットまたはツリーから削除されたもう1つのレベルのツリーとブロブも含まれます。

注意: ファイルシステム上の任意のパスから読み取れる形式である @emph{--filter=sparse:path=<path>}
は、セキュリティ上の理由から削除されたことに注意してください。

複数の @emph{--filter=}
フラグを指定して、フィルターを組み合わせることができます。指定の全てのフィルターで受け入れられるオブジェクトのみが含まれます。

@emph{--filter=combine:<filter1>+<filter2>+…<filterN>}
の形式を使用して、複数のフィルターを組み合わせることができますが、これは @emph{--filter}
フラグを繰り返すよりもずっとずっと難しく、通常は必要はありません。フィルタは @emph{+} で結合され、個々のフィルタは %
エンコードされます(つまり、URLエンコードされます)。 @emph{+} と @emph{%}
文字に加えて、次の文字は予約されており、エンコードする必要があります: @samp{~!@@#$^&*()[]@{@}\;",<>?}@samp{'`}
およびASCIコード @samp{0x20} 以下の全ての文字(空白(space)と改行(newline)を含む)。

他の任意の文字もエンコードできます。 たとえば、 @emph{combine:tree:3+blob:none} と
@emph{combine:tree%3A3+blob%3Anone} は同等です。

@item  @samp{--no-filter} 
以前の @samp{--filter=} 引数をすべてオフにします。

@item  @samp{--filter-provided-objects} 
明示的に提供されたオブジェクトのリストをフィルタリングします。そうしないと、どのフィルターとも一致しなくても常に出力されます。 @samp{--filter=}
と一緒に使った時のみ役に立ちます。

@item  @samp{--filter-print-omitted} 
@samp{--filter=} と一緒の時のみ役立ちます。フィルタによって省略されたオブジェクトのリストを出力します。オブジェクトIDの前には “~”
文字が付いています。

@item  @samp{--missing=<missing-action>} 
将来の「部分クローン」(partial clone)開発に役立つデバッグオプション。このオプションは、欠落しているオブジェクトの処理方法を指定します。

@emph{--missing=error} の形式は、欠落しているオブジェクトが検出された場合に、rev-list
がエラーで停止することを要求します。これがデフォルトのアクションです。

@emph{--missing=allow-any}
の形式を使用すると、欠落しているオブジェクトが検出された場合でも、オブジェクトの走査を続行できます。欠落しているオブジェクトは、結果から黙って省略されます。

@emph{--missing=allow-promisor} の形式は @emph{allow-any} に似ていますが、オブジェクトのトラバーサルは、 EXPECTED
promisor が欠落しているオブジェクトに対してのみ続行できます。予期しない欠落したオブジェクトはエラーを発生させます。

@emph{--missing=print} の形式は @emph{allow-any}
に似ていますが、欠落しているオブジェクトのリストも出力します。オブジェクトIDの前には “?” 文字が付いています。

@item  @samp{--exclude-promisor-objects} 
(内部使用のみ。) promisor境界でのオブジェクトトラバーサルをプレフィルターします。これは部分クローン(partial
clone)で使用されます。これは、欠落しているオブジェクトに関するエラーを単に黙らせるのではなく、トラバーサルを制限するため、
@samp{--missing=allow-promisor} よりも強力です。

@item  @samp{--unsorted-input} 
コミット時間で時系列の逆順に並べ替えるのではなく、コマンドラインで指定された順序でコミットを表示します。@samp{--no-walk} または
@samp{--no-walk=sorted} と組み合わせることはできません。

@item  @samp{--no-walk[=(sorted|unsorted)]} 
指定されたコミットのみを表示し、祖先をトラバースしない。範囲が指定されている場合、これは効果がありません。引数 @samp{unsorted}
が指定されている場合、コミットはコマンドラインで指定された順序で表示されます。それ以外の場合( @samp{sorted}
または引数が指定されていない場合)、コミットはコミット時間の逆順に表示されます。 @samp{--graph} と組み合わせることはできません。 @samp{sorted}
または引数が指定されていない場合、 @samp{--unsorted-input} と組み合わせることはできません。

@item  @samp{--do-walk} 
以前の @samp{--no-walk} を上書きします。
@end table

@noindent

@heading Commit Formatting

これらのオプションを使用すると、 git-rev-list(1) より専門的なコミットログツールのファミリーである
git-log(1) や git-show(1) や  git-whatchanged(1)
と同様に機能します。

@table @asis

@item  @samp{--pretty[=<format>]} 
@itemx  @samp{--format=<format>} 
コミットログの内容を指定された形式できれいに印刷(pretty-print)します。 @emph{<format>} は
oneline・short・medium・full・fuller・reference・email・raw・format:<string>・tformat:<string>
のいずれかになります。 @emph{<format>} が上記のいずれでもなく、 @emph{%placeholder} が含まれている場合、
@emph{--pretty=tformat:<format>} が指定されたかのように動作します。

各フォーマットの詳細については、 "PRETTY FORMATS" セクションを参照してください。 @emph{=<format>}
の部分を省略すると、デフォルトで @emph{medium} になります。

注意: リポジトリー構成でデフォルトのpretty formatを指定できます(git-config(1) 参照)。

@item  @samp{--abbrev-commit} 
40バイトの16進コミットオブジェクト名全体を表示する代わりに、オブジェクトに一意の名前を付けるプレフィックスを表示します。
"--abbrev=<n>" (表示されている場合はdiff出力も変更します)オプションを使用して、プレフィックスの最小長を指定できます。

これにより、80桁幅の端末を使用している人にとって "--pretty=oneline" がずっと読みやすくなるはずです。

@item  @samp{--no-abbrev-commit} 
完全な40バイトの16進コミットオブジェクト名を表示します。 これにより、明示的または "--oneline"
などの他のオプションによって暗黙的に示される @samp{--abbrev-commit} が無効になります。また、 @samp{log.abbrevCommit}
変数をオーバーライドします。

@item  @samp{--oneline} 
これは、 "--pretty=oneline --abbrev-commit" を一緒に使用するための省略形です。

@item  @samp{--encoding=<encoding>} 
コミットオブジェクトは、ログメッセージに使用される文字エンコードをエンコードヘッダーに記録します。このオプションを使用して、ユーザーが好むエンコーディングでコミットログメッセージを再コーディングするようにコマンドに指示できます。配管以外のコマンドの場合、これはデフォルトでUTF-8になります。オブジェクトが
@samp{X} でエンコードされていると主張し、 @samp{X}
で出力している場合、オブジェクトをそのまま出力することに注意してください。これは、元のコミットの無効なシーケンスが出力にコピーされる可能性があることを意味します。同様に、
iconv(3) コミットの変換に失敗した場合、警告とともに元のオブジェクトをそのまま出力します。

@item  @samp{--expand-tabs=<n>} 
@itemx  @samp{--expand-tabs} 
@itemx  @samp{--no-expand-tabs} 
出力に表示する前に、ログメッセージでタブ展開を実行します(タブ幅を <n> とみなして <n> 境界に揃うように空白で調整する)。
@samp{--expand-tabs} は @samp{--expand-tabs=8} の省略形であり、 @samp{--no-expand-tabs} は
@samp{--expand-tabs=0} の省略形です。タブの展開を無効にします。

デフォルトでは、タブはログメッセージを4つのスペースでインデントするきれいな形式(pretty formats)で展開されます(つまり、デフォルトの
@emph{medium} と’full' と @emph{fuller})。

@item  @samp{--show-signature} 
署名を @samp{gpg --verify} に渡して、署名されたコミットオブジェクトの有効性を確認し、出力を表示します。

@item  @samp{--relative-date} 
@samp{--date=relative} と同じ。

@item  @samp{--date=<format>} 
@samp{--pretty} を使用する場合など、人間が読める形式で表示される日付に対してのみ有効になります。 @samp{log.date} 構成変数(config
variable)は、logコマンドの @samp{--date}
オプションのデフォルト値を設定します。デフォルトでは、日付は元のタイムゾーン(コミッターの、または作者のいずれか)で表示されます。フォーマットに
@samp{-local} が追加されている場合(例: @samp{iso-local} )、代わりにユーザーのローカルタイムゾーンが使用されます。

@samp{--date=relative} は、現在の時刻を基準にした日付を示します。例: “2 hours ago” 。 @samp{-local} オプションは
@samp{--date = relative} には効果がありません。

@samp{--date=local} は @samp{--date=default-local} のエイリアスです。

@samp{--date=iso} (または @samp{--date=iso8601} )は、タイムスタンプをISO 8601のような形式で表示します。厳密なISO
8601形式との違いは以下のとおりです:

@itemize 

@item
@samp{T} 日付/時刻区切り文字の代わりにスペース

@item
時間とタイムゾーンの間のスペース

@item
タイムゾーンの時間と分の間にコロンがありません
@end itemize

@samp{--date=iso-strict} (または @samp{--date=iso8601-strict} )は、タイムスタンプを厳密なISO
8601形式で表示します。

@samp{--date=rfc} (または @samp{--date=rfc2822} )は、RFC
2822形式のタイムスタンプを示します。これは、電子メールメッセージでよく見られます。

@samp{--date=short} は、日付のみを表示し、時刻は表示せず、 @samp{YYYY-MM-DD} 形式で表示します。

@samp{--date=raw} は、エポック(1970-01-01 00:00:00 UTC)からの秒数、スペース、UTCからのオフセット(@samp{+} または
@samp{-} の付いた4桁数字で、最初の2つは時間、次の2つは分です)。つまり、タイムスタンプが @samp{strftime("%s %z")}
でフォーマットされているかのようになります。 @samp{-local}
オプションは、seconds-since-epoch値(常にUTCで測定されます)には影響しませんが、付随するタイムゾーン値を切り替えることに注意してください。

@samp{--date=human}
は、タイムゾーンが現在のタイムゾーンと一致しない場合はタイムゾーンを表示し、一致する場合は日付全体を印刷しません(つまり、「今年」の日付の場合は年の印刷をスキップしますが、何があったか覚えてるような過去数日については日付自体もスキップします)。
古い日付の場合、時と分も省略されます。

@samp{--date=unix} は、日付をUnixエポックタイムスタンプ(1970年からの秒数)として表示します。 @samp{--raw}
と同様に、これは常にUTCであるため、 ` -local` は効果がありません。

@samp{--date=format:...} は、内部で処理される%zと%Zを除いて、フォーマット @samp{...} をあなたのシステムの @samp{strftime}
に送ります。 @samp{--date=format:%c}
を使用して、システムロケールの推奨形式で日付を表示します。フォーマットプレースホルダーの完全なリストについては、 @samp{strftime}
マニュアルを参照してください。 @samp{-local} を使用する場合、正しい構文は @samp{--date=format-local:...} です。

@samp{--date=default} はデフォルトの形式であり、いくつかの例外を除いて @samp{--date=rfc2822} に似ています:

@itemize 

@item
曜日の後にコンマはありません

@item
ローカルタイムゾーンを使用する場合、タイムゾーンは省略されます
@end itemize

@item  @samp{--header} 
コミットの内容をraw形式で出力します。各レコードはNUL文字で区切られます。

@item  @samp{--no-commit-header} 
"commit" を含むヘッダー行と、指定された形式の前に出力されたオブジェクトIDを抑制します。これは組み込みフォーマットには影響しません。
カスタムフォーマットのみが影響を受けます。

@item  @samp{--commit-header} 
以前の @samp{--no-commit-header} を上書きします。

@item  @samp{--parents} 
コミットの親も出力します( "commit parent…" の形式で)。親の書き換えも可能にします。上記の @emph{History
Simplification} 参照してください。

@item  @samp{--children} 
コミットの子も出力します( "commit child…" の形式で)。親の書き換えも可能にします。上記の @emph{History
Simplification} を参照してください。

@item  @samp{--timestamp} 
生のコミットタイムスタンプを出力します。

@item  @samp{--left-right} 
対称差のどちら側からコミットに到達できるかをマークします。左側からのコミットには`<@samp{が付けられ、右側からのコミットには
`>`が付けられます。}--boundary`と組み合わせると、それらのコミットの前に`-`が付きます。

たとえば、以下のトポロジーの場合:

@example
             y---b---b  branch B
            / \ /
           /   .
          /   / \
         o---x---a---a  branch A
@end example


以下のような出力が得られます:

@example
        $ git rev-list --left-right --boundary --pretty=oneline A...B

        >bbbbbbb... 3rd on b
        >bbbbbbb... 2nd on b
        <aaaaaaa... 3rd on a
        <aaaaaaa... 2nd on a
        -yyyyyyy... 1st on b
        -xxxxxxx... 1st on a
@end example


@item  @samp{--graph} 
出力の左側に、コミット履歴のテキストベースのグラフィック表現を描画します。グラフ履歴を適切に描画するために、コミットの間に余分な行が出力される可能性があります。
@samp{--no-walk} と組み合わせることはできません。

これにより、親の書き換えが可能になります。上記の @emph{History Simplification} を参照してください。

これは、デフォルトで @samp{--topo-order} オプションを意味しますが、 @samp{--date-order} オプションも指定できます。

@item  @samp{--show-linear-break[=<barrier>]} 
--graph
を使用しない場合、すべての履歴ブランチがフラット化されるため、2つの連続するコミットが線形ブランチに属していないことがわかりにくくなる可能性があります。このオプションは、その場合、それらの間に障壁を置きます。
@samp{<barrier>} が指定されている場合、デフォルトの障壁文字列の代わりに @samp{<barrier>} が表示されます。

@item  @samp{--count} 
リストされたコミットの数を示す数値を出力し、他のすべての出力を抑制します。 @samp{--left-right}
と一緒に使用する場合は、代わりに、タブで区切って、左右のコミットのカウントを出力します。 @samp{--cherry-mark}
と一緒に使用する場合は、これらのカウントからパッチの同等のコミットを省略し、タブで区切られた同等のコミットのカウントを出力します。
@end table

@noindent

@chapheading PRETTY FORMATS

コミットがマージであり、 pretty-format が @emph{oneline} または @emph{email} または @emph{raw} でない場合、
@emph{Author:} 行の前に追加の行が挿入されます。この行は "Merge: "
で始まり、先祖のコミットのハッシュがスペースで区切られて出力されます。履歴の表示を制限している場合、たとえば、特定のディレクトリまたはファイルに関連する変更のみに関心がある場合、リストされたコミットは必ずしも
@strong{直接} の親コミットのリストではない可能性があることに注意してください。

いくつかの組み込みフォーマットがあります。そして以下で説明するように、 pretty.<name> 構成オプション(config
option)を別のフォーマット名または @emph{format:}
文字列に設定することで、追加のフォーマットを定義できます(git-config(1)
参照)。組み込みフォーマットの詳細は以下のとおりです:

@itemize 

@item
@emph{oneline}

@example
<hash> <title line>
@end example

これは、可能な限りコンパクトになるように設計されています。

@item
@emph{short}

@example
commit <hash>
Author: <author>
@end example

@example
<title line>
@end example

@item
@emph{medium}

@example
commit <hash>
Author: <author>
Date:   <author date>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{full}

@example
commit <hash>
Author: <author>
Commit: <committer>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{fuller}

@example
commit <hash>
Author:     <author>
AuthorDate: <author date>
Commit:     <committer>
CommitDate: <committer date>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{reference}

@example
<abbrev hash> (<title line>, <short author date>)
@end example

この形式は、コミットメッセージ内の別のコミットを参照するために使用され、 @samp{--pretty='format:%C(auto)%h (%s,
%ad)'} と同じです。 デフォルトでは、別の @samp{--date} オプションが明示的に指定されていない限り、日付は @samp{--date=short}
でフォーマットされます。formatプレースホルダーを使用する他の @samp{format:} と同様に、その出力は、 @samp{--decorate} や
@samp{--walk-reflogs} などの他のオプションの影響を受けません。

@item
@emph{email}

@example
From <hash> <date>
From: <author>
Date: <author date>
Subject: [PATCH] <title line>
@end example

@example
<full commit message>
@end example

@item
@emph{mboxrd}

@emph{email} と同様ですが、コミットメッセージの "From " で始まる行(前に0個以上の ">" が付いている)は ">"
でクォートされているため、新しいコミットの開始と混同されることはありません。

@item
@emph{raw}

@emph{raw} 形式は、コミットオブジェクトに格納されているとおりにコミット全体を正確に表示します。とりわけ --abbrev または
--no-abbrev
のどちらが使用されているかに関係なく、ハッシュは完全に表示され、「親」(parents)情報は、移植や履歴の単純化を考慮せずに、真の親のコミットを示します。この形式は、コミットの表示方法に影響しますが、いわゆる
@samp{git log --raw} の差分の表示方法ではありません。生のdiff形式で完全なオブジェクト名を取得するには、 @samp{--no-abbrev}
を使用します。

@item
@emph{format:<string>}

@emph{format:<string>} 形式を使用すると、表示する情報を指定できます。注意: これはprintf書式に少し似ていますが、 @emph{\n}
の代わりに @emph{%n} を使用して改行を取得するという例外に注意してください。

例:  @emph{format:"The author of %h was %an, %ar%nThe title was >>%s<<%n"}
は以下のように表示されます:

@example
The author of fe6e0ee was Junio C Hamano, 23 hours ago
The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<
@end example


さて、以下がプレースホルダー達です:

@itemize 

@item
単一のリテラル文字に展開されるプレースホルダー:

@table @asis

@item  @emph{%n} 
改行(newline)

@item  @emph{%%} 
'%'そのもの

@item  @emph{%x00} 
16進数のバイト値を出力
@end table

@item
うしろのプレースホルダーのフォーマッティングに影響するプレースホルダー:

@table @asis

@item  @emph{%Cred} 
赤色に切り替える

@item  @emph{%Cgreen} 
緑色に切り替える

@item  @emph{%Cblue} 
青色に切り替える。

@item  @emph{%Creset} 
色をリセットする

@item  @emph{%C(…)} 
git-config(1) の "CONFIGURATION FILE" 節の Values で説明されている色の指定。
デフォルトでは、色はログ出力が有効になっている場合にのみ表示されます（ @samp{color.diff} または ` color.ui` または
@samp{--color`によって、ターミナルに行く場合は前者の `auto} 設定を尊重します)。 @samp{%C(auto,...)} は、 default
の歴史的同義語として受け入れられます(例: @samp{%C(auto,red)})。 @samp{%C(always,...)}
を指定すると、色が有効になっていない場合でも色が表示されます(この形式やgitが色付けする可能性のある他のすべてのものを含め、出力全体の色を有効にするために
@samp{--color = always} の使用を検討してください)。 @samp{auto} のみ(つまり、 @samp{%C(auto)}
)は、色が再び切り替わるまで、続くプレースホルダーで自動色付けをオンにします。

@item  @emph{%m} 
左(@samp{<}) または 右(@samp{>}) または 境界 (@samp{-}) の印

@item  @emph{%w([<w>[,<i1>[,<i2>]]])} 
git-shortlog(1) の -w オプションのように、
行の折り返しを切り替えます。

@item  @emph{%<(<N>[,trunc|ltrunc|mtrunc])} 
次のプレースホルダーに少なくともN列を使用させ、
必要に応じて右側にスペースを埋め込みます。オプションで、出力がN列より長い場合は、先頭(ltrunc)または中間(mtrunc)または末尾(trunc)で切り捨てます。注意:
切り捨ては、 N >= 2 でのみ正しく機能することに注意してください。

@item  @emph{%<|(<N>)} 
次のプレースホルダーを少なくともN番目の列まで取得し、
必要に応じて右側にスペースを埋め込みます

@item  @emph{%>(<N>)}, @emph{%>|(<N>)} 
それぞれ @emph{%<(<N>)} 、 @emph{%<|(<N>)} に似ていますが、
左側にスペースが埋め込まれています

@item  @emph{%>>(<N>)}, @emph{%>>|(<N>)} 
@emph{%>(<N>)} 、 @emph{%>|(<N>)} とそれぞれ似ていますが、
次のプレースホルダーが指定されたよりも多くのスペースを取り、その左側にスペースがある場合は、それらのスペースを使用します。

@item  @emph{%><(<N>)}, @emph{%><|(<N>)} 
それぞれ @emph{%<(<N>)} 、 @emph{%<|(<N>)} に似ていますが、
両側にパディングがあります(つまり、テキストが中央に配置されます)
@end table

@item
コミットから抽出された情報に展開するプレースホルダー:

@table @asis

@item  @emph{%H} 
コミットハッシュ

@item  @emph{%h} 
省略されたコミットハッシュ

@item  @emph{%T} 
ツリーハッシュ

@item  @emph{%t} 
省略されたツリーハッシュ

@item  @emph{%P} 
親のハッシュ達

@item  @emph{%p} 
省略された親のハッシュ達

@item  @emph{%an} 
作者名

@item  @emph{%aN} 
作者名( .mailmap に関しては、git-shortlog(1) または
git-blame(1) を参照)

@item  @emph{%ae} 
作者電子メールアドレス

@item  @emph{%aE} 
作者電子メールアドレス(.mailmap に関しては git-shortlog(1) または
git-blame(1) を参照)

@item  @emph{%al} 
作者電子メールアドレスアカウント名(local-part)( @emph{@@} の前の部分)

@item  @emph{%aL} 
作者電子メールアドレスアカウント名(local-part)(@emph{%al} 参照) .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ad} 
作成日(フォーマットに関しては --date= オプション参照)

@item  @emph{%aD} 
作成日 RFC2822形式

@item  @emph{%ar} 
作成日 相対(relative)形式

@item  @emph{%at} 
作成日 UNIXタイムスタンプ形式

@item  @emph{%ai} 
作成日 ISO 8601風形式

@item  @emph{%aI} 
作成日 厳密なISO 8601形式

@item  @emph{%as} 
作成日 短い形式(@samp{YYYY-MM-DD})

@item  @emph{%ah} 
作成日 human形式( git-rev-list(1) の @samp{--date=human}
オプションのようなかんじ)

@item  @emph{%cn} 
コミッター名

@item  @emph{%cN} 
コミッター名( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ce} 
コミッター電子メールアドレス

@item  @emph{%cE} 
コミッター電子メールアドレス(.mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%cl} 
コミッター電子メールアドレスアカウント名(local-part)( @emph{@@} の前の部分)

@item  @emph{%cL} 
コミッター電子メールアドレスアカウント名(local-part)( @emph{%cl} 参照) .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%cd} 
コミッター日付(フォーマットに関しては --date= オプション参照)

@item  @emph{%cD} 
コミッター日付 RFC2822形式

@item  @emph{%cr} 
コミッター日付 相対(relative)形式

@item  @emph{%ct} 
コミッター日付 UNIXタイムスタンプ形式

@item  @emph{%ci} 
コミッター日付 ISO 8601風形式

@item  @emph{%cI} 
コミッター日付 厳密なISO 8601形式

@item  @emph{%cs} 
コミッター日付 短い形式(@samp{YYYY-MM-DD})

@item  @emph{%ch} 
コミッター日付 human形式(git-rev-list(1) の @samp{--date=human}
オプションのようなかんじ)

@item  @emph{%d} 
ref名 git-log(1) の --decorate オプションみたいなの

@item  @emph{%D} 
" (", ")" で囲ってないref名

@item  @emph{%(describe[:options])} 
git-describe(1) のような人間が読める名前。
説明できないコミットの場合は空の文字列。 @samp{describe}
文字列の後には、コロンと0個以上のカンマ区切りオプションを続けることができます。タグが同時に追加または削除されると、説明に一貫性がなくなる可能性があります。

@itemize 

@item
@emph{match=<pattern>}:  "refs/tags/" プレフィックスを除いて、指定された @samp{glob(7)}
パターンに一致するタグのみを考慮します。

@item
@emph{exclude=<pattern>}: "refs/tags/" プレフィックスを除いて、指定された @samp{glob(7)}
パターンに一致するタグを考慮しないでください。
@end itemize

@item  @emph{%S} 
コミットに到達したコマンドラインで指定されたref名
( @samp{git log --source} など)は、 @samp{git log} でのみ機能します

@item  @emph{%e} 
エンコーディング

@item  @emph{%s} 
件名(subject)

@item  @emph{%f} 
ファイル名に適した、サニタイズされた件名

@item  @emph{%b} 
本文(body)

@item  @emph{%B} 
生本文(raw body)(ラップされてない件名と本文)

@item  @emph{%GG} 
署名されたコミットの為のGPSからの生の検証メッセージ

@item  @emph{%G?} 
良い(good)な(有効な)署名の場合は "G" 、
悪い(bad)な署名の場合は "B" 、有効性が不明(unknown)な良い署名の場合は "U" 、期限切れ(eXpired)の良い署名の場合は "X"
、期限切れのキーで作成された良い署名の場合は "Y" 、取り消されたキーによって作成された良い署名の場合は "R"
、署名を確認できない場合(キーの欠落など)は "E" 、署名がない場合は "N" を表示します。

@item  @emph{%GS} 
署名されたコミットの署名者の名前を表示する

@item  @emph{%GK} 
署名されたコミットに署名するために使用されるキーを表示する

@item  @emph{%GF} 
署名されたコミットに署名するために使用されるキーのフィンガープリントを表示する

@item  @emph{%GP} 
署名されたコミットに署名するためにサブキーが使用された
主キーのフィンガープリントを表示します

@item  @emph{%GT} 
署名されたコミットに署名するために使用されるキーの信頼レベル(trust level)を表示します

@item  @emph{%gD} 
reflogセレクター(例:@samp{refs/stash@@@{1@}} or @samp{refs/stash@@@{2 minutes ago@}})
この形式は、 @samp{-g} オプションで説明されている規則に従います。 @samp{@@} の前の部分は、コマンドラインで指定されたrefnameです(したがって、
@samp{git log -g refs/heads/master} は @samp{refs/heads/master@@@{0@}} を生成します)。

@item  @emph{%gd} 
短縮されたreflogセレクター。 @samp{%gD} と同じですが、
人間が読みやすいようにrefname部分が短縮されています(したがって、 @samp{refs/heads/master} は単に @samp{master}
になります)。

@item  @emph{%gn} 
reflog ID名

@item  @emph{%gN} 
reflog ID名( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ge} 
reflog ID 電子メールアドレス

@item  @emph{%gE} 
reflog ID 電子メールアドレス( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%gs} 
reflog 件名

@item  @emph{%(trailers[:options])} 
git-interpret-trailers(1) によって解釈されるようにボディのトレーラーを表示します。
@samp{trailers}
文字列の後には、コロンと0個以上のカンマ区切りオプションを続けることができます。いずれかのオプションが複数回提供された場合、それぞれ最後のものが優先されます。

ブール値オプションは、オプションの値 @samp{[=<BOOL>]} を受け入れます。 値 @samp{true} 、@samp{false} 、 @samp{on} 、@samp{off}
などはすべて受け入れられます。 git-config(1) の "EXAMPLES" の "boolean"
サブセクションを参照してください。ブール値オプションが値なしで指定された場合、それは有効を指定した事になります。

@itemize 

@item
@emph{key=<K>}
は指定されたキーを持つトレーラーのみを表示します。マッチングは大文字と小文字を区別せずに行われ、末尾のコロンはオプションです。オプションが複数回指定されている場合、いずれかのキーに一致するトレーラー行が表示されます。このオプションは自動的に
@samp{only} オプションを有効にして、トレーラーブロック内の非トレーラー行が非表示になるようにします。それが望ましくない場合は、
@samp{only=false} で無効にすることができます。 たとえば、 @samp{%(trailers:key=Reviewed-by)} は、キーが
`Reviewed-by`のトレーラー行を表示します。

@item
@emph{only[=<BOOL>]} はトレーラーブロックに非トレーラー行を含めるかどうかを選択します。

@item
@emph{separator=<SEP>}
はトレーラー行の間に挿入される区切り文字を指定します。このオプションが指定されていない場合、各トレーラー行は改行文字で終了します。文字列SEPには、上記のリテラルフォーマットコードが含まれる場合があります。区切り文字としてコンマを使用するには、次のオプションとして解析されないよう
@samp{%x2C} を使用する必要があります。 たとえば、 %(trailers:key=Ticket,separator=%x2C )` は、キーが
"Ticket" であるすべてのトレーラー行をカンマとスペースで区切って表示します。

@item
@emph{unfold[=<BOOL>]} は interpret-trailer の @samp{--unfold}
オプションが指定されたかのように動作させます。たとえば、 @samp{%(trailers:only,unfold=true)}
が展開され、すべてのトレーラー行が表示されます。

@item
@emph{keyonly[=<BOOL>]} トレーラーのキー部分のみを表示。

@item
@emph{valueonly[=<BOOL>]} トレーラーの値部分のみ表示。

@item
@emph{key_value_separator=<SEP>}
トレーラー行の間に挿入される区切り文字を指定します。このオプションが指定されていない場合、各トレーラーのキーと値のペアは ": " で区切られます。
それ以外の場合は、上記の @emph{separator=<SEP>} と同じセマンティクスを共有します。
@end itemize
@end table
@end itemize
@end itemize

@quotation

@strong{Note}

一部のプレースホルダーは、リビジョントラバーサルエンジンに指定された他のオプションに依存する場合があります。 たとえば、 @samp{%g*}
reflogオプションは、reflogエントリをトラバースしない限り(たとえば、 @samp{git log
-g`によって)空の文字列を挿入します。コマンドラインで `--decorate} がまだ指定されていない場合、 @samp{%d} と @samp{%D}
プレースホルダーは「短い」(short)装飾形式を使用します。
@end quotation

プレースホルダーの @emph{%} の後に @samp{+}
(プラス記号)を追加すると、プレースホルダーが空でない文字列に展開される場合に限り、展開の直前に改行が挿入されます。

プレースホルダーの @emph{%} の後に @samp{-}
(マイナス記号)を追加すると、プレースホルダーが空の文字列に展開された場合にのみ、展開の直前の連続するすべての改行が削除されます。

プレースホルダーの @emph{%} の後に ` `
(スペース)を追加すると、プレースホルダーが空でない文字列に展開される場合に限り、展開の直前にスペースが挿入されます。

@itemize 

@item
@emph{tformat:}

@emph{tformat:} 形式は、 "separator" セマンティクスの代わりに "terminator" セマンティクスを提供することを除いて、
@emph{format:} とまったく同じように機能します。
つまり、各コミットには、エントリ間に区切り文字を配置するのではなく、メッセージターミネータ文字(通常は改行)が追加されます。
これは、「1行」形式と同様に、1行形式の最終エントリが新しい行で適切に終了することを意味します。 例えば:

@example
$ git log -2 --pretty=format:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973 -- NO NEWLINE

$ git log -2 --pretty=tformat:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973
@end example


加えて、 @samp{%} が含まれている認識されない文字列は、その前に @samp{tformat:} があるかのように解釈(interpret)されます。
たとえば、以下の2つは同等です:

@example
$ git log -2 --pretty=tformat:%h 4da45bef
$ git log -2 --pretty=%h 4da45bef
@end example

@end itemize

@noindent

@chapheading EXAMPLES

@itemize 

@item
現在のブランチから到達可能なコミットのリストを出力します。

@example
git rev-list HEAD
@end example


@item
このブランチのコミットのリストを出力しますが、アップストリームブランチのは表示しません。

@example
git rev-list @@@{upstream@}..HEAD
@end example


@item
作者(author)とコミットメッセージを使用してコミットをフォーマットします(磁器コマンドのgit-log(1)も参照)。

@example
git rev-list --format=medium HEAD
@end example


@item
コミットとその差分をフォーマットします(これを単一のプロセスで実行できる磁器コマンドのgit-log(1)も参照してください)。

@example
git rev-list HEAD |
git diff-tree --stdin --format=medium -p
@end example


@item
現在のブランチで、`Documentation`ディレクトリ内のファイルに関連(touch)したコミットのリストを出力します。

@example
git rev-list HEAD -- Documentation/
@end example


@item
任意のブランチ・タグ・@uref{mailto:他のrefから過去1年間に作者you@@example.comが作成したコミットのリストを出力します,他のrefから過去1年間に作者you@@example.comが作成したコミットのリストを出力します}。

@example
git rev-list --author=you@@example.com --since=1.year.ago --all
@end example


@item
現在のブランチから到達可能なオブジェクトのリストを出力します(つまり、すべてのコミットと、それらに含まれるブロブとツリー)。

@example
git rev-list --objects HEAD
@end example


@item
到達可能なすべてのオブジェクトのディスクサイズ、reflogから到達可能なオブジェクト、およびパックされた合計サイズを比較します。これにより、`git
repack
-ad`を実行すると(到達不能なオブジェクトを削除することで)リポジトリのサイズが減少するかどうか、およびreflogの有効期限が切れる(expire)ことによってリポジトリのサイズ減少に役立つかどうかがわかります。

@example
# reachable objects
git rev-list --disk-usage --objects --all
# plus reflogs
git rev-list --disk-usage --objects --all --reflog
# total disk size used
du -c .git/objects/pack/*.pack .git/objects/??/*
# alternative to du: add up "size" and "size-pack" fields
git count-objects -v
@end example


@item
現在のブランチで使用されているオブジェクトを除いて、各ブランチのディスクサイズを報告します。
これにより、リポジトリサイズの肥大化の原因となっているイレギュラー値を見つけることができます(たとえば、誰かが誤って大きなビルドアーティファクトをコミットしたためとか)。

@example
git for-each-ref --format='%(refname)' |
while read branch
do
        size=$(git rev-list --disk-usage --objects HEAD..$branch)
        echo "$size $branch"
done |
sort -n
@end example


@item
(別のグループを除いた)refsの単一のグループのブランチのディスク上のサイズを比較します。1つのリポジトリに複数のリモートからのオブジェクトを混在させる場合、これにより、リポジトリ内で、どのリモートがどれだけ占めているかを示すことができます(`origin`のサイズを基準値として使用)。

@example
git rev-list --disk-usage --objects --remotes=$suspect --not --remotes=origin
@end example

@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-rev-parse,,,Top
@chapheading Name

git-rev-parse — Pick out and massage parameters

@noindent

@chapheading Synopsis

@display
git rev-parse [<options>] <args>…
@end display


@noindent

@chapheading DESCRIPTION

Many Git porcelainish commands take mixture of flags (i.e. parameters that
begin with a dash @emph{-}) and parameters meant for the underlying @emph{git
rev-list} command they use internally and flags and parameters for the other
commands they use downstream of @emph{git rev-list}.  This command is used to
distinguish between them.

@noindent

@chapheading OPTIONS

@noindent

@heading Operation Modes

Each of these options must appear first on the command line.

@table @asis

@item  @samp{--parseopt} 
Use @emph{git rev-parse} in option parsing mode (see PARSEOPT section below).

@item  @samp{--sq-quote} 
Use @emph{git rev-parse} in shell quoting mode (see SQ-QUOTE section below). In
contrast to the @samp{--sq} option below, this mode does only quoting. Nothing
else is done to command input.
@end table

@noindent

@heading Options for --parseopt

@table @asis

@item  @samp{--keep-dashdash} 
Only meaningful in @samp{--parseopt} mode. Tells the option parser to echo out
the first @samp{--} met instead of skipping it.

@item  @samp{--stop-at-non-option} 
Only meaningful in @samp{--parseopt} mode.  Lets the option parser stop at the
first non-option argument.  This can be used to parse sub-commands that take
options themselves.

@item  @samp{--stuck-long} 
Only meaningful in @samp{--parseopt} mode. Output the options in their long form
if available, and with their arguments stuck.
@end table

@noindent

@heading Options for Filtering

@table @asis

@item  @samp{--revs-only} 
Do not output flags and parameters not meant for @emph{git rev-list} command.

@item  @samp{--no-revs} 
Do not output flags and parameters meant for @emph{git rev-list} command.

@item  @samp{--flags} 
Do not output non-flag parameters.

@item  @samp{--no-flags} 
Do not output flag parameters.
@end table

@noindent

@heading Options for Output

@table @asis

@item  @samp{--default <arg>} 
If there is no parameter given by the user, use @samp{<arg>} instead.

@item  @samp{--prefix <arg>} 
Behave as if @emph{git rev-parse} was invoked from the @samp{<arg>} subdirectory of
the working tree.  Any relative filenames are resolved as if they are
prefixed by @samp{<arg>} and will be printed in that form.

This can be used to convert arguments to a command run in a subdirectory so
that they can still be used after moving to the top-level of the
repository.  For example:

@example
prefix=$(git rev-parse --show-prefix)
cd "$(git rev-parse --show-toplevel)"
# rev-parse provides the -- needed for 'set'
eval "set $(git rev-parse --sq --prefix "$prefix" -- "$@@")"
@end example


@item  @samp{--verify} 
Verify that exactly one parameter is provided, and that it can be turned
into a raw 20-byte SHA-1 that can be used to access the object database. If
so, emit it to the standard output; otherwise, error out.

If you want to make sure that the output actually names an object in your
object database and/or can be used as a specific type of object you require,
you can add the @samp{^@{type@}} peeling operator to the parameter.  For example,
@samp{git rev-parse "$VAR^@{commit@}"} will make sure @samp{$VAR} names an existing
object that is a commit-ish (i.e. a commit, or an annotated tag that points
at a commit).  To make sure that @samp{$VAR} names an existing object of any
type, @samp{git rev-parse "$VAR^@{object@}"} can be used.

Note that if you are verifying a name from an untrusted source, it is wise
to use @samp{--end-of-options} so that the name argument is not mistaken for
another option.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Only meaningful in @samp{--verify} mode. Do not output an error message if the
first argument is not a valid object name; instead exit with non-zero status
silently.  SHA-1s for valid object names are printed to stdout on success.

@item  @samp{--sq} 
Usually the output is made one line per flag and parameter.  This option
makes output a single line, properly quoted for consumption by shell.
Useful when you expect your parameter to contain whitespaces and newlines
(e.g. when using pickaxe @samp{-S} with @emph{git diff-*}). In contrast to
the @samp{--sq-quote} option, the command input is still interpreted as usual.

@item  @samp{--short[=length]} 
Same as @samp{--verify} but shortens the object name to a unique prefix with at
least @samp{length} characters. The minimum length is 4, the default is the
effective value of the @samp{core.abbrev} configuration variable (see
git-config(1)).

@item  @samp{--not} 
When showing object names, prefix them with @emph{^} and strip @emph{^}
prefix from the object names that already have one.

@item  @samp{--abbrev-ref[=(strict|loose)]} 
A non-ambiguous short name of the objects name.  The option
core.warnAmbiguousRefs is used to select the strict abbreviation mode.

@item  @samp{--symbolic} 
Usually the object names are output in SHA-1 form (with possible @emph{^}
prefix); this option makes them output in a form as close to the original
input as possible.

@item  @samp{--symbolic-full-name} 
This is similar to --symbolic, but it omits input that are not refs
(i.e. branch or tag names; or more explicitly disambiguating "heads/master"
form, when you want to name the "master" branch when there is an
unfortunately named tag "master"), and show them as full refnames
(e.g. "refs/heads/master").
@end table

@noindent

@heading Options for Objects

@table @asis

@item  @samp{--all} 
Show all refs found in @samp{refs/}.

@item  @samp{--branches[=pattern]} 
@itemx  @samp{--tags[=pattern]} 
@itemx  @samp{--remotes[=pattern]} 
Show all branches, tags, or remote-tracking branches, respectively (i.e.,
refs found in @samp{refs/heads}, @samp{refs/tags}, or @samp{refs/remotes}, respectively).

If a @samp{pattern} is given, only refs matching the given shell glob are shown.
If the pattern does not contain a globbing character (@samp{?}, @samp{*}, or @samp{[}), it
is turned into a prefix match by appending @samp{/*}.

@item  @samp{--glob=pattern} 
Show all refs matching the shell glob pattern @samp{pattern}. If the pattern does
not start with @samp{refs/}, this is automatically prepended.  If the pattern
does not contain a globbing character (@samp{?}, @samp{*}, or @samp{[}), it is turned into
a prefix match by appending @samp{/*}.

@item  @samp{--exclude=<glob-pattern>} 
Do not include refs matching @emph{<glob-pattern>} that the next @samp{--all},
@samp{--branches}, @samp{--tags}, @samp{--remotes}, or @samp{--glob} would otherwise
consider. Repetitions of this option accumulate exclusion patterns up to the
next @samp{--all}, @samp{--branches}, @samp{--tags}, @samp{--remotes}, or @samp{--glob} option (other
options or arguments do not clear accumulated patterns).

The patterns given should not begin with @samp{refs/heads}, @samp{refs/tags}, or
@samp{refs/remotes} when applied to @samp{--branches}, @samp{--tags}, or @samp{--remotes},
respectively, and they must begin with @samp{refs/} when applied to @samp{--glob} or
@samp{--all}. If a trailing @emph{/*} is intended, it must be given
explicitly.

@item  @samp{--disambiguate=<prefix>} 
Show every object whose name begins with the given prefix.  The <prefix>
must be at least 4 hexadecimal digits long to avoid listing each and every
object in the repository by mistake.
@end table

@noindent

@heading Options for Files

@table @asis

@item  @samp{--local-env-vars} 
List the GIT_* environment variables that are local to the repository
(e.g. GIT_DIR or GIT_WORK_TREE, but not GIT_EDITOR).  Only the names of the
variables are listed, not their value, even if they are set.

@item  @samp{--path-format=(absolute|relative)} 
Controls the behavior of certain other options. If specified as absolute,
the paths printed by those options will be absolute and canonical. If
specified as relative, the paths will be relative to the current working
directory if that is possible.  The default is option specific.

This option may be specified multiple times and affects only the arguments
that follow it on the command line, either to the end of the command line or
the next instance of this option.
@end table

The following options are modified by @samp{--path-format}:

@table @asis

@item  @samp{--git-dir} 
Show @samp{$GIT_DIR} if defined. Otherwise show the path to the .git
directory. The path shown, when relative, is relative to the current working
directory.

If @samp{$GIT_DIR} is not defined and the current directory is not detected to
lie in a Git repository or work tree print a message to stderr and exit with
nonzero status.

@item  @samp{--git-common-dir} 
Show @samp{$GIT_COMMON_DIR} if defined, else @samp{$GIT_DIR}.

@item  @samp{--resolve-git-dir <path>} 
Check if <path> is a valid repository or a gitfile that points at a valid
repository, and print the location of the repository.  If <path> is a
gitfile then the resolved path to the real repository is printed.

@item  @samp{--git-path <path>} 
Resolve "$GIT_DIR/<path>" and takes other path relocation variables such as
$GIT_OBJECT_DIRECTORY, $GIT_INDEX_FILE… into account. For example, if
$GIT_OBJECT_DIRECTORY is set to /foo/bar then "git rev-parse --git-path
objects/abc" returns /foo/bar/abc.

@item  @samp{--show-toplevel} 
Show the (by default, absolute) path of the top-level directory of the
working tree. If there is no working tree, report an error.

@item  @samp{--show-superproject-working-tree} 
Show the absolute path of the root of the superproject’s working tree (if
exists) that uses the current repository as its submodule.  Outputs nothing
if the current repository is not used as a submodule by any project.

@item  @samp{--shared-index-path} 
Show the path to the shared index file in split index mode, or empty if not
in split-index mode.
@end table

The following options are unaffected by @samp{--path-format}:

@table @asis

@item  @samp{--absolute-git-dir} 
Like @samp{--git-dir}, but its output is always the canonicalized absolute path.

@item  @samp{--is-inside-git-dir} 
When the current working directory is below the repository directory print
"true", otherwise "false".

@item  @samp{--is-inside-work-tree} 
When the current working directory is inside the work tree of the repository
print "true", otherwise "false".

@item  @samp{--is-bare-repository} 
When the repository is bare print "true", otherwise "false".

@item  @samp{--is-shallow-repository} 
When the repository is shallow print "true", otherwise "false".

@item  @samp{--show-cdup} 
When the command is invoked from a subdirectory, show the path of the
top-level directory relative to the current directory (typically a sequence
of "../", or an empty string).

@item  @samp{--show-prefix} 
When the command is invoked from a subdirectory, show the path of the
current directory relative to the top-level directory.

@item  @samp{--show-object-format[=(storage|input|output)]} 
Show the object format (hash algorithm) used for the repository for storage
inside the @samp{.git} directory, input, or output. For input, multiple
algorithms may be printed, space-separated.  If not specified, the default
is "storage".
@end table

@noindent

@heading Other Options

@table @asis

@item  @samp{--since=datestring} 
@itemx  @samp{--after=datestring} 
Parse the date string, and output the corresponding --max-age= parameter for
@emph{git rev-list}.

@item  @samp{--until=datestring} 
@itemx  @samp{--before=datestring} 
Parse the date string, and output the corresponding --min-age= parameter for
@emph{git rev-list}.

@item  <args>… 
Flags and parameters to be parsed.
@end table

@noindent

@chapheading SPECIFYING REVISIONS

リビジョンパラメータ @emph{<rev>}
は必ずしもそうとは限りませんが、通常はコミットオブジェクトに名前を付けます。これは、いわゆる「拡張SHA-1」構文を使用します。
オブジェクト名を綴るにはさまざまな方法があります。このリストの終わり近くにリストされているものは、コミットに含まれているツリーとブロブに名前を付けています。

@quotation

@strong{Note}

この文書は、gitで見られる「生の」構文を示しています。シェルおよびその他のUIでは、特殊文字を保護し、単語の分割を回避するために、追加の引用符が必要になる場合があります。
@end quotation

@table @asis

@item  @emph{<sha1>} 例: @emph{dae86e1950b1277e545cee180551750029cfe735}, @emph{dae86e} 
完全なSHA-1オブジェクト名(40バイトの16進文字列)、またはリポジトリ内で一意の先頭のsubstring。例えば
dae86e1950b1277e545cee180551750029cfe735 と dae86e はどちらも、リポジトリ内にオブジェクト名が
dae86e で始まる他のオブジェクトがない場合、全く同じコミットオブジェクトに名前を付けます。

@item  @emph{<describeOutput>} 例: @emph{v1.7.4.2-679-g3bee7fb} 
@samp{git describe}
からの出力。つまり、現在のコミットから最も近いタグ。オプションで、ダッシュ(-)とそのタグ以降現在のコミットが何番目になるかの数が続き、その後にダッシュ(-)、「g」、および省略されたオブジェクト名が続きます。

@item  @emph{<refname>} 例: @emph{master}, @emph{heads/master}, @emph{refs/heads/master} 
シンボリックref名。例えば @emph{master} は通常、 @emph{refs/heads/master} によって参照されるコミットオブジェクトを意味します。
@emph{heads/master} と @emph{tags/master} の両方がある場合は、あなたは @emph{heads/master}
と明示的に言って、どちらを意味するかをGitに伝えることができます。 あいまいな場合、 @emph{<refname>}
は、以下のルールから最初の一致を採ることで明確にします:

@enumerate 

@item
もし @emph{$GIT_DIR/<refname>} が存在するならば、それはあなたが指定した通りのものです(これは通常、@samp{HEAD} と
@samp{FETCH_HEAD} と @samp{ORIG_HEAD} と @samp{MERGE_HEAD} と @samp{CHERRY_PICK_HEAD} のみで役に立ちます)

@item
でなければ @emph{refs/<refname>} が存在すればそれを採用します。

@item
でなければ @emph{refs/tags/<refname>} が存在すればそれを採用します。

@item
でなければ @emph{refs/heads/<refname>} が存在すればそれを採用します。

@item
でなければ @emph{refs/remotes/<refname>} が存在すればそれを採用します。

@item
でなければ @emph{refs/remotes/<refname>/HEAD} が存在すればそれを採用します。

@samp{HEAD} は、作業ツリーの変更に基づいたコミットに名前を付けます。 @samp{FETCH_HEAD} は、最後の @samp{git fetch}
呼び出しでリモートリポジトリからフェッチしたブランチを記録します。 @samp{ORIG_HEAD} は、 @samp{HEAD}
を大幅に移動するコマンドによって作成され、操作前の @samp{HEAD}
の位置を記録します。これにより、ブランチの先端を実行前の状態に簡単に戻すことができます。 @samp{MERGE_HEAD} は、 @samp{git
merge`を実行するときにブランチにマージするコミットを記録します。 `CHERRY_PICK_HEAD} は、 @samp{git cherry-pick}
を実行したときにチェリーピックしているコミットを記録します。

注意: 上記の @emph{refs/*} の場合、 @samp{$GIT_DIR/refs} ディレクトリまたは @samp{$GIT_DIR/packed-refs}
ファイルのいずれかから発生する可能性があることに注意してください。ref名のエンコードは指定されていませんが、一部の出力処理ではUTF-8でref名を想定する場合があるため、UTF-8が推奨されます。
@end enumerate

@item  @emph{@@} 
@emph{@@} 単独では @samp{HEAD} のショートカットを意味します。

@item  @emph{[<refname>]@@@{<date>@}} 例: @emph{master@@@{yesterday@}}, @emph{HEAD@@@{5 minutes ago@}} 
refの後に接尾辞 @emph{@@} が続き、日付指定が中括弧のペアで囲まれています(例: @emph{@{yesterday@}} 、 @emph{@{1 month 2 weeks
3 days 1 hour 1 second ago@}} 、@emph{@{1979-02-26
18:30:00@}})。これは以前の時点でのrefの値を指定します。この接尾辞は、ref名の直後にのみ使用でき、refには既存のログ(@emph{$GIT_DIR/logs/<ref>})が必要です。これは、特定の時点での
@strong{ローカル} refの状態を検索することに注意してください。たとえば、先週ローカルの @emph{master}
ブランチに何があったか、です。特定の時間に行われたコミットを確認する場合は、 @samp{--since} と @samp{--until} を参照してください。

@item  @emph{<refname>@@@{<n>@}} 例: @emph{master@@@{1@}} 
refの後に接尾辞 @emph{@@} が続き、数の指定が中括弧のペアで囲まれている場合(たとえば @emph{@{1@}},
@emph{@{15@}})、そのrefのn個前の値を指定します。たとえば @emph{master@@@{1@}} は @emph{master} の直前の値であり、
@emph{master@@@{5@}} は @emph{master}
の5個前の値です。この接頭辞は、ref名の直後にのみ使用でき、refには既存のログ(@emph{$GIT_DIR/logs/<refname>})が必要です。

@item  @emph{@@@{<n>@}} 例: @emph{@@@{1@}} 
空のref部分で @emph{@@} コンストラクトを使用して、現在のブランチのreflogエントリを取得できます。たとえば、あなたがブランチ @emph{blabla}
を使用している場合、 @emph{@@@{1@}} は @emph{blabla@@@{1@}} と同じ意味になります。

@item  @emph{@@@{-<n>@}} 例: @emph{@@@{-1@}} 
構成 @emph{@@@{-<n>@}} は、現在のブランチ/コミットの前にチェックアウトされた<n>番目のブランチ/コミットを意味します。

@item  @emph{[<branchname>]@@@{upstream@}} 例: @emph{master@@@{upstream@}}, @emph{@@@{u@}} 
ブランチ名の接尾辞 @emph{@@@{upstream@}} (短縮形
@emph{<branchname>@@@{u@}})は、branchnameで指定されたブランチの上部に構築するように設定されているブランチを指します(@samp{branch.<name>.remote}
と @samp{branch.<name>.merge}
によって設定されます)。ブランチ名が欠落してい場合は、デフォルトで現在のブランチ名になります。これらの接尾辞は、大文字で綴る場合にも受け入れられ、大文字と小文字を問わず同じ意味になります。

@item  @emph{[<branchname>]@@@{push@}} 例: @emph{master@@@{push@}}, @emph{@@@{push@}} 
接尾辞 @emph{@@@{push@}} は、 @samp{branchname} がチェックアウトされているときに @samp{git push}
が実行された場合(またはブランチ名が指定されていない場合は現在の @samp{HEAD}
)、「プッシュ先」のブランチを報告します。もちろん、プッシュ先はリモートリポジトリにあるため、そのブランチに対応するローカルトラッキングブランチ(つまり、
@samp{refs/remotes/} 内の何か)を報告します。

ここで、よりはっきり分かる例を以下に示します:

@example
$ git config push.default current
$ git config remote.pushdefault myfork
$ git switch -c mybranch origin/master

$ git rev-parse --symbolic-full-name @@@{upstream@}
refs/remotes/origin/master

$ git rev-parse --symbolic-full-name @@@{push@}
refs/remotes/myfork/mybranch
@end example


注意: この例では、ある場所からプルして別の場所にプッシュする三角形のワークフローを設定していることに注意してください。非三角形のワークフローでは、
@emph{@@@{push@}} は @emph{@@@{upstream@}} と同じであり、このようなことをする必要はありません。

この接尾辞は大文字で綴る場合にも受け入れられ、大文字と小文字を問わず同じことを意味します。

@item  @emph{<rev>^[<n>]} 例: @emph{HEAD^, v1.5.1^0} 
リビジョンパラメータの接尾辞 @emph{^} は、そのコミットオブジェクトの最初の親を意味します。 @emph{^<n>} は <n>
番目の親を意味します(つまり、 @emph{<rev>^} は @emph{<rev>^1} と同じです)。特別ルールとして、
@emph{<rev>^0} はコミット自体を意味し、 @emph{<rev>}
がコミットオブジェクトを参照するタグオブジェクトのオブジェクト名である場合に使用されます。

@item  @emph{<rev>~[<n>]} 例: @emph{HEAD~, master~3} 
リビジョンパラメータの接尾辞 @emph{~} は、そのコミットオブジェクトの最初の親を意味します。リビジョンパラメータの接尾辞
@emph{~<n>} は、最初の親のみに続く、指定されたコミットオブジェクトの <n> 世代の祖先であるコミットオブジェクトを意味します。つまり、
@emph{<rev>~3} は @emph{<rev>^^^} と同じで、するってぇと
@emph{<rev>^1^1^1} と同じということです。この形式については以下の図を参照してください。

@item  @emph{<rev>^@{<type>@}} 例: @emph{v0.99.8^@{commit@}} 
接尾辞 @emph{^} の後に中括弧のペアで囲まれたオブジェクトタイプ名が続くということは、タイプ @emph{<type>}
のオブジェクトが見つかるか、オブジェクトを逆参照できなくなるまで、 @emph{<rev>}
でオブジェクトを再帰的に逆参照する(この場合は、いろいろ一旦飲み込んでしまったのを吐きもどすような感じだぬ)ことを意味します。 たとえば、
@emph{<rev>} がコミットっぽい場合、 @emph{<rev>^@{commit@}} は対応するコミットオブジェクトを記述します。同様に、
@emph{<rev>} がツリーっぽい場合、 @emph{<rev>^@{tree@}} は対応するツリーオブジェクトを記述します。
@emph{<rev>^0} は @emph{<rev>^@{commit@}} の省略形です。

@emph{<rev>^@{object@}} を使用すると、 @emph{<rev>} がタグである必要がなく、 @emph{<rev>} を逆参照することなく、
@emph{<rev>}
が存在するオブジェクトに名前を付けることができます。なお、タグはすでにオブジェクトであるため、オブジェクトに到達するために一度も逆参照する必要はありません。

@emph{<rev>^@{tag@}} を使用して、 @emph{<rev>} が既存のタグオブジェクトを確実に識別することができます。

@item  @emph{<rev>^@{@}} 例: @emph{v0.99.8^@{@}} 
接尾辞 @emph{^}
の後に空のブレースペアが続くということは、オブジェクトがタグである可能性があることを意味し、タグ以外のオブジェクトが見つかるまでタグを再帰的に逆参照します。

@item  @emph{<rev>^@{/<text>@}} 例: @emph{HEAD^@{/fix nasty bug@}} 
リビジョンパラメータの接尾辞 @emph{^} と、それに続くスラッシュで始まるテキストを含む中括弧のペアは、以下の @emph{:/fix nasty
bug} 構文と同じですが、 @emph{^} の前の @emph{<rev>} から到達可能な一致する最も若いコミットを返す点が異なります。

@item  @emph{:/<text>} 例: @emph{:/fix nasty bug} 
コロンに続いてスラッシュそしてそれに続くテキストは、コミットメッセージが指定された正規表現と一致するコミットを示します。この名前は、HEADを含む任意のrefから到達可能な最も若い一致するコミットを返します。正規表現は、コミットメッセージの任意の部分に一致できます。文字列で始まるメッセージを照合するには、たとえば、
@emph{:/^foo} とします。特別なシーケンス @emph{:/!} はマッチングの修飾子用に予約されています。ます。 @emph{:/!-foo} は一致の否定を実行し、
@emph{:/!!foo} はリテラル @emph{!} 後に @emph{foo} が続く文字列とマッチします。 @emph{:/!}
で始まるその他のシーケンスは今のところ予約されています。指定されたテキストによっては、シェルにより追加の引用符が必要になる場合があります。

@item  @emph{<rev>:<path>} 例: @emph{HEAD:README}, @emph{master:./README} 
接尾辞 @emph{:}
の後にパス(path)を続けると、コロンの前の部分によって名前が付けられたツリー風のオブジェクト内の、指定されたパスにあるブロブまたはツリーに名前が付けられます。
@emph{./} または @emph{../}
で始まるパスは、現在の作業ディレクトリからの相対パスです。指定のパスは、作業ツリーのルートディレクトリからの相対パスに変換されます。これは、作業ツリーと同じツリー構造を持つコミットまたはツリーからブロブまたはツリーをアドレス指定するのに最も役立ちます。

@item  @emph{:[<n>:]<path>} 例: @emph{:0:README}, @emph{:README} 
コロンに、オプションでステージ番号(0〜3)とコロンが続き、それにパスが続くと、指定されたパスのインデックス内のブロブオブジェクトに名前を付けます。ステージ番号省略(およびそれに続くコロン)は、ステージ0エントリーを示します。マージ作業中、ステージ1は共通の祖先、ステージ2はターゲットブランチのバージョン(通常は現在のブランチ)、ステージ3はマージされるブランチのバージョンです。
@end table

以下はJon Loeligerによる図解です。コミットノードBとCはどちらもコミットノードAの親です。親コミットは左から右に順序付けられます。

@example
G   H   I   J
 \ /     \ /
  D   E   F
   \  |  / \
    \ | /   |
     \|/    |
      B     C
       \   /
        \ /
         A
@end example

@example
A =      = A^0
B = A^   = A^1     = A~1
C =      = A^2
D = A^^  = A^1^1   = A~2
E = B^2  = A^^2
F = B^3  = A^^3
G = A^^^ = A^1^1^1 = A~3
H = D^2  = B^^2    = A^^^2  = A~2^2
I = F^   = B^3^    = A^^3^
J = F^2  = B^3^2   = A^^3^2
@end example

@noindent

@chapheading SPECIFYING RANGES

@samp{git log} などの履歴トラバースコマンドは、単一のコミットだけでなく、一連のコミットで動作します。

これらのコマンドの場合、前のセクションで説明した表記法を使用して単一のリビジョンを指定することは、指定のコミットから「到達可能」なコミットの組を意味します。

複数のリビジョンを指定するということは、指定のコミットのいずれかから到達可能なコミットの組を意味します。

コミットの到達可能な組は、コミット自体とその祖先チェーン内のコミットです。

以下に示すように、接続されたコミット(connected commits)の組(「リビジョン範囲」(revision
range)と呼ばれる)を指定するためのいくつかの表記法があります。

@noindent

@heading Commit Exclusions

@table @asis

@item  @emph{^<rev>} (カレット)記法 
とある到達可能なコミットをコミット達から除外するには、接頭辞 @emph{^} 表記を使用します。 例えば @emph{^r1 r2} は @emph{r2}
から到達可能なコミットだけども、 @emph{r1} から到達可能なコミット(つまり @emph{r1} とその祖先)は除外する事を意味します。
@end table

@noindent

@heading Dotted Range Notations

@table @asis

@item  @emph{..} (2ドット)範囲記法 
@emph{^r1 r2} 操作は頻繁に表示されるため、省略形があります。(上記の SPECIFYING REVISIONS
で説明されている構文に従って名前が付けられている)2つのコミット @emph{r1} と @emph{r2} がある場合、あなたは @emph{^r1 r2}
によってr1から到達可能なコミットを取り除き、r2から到達可能なコミットを要求できます。そしてこれは @emph{r1..r2} と書くことができます。

@item  @emph{...} (3ドット)対称差記法 
似た表記 @emph{r1...r2} は @emph{r1} と @emph{r2} の対称差と呼ばれ、 @emph{r1 r2 --not $(git merge-base --all
r1 r2)} として定義されます。 これは、 @emph{r1} (左側)または @emph{r2}
(右側)のいずれかから到達可能であるが、両方からは到達できないコミットの組です。
@end table

これらの2つの省略表記では、一方の端を省略して、デフォルトでHEADにすることができます。たとえば、 @emph{origin..} は
@emph{origin..HEAD} の省略形であり、「originブランチから分岐(fork)してから何をしましたか？」と尋ねます。 同様に、
@emph{..origin} は @emph{HEAD..origin} の省略形であり、「私がそれらから分岐してから、originは何をしましたか？」と尋ねます。
@emph{..} は @emph{HEAD..HEAD} を意味することに注意してください。これは、HEADから到達可能および到達不能の両方の空の範囲です。

2つの異なる範囲を取るように特別に設計されたコマンド(たとえば、2つの範囲を比較するための "git range-diff R1 R2" )
は存在しますが、それらは例外です。特に明記されていない限り、一連のコミットを操作するすべての "git"
コマンドは、単一のリビジョン範囲で機能します。言い換えると、2つの「2ドット範囲表記」を隣り合わせに記述します。

@example
$ git log A..B C..D
@end example

ほとんどのコマンドでは2つのリビジョン範囲を指定しません。代わりに、接続された単一のコミットの組、つまりBまたはDのいずれかから到達可能であるが、AまたはCのどちらからも到達可能でないコミットの組に名前を付けます。線形履歴では、以下のようになります:

@example
---A---B---o---o---C---D
@end example

AとBはCから到達可能であるため、これら2つの2ドット範囲記法で指定されたリビジョン範囲は単一のコミットDです。

@noindent

@heading Other <rev>^ Parent Shorthand Notations

コミットとその親コミットによって形成される組に名前を付けるために、マージコミットに特に役立つ他の3つの省略形が存在します。

@emph{r1^@@} 表記は、 @emph{r1} のすべての親を意味します。

@emph{r1^!} 表記には コミット @emph{r1} が含まれますが、そのすべての親は除外されます。この表記自体は、単一のコミット @emph{r1}
を示します。

@emph{<rev>^-[<n>]} 表記には @emph{<rev>} が含まれますが、 <n> 番目の親(つまり、
@emph{<rev>^<n>..<rev>} の省略形)は除外されます。 <n> が指定されていない場合は @emph{<n>}= 1
とみなします。これは通常、 @emph{<commit>^-} を渡すだけで、マージコミット @emph{<commit>}(@emph{<commit>}
自体を含む)でマージされたブランチ内のすべてのコミットを取得できるマージコミットに役立ちます。

@emph{<rev>^<n>} は単一のコミット親を指定することに関するものでしたが、これらの3つの表記はその親も考慮します。たとえば、
@emph{HEAD^2^@@} と言うことはできますが、 @emph{HEAD^@@^2} と言うことはできません。

@noindent

@chapheading Revision Range Summary

@table @asis

@item  @emph{<rev>} 
<rev> から到達可能なコミット(つまり <rev> とその祖先)を含めます。

@item  @emph{^<rev>} 
<rev> から到達可能なコミット(つまり <rev> とその祖先)を除外します。

@item  @emph{<rev1>..<rev2>} 
<rev2> から到達可能なコミットを含めますが、 <rev1> から到達可能なコミットは除外します。 <rev1> または <rev2>
のいずれかを省略すると、それらはそれぞれデフォルトで @samp{HEAD} になります。

@item  @emph{<rev1>...<rev2>} 
<rev1> または <rev2> のいずれかから到達可能なコミットを含めますが、両方から到達可能なコミットは除外します。 <rev1> または
<rev2> のいずれかを省略すると、それらはそれぞれデフォルトで @samp{HEAD} になります。

@item  @emph{<rev>^@@} 例: @emph{HEAD^@@} 
接尾辞 @emph{^} の後にアットマーク(@emph{@@})を付けることは、 @emph{<rev>}
のすべての親をリストすることと同じです(つまり、親から到達可能なものはすべて含まれますが、コミット自体は含まれません)。

@item  @emph{<rev>^!} 例: @emph{HEAD^!} 
接尾辞 @emph{^} の後に感嘆符(@emph{!})を付けることは、コミット @emph{<rev>} を指定し、そのすべての親の前に @emph{^}
を付けてそれら(およびその祖先)を除外することと同じです。

@item  @emph{<rev>^-<n>} 例: @emph{HEAD^-, HEAD^-2} 
@emph{<rev>^<n>..<rev>} と同等であり、@emph{<n>} が指定されていない場合は @emph{<n>} = 1 です。
@end table

上記のLoeliger図解を使用したいくつかの例を以下に示します。表記の拡張と選択は、それぞれ段階が分かるようステップを踏んで説明してあります:

@example
   Args   Expanded arguments    Selected commits
   D                            G H D
   D F                          G H I J D F
   ^G D                         H D
   ^D B                         E I J F B
   ^D B C                       E I J F B C
   C                            I J F C
   B..C   = ^B C                C
   B...C  = B ^F C              G H D E B C
   B^-    = B^..B
          = ^B^1 B              E I J F B
   C^@@    = C^1
          = F                   I J F
   B^@@    = B^1 B^2 B^3
          = D E F               D G H E F I J
   C^!    = C ^C^@@
          = C ^C^1
          = C ^F                C
   B^!    = B ^B^@@
          = B ^B^1 ^B^2 ^B^3
          = B ^D ^E ^F          B
   F^! D  = F ^I ^J D           G H D F
@end example

@noindent

@chapheading PARSEOPT

In @samp{--parseopt} mode, @emph{git rev-parse} helps massaging options to bring to
shell scripts the same facilities C builtins have. It works as an option
normalizer (e.g. splits single switches aggregate values), a bit like
@samp{getopt(1)} does.

It takes on the standard input the specification of the options to parse and
understand, and echoes on the standard output a string suitable for @samp{sh(1)}
@samp{eval} to replace the arguments with normalized ones.  In case of error, it
outputs usage on the standard error stream, and exits with code 129.

Note: Make sure you quote the result when passing it to @samp{eval}.  See below
for an example.

@noindent

@heading Input Format

@emph{git rev-parse --parseopt} input format is fully text based. It has two
parts, separated by a line that contains only @samp{--}. The lines before the
separator (should be one or more) are used for the usage.  The lines after
the separator describe the options.

Each line of options has this format:

@example
<opt-spec><flags>*<arg-hint>? SP+ help LF
@end example


@table @asis

@item  @samp{<opt-spec>} 
its format is the short option character, then the long option name
separated by a comma. Both parts are not required, though at least one is
necessary. May not contain any of the @samp{<flags>} characters.  @samp{h,help},
@samp{dry-run} and @samp{f} are examples of correct @samp{<opt-spec>}.

@item  @samp{<flags>} 
@samp{<flags>} are of @samp{*}, @samp{=}, @samp{?} or @samp{!}.

@itemize 

@item
Use @samp{=} if the option takes an argument.

@item
Use @samp{?} to mean that the option takes an optional argument. You probably
want to use the @samp{--stuck-long} mode to be able to unambiguously parse the
optional argument.

@item
Use @samp{*} to mean that this option should not be listed in the usage generated
for the @samp{-h} argument. It’s shown for @samp{--help-all} as documented in
gitcli(7).

@item
Use @samp{!} to not make the corresponding negated long option available.
@end itemize

@item  @samp{<arg-hint>} 
@samp{<arg-hint>}, if specified, is used as a name of the argument in the help
output, for options that take arguments. @samp{<arg-hint>} is terminated by the
first whitespace.  It is customary to use a dash to separate words in a
multi-word argument hint.
@end table

The remainder of the line, after stripping the spaces, is used as the help
associated to the option.

Blank lines are ignored, and lines that don’t match this specification are
used as option group headers (start the line with a space to create such
lines on purpose).

@noindent

@heading Example

@example
OPTS_SPEC="\
some-command [<options>] <args>...

some-command does foo and bar!
--
h,help    show the help

foo       some nifty option --foo
bar=      some cool option --bar with an argument
baz=arg   another cool option --baz with a named argument
qux?path  qux may take a path argument but has meaning by itself

  An option group Header
C?        option C with an optional argument"

eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@@" || echo exit $?)"
@end example


@noindent

@heading Usage text

When @samp{"$@@"} is @samp{-h} or @samp{--help} in the above example, the following usage
text would be shown:

@example
usage: some-command [<options>] <args>...

    some-command does foo and bar!

    -h, --help            show the help
    --foo                 some nifty option --foo
    --bar ...             some cool option --bar with an argument
    --baz <arg>           another cool option --baz with a named argument
    --qux[=<path>]        qux may take a path argument but has meaning by itself

An option group Header
    -C[...]               option C with an optional argument
@end example


@noindent

@chapheading SQ-QUOTE

In @samp{--sq-quote} mode, @emph{git rev-parse} echoes on the standard output a single
line suitable for @samp{sh(1)} @samp{eval}. This line is made by normalizing the
arguments following @samp{--sq-quote}. Nothing other than quoting the arguments
is done.

If you want command input to still be interpreted as usual by @emph{git
rev-parse} before the output is shell quoted, see the @samp{--sq} option.

@noindent

@heading Example

@example
$ cat >your-git-script.sh <<\EOF
#!/bin/sh
args=$(git rev-parse --sq-quote "$@@")   # quote user-supplied arguments
command="git frotz -n24 $args"          # and use it inside a handcrafted
                                        # command line
eval "$command"
EOF

$ sh your-git-script.sh "a b'c"
@end example


@noindent

@chapheading EXAMPLES

@itemize 

@item
Print the object name of the current commit:

@example
$ git rev-parse --verify HEAD
@end example


@item
Print the commit object name from the revision in the $REV shell variable:

@example
$ git rev-parse --verify --end-of-options $REV^@{commit@}
@end example


This will error out if $REV is empty or not a valid revision.

@item
Similar to above:

@example
$ git rev-parse --default master --verify --end-of-options $REV
@end example


but if $REV is empty, the commit object name from master will be printed.
@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-revert,,,Top
@chapheading Name

git-revert — Revert some existing commits

@noindent

@chapheading Synopsis

@display
git revert [--[no-]edit] [-n] [-m parent-number] [-s] [-S[<keyid>]] <commit>…
git revert (--continue | --skip | --abort | --quit)
@end display


@noindent

@chapheading DESCRIPTION

Given one or more existing commits, revert the changes that the related
patches introduce, and record some new commits that record them.  This
requires your working tree to be clean (no modifications from the HEAD
commit).

Note: @emph{git revert} is used to record some new commits to reverse the effect
of some earlier commits (often only a faulty one).  If you want to throw
away all uncommitted changes in your working directory, you should see
git-reset(1), particularly the @samp{--hard} option.  If you want to
extract specific files as they were in another commit, you should see
git-restore(1), specifically the @samp{--source} option. Take care with
these alternatives as both will discard uncommitted changes in your working
directory.

See "Reset, restore and revert" in git(1) for the differences
between the three commands.

@noindent

@chapheading OPTIONS

@table @asis

@item  <commit>… 
Commits to revert.  For a more complete list of ways to spell commit names,
see gitrevisions(7).  Sets of commits can also be given but no
traversal is done by default, see git-rev-list(1) and its
@samp{--no-walk} option.

@item  @samp{-e} 
@itemx  @samp{--edit} 
With this option, @emph{git revert} will let you edit the commit message prior to
committing the revert. This is the default if you run the command from a
terminal.

@item  @samp{-m parent-number} 
@itemx  @samp{--mainline parent-number} 
Usually you cannot revert a merge because you do not know which side of the
merge should be considered the mainline.  This option specifies the parent
number (starting from 1) of the mainline and allows revert to reverse the
change relative to the specified parent.

Reverting a merge commit declares that you will never want the tree changes
brought in by the merge.  As a result, later merges will only bring in tree
changes introduced by commits that are not ancestors of the previously
reverted merge.  This may or may not be what you want.

See the @uref{howto/revert-a-faulty-merge.html,revert-a-faulty-merge How-To}
for more details.

@item  @samp{--no-edit} 
With this option, @emph{git revert} will not start the commit message editor.

@item  @samp{--cleanup=<mode>} 
This option determines how the commit message will be cleaned up before
being passed on to the commit machinery. See git-commit(1) for more
details. In particular, if the @emph{<mode>} is given a value of @samp{scissors},
scissors will be appended to @samp{MERGE_MSG} before being passed on in the case
of a conflict.

@item  @samp{-n} 
@itemx  @samp{--no-commit} 
Usually the command automatically creates some commits with commit log
messages stating which commits were reverted.  This flag applies the changes
necessary to revert the named commits to your working tree and the index,
but does not make the commits.  In addition, when this option is used, your
index does not have to match the HEAD commit.  The revert is done against
the beginning state of your index.

This is useful when reverting more than one commits' effect to your index in
a row.

@item  @samp{-S[<keyid>]} 
@itemx  @samp{--gpg-sign[=<keyid>]} 
@itemx  @samp{--no-gpg-sign} 
GPG-sign commits. The @samp{keyid} argument is optional and defaults to the
committer identity; if specified, it must be stuck to the option without a
space. @samp{--no-gpg-sign} is useful to countermand both @samp{commit.gpgSign}
configuration variable, and earlier @samp{--gpg-sign}.

@item  @samp{-s} 
@itemx  @samp{--signoff} 
Add a @samp{Signed-off-by} trailer at the end of the commit message.  See the
signoff option in git-commit(1) for more information.

@item  @samp{--strategy=<strategy>} 
Use the given merge strategy.  Should only be used once.  See the MERGE
STRATEGIES section in git-merge(1) for details.

@item  @samp{-X<option>} 
@itemx  @samp{--strategy-option=<option>} 
Pass the merge strategy-specific option through to the merge strategy.  See
git-merge(1) for details.

@item  @samp{--rerere-autoupdate} 
@itemx  @samp{--no-rerere-autoupdate} 
Allow the rerere mechanism to update the index with the result of
auto-conflict resolution if possible.
@end table

@noindent

@chapheading SEQUENCER SUBCOMMANDS

@table @asis

@item  @samp{--continue} 
@samp{.git/sequencer}
の情報を使用して、進行中の操作の続行を行います。失敗したcherry-pickまたはrevertの競合を解決した後、続行するために使用できます。

@item  @samp{--skip} 
現在のコミットをスキップして、残りのシーケンスを続行します。

@item  @samp{--quit} 
進行中の今回の操作を忘れてください。チェリーピックまたはrevertに失敗した後、シーケンサーの状態をクリアするために使用できます。

@item  @samp{--abort} 
操作をキャンセルして、シーケンス操作前の状態に戻ります。
@end table

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git revert HEAD~3} 
Revert the changes specified by the fourth last commit in HEAD and create a
new commit with the reverted changes.

@item  @samp{git revert -n master~5..master~2} 
Revert the changes done by commits from the fifth last commit in master
(included) to the third last commit in master (included), but do not create
any commit with the reverted changes. The revert only modifies the working
tree and the index.
@end table

@noindent

@chapheading SEE ALSO

git-cherry-pick(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-rm,,,Top
@chapheading Name

git-rm — Remove files from the working tree and from the index

@noindent

@chapheading Synopsis

@display
git rm [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch]
          [--quiet] [--pathspec-from-file=<file> [--pathspec-file-nul]]
          [--] [<pathspec>…]
@end display


@noindent

@chapheading DESCRIPTION

Remove files matching pathspec from the index, or from the working tree and
the index. @samp{git rm} will not remove a file from just your working
directory. (There is no option to remove a file only from the working tree
and yet keep it in the index; use @samp{/bin/rm} if you want to do that.) The
files being removed have to be identical to the tip of the branch, and no
updates to their contents can be staged in the index, though that default
behavior can be overridden with the @samp{-f} option.  When @samp{--cached} is given,
the staged content has to match either the tip of the branch or the file on
disk, allowing the file to be removed from just the index. When
sparse-checkouts are in use (see git-sparse-checkout(1)), @samp{git rm}
will only remove paths within the sparse-checkout patterns.

@noindent

@chapheading OPTIONS

@table @asis

@item  <pathspec>… 
Files to remove.  A leading directory name (e.g. @samp{dir} to remove @samp{dir/file1}
and @samp{dir/file2}) can be given to remove all files in the directory, and
recursively all sub-directories, but this requires the @samp{-r} option to be
explicitly given.

The command removes only the paths that are known to Git.

File globbing matches across directory boundaries.  Thus, given two
directories @samp{d} and @samp{d2}, there is a difference between using @samp{git rm 'd*'}
and @samp{git rm 'd/*'}, as the former will also remove all of directory @samp{d2}.

For more details, see the @emph{pathspec} entry in gitglossary(7).

@item  @samp{-f} 
@itemx  @samp{--force} 
Override the up-to-date check.

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
Don’t actually remove any file(s).  Instead, just show if they exist in the
index and would otherwise be removed by the command.

@item  @samp{-r} 
Allow recursive removal when a leading directory name is given.

@item  -- 
This option can be used to separate command-line options from the list of
files, (useful when filenames might be mistaken for command-line options).

@item  @samp{--cached} 
Use this option to unstage and remove paths only from the index.  Working
tree files, whether modified or not, will be left alone.

@item  @samp{--ignore-unmatch} 
Exit with a zero status even if no files matched.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
@samp{git rm} normally outputs one line (in the form of an @samp{rm} command)  for
each file removed. This option suppresses that output.

@item  @samp{--pathspec-from-file=<file>} 
Pathspec is passed in @samp{<file>} instead of commandline args. If @samp{<file>} is
exactly @samp{-} then standard input is used. Pathspec elements are separated by
LF or CR/LF. Pathspec elements can be quoted as explained for the
configuration variable @samp{core.quotePath} (see git-config(1)). See
also @samp{--pathspec-file-nul} and global @samp{--literal-pathspecs}.

@item  @samp{--pathspec-file-nul} 
Only meaningful with @samp{--pathspec-from-file}. Pathspec elements are separated
with NUL character and all other characters are taken literally (including
newlines and quotes).
@end table

@noindent

@chapheading REMOVING FILES THAT HAVE DISAPPEARED FROM THE FILESYSTEM

There is no option for @samp{git rm} to remove from the index only the paths that
have disappeared from the filesystem. However, depending on the use case,
there are several ways that can be done.

@noindent

@heading Using “git commit -a”

If you intend that your next commit should record all modifications of
tracked files in the working tree and record all removals of files that have
been removed from the working tree with @samp{rm} (as opposed to @samp{git rm}), use
@samp{git commit -a}, as it will automatically notice and record all removals.
You can also have a similar effect without committing by using @samp{git add -u}.

@noindent

@heading Using “git add -A”

When accepting a new code drop for a vendor branch, you probably want to
record both the removal of paths and additions of new paths as well as
modifications of existing paths.

Typically you would first remove all tracked files from the working tree
using this command:

@example
git ls-files -z | xargs -0 rm -f
@end example


and then untar the new code in the working tree. Alternately you could
@emph{rsync} the changes into the working tree.

After that, the easiest way to record all removals, additions, and
modifications in the working tree is:

@example
git add -A
@end example


See git-add(1).

@noindent

@heading Other ways

If all you really want to do is to remove from the index the files that are
no longer present in the working tree (perhaps because your working tree is
dirty so that you cannot use @samp{git commit -a}), use the following command:

@example
git diff --name-only --diff-filter=D -z | xargs -0 git rm --cached
@end example


@noindent

@chapheading SUBMODULES

Only submodules using a gitfile (which means they were cloned with a Git
version 1.7.8 or newer) will be removed from the work tree, as their
repository lives inside the .git directory of the superproject. If a
submodule (or one of those nested inside it)  still uses a .git directory,
@samp{git rm} will move the submodules git directory into the superprojects git
directory to protect the submodule’s history. If it exists the
submodule.<name> section in the gitmodules(5) file will also be
removed and that file will be staged (unless --cached or -n are used).

A submodule is considered up to date when the HEAD is the same as recorded
in the index, no tracked files are modified and no untracked files that
aren’t ignored are present in the submodules work tree.  Ignored files are
deemed expendable and won’t stop a submodule’s work tree from being removed.

If you only want to remove the local checkout of a submodule from your work
tree without committing the removal, use git-submodule(1) @samp{deinit}
instead. Also see gitsubmodules(7) for details on submodule removal.

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git rm Documentation/\*.txt} 
Removes all @samp{*.txt} files from the index that are under the @samp{Documentation}
directory and any of its subdirectories.

Note that the asterisk @samp{*} is quoted from the shell in this example; this
lets Git, and not the shell, expand the pathnames of files and
subdirectories under the @samp{Documentation/} directory.

@item  @samp{git rm -f git-*.sh} 
Because this example lets the shell expand the asterisk (i.e. you are
listing the files explicitly), it does not remove @samp{subdir/git-foo.sh}.
@end table

@noindent

@chapheading BUGS

Each time a superproject update removes a populated submodule (e.g. when
switching between commits before and after the removal) a stale submodule
checkout will remain in the old location. Removing the old directory is only
safe when it uses a gitfile, as otherwise the history of the submodule will
be deleted too. This step will be obsolete when recursive submodule update
has been implemented.

@noindent

@chapheading SEE ALSO

git-add(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-send-email,,,Top
@chapheading Name

git-send-email — Send a collection of patches as emails

@noindent

@chapheading Synopsis

@display
git send-email [<options>] <file|directory|rev-list options>…
git send-email --dump-aliases
@end display


@noindent

@chapheading DESCRIPTION

Takes the patches given on the command line and emails them out.  Patches
can be specified as files, directories (which will send all files in the
directory), or directly as a revision list.  In the last case, any format
accepted by git-format-patch(1) can be passed to git send-email.

The header of the email is configurable via command-line options.  If not
specified on the command line, the user will be prompted with a ReadLine
enabled interface to provide the necessary information.

There are two formats accepted for patch files:

@enumerate 

@item
mbox format files

This is what git-format-patch(1) generates.  Most headers and MIME
formatting are ignored.

@item
The original format used by Greg Kroah-Hartman’s @emph{send_lots_of_email.pl}
script

This format expects the first line of the file to contain the "Cc:" value
and the "Subject:" of the message as the second line.
@end enumerate

@noindent

@chapheading OPTIONS

@noindent

@heading Composing

@table @asis

@item  @samp{--annotate} 
Review and edit each patch you’re about to send. Default is the value of
@samp{sendemail.annotate}. See the CONFIGURATION section for
@samp{sendemail.multiEdit}.

@item  @samp{--bcc=<address>,...} 
Specify a "Bcc:" value for each email. Default is the value of
@samp{sendemail.bcc}.

This option may be specified multiple times.

@item  @samp{--cc=<address>,...} 
Specify a starting "Cc:" value for each email.  Default is the value of
@samp{sendemail.cc}.

This option may be specified multiple times.

@item  @samp{--compose} 
Invoke a text editor (see GIT_EDITOR in git-var(1))  to edit an
introductory message for the patch series.

When @samp{--compose} is used, git send-email will use the From, Subject, and
In-Reply-To headers specified in the message. If the body of the message
(what you type after the headers and a blank line) only contains blank (or
Git: prefixed) lines, the summary won’t be sent, but From, Subject, and
In-Reply-To headers will be used unless they are removed.

Missing From or In-Reply-To headers will be prompted for.

See the CONFIGURATION section for @samp{sendemail.multiEdit}.

@item  @samp{--from=<address>} 
Specify the sender of the emails.  If not specified on the command line, the
value of the @samp{sendemail.from} configuration option is used.  If neither the
command-line option nor @samp{sendemail.from} are set, then the user will be
prompted for the value.  The default for the prompt will be the value of
GIT_AUTHOR_IDENT, or GIT_COMMITTER_IDENT if that is not set, as returned by
"git var -l".

@item  @samp{--reply-to=<address>} 
Specify the address where replies from recipients should go to.  Use this if
replies to messages should go to another address than what is specified with
the --from parameter.

@item  @samp{--in-reply-to=<identifier>} 
Make the first mail (or all the mails with @samp{--no-thread}) appear as a reply
to the given Message-Id, which avoids breaking threads to provide a new
patch series.  The second and subsequent emails will be sent as replies
according to the @samp{--[no-]chain-reply-to} setting.

So for example when @samp{--thread} and @samp{--no-chain-reply-to} are specified, the
second and subsequent patches will be replies to the first one like in the
illustration below where @samp{[PATCH v2 0/3]} is in reply to @samp{[PATCH 0/2]}:

@example
[PATCH 0/2] Here is what I did...
  [PATCH 1/2] Clean up and tests
  [PATCH 2/2] Implementation
  [PATCH v2 0/3] Here is a reroll
    [PATCH v2 1/3] Clean up
    [PATCH v2 2/3] New tests
    [PATCH v2 3/3] Implementation
@end example

Only necessary if --compose is also set.  If --compose is not set, this will
be prompted for.

@item  @samp{--subject=<string>} 
Specify the initial subject of the email thread.  Only necessary if
--compose is also set.  If --compose is not set, this will be prompted for.

@item  @samp{--to=<address>,...} 
Specify the primary recipient of the emails generated. Generally, this will
be the upstream maintainer of the project involved. Default is the value of
the @samp{sendemail.to} configuration value; if that is unspecified, and --to-cmd
is not specified, this will be prompted for.

This option may be specified multiple times.

@item  @samp{--8bit-encoding=<encoding>} 
When encountering a non-ASCII message or subject that does not declare its
encoding, add headers/quoting to indicate it is encoded in <encoding>.
Default is the value of the @emph{sendemail.assume8bitEncoding}; if that is
unspecified, this will be prompted for if any non-ASCII files are
encountered.

Note that no attempts whatsoever are made to validate the encoding.

@item  @samp{--compose-encoding=<encoding>} 
Specify encoding of compose message. Default is the value of the
@emph{sendemail.composeencoding}; if that is unspecified, UTF-8 is assumed.

@item  @samp{--transfer-encoding=(7bit|8bit|quoted-printable|base64|auto)} 
Specify the transfer encoding to be used to send the message over SMTP.
7bit will fail upon encountering a non-ASCII message.  quoted-printable can
be useful when the repository contains files that contain carriage returns,
but makes the raw patch email file (as saved from a MUA) much harder to
inspect manually.  base64 is even more fool proof, but also even more
opaque.  auto will use 8bit when possible, and quoted-printable otherwise.

Default is the value of the @samp{sendemail.transferEncoding} configuration
value; if that is unspecified, default to @samp{auto}.

@item  @samp{--xmailer} 
@itemx  @samp{--no-xmailer} 
Add (or prevent adding) the "X-Mailer:" header.  By default, the header is
added, but it can be turned off by setting the @samp{sendemail.xmailer}
configuration variable to @samp{false}.
@end table

@noindent

@heading Sending

@table @asis

@item  @samp{--envelope-sender=<address>} 
Specify the envelope sender used to send the emails.  This is useful if your
default address is not the address that is subscribed to a list. In order to
use the @emph{From} address, set the value to "auto". If you use the sendmail
binary, you must have suitable privileges for the -f parameter.  Default is
the value of the @samp{sendemail.envelopeSender} configuration variable; if that
is unspecified, choosing the envelope sender is left to your MTA.

@item  @samp{--sendmail-cmd=<command>} 
Specify a command to run to send the email. The command should be
sendmail-like; specifically, it must support the @samp{-i} option.  The command
will be executed in the shell if necessary.  Default is the value of
@samp{sendemail.sendmailcmd}.  If unspecified, and if --smtp-server is also
unspecified, git-send-email will search for @samp{sendmail} in @samp{/usr/sbin},
@samp{/usr/lib} and $PATH.

@item  @samp{--smtp-encryption=<encryption>} 
Specify the encryption to use, either @emph{ssl} or @emph{tls}.  Any other value
reverts to plain SMTP.  Default is the value of @samp{sendemail.smtpEncryption}.

@item  @samp{--smtp-domain=<FQDN>} 
Specifies the Fully Qualified Domain Name (FQDN) used in the HELO/EHLO
command to the SMTP server.  Some servers require the FQDN to match your IP
address.  If not set, git send-email attempts to determine your FQDN
automatically.  Default is the value of @samp{sendemail.smtpDomain}.

@item  @samp{--smtp-auth=<mechanisms>} 
Whitespace-separated list of allowed SMTP-AUTH mechanisms. This setting
forces using only the listed mechanisms. Example:

@example
$ git send-email --smtp-auth="PLAIN LOGIN GSSAPI" ...
@end example


If at least one of the specified mechanisms matches the ones advertised by
the SMTP server and if it is supported by the utilized SASL library, the
mechanism is used for authentication. If neither @emph{sendemail.smtpAuth} nor
@samp{--smtp-auth} is specified, all mechanisms supported by the SASL library can
be used. The special value @emph{none} maybe specified to completely disable
authentication independently of @samp{--smtp-user}

@item  @samp{--smtp-pass[=<password>]} 
Password for SMTP-AUTH. The argument is optional: If no argument is
specified, then the empty string is used as the password. Default is the
value of @samp{sendemail.smtpPass}, however @samp{--smtp-pass} always overrides this
value.

Furthermore, passwords need not be specified in configuration files or on
the command line. If a username has been specified (with @samp{--smtp-user} or a
@samp{sendemail.smtpUser}), but no password has been specified (with
@samp{--smtp-pass} or @samp{sendemail.smtpPass}), then a password is obtained using
@emph{git-credential}.

@item  @samp{--no-smtp-auth} 
Disable SMTP authentication. Short hand for @samp{--smtp-auth=none}

@item  @samp{--smtp-server=<host>} 
If set, specifies the outgoing SMTP server to use (e.g.  @samp{smtp.example.com}
or a raw IP address).  If unspecified, and if @samp{--sendmail-cmd} is also
unspecified, the default is to search for @samp{sendmail} in @samp{/usr/sbin},
@samp{/usr/lib} and $PATH if such a program is available, falling back to
@samp{localhost} otherwise.

For backward compatibility, this option can also specify a full pathname of
a sendmail-like program instead; the program must support the @samp{-i} option.
This method does not support passing arguments or using plain command
names.  For those use cases, consider using @samp{--sendmail-cmd} instead.

@item  @samp{--smtp-server-port=<port>} 
Specifies a port different from the default port (SMTP servers typically
listen to smtp port 25, but may also listen to submission port 587, or the
common SSL smtp port 465); symbolic port names (e.g. "submission" instead of
587)  are also accepted. The port can also be set with the
@samp{sendemail.smtpServerPort} configuration variable.

@item  @samp{--smtp-server-option=<option>} 
If set, specifies the outgoing SMTP server option to use.  Default value can
be specified by the @samp{sendemail.smtpServerOption} configuration option.

The --smtp-server-option option must be repeated for each option you want to
pass to the server. Likewise, different lines in the configuration files
must be used for each option.

@item  @samp{--smtp-ssl} 
Legacy alias for @emph{--smtp-encryption ssl}.

@item  @samp{--smtp-ssl-cert-path} 
Path to a store of trusted CA certificates for SMTP SSL/TLS certificate
validation (either a directory that has been processed by @emph{c_rehash}, or a
single file containing one or more PEM format certificates concatenated
together: see verify(1) -CAfile and -CApath for more information on
these). Set it to an empty string to disable certificate
verification. Defaults to the value of the @samp{sendemail.smtpsslcertpath}
configuration variable, if set, or the backing SSL library’s compiled-in
default otherwise (which should be the best choice on most platforms).

@item  @samp{--smtp-user=<user>} 
Username for SMTP-AUTH. Default is the value of @samp{sendemail.smtpUser}; if a
username is not specified (with @samp{--smtp-user} or @samp{sendemail.smtpUser}), then
authentication is not attempted.

@item  @samp{--smtp-debug=0|1} 
Enable (1) or disable (0) debug output. If enabled, SMTP commands and
replies will be printed. Useful to debug TLS connection and authentication
problems.

@item  @samp{--batch-size=<num>} 
Some email servers (e.g. smtp.163.com) limit the number emails to be sent
per session (connection) and this will lead to a failure when sending many
messages.  With this option, send-email will disconnect after sending $<num>
messages and wait for a few seconds (see --relogin-delay)  and reconnect, to
work around such a limit.  You may want to use some form of credential
helper to avoid having to retype your password every time this happens.
Defaults to the @samp{sendemail.smtpBatchSize} configuration variable.

@item  @samp{--relogin-delay=<int>} 
Waiting $<int> seconds before reconnecting to SMTP server. Used together
with --batch-size option.  Defaults to the @samp{sendemail.smtpReloginDelay}
configuration variable.
@end table

@noindent

@heading Automating

@table @asis

@item  @samp{--no-[to|cc|bcc]} 
Clears any list of "To:", "Cc:", "Bcc:" addresses previously set via config.

@item  @samp{--no-identity} 
Clears the previously read value of @samp{sendemail.identity} set via config, if
any.

@item  @samp{--to-cmd=<command>} 
Specify a command to execute once per patch file which should generate patch
file specific "To:" entries.  Output of this command must be single email
address per line.  Default is the value of @emph{sendemail.tocmd} configuration
value.

@item  @samp{--cc-cmd=<command>} 
Specify a command to execute once per patch file which should generate patch
file specific "Cc:" entries.  Output of this command must be single email
address per line.  Default is the value of @samp{sendemail.ccCmd} configuration
value.

@item  @samp{--[no-]chain-reply-to} 
If this is set, each email will be sent as a reply to the previous email
sent.  If disabled with "--no-chain-reply-to", all emails after the first
will be sent as replies to the first email sent.  When using this, it is
recommended that the first file given be an overview of the entire patch
series. Disabled by default, but the @samp{sendemail.chainReplyTo} configuration
variable can be used to enable it.

@item  @samp{--identity=<identity>} 
A configuration identity. When given, causes values in the
@emph{sendemail.<identity>} subsection to take precedence over values in the
@emph{sendemail} section. The default identity is the value of
@samp{sendemail.identity}.

@item  @samp{--[no-]signed-off-by-cc} 
If this is set, add emails found in the @samp{Signed-off-by} trailer or Cc: lines
to the cc list. Default is the value of @samp{sendemail.signedoffbycc}
configuration value; if that is unspecified, default to --signed-off-by-cc.

@item  @samp{--[no-]cc-cover} 
If this is set, emails found in Cc: headers in the first patch of the series
(typically the cover letter) are added to the cc list for each email
set. Default is the value of @emph{sendemail.cccover} configuration value; if
that is unspecified, default to --no-cc-cover.

@item  @samp{--[no-]to-cover} 
If this is set, emails found in To: headers in the first patch of the series
(typically the cover letter) are added to the to list for each email
set. Default is the value of @emph{sendemail.tocover} configuration value; if
that is unspecified, default to --no-to-cover.

@item  @samp{--suppress-cc=<category>} 
Specify an additional category of recipients to suppress the auto-cc of:

@itemize 

@item
@emph{author} will avoid including the patch author.

@item
@emph{self} will avoid including the sender.

@item
@emph{cc} will avoid including anyone mentioned in Cc lines in the patch header
except for self (use @emph{self} for that).

@item
@emph{bodycc} will avoid including anyone mentioned in Cc lines in the patch body
(commit message) except for self (use @emph{self} for that).

@item
@emph{sob} will avoid including anyone mentioned in the Signed-off-by trailers
except for self (use @emph{self} for that).

@item
@emph{misc-by} will avoid including anyone mentioned in Acked-by, Reviewed-by,
Tested-by and other "-by" lines in the patch body, except Signed-off-by (use
@emph{sob} for that).

@item
@emph{cccmd} will avoid running the --cc-cmd.

@item
@emph{body} is equivalent to @emph{sob} + @emph{bodycc} + @emph{misc-by}.

@item
@emph{all} will suppress all auto cc values.
@end itemize

Default is the value of @samp{sendemail.suppresscc} configuration value; if that
is unspecified, default to @emph{self} if --suppress-from is specified, as well
as @emph{body} if --no-signed-off-cc is specified.

@item  @samp{--[no-]suppress-from} 
If this is set, do not add the From: address to the cc: list.  Default is
the value of @samp{sendemail.suppressFrom} configuration value; if that is
unspecified, default to --no-suppress-from.

@item  @samp{--[no-]thread} 
If this is set, the In-Reply-To and References headers will be added to each
email sent.  Whether each mail refers to the previous email (@samp{deep}
threading per @emph{git format-patch} wording) or to the first email (@samp{shallow}
threading) is governed by "--[no-]chain-reply-to".

If disabled with "--no-thread", those headers will not be added (unless
specified with --in-reply-to).  Default is the value of the
@samp{sendemail.thread} configuration value; if that is unspecified, default to
--thread.

It is up to the user to ensure that no In-Reply-To header already exists
when @emph{git send-email} is asked to add it (especially note that @emph{git
format-patch} can be configured to do the threading itself).  Failure to do
so may not produce the expected result in the recipient’s MUA.
@end table

@noindent

@heading Administering

@table @asis

@item  @samp{--confirm=<mode>} 
Confirm just before sending:

@itemize 

@item
@emph{always} will always confirm before sending

@item
@emph{never} will never confirm before sending

@item
@emph{cc} will confirm before sending when send-email has automatically added
addresses from the patch to the Cc list

@item
@emph{compose} will confirm before sending the first message when using
--compose.

@item
@emph{auto} is equivalent to @emph{cc} + @emph{compose}
@end itemize

Default is the value of @samp{sendemail.confirm} configuration value; if that is
unspecified, default to @emph{auto} unless any of the suppress options have been
specified, in which case default to @emph{compose}.

@item  @samp{--dry-run} 
Do everything except actually send the emails.

@item  @samp{--[no-]format-patch} 
When an argument may be understood either as a reference or as a file name,
choose to understand it as a format-patch argument (@samp{--format-patch})  or as
a file name (@samp{--no-format-patch}). By default, when such a conflict occurs,
git send-email will fail.

@item  @samp{--quiet} 
Make git-send-email less verbose.  One line per email should be all that is
output.

@item  @samp{--[no-]validate} 
Perform sanity checks on patches.  Currently, validation means the
following:

@itemize 

@item
Invoke the sendemail-validate hook if present (see githooks(5)).

@item
Warn of patches that contain lines longer than
998 characters unless a suitable transfer encoding
(@emph{auto}, @emph{base64}, or @emph{quoted-printable}) is used;
this is due to SMTP limits as described by
@uref{http://www.ietf.org/rfc/rfc5322.txt,http://www.ietf.org/rfc/rfc5322.txt}.
@end itemize

Default is the value of @samp{sendemail.validate}; if this is not set, default to
@samp{--validate}.

@item  @samp{--force} 
Send emails even if safety checks would prevent it.
@end table

@noindent

@heading Information

@table @asis

@item  @samp{--dump-aliases} 
Instead of the normal operation, dump the shorthand alias names from the
configured alias file(s), one per line in alphabetical order. Note, this
only includes the alias name and not its expanded email addresses.  See
@emph{sendemail.aliasesfile} for more information about aliases.
@end table

@noindent

@chapheading CONFIGURATION

@table @asis

@item  sendemail.aliasesFile 
To avoid typing long email addresses, point this to one or more email
aliases files.  You must also supply @samp{sendemail.aliasFileType}.

@item  sendemail.aliasFileType 
Format of the file(s) specified in sendemail.aliasesFile. Must be one of
@emph{mutt}, @emph{mailrc}, @emph{pine}, @emph{elm}, or @emph{gnus}, or @emph{sendmail}.

What an alias file in each format looks like can be found in the
documentation of the email program of the same name. The differences and
limitations from the standard formats are described below:

@table @asis

@item  sendmail 
@itemize 

@item
Quoted aliases and quoted addresses are not supported: lines that
contain a @samp{"} symbol are ignored.

@item
Redirection to a file (@samp{/path/name}) or pipe (@samp{|command}) is not
supported.

@item
File inclusion (@samp{:include: /path/name}) is not supported.

@item
Warnings are printed on the standard error output for any
explicitly unsupported constructs, and any other lines that are not
recognized by the parser.
@end itemize
@end table

@item  sendemail.multiEdit 
If true (default), a single editor instance will be spawned to edit files
you have to edit (patches when @samp{--annotate} is used, and the summary when
@samp{--compose} is used). If false, files will be edited one after the other,
spawning a new editor each time.

@item  sendemail.confirm 
Sets the default for whether to confirm before sending. Must be one of
@emph{always}, @emph{never}, @emph{cc}, @emph{compose}, or @emph{auto}. See @samp{--confirm} in the
previous section for the meaning of these values.
@end table

@noindent

@chapheading EXAMPLES

@noindent

@heading Use gmail as the smtp server

To use @emph{git send-email} to send your patches through the GMail SMTP server,
edit ~/.gitconfig to specify your account settings:

@example
[sendemail]
        smtpEncryption = tls
        smtpServer = smtp.gmail.com
        smtpUser = yourname@@gmail.com
        smtpServerPort = 587
@end example


If you have multi-factor authentication set up on your Gmail account, you
will need to generate an app-specific password for use with @emph{git
send-email}. Visit
@uref{https://security.google.com/settings/security/apppasswords,https://security.google.com/settings/security/apppasswords} to create it.

If you do not have multi-factor authentication set up on your Gmail account,
you will need to allow less secure app access. Visit
@uref{https://myaccount.google.com/lesssecureapps,https://myaccount.google.com/lesssecureapps} to enable it.

Once your commits are ready to be sent to the mailing list, run the
following commands:

@example
$ git format-patch --cover-letter -M origin/master -o outgoing/
$ edit outgoing/0000-*
$ git send-email outgoing/*
@end example

The first time you run it, you will be prompted for your credentials.  Enter
the app-specific or your regular password as appropriate.  If you have
credential helper configured (see git-credential(1)), the password
will be saved in the credential store so you won’t have to type it the next
time.

Note: the following core Perl modules that may be installed with your
distribution of Perl are required: MIME::Base64, MIME::QuotedPrint,
Net::Domain and Net::SMTP.  These additional Perl modules are also required:
Authen::SASL and Mail::Address.

@noindent

@chapheading SEE ALSO

git-format-patch(1), git-imap-send(1), mbox(5)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-send-pack,,,Top
@chapheading Name

git-send-pack — Push objects over Git protocol to another repository

@noindent

@chapheading Synopsis

@display
git send-pack [--all] [--dry-run] [--force] [--receive-pack=<git-receive-pack>]
                [--verbose] [--thin] [--atomic]
                [--[no-]signed|--signed=(true|false|if-asked)]
                [<host>:]<directory> [<ref>…]
@end display


@noindent

@chapheading DESCRIPTION

Usually you would want to use @emph{git push}, which is a higher-level wrapper of
this command, instead. See git-push(1).

Invokes @emph{git-receive-pack} on a possibly remote repository, and updates it
from the current repository, sending named refs.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--receive-pack=<git-receive-pack>} 
Path to the @emph{git-receive-pack} program on the remote end.  Sometimes useful
when pushing to a remote repository over ssh, and you do not have the
program in a directory on the default $PATH.

@item  @samp{--exec=<git-receive-pack>} 
Same as --receive-pack=<git-receive-pack>.

@item  @samp{--all} 
Instead of explicitly specifying which refs to update, update all heads that
locally exist.

@item  @samp{--stdin} 
Take the list of refs from stdin, one per line. If there are refs specified
on the command line in addition to this option, then the refs from stdin are
processed after those on the command line.

If @samp{--stateless-rpc} is specified together with this option then the list of
refs must be in packet format (pkt-line). Each ref must be in a separate
packet, and the list must end with a flush packet.

@item  @samp{--dry-run} 
Do everything except actually send the updates.

@item  @samp{--force} 
Usually, the command refuses to update a remote ref that is not an ancestor
of the local ref used to overwrite it.  This flag disables the check.  What
this means is that the remote repository can lose commits; use it with care.

@item  @samp{--verbose} 
Run verbosely.

@item  @samp{--thin} 
Send a "thin" pack, which records objects in deltified form based on objects
not included in the pack to reduce network traffic.

@item  @samp{--atomic} 
Use an atomic transaction for updating the refs. If any of the refs fails to
update then the entire push will fail without changing any refs.

@item  @samp{--[no-]signed} 
@itemx  @samp{--signed=(true|false|if-asked)} 
GPG-sign the push request to update refs on the receiving side, to allow it
to be checked by the hooks and/or be logged.  If @samp{false} or @samp{--no-signed},
no signing will be attempted.  If @samp{true} or @samp{--signed}, the push will fail
if the server does not support signed pushes.  If set to @samp{if-asked}, sign if
and only if the server supports signed pushes.  The push will also fail if
the actual call to @samp{gpg --sign} fails.  See git-receive-pack(1) for
the details on the receiving end.

@item  @samp{--push-option=<string>} 
Pass the specified string as a push option for consumption by hooks on the
server side.  If the server doesn’t support push options, error out.  See
git-push(1) and githooks(5) for details.

@item  <host> 
A remote host to house the repository.  When this part is specified,
@emph{git-receive-pack} is invoked via ssh.

@item  <directory> 
The repository to update.

@item  <ref>… 
The remote refs to update.
@end table

@noindent

@chapheading SPECIFYING THE REFS

There are three ways to specify which refs to update on the remote end.

With @samp{--all} flag, all refs that exist locally are transferred to the remote
side.  You cannot specify any @emph{<ref>} if you use this flag.

Without @samp{--all} and without any @emph{<ref>}, the heads that exist both on the
local side and on the remote side are updated.

When one or more @emph{<ref>} are specified explicitly (whether on the command
line or via @samp{--stdin}), it can be either a single pattern, or a pair of such
pattern separated by a colon ":" (this means that a ref name cannot have a
colon in it).  A single pattern @emph{<name>} is just a shorthand for
@emph{<name>:<name>}.

Each pattern pair consists of the source side (before the colon)  and the
destination side (after the colon).  The ref to be pushed is determined by
finding a match that matches the source side, and where it is pushed is
determined by using the destination side. The rules used to match a ref are
the same rules used by @emph{git rev-parse} to resolve a symbolic ref name. See
git-rev-parse(1).

@itemize 

@item
It is an error if <src> does not match exactly one of the local refs.

@item
It is an error if <dst> matches more than one remote refs.

@item
If <dst> does not match any remote ref, either

@itemize 

@item
it has to start with "refs/"; <dst> is used as the destination literally in
this case.

@item
<src> == <dst> and the ref that matched the <src> must not exist in the set
of remote refs; the ref matched <src> locally is used as the name of the
destination.
@end itemize
@end itemize

Without ‘--force`, the <src> ref is stored at the remote only if <dst> does
not exist, or <dst> is a proper subset (i.e. an ancestor) of <src>.  This
check, known as "fast-forward check", is performed in order to avoid
accidentally overwriting the remote ref and lose other peoples’ commits from
there.

With @samp{--force}, the fast-forward check is disabled for all refs.

Optionally, a <ref> parameter can be prefixed with a plus @emph{+} sign to
disable the fast-forward check only on that ref.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-sh-i18n--envsubst,,,Top
@chapheading Name

git-sh-i18n--envsubst — i18nフォールバック用のGit独自のenvsubst(1)

@noindent

@chapheading Synopsis

@display
eval_gettext () @{
        printf "%s" "$1" | (
                export PATH $(git sh-i18n--envsubst --variables "$1");
                git sh-i18n--envsubst "$1"
        )
@}
@end display


@noindent

@chapheading DESCRIPTION

これは、全くもってエンドユーザーが実行するコマンドではありません。この文書は、配管スクリプトを研究している、および/または新しいスクリプトを作成している人々を対象としています。

@emph{git sh-i18n--envsubst} は、GNU gettextパッケージに付属するGNU @samp{envsubst(1)}
プログラムのGit用簡略版です。これは、 git-sh-i18n(1) によって内部的に使用され、 @samp{eval_gettext}
関数に渡された変数を差し込みます。

インターフェイスについては何も約束されていません。また、このプログラムが次のバージョンのGitで警告なしに消えることはありません。使用しないでください。(No
promises are made about the interface, or that this program won’t disappear
without warning in the next version of Git. Don’t use it.)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-sh-i18n,,,Top
@chapheading Name

git-sh-i18n — シェルスクリプトのためのGit用i18nセットアップコード

@noindent

@chapheading Synopsis

@display
. "$(git --exec-path)/git-sh-i18n"
@end display


@noindent

@chapheading DESCRIPTION

これは、全くもってエンドユーザーが実行するコマンドではありません。この文書は、磁器風のスクリプトを研究している、および/または新しいスクリプトを書いている人々を対象としています。

'git sh-i18n
スクリプトレットは、シェルスクリプト内に実装されたGitの磁器プログラムによって、(@samp{.`を使用してsourceコマンドで)実行されるように設計されています。
これは、 `gettext.sh} スクリプトを介してアクセス可能なGNU @samp{gettext} および @samp{eval_gettext}
関数のラッパーを提供し、GNU gettextのないシステムではこれらが自動的に使われます(pass-through fallbacks)。

@noindent

@chapheading FUNCTIONS

@table @asis

@item  gettext 
現在、 @samp{printf(1)}
のラッパーとして実装されているダミーのフォールスルー関数。今後のバージョンでは、実際のgettext実装に置き換えられる事でしょう。

@item  eval_gettext 
現在、 @samp{printf(1)} のラッパーとして実装されているダミーのフォールスルー関数で、その変数達は
git-sh-i18n--envsubst(1)
ヘルパーによって展開されます。今後のバージョンでは、実際のgettext実装に置き換えられる事でしょう。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-sh-setup,,,Top
@chapheading Name

git-sh-setup — 一般的なGitシェルスクリプトのセットアップコード

@noindent

@chapheading Synopsis

@display
. "$(git --exec-path)/git-sh-setup"
@end display


@noindent

@chapheading DESCRIPTION

これは、エンドユーザーが実行するコマンドではありません。この文書は、磁器風のスクリプトを研究している、および/または
新しいスクリプトを書いている人々を対象としています。

@emph{git sh-setup} スクリプトレットは、他のシェルスクリプトから( @samp{.}
を使用して)実行(source)され、通常のGitディレクトリと、いくつかのヘルパーシェル関数を指す、いくつかの環境変数を設定するように設計されています。

実行(source)前に、スクリプトでいくつかの環境変数を設定する必要があります。@samp{USAGE} (および存在する場合は @samp{LONG_USAGE}
)は、 @samp{usage()}
シェル関数によって与えられるメッセージを定義するために使用されます。スクリプトが作業ツリーのサブディレクトリから実行できる場合は、
@samp{SUBDIRECTORY_OK} を設定できます(一部のコマンドは実行できません)。

スクリプトレットは @samp{GIT_DIR} と @samp{GIT_OBJECT_DIRECTORY} シェル変数を設定しますが、それらを環境にエクスポートしません。

@noindent

@chapheading FUNCTIONS

@table @asis

@item  die 
提供されたエラーメッセージを標準エラーストリームに出力した後に終了します。

@item  usage 
使用法メッセージで die します。

@item  set_reflog_action 
すでに設定されていない限り、 @samp{GIT_REFLOG_ACTION}
環境変数を指定の文字列(通常はプログラムの名前)に設定します。スクリプトが、refを更新する @samp{git}
コマンドを実行するたびに、この文字列の値を使用してreflogエントリが作成され、どのコマンドがrefを更新したかの記録が残されます。

@item  git_editor 
特定のファイルに対してユーザーが選択したエディター(GIT_EDITOR または core.editor または VISUAL または
EDITOR)を実行しますが、エディターが指定されておらず、端末がダムの場合はエラーになります。

@item  is_bare_repository 
@samp{true} または @samp{false}
を標準出力ストリームに出力して、リポジトリがベアリポジトリであるかどうか(つまり、関連する作業ツリーがないかどうか)を示します。

@item  cd_to_toplevel 
作業ツリーのトップレベルまでchdirを実行します。

@item  require_work_tree 
現在のディレクトリがリポジトリの作業ツリー内にあるかどうかを確認し、そうでない場合は停止(die)します。

@item  require_work_tree_exists 
リポジトリに関連付けられている作業ツリーが存在するかどうかを確認し、存在しない場合は停止(die)します。多くの場合、cd_to_toplevelを呼び出す前に実行されますが、作業ツリーがない場合は実行できません。

@item  require_clean_work_tree <action> [<hint>] 
リポジトリに関連付けられている作業ツリーとインデックスに、追跡されたファイルへのコミットされていない変更がないことを確認します。それ以外の場合は、
@samp{Cannot <action>: <reason>. <hint>} の形式のエラーメッセージを出力し、dieします。 例:

@example
require_clean_work_tree rebase "Please commit or stash them."
@end example


@item  get_author_ident_from_commit 
特定のコミットの GIT_AUTHOR_NAME と GIT_AUTHOR_EMAIL と GIT_AUTHOR_DATE
変数を設定するためにevalで使用するコードを出力します。

@item  create_virtual_base 
最初のファイルを変更して、2番目のファイルと共通の行だけが残るようにします。共通の資料が不十分な場合、最初のファイルは空のままになります。
結果は、3方向マージの仮想ベース入力として適しています。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-shell,,,Top
@chapheading Name

git-shell — GitのみのSSHアクセス用の制限付きログインシェル

@noindent

@chapheading Synopsis

@display
chsh -s $(command -v git-shell) <user>
git clone <user>@@localhost:/path/to/repo.git
ssh <user>@@localhost
@end display


@noindent

@chapheading DESCRIPTION

これは、制限されたGitアクセスを提供するためのSSHアカウントのログインシェルです。プル/プッシュ機能を実装するサーバー側のGitコマンドと、ユーザーのホームディレクトリの
@samp{git-shell-commands} という名前のサブディレクトリにあるカスタムコマンドの実行のみを許可します。

@noindent

@chapheading COMMANDS

@emph{git shell} は、 @samp{-c} オプションの後に以下のコマンドを受け入れます:

@table @asis

@item  @emph{git receive-pack <argument>} 
@itemx  @emph{git upload-pack <argument>} 
@itemx  @emph{git upload-archive <argument>} 
対応するサーバー側コマンドを呼び出して、クライアントの「git push」または「git fetch」または「git archive
--remote」リクエストをサポートします。

@item  @emph{cvs server} 
CVSサーバーを模倣します。 git-cvsserver(1) 参照。
@end table

@samp{~/git-shell-commands} ディレクトリが存在する場合、 @emph{git shell} は、ユーザーのホームディレクトリから
"@samp{git-shell-commands/<command> <arguments>}" を実行することにより他のカスタムコマンドも処理します。

@noindent

@chapheading INTERACTIVE USE

デフォルトでは、上記のコマンドは @samp{-c} オプションでのみ実行できます。シェルはインタラクティブではありません。

@samp{~/git-shell-commands} ディレクトリが存在する場合、 @emph{git shell}
をインタラクティブに実行することもできます(引数なしで)。 @samp{help} コマンドが @samp{git-shell-commands}
ディレクトリにある場合、許可されたアクションの概要をユーザーに提供するために実行されます。次に、 `git> `
プロンプトが表示され、「git-shell-commands」ディレクトリから任意のコマンドを入力することができます。「exit」を使用すれば接続を閉じることができます。

通常、このモードは、ユーザーがアクセスできるリポジトリの一覧表示、リポジトリの作成、削除、名前変更、またはリポジトリの説明と権限の変更を可能にする管理インターフェイスとして使用されます。

@samp{no-interactive-login} コマンドが存在する場合、それが実行され、対話型シェルが中止(abort)されます。

@noindent

@chapheading EXAMPLES

インタラクティブログインを無効にするには、代わりにgreeting(挨拶)を表示します:

@example
$ chsh -s /usr/bin/git-shell
$ mkdir $HOME/git-shell-commands
$ cat >$HOME/git-shell-commands/no-interactive-login <<\EOF
#!/bin/sh
printf '%s\n' "Hi $USER! You've successfully authenticated, but I do not"
printf '%s\n' "provide interactive shell access."
exit 128
EOF
$ chmod +x $HOME/git-shell-commands/no-interactive-login
@end example


git-cvsserverアクセスを有効にするには(なお、git-shell-commandsディレクトリを作成するとインタラクティブログインが可能になるため、通常、上記の「no-interactive-login」の例が前提条件として必要です):

@example
$ cat >$HOME/git-shell-commands/cvs <<\EOF
if ! test $# = 1 && test "$1" = "server"
then
        echo >&2 "git-cvsserver only handles \"server\""
        exit 1
fi
exec git cvsserver server
EOF
$ chmod +x $HOME/git-shell-commands/cvs
@end example


@noindent

@chapheading SEE ALSO

ssh(1), git-daemon(1), contrib/git-shell-commands/README

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-shortlog,,,Top
@chapheading Name

git-shortlog — Summarize 'git log' output

@noindent

@chapheading Synopsis

@display
git shortlog [<options>] [<revision range>] [[--] <path>…]
git log --pretty=short | git shortlog [<options>]
@end display


@noindent

@chapheading DESCRIPTION

Summarizes @emph{git log} output in a format suitable for inclusion in release
announcements. Each commit will be grouped by author and title.

Additionally, "[PATCH]" will be stripped from the commit description.

If no revisions are passed on the command line and either standard input is
not a terminal or there is no current branch, @emph{git shortlog} will output a
summary of the log read from standard input, without reference to the
current repository.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-n} 
@itemx  @samp{--numbered} 
Sort output according to the number of commits per author instead of author
alphabetic order.

@item  @samp{-s} 
@itemx  @samp{--summary} 
Suppress commit description and provide a commit count summary only.

@item  @samp{-e} 
@itemx  @samp{--email} 
Show the email address of each author.

@item  @samp{--format[=<format>]} 
Instead of the commit subject, use some other information to describe each
commit.  @emph{<format>} can be any string accepted by the @samp{--format} option of
@emph{git log}, such as @emph{* [%h] %s}.  (See the "PRETTY FORMATS" section of
git-log(1).)

@example
Each pretty-printed commit will be rewrapped before it is shown.
@end example

@item  @samp{--group=<type>} 
Group commits based on @samp{<type>}. If no @samp{--group} option is specified, the
default is @samp{author}. @samp{<type>} is one of:

@itemize 

@item
@samp{author}, commits are grouped by author

@item
@samp{committer}, commits are grouped by committer (the same as @samp{-c})

@item
@samp{trailer:<field>}, the @samp{<field>} is interpreted as a case-insensitive commit
message trailer (see git-interpret-trailers(1)). For example, if
your project uses @samp{Reviewed-by} trailers, you might want to see who has been
reviewing with @samp{git shortlog -ns --group=trailer:reviewed-by}.

Note that commits that do not include the trailer will not be counted.
Likewise, commits with multiple trailers (e.g., multiple signoffs) may be
counted more than once (but only once per unique trailer value in that
commit).

Shortlog will attempt to parse each trailer value as a @samp{name <email>}
identity. If successful, the mailmap is applied and the email is omitted
unless the @samp{--email} option is specified. If the value cannot be parsed as
an identity, it will be taken literally and completely.
@end itemize

If @samp{--group} is specified multiple times, commits are counted under each
value (but again, only once per unique value in that commit). For example,
@samp{git shortlog --group=author --group=trailer:co-authored-by} counts both
authors and co-authors.

@item  @samp{-c} 
@itemx  @samp{--committer} 
This is an alias for @samp{--group=committer}.

@item  @samp{-w[<width>[,<indent1>[,<indent2>]]]} 
Linewrap the output by wrapping each line at @samp{width}.  The first line of
each entry is indented by @samp{indent1} spaces, and the second and subsequent
lines are indented by @samp{indent2} spaces. @samp{width}, @samp{indent1}, and @samp{indent2}
default to 76, 6 and 9 respectively.

If width is @samp{0} (zero) then indent the lines of the output without wrapping
them.

@item  <revision range> 
Show only commits in the specified revision range.  When no <revision range>
is specified, it defaults to @samp{HEAD} (i.e. the whole history leading to the
current commit).  @samp{origin..HEAD} specifies all the commits reachable from
the current commit (i.e. @samp{HEAD}), but not from @samp{origin}. For a complete list
of ways to spell <revision range>, see the "Specifying Ranges" section of
gitrevisions(7).

@item  [--] <path>… 
Consider only commits that are enough to explain how the files that match
the specified paths came to be.

Paths may need to be prefixed with @samp{--} to separate them from options or the
revision range, when confusion arises.
@end table

@noindent

@heading Commit Limiting

ここで説明されている特別な表記法を使用してリストする必要があるコミットの範囲を指定することに加えて、追加のコミット制限が適用される場合があります。

より多くのオプションを使用すると、通常、出力がさらに制限されます(たとえば、@samp{--since=<date1>`は}<date1>@samp{より新しいコミットに制限され、}--grep=<pattern>@samp{と一緒に使用すると、ログメッセージに}<pattern>`と一致する行があるコミットにさらに制限されます)。

注意: これらは、`--reverse`などのコミット順序およびフォーマットオプションの前に適用されることに注意してください。

@table @asis

@item  @samp{-<number>} 
@itemx  @samp{-n <number>} 
@itemx  @samp{--max-count=<number>} 
出力するコミットの数を制限します。

@item  @samp{--skip=<number>} 
コミット出力の表示を開始する前に、'number’個のコミットをスキップします。

@item  --since=<date> 
@itemx  @samp{--after=<date>} 
指定の日付よりも新しいコミットを表示します。

@item  @samp{--until=<date>} 
@itemx  @samp{--before=<date>} 
指定の日付より古いコミットを表示します。

@item  @samp{--author=<pattern>} 
@itemx  @samp{--committer=<pattern>} 
コミット出力を、指定されたパターン(正規表現)に一致する作者(author)/コミッター(committer)ヘッダー行を持つものに制限します。複数の
@samp{--author=<pattern>} がある場合、作者が指定されたパターンのいずれかに一致するコミットが選択されます(複数の
@samp{--committer=<pattern>} の場合も同様)。

@item  @samp{--grep-reflog=<pattern>} 
コミット出力を、指定されたパターン(正規表現)に一致するreflogエントリを持つものに制限します。複数の`--grep-reflog`を使用すると、指定されたパターンのいずれかに一致するreflogメッセージを持つコミットが選択されます。`--walk-reflogs`が使用されていない限り、このオプションを使用するとエラーになります。

@item  @samp{--grep=<pattern>} 
コミット出力を、指定されたパターン(正規表現)に一致するログメッセージを持つものに制限します。複数の`--grep=<pattern>@samp{を使用すると、指定されたパターンのいずれかにメッセージが一致するコミットが選択されます(全てに一致するコミットだけを選択したい場合、}--all-match`を参照してください)。

`--notes`が有効な場合、ノートからのメッセージは、ログメッセージの一部であるかのようにマッチングされます。

@item  @samp{--all-match} 
コミット出力を、少なくとも1つに一致するものではなく、指定されたすべての`--grep`に一致するものに制限します。

@item  @samp{--invert-grep} 
コミット出力を、`--grep=<pattern>`で指定されたパターンと一致しないログメッセージを持つものに制限します。

@item  @samp{-i} 
@itemx  @samp{--regexp-ignore-case} 
大文字小文字に関係なく、正規表現の制限パターンに一致します。

@item  @samp{--basic-regexp} 
制限パターンを基本正規表現として扱います。これがデフォルトです。

@item  @samp{-E} 
@itemx  @samp{--extended-regexp} 
制限パターンを、デフォルトの基本正規表現の代わりに拡張正規表現として扱います。

@item  @samp{-F} 
@itemx  @samp{--fixed-strings} 
制限パターンを固定文字列として扱います(パターンを正規表現として解釈しないでください)。

@item  @samp{-P} 
@itemx  @samp{--perl-regexp} 
制限パターンをPerl互換の正規表現として扱います。

これらのタイプの正規表現のサポートは、コンパイル時オプションに依存します。Gitが当該のサポート付きでコンパイルされていない場合、このオプションを提供すると、Gitが死にます(die)。

@item  @samp{--remove-empty} 
指定されたパスがツリーから見えなくなったら停止(stop)します。

@item  @samp{--merges} 
マージコミットのみを印刷します。これは`--min-parents=2`とまったく同じです。

@item  @samp{--no-merges} 
複数の親を持つコミットを出力しない。これは`--max-parents=1`とまったく同じです。

@item  @samp{--min-parents=<number>} 
@itemx  @samp{--max-parents=<number>} 
@itemx  @samp{--no-min-parents} 
@itemx  @samp{--no-max-parents} 
量の多少に関わらず、とにかく複数の親コミットがあるコミットのみを表示します。特に、@samp{--max-parents=1`は}--no-merges`と同じであり、@samp{--min-parents=2`は}--merges`と同じです。@samp{--max-parents=0`はすべてのルートコミットを提供し、}--min-parents=3`はすべてのタコ足マージ(octopus
merges)を示します。

@samp{--no-min-parents`と}--no-max-parents`は、これらの制限を(制限なしに)再度リセットします。同等の形式は、@samp{--min-parents=0}(すべてのコミットに0個以上の親があります)および`--max-parents=-1`(マイナスの数は上限がないことを示します)です。

@item  @samp{--first-parent} 
マージコミットを確認したら、最初の親コミットのみを探索します。このオプションは、特定のトピックブランチの進化を表示するときに、より良い概要を提供できます。トピックブランチへのマージは、時々更新されるアップストリームに調整することだけである傾向があり、このオプションを使用すると、そのようなマージによって履歴に取り込まれた個々のコミットを無視できます。

@item  @samp{--not} 
次に現れる`--not`までの間、後続のすべてのリビジョン指定子の'^'プレフィックス(またはその欠如)の意味を逆にします。

@item  @samp{--all} 
‘refs/`内のすべてのrefが`HEAD`とともに、コマンドラインに’<commit>'としてリストされているかのように見せかけます。

@item  @samp{--branches[=<pattern>]} 
‘refs/heads`内のすべてのrefがコマンドラインに’<commit>'としてリストされているかのように見せかけます。@emph{<pattern>'が指定されている場合、ブランチを指定されたシェルグロブ(shell
glob)に一致するものに制限します。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--tags[=<pattern>]} 
‘refs/tags`内のすべてのrefがコマンドラインに’<commit>'としてリストされているかのように見せかけます。@emph{<pattern>'が指定されている場合は、指定されたシェルグロブ(shell
glob)に一致するタグにタグを制限します。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--remotes[=<pattern>]} 
‘refs/remotes`内のすべてのrefがコマンドラインに’<commit>'としてリストされているかのように見せかけます。@emph{<pattern>'が指定されている場合、リモート追跡ブランチを指定されたシェルグロブ(shell
glob)に一致するものに制限します。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--glob=<glob-pattern>} 
シェルグロブ'<glob-pattern>'に一致するすべてのrefがコマンドラインに'<commit>'としてリストされているかのように見せかけます。先頭の’refs/@emph{は、欠落している場合は自動的に先頭に追加されます。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--exclude=<glob-pattern>} 
次の`--all`または`--branches`または`--tags`または`--remotes`または`--glob`が別の方法で考慮する'<glob-pattern>'に一致するrefを含めないでください。このオプションを繰り返すと、次の`--all`または`--branches`または`--tags`または`--remotes`または`--glob`オプションまで除外パターンが蓄積されます(他のオプションまたは引数は、蓄積されたパターンをクリアしません)。

与えられたパターンは、それぞれ`--branches`または`
--tags`または`--remotes`に適用される場合、‘refs/heads`または`refs/tags`または`refs/remotes`で始まるべきではありません。@samp{--glob`または}--all`に適用する場合は、`refs/`で始める必要があります。末尾の’/*'を意図している場合は、明示的に指定する必要があります。

@item  @samp{--reflog} 
reflogsで言及されているすべてのオブジェクトがコマンドラインに`<commit>`としてリストされているかのように見せかけます。

@item  @samp{--alternate-refs} 
代替リポジトリのref先端として言及されているすべてのオブジェクトがコマンドラインにリストされているかのように見せかけます。代替リポジトリは、オブジェクトディレクトリが`objects/info/alternates`で指定されているリポジトリです。インクルードされたオブジェクトのセットは、`core.alternateRefsCommand`などによって変更できます。git-config(1)を参照してください。

@item  @samp{--single-worktree} 
デフォルトでは、作業ツリーが複数ある場合、@samp{--all`と}-reflog`と`--indexed-objects`では、すべての作業ツリーが検査されます(git-worktree(1)を参照)。このオプションは、現在の作業ツリーのみを調べるように強制します。

@item  @samp{--ignore-missing} 
入力に無効なオブジェクト名が含まれている場合、そもそもその不正な入力が行われていないかのように見せかけます。

@item  @samp{--bisect} 
コマンドラインで、bad bisection ref @samp{refs/bisect/bad} がリストされ、その後に @samp{--not} と good
bisection ref @samp{refs/bisect/good-*} が続くかのように見せかけます。

@item  @samp{--stdin} 
コマンドラインにリストされている'<commit>'に加えて、標準入力からそれらを読み取ります。`--`区切り文字が表示された場合は、コミットの読み取りを停止し、パスの読み取りを開始して結果を制限します。

@item  @samp{--cherry-mark} 
@samp{--cherry-pick}（以下を参照）と同様ですが、同等のコミットを省略せずに`=@samp{と印し、同等でないコミットを}+`と印します。

@item  @samp{--cherry-pick} 
コミットの組を対称差(symmetric difference)に制限する場合、「反対側」の別のコミットと同じ変更を導入するコミットを省略します。

たとえば、@samp{A`と`B`の2つのブランチがある場合、それらの片側だけですべてのコミットを一覧表示する通常の方法は、}--left-right`を使用することです(`--left-right`オプションの説明の以下の例を参照してください)。ただし、他のブランチからは(ブランチAと重複しない)厳選されたコミットが表示されます(たとえば、「3rd
onb」はブランチAからチェリーピックされる可能性があります)。このオプションを使用すると、そのようなコミットのペアは出力から除外されます。

@item  @samp{--left-only} 
@itemx  @samp{--right-only} 
リストは、対称差のそれぞれの側でのみコミットします。つまり、@samp{--left-right`で `<}
と印されるのだけか、あるいは`--left-right`で`>`と印されるものだけです。

たとえば、@samp{--cherry-pick --right-only
A...B`は、`A`にある、または`A`のコミットとパッチと同等のコミットを`B`から省略します。つまり、これは`git cherry A
B`からの}+@samp{コミットをリストします。より正確に書くと、}--cherry-pick --right-only
--no-merges`により正確なリストを提供します。

@item  @samp{--cherry} 
`--right-only --cherry-mark
--no-merges`の同義語です。出力を私たちの側のコミットに制限し、フォークされた履歴の反対の側に適用されたものを、`git cherry
upstream mybranch`と同様に`git log --cherry upstream…mybranch`で印するのに役立ちます。

@item  @samp{-g} 
@itemx  @samp{--walk-reflogs} 
コミットの祖先チェーンをたどる代わりに、reflogエントリを最新のものから古いものに移動します。このオプションを使用する場合、除外するコミットを指定することはできません(つまり、'^commit’や'commit1..commit2’や'commit1...commit2’表記は使用できません)。

(明らかな理由で、)@samp{oneline`と`reference`以外の}--pretty`形式では、これにより、出力にreflogから取得された2行の追加情報が含まれます。出力のreflog指定子は、@samp{ref@@@{Nth@}}(@samp{Nth`はreflogの逆時系列インデックス(reverse-chronological
index))または`ref@@@{timestamp@}}(そのエントリのタイムスタンプ付き)として表示されます。表示は下記のいくつかのルールに依存します:

@enumerate 

@item
開始点が @samp{ref@@@{Nth@}} として指定されている場合は、インデックス形式を表示します。

@item
開始点が @samp{ref@@@{now@}} として指定されている場合は、タイムスタンプ形式を表示します。

@item
上記のどちらも使用されていないが、コマンドラインで`--date`が指定されている場合は、`--date`で要求された形式でタイムスタンプを表示します。

@item
それ以外の場合は、インデックス形式を表示します。
@end enumerate

@samp{--pretty =
oneline`では、コミットメッセージの前にこの情報が同じ行に付けられます。このオプションを}--reverse`と組み合わせることはできません。git-reflog(1)も参照してください。

`--pretty=reference`では、この情報はまったく表示されません。

@item  @samp{--merge} 
マージが失敗した後、競合があり、マージするすべてのheadに存在しないファイルに関連(touch)するrefを表示します。

@item  @samp{--boundary} 
除外された境界コミットを出力します。 境界コミットの前には `-`が付いています。
@end table

@noindent

@heading History Simplification

特定の<path>を変更するコミットなど、履歴の一部のみに関心がある場合があります。ただし、「履歴の簡略化」(History
Simplification)は2つの部分から成ります。履歴を簡略化するためにはさまざまな戦略があるためです。その1つはコミットの選択であり、もう1つはそれを行う方法です。

以下のオプションは、表示するコミットを選択します:

@table @asis

@item  <paths> 
指定された<パス>を変更するコミットが選択されます。

@item  @samp{--simplify-by-decoration} 
いくつかのブランチまたはタグによって参照されるコミットが選択されます。
@end table

注意: 意味のある重要な履歴のために、追加のコミットを表示できることに注意してください。

以下のオプションは、簡略化の実行方法に影響します。

@table @asis

@item  Default mode 
履歴を、ツリーの最終状態を説明する最も単純な履歴に単純化します。最終結果が同じである場合(つまり、同じコンテンツのブランチをマージする場合)、いくつかの傍流ブランチ(side
branches)を削除するため、最も単純です。

@item  @samp{--show-pulls} 
デフォルトモードからのすべてのコミットを含めますが、最初の親へのTREESAMEではなく、後の親へのTREESAMEであるマージコミットも含めます。このモードは、ブランチに変更を「最初に導入した」マージコミットを表示するのに役立ちます。(訳注:TREESAME=pathspecが全く同一であるツリー)

@item  @samp{--full-history} 
デフォルトモードと同じですが、一部の履歴を削除しません。

@item  @samp{--dense} 
選択したコミットのみが表示され、重大で意味のある履歴を持つコミットもいくつか表示されます。

@item  @samp{--sparse} 
簡略化された履歴内のすべてのコミットが表示されます。

@item  @samp{--simplify-merges} 
このマージに寄与する選択されたコミットがないため、結果の履歴からいくつかの不要なマージを削除するための`--full-history`への追加オプション。

@item  @samp{--ancestry-path} 
表示するコミットの範囲が指定されている場合(たとえば、@emph{commit1..commit2’または’commit2 ^commit1})、
@emph{commit1} と @emph{commit2} の間の祖先チェーンに直接存在するコミットのみ、つまり、 @emph{commit1} の子孫であり、
@emph{commit2} の祖先であるコミットを表示します。
@end table

より詳細な説明は以下のとおりです。

<paths> として @samp{foo} を指定したとします。 @samp{foo} !TREESAME
を変更するコミットを呼び出し、残りをTREESAMEと呼びます。( @samp{foo}
のためにフィルタリングされた差分では、それぞれ異なって見えたりたり等しく見えたりします。）

以下、簡略化設定の違いを説明するために、同じ履歴例を使います。このコミットグラフでは、ファイル @samp{foo} をフィルタリングしていると想定しています:

@example
          .-A---M---N---O---P---Q
         /     /   /   /   /   /
        I     B   C   D   E   Y
         \   /   /   /   /   /
          `-------------'   X
@end example


履歴 A---Q の水平線は、各マージの最初の親と見なされます。その各コミットは以下のとおりです:

@itemize 

@item
@samp{I} は最初のコミットであり、ファイル @samp{foo} が内容 “asdf” で存在し、ファイル @samp{quux} は内容 “quux”
で存在します。最初のコミットは空のツリーと比較されるため、@samp{I} は !TREESAME です。

@item
@samp{A} では、 @samp{foo} には “foo” だけが含まれています。

@item
@samp{B} には @samp{A} と同じ変更が含まれています。そのマージ @samp{M} は些細なことであり、したがってすべての親にとって TREESAME です。

@item
@samp{C} は @samp{foo} を変更しませんが、そのマージ @samp{N} はそれを “foobar” に変更するので、どの親にとっても TREESAME
ではありません。

@item
@samp{D} は @samp{foo} を “baz” に設定します。そのマージ @samp{O} は、 @samp{N} と @samp{D} から “foobarbaz”
への文字列を結合します。つまり、どの親にとっても TREESAME ではありません。

@item
@samp{E} は @samp{quux} を “xyzzy” に変更し、そのマージ @samp{P} は文字列を “quuxxyzzy” に結合します。 @samp{P} は
@samp{O} に対して TREESAME ですが、 @samp{E} に対してはそうではありません。

@item
@samp{X} は、新ファイル @samp{side} を追加し、 @samp{Y} がそれを変更した独立したルートコミットです。 @samp{Y} は @samp{X}
へのTREESAMEです。そのマージ @samp{Q} は @samp{P} に @samp{side} を追加し、 @samp{Q} は @samp{P} にはTREESAMEですが、@samp{Y}
に対してはそうではありません。
@end itemize

@samp{rev-list} は、 @samp{--full-history} および/または、( @samp{--parents} または @samp{--children}
を介して)親の書き換えが使用されているかどうかに基づいて、コミットを含めたり除外したりして、履歴を逆方向にウォークスルーします。以下の設定が可能です。

@table @asis

@item  Default mode 
コミットは、どの親に対してもTREESAMEでない場合に含まれます(これは変更できますが、以下の @samp{--sparse}
を参照してください)。コミットがマージであり、一方の親に対するTREESAMEであった場合は、その親のみをフォローします。(TREESAMEの親が複数ある場合でも、そのうちの1つだけをフォローします)。それ以外の場合は、すべての親をフォローします。

これにより、以下のようになります:

@example
          .-A---N---O
         /     /   /
        I---------D
@end example


TREESAMEの親のみに従うルールが利用可能な場合は、 @samp{B} を検討対象から完全に削除したことに注意してください。 @samp{C} は @samp{N}
を介して考慮されましたが、しかしそれはTREESAMEです。ルートコミットは空のツリーと比較されるため、 @samp{I} は !TREESAME です。

親子関係は @samp{--parents} でのみ表示されますが、デフォルトモードで選択されたコミットには影響しないため、親の行を示しました。

@item  @samp{--full-history without parent rewriting} 
このモードは、デフォルトとはある一点で異なります。つまり、いずれかの親に対してTREESAMEであっても、常にマージのすべての親に従います。マージの複数の側にコミットが含まれている場合でも、これはマージ自体が含まれていることを意味するものではありません！
例では以下のようになります。

@example
        I  A  B  N  D  O  P  Q
@end example


@samp{M} は、両方の親にとってTREESAMEであるため、除外されました。 @samp{E} と @samp{C} と @samp{B} をすべて巡りましたが、 @samp{B} だけが
!TREESAME だったので、他は表示されません。

注意:
親の書き換え(rewrite)がないと、コミット間の親子関係について話す(talk)ことは実際には不可能であるため、それらが切断されている(disconnected)ことを示していることに注意してください。

@item  @samp{--full-history with parent rewriting} 
通常のコミットは !TREESAME の場合にのみ含まれます(これは変更できますが、以下の @samp{--sparse} を参照してください)。

マージは常に含まれます。ただし、親リストは書き直されます。各親に沿って、自分自身に含まれていないコミットを削除します。 これにより以下のようになります。

@example
          .-A---M---N---O---P---Q
         /     /   /   /   /
        I     B   /   D   /
         \   /   /   /   /
          `-------------'
@end example


上記を書き直さずに @samp{--full-history} と比較してください。 @samp{E} はTREESAMEであるため削除されましたが、Pの親リストは @samp{E}
の親 @samp{I} を含むように書き直されていることに注意してください。 @samp{C} と @samp{N} および @samp{X} と @samp{Y} と @samp{Q}
についても同じことが起こりました。
@end table

上記の設定に加えて、あなたはTREESAMEが包含に影響を与えるかどうかを変更できます:

@table @asis

@item  @samp{--dense} 
巡ったコミットは、親にとってTREESAMEでない場合に含まれます。

@item  @samp{--sparse} 
巡ったすべてのコミットが含まれます。

@samp{--full-history}
がなくても、これによりマージが単純化されることに注意してください。親の1つがTREESAMEの場合、その1つだけに従うため、マージの反対側を巡ることはありません。

@item  @samp{--simplify-merges} 
最初に、親を書き換えた @samp{--full-history} と同じ方法で履歴グラフを作成します(上記を参照)。

それから、以下のルールに従って、各コミット @samp{C} を最終履歴内の置換 @samp{C'} に単純化します:

@itemize 

@item
@samp{C'} を @samp{C} にセットします。

@item
@samp{C'} の各親 @samp{P} をその簡略化された @samp{P'}
に置き換えます。その過程で、他の親の祖先であるか、ルートである親を削除すると、TREESAMEが空のツリーにコミットされ、重複が削除されますが、TREESAMEであるすべての親を削除しないように注意してください。

@item
この親の書き換え後、 @samp{C'} がルートまたはマージコミット(0または >1 の親を持つ)、境界コミット、または
!TREESAMEである場合、それは残ります。それ以外の場合は、唯一の親に置き換えられます。
@end itemize

この効果は、親の書き換えを使用した @samp{--full-history} と比較することで最もよく示されます。例は以下のようになります:

@example
          .-A---M---N---O
         /     /       /
        I     B       D
         \   /       /
          `---------'
@end example


注意: @samp{--full-history} に対する @samp{N} と @samp{P} と @samp{Q} の主な違いに注意してください:

@itemize 

@item
@samp{N} の親リストは、他の親 @samp{M} の祖先であるため、 @samp{I} が削除されました。それでも、 !TREESAME なので @samp{N} が残りました。

@item
@samp{P} の親リストも同様に @samp{I} が削除されました。 @samp{P} は、親が1つで TREESAMEであるため、完全に削除されました。

@item
@samp{Q} の親リストでは、 @samp{Y} が @samp{X} に簡略化されていました。その後、 @samp{X} はTREESAMEルートであったため、削除されました。 @samp{Q}
は、親が1つで TREESAMEであるため、完全に削除されました。
@end itemize
@end table

利用可能な別の簡略化モードがあります:

@table @asis

@item  @samp{--ancestry-path} 
表示されるコミットを、指定されたコミット範囲内の “from” コミットと “to”
コミットの間の祖先チェーンに直接あるコミットに制限します。つまり、 “to” コミットの祖先であるコミットと “from”
コミットの子孫であるコミットのみを表示します。

ユースケースの例として、以下のコミット履歴について考えます:

@example
            D---E-------F
           /     \       \
          B---C---G---H---I---J
         /                     \
        A-------K---------------L--M
@end example


通常の @emph{D..M} は、 @samp{M} の祖先であるコミットのセットを計算しますが、 @samp{D} の祖先であるコミットは除外します。 これは、「 @samp{M} には
@samp{D} には存在しなかったものがある」という意味で、 @samp{D} 以降の @samp{M`に至るまでの歴史に何が起こったのかを知るのに役立ちます。この例の結果は、
`A} と @samp{B} (そしてもちろん @samp{D} 自体)を除くすべてのコミットになります。

ただし、 @samp{M} のコミットが @samp{D} で入ったバグで汚染されており、修正が必要な場合は、実際には @samp{D} の子孫である @emph{D..M}
のサブセットのみを表示する必要があります。つまり、 @samp{C} と @samp{K} を除外します。これはまさに @samp{--ancestry-path}
オプションが行うことです。これを @emph{D..M} 範囲に適用すると、以下のようになります:

@example
                E-------F
                 \       \
                  G---H---I---J
                               \
                                L--M
@end example

@end table

別のオプション @samp{--show-pulls} について説明する前に、新しいサンプル履歴を作成する必要があります。

簡略化された履歴を見るときにユーザーが直面する一般的な問題は、ファイルを変更したことがわかっているコミットが、ファイルの簡略化された履歴に表示されないことです。そこで、新しい例を示し、その場合に
@samp{--full-history} や @samp{--simplify-merges} などのオプションがどのように機能するかを示しましょう。

@example
          .-A---M-----C--N---O---P
         /     / \  \  \/   /   /
        I     B   \  R-'`-Z'   /
         \   /     \/         /
          \ /      /\        /
           `---X--'  `---Y--'
@end example


この例では、 @samp{I} が @samp{file.txt} を作成し、それが @samp{A} と`B` と @samp{X}
にてさまざまな方法で変更されたとします。ひとり親のコミット @samp{C} と @samp{Z} と @samp{Y} は @samp{file.txt} を変更していません。マージコミット
@samp{M} は、マージの競合を解決して、 @samp{A} と @samp{B}
の両方の変更を含めることによって作成されたため、どちらにもTREESAMEではありません。ただし、マージコミット @samp{R} は、 @samp{M} の
@samp{file.txt`の内容を無視し、 `X} の @samp{file.txt} の内容のみを取得することによって作成されました。 したがって、 @samp{R} は
@samp{X} へのTREESAMEですが、 @samp{M} はそうではありません。最後に、 @samp{N} を作成するための自然なマージ解決は、 @samp{R} で
@samp{file.txt} の内容を取得することです。したがって、 @samp{N} は @samp{C} ではなく @samp{R} へのTREESAMEです。マージコミット @samp{O} と
@samp{P} は、最初の親にはTREESAMEですが、2番目の親である @samp{Z} と @samp{Y} にはついてはそうではありません。

デフォルトモードを使用する場合、 @samp{N} と @samp{R}
は両方ともTREESAMEの親を持っているため、これらのエッジはウォークされ、他のエッジは無視されます。結果の履歴グラフは以下のとおりです:

@example
        I---X
@end example


@samp{--full-history} を使用する場合、Gitはすべてのエッジを巡ります。これにより、コミット @samp{A} と @samp{B} と マージ @samp{M}
が検出されますが、マージコミット @samp{O} と @samp{P} も明らかになります。 親を書き換えると、結果のグラフは以下のようになります:

@example
          .-A---M--------N---O---P
         /     / \  \  \/   /   /
        I     B   \  R-'`--'   /
         \   /     \/         /
          \ /      /\        /
           `---X--'  `------'
@end example


ここで、マージコミット @samp{O} と @samp{P} は、実際には @samp{file.txt} への変更を提供しなかったため、余分なノイズを提供します。古いバージョンの
@samp{file.txt}
に基づいたトピックのみをマージしました。これは、多くの寄稿者が並行して作業し、トピックブランチを単一のトランクに沿ってマージするワークフローを使用するリポジトリの一般的な問題です。開発に関係のないマージが
@samp{--full-history} の結果に表示されます。

@samp{--simplify-merges} オプションを使用すると、コミット @samp{O} と @samp{P} が結果から消えます。 これは、 @samp{O} と @samp{P}
の書き直された2番目の親が、最初の親から到達可能であるためです。これらのエッジが削除されると、コミットは、親にとってTREESAMEである単一の親のコミットのように見えます。これはコミット
@samp{N} にも発生し、以下のような履歴ビューが表示されます:

@example
          .-A---M--.
         /     /    \
        I     B      R
         \   /      /
          \ /      /
           `---X--'
@end example


このビューでは、 @samp{A} と @samp{B} と @samp{X} からの重要なひとり親の変更がすべて表示されます。また、慎重に解決されたマージ @samp{M}
とそれほど慎重に解決されていないマージ @samp{R} も表示されます。これは通常、コミット @samp{A} と @samp{B}
がデフォルトのビューの履歴から「消えた」理由を判断するのに十分な情報です。ただし、このアプローチにはいくつかの問題があります。

最初の問題はパフォーマンスです。以前のオプションとは異なり、 @samp{--simplify-merges}
オプションでは、単一の結果を返す前にコミット履歴全体をウォークする必要があります。これにより、非常に大規模なリポジトリでこのオプションを使用するのが難しくなる可能性があります。

2番目の問題は監査の1つです。多くの寄稿者が同じリポジトリで作業している場合、どのマージコミットが重要なブランチに変更を導入したかが重要です。上記の問題のあるマージ
@samp{R} は、重要なブランチにマージするために使用されたマージコミットではない可能性があります。 代わりに、マージ @samp{N} を使用して @samp{R} と @samp{X}
を重要なブランチにマージしました。このコミットには、変更 @samp{X} がコミットメッセージの @samp{A} と @samp{B}
からの変更を上書きするようになった理由に関する情報が含まれている可能性があります。

@table @asis

@item  @samp{--show-pulls} 
デフォルトの履歴に表示されるコミットに加えて、最初の親にはTREESAMEではなく、後の親にはTREESAMEである各マージコミットを表示します。

マージコミットが @samp{--show-pulls} に含まれている場合、マージは別のブランチから変更を「プル」したかのように扱われます。この例で
@samp{--show-pulls} を使用すると(他のオプションは使用しない場合、)結果のグラフは行かのようになります:

@example
        I---X---R---N
@end example


ここで、コミット @samp{X} と @samp{R} をそれぞれベースブランチにプルしたため、マージコミット @samp{R} と @samp{N}
が含まれています。これらのマージは、コミット @samp{A} と @samp{B} がデフォルトの履歴に表示されない理由です。

@samp{--show-pulls} が @samp{--simplify-merges} とペアになっている場合、グラフには必要なすべての情報が含まれます:

@example
          .-A---M--.   N
         /     /    \ /
        I     B      R
         \   /      /
          \ /      /
           `---X--'
@end example


@samp{M} は @samp{R} から到達可能であるため、 @samp{N} から @samp{M} へのエッジが単純化されていることに注意してください。ただし、 @samp{N} は、変更
@samp{R} をメインブランチに「プル」したため、重要なコミットとして履歴に表示されます。
@end table

@samp{--simplify-by-decoration}
オプションを使用すると、タグで参照されていないコミットを省略して、履歴のトポロジの全体像のみを表示できます。コミットは、(1)タグによって参照されている場合、または
(2)コマンドラインで指定されたパスの内容を変更した場合に、!TREESAMEとしてマークされます(つまり、上記の履歴簡略化ルールの後に保持されます)。他のすべてのコミットはTREESAMEとしてマークされます(簡略化される可能性があります)。

@noindent

@chapheading MAPPING AUTHORS

See gitmailmap(5).

Note that if @samp{git shortlog} is run outside of a repository (to process log
contents on standard input), it will look for a @samp{.mailmap} file in the
current directory.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-show-branch,,,Top
@chapheading Name

git-show-branch — Show branches and their commits

@noindent

@chapheading Synopsis

@display
git show-branch [-a|--all] [-r|--remotes] [--topo-order | --date-order]
                [--current] [--color[=<when>] | --no-color] [--sparse]
                [--more=<n> | --list | --independent | --merge-base]
                [--no-name | --sha1-name] [--topics]
                [(<rev> | <glob>)…]
git show-branch (-g|--reflog)[=<n>[,<base>]] [--list] [<ref>]
@end display


@noindent

@chapheading DESCRIPTION

Shows the commit ancestry graph starting from the commits named with <rev>s
or <glob>s (or all refs under refs/heads and/or refs/tags) semi-visually.

It cannot show more than 29 branches and commits at a time.

It uses @samp{showbranch.default} multi-valued configuration items if no <rev> or
<glob> is given on the command line.

@noindent

@chapheading OPTIONS

@table @asis

@item  <rev> 
Arbitrary extended SHA-1 expression (see gitrevisions(7))  that
typically names a branch head or a tag.

@item  <glob> 
A glob pattern that matches branch or tag names under refs/.  For example,
if you have many topic branches under refs/heads/topic, giving @samp{topic/*}
would show all of them.

@item  @samp{-r} 
@itemx  @samp{--remotes} 
Show the remote-tracking branches.

@item  @samp{-a} 
@itemx  @samp{--all} 
Show both remote-tracking branches and local branches.

@item  @samp{--current} 
With this option, the command includes the current branch to the list of
revs to be shown when it is not given on the command line.

@item  @samp{--topo-order} 
By default, the branches and their commits are shown in reverse
chronological order.  This option makes them appear in topological order
(i.e., descendant commits are shown before their parents).

@item  @samp{--date-order} 
This option is similar to @samp{--topo-order} in the sense that no parent comes
before all of its children, but otherwise commits are ordered according to
their commit date.

@item  @samp{--sparse} 
By default, the output omits merges that are reachable from only one tip
being shown.  This option makes them visible.

@item  @samp{--more=<n>} 
Usually the command stops output upon showing the commit that is the common
ancestor of all the branches.  This flag tells the command to go <n> more
common commits beyond that.  When <n> is negative, display only the
<reference>s given, without showing the commit ancestry tree.

@item  @samp{--list} 
Synonym to @samp{--more=-1}

@item  @samp{--merge-base} 
Instead of showing the commit list, determine possible merge bases for the
specified commits. All merge bases will be contained in all specified
commits. This is different from how git-merge-base(1) handles the
case of three or more commits.

@item  @samp{--independent} 
Among the <reference>s given, display only the ones that cannot be reached
from any other <reference>.

@item  @samp{--no-name} 
Do not show naming strings for each commit.

@item  @samp{--sha1-name} 
Instead of naming the commits using the path to reach them from heads
(e.g. "master~2" to mean the grandparent of "master"), name them with the
unique prefix of their object names.

@item  @samp{--topics} 
Shows only commits that are NOT on the first branch given.  This helps track
topic branches by hiding any commit that is already in the main line of
development.  When given "git show-branch --topics master topic1 topic2",
this will show the revisions given by "git rev-list ^master topic1
topic2"

@item  @samp{-g} 
@itemx  @samp{--reflog[=<n>[,<base>]] [<ref>]} 
Shows <n> most recent ref-log entries for the given ref.  If <base> is
given, <n> entries going back from that entry.  <base> can be specified as
count or date.  When no explicit <ref> parameter is given, it defaults to
the current branch (or @samp{HEAD} if it is detached).

@item  @samp{--color[=<when>]} 
Color the status sign (one of these: @samp{*} @samp{!} @samp{+} @samp{-}) of each commit
corresponding to the branch it’s in.  The value must be always (the
default), never, or auto.

@item  @samp{--no-color} 
Turn off colored output, even when the configuration file gives the default
to color output.  Same as @samp{--color=never}.
@end table

Note that --more, --list, --independent and --merge-base options are
mutually exclusive.

@noindent

@chapheading OUTPUT

Given N <references>, the first N lines are the one-line description from
their commit message.  The branch head that is pointed at by $GIT_DIR/HEAD
is prefixed with an asterisk @samp{*} character while other heads are prefixed
with a @samp{!} character.

Following these N lines, one-line log for each commit is displayed, indented
N places.  If a commit is on the I-th branch, the I-th indentation character
shows a @samp{+} sign; otherwise it shows a space.  Merge commits are denoted by
a @samp{-} sign.  Each commit shows a short name that can be used as an extended
SHA-1 to name that commit.

The following example shows three branches, "master", "fixes" and "mhf":

@example
$ git show-branch master fixes mhf
* [master] Add 'git show-branch'.
 ! [fixes] Introduce "reset type" flag to "git reset"
  ! [mhf] Allow "+remote:local" refspec to cause --force when fetching.
---
  + [mhf] Allow "+remote:local" refspec to cause --force when fetching.
  + [mhf~1] Use git-octopus when pulling more than one heads.
 +  [fixes] Introduce "reset type" flag to "git reset"
  + [mhf~2] "git fetch --force".
  + [mhf~3] Use .git/remote/origin, not .git/branches/origin.
  + [mhf~4] Make "git pull" and "git fetch" default to origin
  + [mhf~5] Infamous 'octopus merge'
  + [mhf~6] Retire git-parse-remote.
  + [mhf~7] Multi-head fetch.
  + [mhf~8] Start adding the $GIT_DIR/remotes/ support.
*++ [master] Add 'git show-branch'.
@end example


These three branches all forked from a common commit, [master], whose commit
message is "Add 'git show-branch'".  The "fixes" branch adds one commit
"Introduce "reset type" flag to "git reset"". The "mhf" branch adds many
other commits.  The current branch is "master".

@noindent

@chapheading EXAMPLES

If you keep your primary branches immediately under @samp{refs/heads}, and topic
branches in subdirectories of it, having the following in the configuration
file may help:

@example
[showbranch]
        default = --topo-order
        default = heads/*
@end example


With this, @samp{git show-branch} without extra parameters would show only the
primary branches.  In addition, if you happen to be on your topic branch, it
is shown as well.

@example
$ git show-branch --reflog="10,1 hour ago" --list master
@end example


shows 10 reflog entries going back from the tip as of 1 hour ago.  Without
@samp{--list}, the output also shows how these tips are topologically related
with each other.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-show-index,,,Top
@chapheading Name

git-show-index — パックされたアーカイブインデックスを表示する

@noindent

@chapheading Synopsis

@display
git show-index [--object-format=<hash-algorithm>]
@end display


@noindent

@chapheading DESCRIPTION

標準入力から、(git-pack-objects(1) または git-index-pack(1)
で作成の)Gitパックファイルの、 @samp{.idx} ファイルを読み取り、その内容をダンプします。
出力は、行ごとに1つのオブジェクトで構成され、各行には2つまたは3つのスペースで区切られた複数列が含まれます:

@itemize 

@item
最初の列は、対応するパックファイル内のオブジェクトのバイト単位のオフセットです。

@item
2番目の列はオブジェクトのオブジェクトIDです

@item
インデックスバージョンが2以上の場合、3番目の列にはオブジェクトデータのCRC32が含まれます
@end itemize

オブジェクトは、インデックスファイルで見つかった順序で出力されます。(正しく作成されたファイルであれば、)インデックスファイルはオブジェクトIDソートされていなければなりません。

注意: あなたは git-verify-pack(1)
を呼び出すと、パックファイルに関する情報をよりたくさん取得できます。けれども、このコマンド(show-index)はインデックスファイル自体のみを考慮するため、より高速で柔軟性があります。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--object-format=<hash-algorithm>} 
インデックスファイルのためのオブジェクト形式(ハッシュアルゴリズム)を指定します。有効な値は @emph{sha1} および (有効な場合) @emph{sha256}
です。 デフォルトは、現在のリポジトリのアルゴリズム(@samp{extensions.objectFormat}
で設定)、または値が設定されていないかリポジトリの外部にある場合は @emph{sha1} です。

このオプションは実験的なものです！ SHA-256のサポートは実験的なものであり、まだ初期段階です。
SHA-256リポジトリは、通常、「通常の」SHA-1リポジトリと作業を共有できません。
たとえば、SHA-256リポジトリに関連するGit内部ファイル形式は、下位互換性のない方法で変更される可能性があると想定する必要があります。テスト目的でのみ
@samp{--object-format=sha256} を使用してください。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-show-ref,,,Top
@chapheading Name

git-show-ref — List references in a local repository

@noindent

@chapheading Synopsis

@display
git show-ref [-q|--quiet] [--verify] [--head] [-d|--dereference]
             [-s|--hash[=<n>]] [--abbrev[=<n>]] [--tags]
             [--heads] [--] [<pattern>…]
git show-ref --exclude-existing[=<pattern>]
@end display


@noindent

@chapheading DESCRIPTION

Displays references available in a local repository along with the
associated commit IDs. Results can be filtered using a pattern and tags can
be dereferenced into object IDs. Additionally, it can be used to test
whether a particular ref exists.

By default, shows the tags, heads, and remote refs.

The --exclude-existing form is a filter that does the inverse. It reads refs
from stdin, one ref per line, and shows those that don’t exist in the local
repository.

Use of this utility is encouraged in favor of directly accessing files under
the @samp{.git} directory.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--head} 
Show the HEAD reference, even if it would normally be filtered out.

@item  @samp{--heads} 
@itemx  @samp{--tags} 
Limit to "refs/heads" and "refs/tags", respectively.  These options are not
mutually exclusive; when given both, references stored in "refs/heads" and
"refs/tags" are displayed.

@item  @samp{-d} 
@itemx  @samp{--dereference} 
Dereference tags into object IDs as well. They will be shown with
"^@{@}" appended.

@item  @samp{-s} 
@itemx  @samp{--hash[=<n>]} 
Only show the SHA-1 hash, not the reference name. When combined with
--dereference the dereferenced tag will still be shown after the SHA-1.

@item  @samp{--verify} 
Enable stricter reference checking by requiring an exact ref path.  Aside
from returning an error code of 1, it will also print an error message if
@samp{--quiet} was not specified.

@item  @samp{--abbrev[=<n>]} 
Abbreviate the object name.  When using @samp{--hash}, you do not have to say
@samp{--hash --abbrev}; @samp{--hash=n} would do.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Do not print any results to stdout. When combined with @samp{--verify} this can
be used to silently check if a reference exists.

@item  @samp{--exclude-existing[=<pattern>]} 
Make @emph{git show-ref} act as a filter that reads refs from stdin of the form
"@samp{^(?:<anything>\s)?<refname>(?:\^@{@})?$}" and performs the following actions
on each:
(1) strip "^@{@}" at the end of line if any;
(2) ignore if pattern is provided and does not head-match refname;
(3) warn if refname is not a well-formed refname and skip;
(4) ignore if refname is a ref that exists in the local repository;
(5) otherwise output the line.

@item  <pattern>… 
Show references matching one or more patterns. Patterns are matched from the
end of the full name, and only complete parts are matched, e.g.  @emph{master}
matches @emph{refs/heads/master}, @emph{refs/remotes/origin/master},
@emph{refs/tags/jedi/master} but not @emph{refs/heads/mymaster} or
@emph{refs/remotes/master/jedi}.
@end table

@noindent

@chapheading OUTPUT

The output is in the format: @emph{<SHA-1 ID>} @emph{<space>} @emph{<reference name>}.

@example
$ git show-ref --head --dereference
832e76a9899f560a90ffd62ae2ce83bbeff58f54 HEAD
832e76a9899f560a90ffd62ae2ce83bbeff58f54 refs/heads/master
832e76a9899f560a90ffd62ae2ce83bbeff58f54 refs/heads/origin
3521017556c5de4159da4615a39fa4d5d2c279b5 refs/tags/v0.99.9c
6ddc0964034342519a87fe013781abf31c6db6ad refs/tags/v0.99.9c^@{@}
055e4ae3ae6eb344cbabf2a5256a49ea66040131 refs/tags/v1.0rc4
423325a2d24638ddcc82ce47be5e40be550f4507 refs/tags/v1.0rc4^@{@}
...
@end example


When using --hash (and not --dereference) the output format is: @emph{<SHA-1 ID>}

@example
$ git show-ref --heads --hash
2e3ba0114a1f52b47df29743d6915d056be13278
185008ae97960c8d551adcd9e23565194651b5d1
03adf42c988195b50e1a1935ba5fcbc39b2b029b
...
@end example


@noindent

@chapheading EXAMPLES

To show all references called "master", whether tags or heads or anything
else, and regardless of how deep in the reference naming hierarchy they are,
use:

@example
        git show-ref master
@end example


This will show "refs/heads/master" but also "refs/remote/other-repo/master",
if such references exists.

When using the @samp{--verify} flag, the command requires an exact path:

@example
        git show-ref --verify refs/heads/master
@end example


will only match the exact branch called "master".

If nothing matches, @emph{git show-ref} will return an error code of 1, and in
the case of verification, it will show an error message.

For scripting, you can ask it to be quiet with the "--quiet" flag, which
allows you to do things like

@example
        git show-ref --quiet --verify -- "refs/heads/$headname" ||
                echo "$headname is not a valid branch"
@end example


to check whether a particular branch exists or not (notice how we don’t
actually want to show any results, and we want to use the full refname for
it in order to not trigger the problem with ambiguous partial matches).

To show only tags, or only proper branch heads, use "--tags" and/or
"--heads" respectively (using both means that it shows tags and heads, but
not other random references under the refs/ subdirectory).

To do automatic tag object dereferencing, use the "-d" or "--dereference"
flag, so you can do

@example
        git show-ref --tags --dereference
@end example


to get a listing of all tags together with what they dereference.

@noindent

@chapheading FILES

@samp{.git/refs/*}, @samp{.git/packed-refs}

@noindent

@chapheading SEE ALSO

git-for-each-ref(1), git-ls-remote(1),
git-update-ref(1), gitrepository-layout(5)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-show,,,Top
@chapheading Name

git-show — git-show-さまざまなタイプのオブジェクトを表示

@noindent

@chapheading Synopsis

@display
git show [<options>] [<object>…]
@end display


@noindent

@chapheading DESCRIPTION

1つまたはそれ以上のオブジェクト(ブロブ・ツリー・タグ・コミット)を表示します。

コミットの場合、ログメッセージとテキストの差分が表示されます。 また、 @emph{git diff-tree --cc}
によって生成された特別な形式でマージコミットを示します。

タグの場合、タグメッセージと参照オブジェクトが表示されます。

ツリーの場合は、名前が表示されます(@samp{--name-only} オプション付きの @emph{git ls-tree} 相当)。

プレーンブロブの場合は、プレーンコンテンツが表示されます。

このコマンドは、「git diff-tree」コマンドに適用可能なオプションを使用して、コミットによって導入された変更の表示方法を制御します。

このマニュアルページでは、最も頻繁に使用されるオプションについてのみ説明します。

@noindent

@chapheading OPTIONS

@table @asis

@item  <object>… 
表示するオブジェクトの名前(デフォルトは「HEAD」)。オブジェクト名を綴る方法のより完全なリストについては、
gitrevisions(7) の「SPECIFYING REVISIONS」セクションを参照してください。

@item  @samp{--pretty[=<format>]} 
@itemx  @samp{--format=<format>} 
コミットログの内容を指定された形式できれいに印刷(pretty-print)します。 @emph{<format>} は
oneline・short・medium・full・fuller・reference・email・raw・format:<string>・tformat:<string>
のいずれかになります。 @emph{<format>} が上記のいずれでもなく、 @emph{%placeholder} が含まれている場合、
@emph{--pretty=tformat:<format>} が指定されたかのように動作します。

各フォーマットの詳細については、 "PRETTY FORMATS" セクションを参照してください。 @emph{=<format>}
の部分を省略すると、デフォルトで @emph{medium} になります。

注意: リポジトリー構成でデフォルトのpretty formatを指定できます(git-config(1) 参照)。

@item  @samp{--abbrev-commit} 
40バイトの16進コミットオブジェクト名全体を表示する代わりに、オブジェクトに一意の名前を付けるプレフィックスを表示します。
"--abbrev=<n>" (表示されている場合はdiff出力も変更します)オプションを使用して、プレフィックスの最小長を指定できます。

これにより、80桁幅の端末を使用している人にとって "--pretty=oneline" がずっと読みやすくなるはずです。

@item  @samp{--no-abbrev-commit} 
完全な40バイトの16進コミットオブジェクト名を表示します。 これにより、明示的または "--oneline"
などの他のオプションによって暗黙的に示される @samp{--abbrev-commit} が無効になります。また、 @samp{log.abbrevCommit}
変数をオーバーライドします。

@item  @samp{--oneline} 
これは、 "--pretty=oneline --abbrev-commit" を一緒に使用するための省略形です。

@item  @samp{--encoding=<encoding>} 
コミットオブジェクトは、ログメッセージに使用される文字エンコードをエンコードヘッダーに記録します。このオプションを使用して、ユーザーが好むエンコーディングでコミットログメッセージを再コーディングするようにコマンドに指示できます。配管以外のコマンドの場合、これはデフォルトでUTF-8になります。オブジェクトが
@samp{X} でエンコードされていると主張し、 @samp{X}
で出力している場合、オブジェクトをそのまま出力することに注意してください。これは、元のコミットの無効なシーケンスが出力にコピーされる可能性があることを意味します。同様に、
iconv(3) コミットの変換に失敗した場合、警告とともに元のオブジェクトをそのまま出力します。

@item  @samp{--expand-tabs=<n>} 
@itemx  @samp{--expand-tabs} 
@itemx  @samp{--no-expand-tabs} 
出力に表示する前に、ログメッセージでタブ展開を実行します(タブ幅を <n> とみなして <n> 境界に揃うように空白で調整する)。
@samp{--expand-tabs} は @samp{--expand-tabs=8} の省略形であり、 @samp{--no-expand-tabs} は
@samp{--expand-tabs=0} の省略形です。タブの展開を無効にします。

デフォルトでは、タブはログメッセージを4つのスペースでインデントするきれいな形式(pretty formats)で展開されます(つまり、デフォルトの
@emph{medium} と’full' と @emph{fuller})。

@item  @samp{--notes[=<ref>]} 
コミットログメッセージを表示するときに、コミットに注釈を付けるnotes(git-notes(1)
参照)を表示します。これは、コマンドラインに @samp{--pretty} 、@samp{--format} または @samp{--oneline}
オプションが指定されていない場合の、 @samp{git log} と @samp{git show} と ` git whatchanged` コマンドのデフォルトです。

デフォルトでは、表示されるnotesは、 @samp{core.notesRef} および @samp{notes.displayRef}
変数(または対応する環境変数オーバーライド)にリストされているnote refからのものです。詳細については git-config(1)
を参照してください。

オプションの @emph{<ref>} 引数を使用して、refを使用して表示するnotesを検索します。 refは、 @samp{refs/notes/}
で始まる完全なrefnameを指定できます。 @samp{notes/} で始まるか、 @samp{refs/} で始まるか、それ以外で始まる場合、
@samp{refs/notes/} が接頭辞として付けられ、refのフルネームを形成します。

複数の --notes オプションを組み合わせて、表示するノートを制御できます。 例: "--notes=foo" は "refs/notes/foo"
からのnotesのみを表示します。 "--notes=foo --notes" は、 "refs/notes/foo" とデフォルトのnotes
ref(s) の両方のnotesを表示します。

@item  @samp{--no-notes} 
notesを表示しないでください。 これは、notesが表示されるnotes refのリストをリセットすることにより、上記の @samp{--notes}
オプションを無効にします。 オプションは、コマンドラインで指定された順序で解析されます。 "--notes --notes=foo --no-notes
--notes=bar" は、 "refs/notes/bar" からのnotesのみを表示します。

@item  @samp{--show-notes[=<ref>]} 
@itemx  @samp{--[no-]standard-notes} 
これらのオプションは非推奨です。 代わりに、上記の --notes/--no-notes オプションを使用してください。

@item  @samp{--show-signature} 
署名を @samp{gpg --verify} に渡して、署名されたコミットオブジェクトの有効性を確認し、出力を表示します。
@end table

@noindent

@chapheading PRETTY FORMATS

コミットがマージであり、 pretty-format が @emph{oneline} または @emph{email} または @emph{raw} でない場合、
@emph{Author:} 行の前に追加の行が挿入されます。この行は "Merge: "
で始まり、先祖のコミットのハッシュがスペースで区切られて出力されます。履歴の表示を制限している場合、たとえば、特定のディレクトリまたはファイルに関連する変更のみに関心がある場合、リストされたコミットは必ずしも
@strong{直接} の親コミットのリストではない可能性があることに注意してください。

いくつかの組み込みフォーマットがあります。そして以下で説明するように、 pretty.<name> 構成オプション(config
option)を別のフォーマット名または @emph{format:}
文字列に設定することで、追加のフォーマットを定義できます(git-config(1)
参照)。組み込みフォーマットの詳細は以下のとおりです:

@itemize 

@item
@emph{oneline}

@example
<hash> <title line>
@end example

これは、可能な限りコンパクトになるように設計されています。

@item
@emph{short}

@example
commit <hash>
Author: <author>
@end example

@example
<title line>
@end example

@item
@emph{medium}

@example
commit <hash>
Author: <author>
Date:   <author date>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{full}

@example
commit <hash>
Author: <author>
Commit: <committer>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{fuller}

@example
commit <hash>
Author:     <author>
AuthorDate: <author date>
Commit:     <committer>
CommitDate: <committer date>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{reference}

@example
<abbrev hash> (<title line>, <short author date>)
@end example

この形式は、コミットメッセージ内の別のコミットを参照するために使用され、 @samp{--pretty='format:%C(auto)%h (%s,
%ad)'} と同じです。 デフォルトでは、別の @samp{--date} オプションが明示的に指定されていない限り、日付は @samp{--date=short}
でフォーマットされます。formatプレースホルダーを使用する他の @samp{format:} と同様に、その出力は、 @samp{--decorate} や
@samp{--walk-reflogs} などの他のオプションの影響を受けません。

@item
@emph{email}

@example
From <hash> <date>
From: <author>
Date: <author date>
Subject: [PATCH] <title line>
@end example

@example
<full commit message>
@end example

@item
@emph{mboxrd}

@emph{email} と同様ですが、コミットメッセージの "From " で始まる行(前に0個以上の ">" が付いている)は ">"
でクォートされているため、新しいコミットの開始と混同されることはありません。

@item
@emph{raw}

@emph{raw} 形式は、コミットオブジェクトに格納されているとおりにコミット全体を正確に表示します。とりわけ --abbrev または
--no-abbrev
のどちらが使用されているかに関係なく、ハッシュは完全に表示され、「親」(parents)情報は、移植や履歴の単純化を考慮せずに、真の親のコミットを示します。この形式は、コミットの表示方法に影響しますが、いわゆる
@samp{git log --raw} の差分の表示方法ではありません。生のdiff形式で完全なオブジェクト名を取得するには、 @samp{--no-abbrev}
を使用します。

@item
@emph{format:<string>}

@emph{format:<string>} 形式を使用すると、表示する情報を指定できます。注意: これはprintf書式に少し似ていますが、 @emph{\n}
の代わりに @emph{%n} を使用して改行を取得するという例外に注意してください。

例:  @emph{format:"The author of %h was %an, %ar%nThe title was >>%s<<%n"}
は以下のように表示されます:

@example
The author of fe6e0ee was Junio C Hamano, 23 hours ago
The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<
@end example


さて、以下がプレースホルダー達です:

@itemize 

@item
単一のリテラル文字に展開されるプレースホルダー:

@table @asis

@item  @emph{%n} 
改行(newline)

@item  @emph{%%} 
'%'そのもの

@item  @emph{%x00} 
16進数のバイト値を出力
@end table

@item
うしろのプレースホルダーのフォーマッティングに影響するプレースホルダー:

@table @asis

@item  @emph{%Cred} 
赤色に切り替える

@item  @emph{%Cgreen} 
緑色に切り替える

@item  @emph{%Cblue} 
青色に切り替える。

@item  @emph{%Creset} 
色をリセットする

@item  @emph{%C(…)} 
git-config(1) の "CONFIGURATION FILE" 節の Values で説明されている色の指定。
デフォルトでは、色はログ出力が有効になっている場合にのみ表示されます（ @samp{color.diff} または ` color.ui` または
@samp{--color`によって、ターミナルに行く場合は前者の `auto} 設定を尊重します)。 @samp{%C(auto,...)} は、 default
の歴史的同義語として受け入れられます(例: @samp{%C(auto,red)})。 @samp{%C(always,...)}
を指定すると、色が有効になっていない場合でも色が表示されます(この形式やgitが色付けする可能性のある他のすべてのものを含め、出力全体の色を有効にするために
@samp{--color = always} の使用を検討してください)。 @samp{auto} のみ(つまり、 @samp{%C(auto)}
)は、色が再び切り替わるまで、続くプレースホルダーで自動色付けをオンにします。

@item  @emph{%m} 
左(@samp{<}) または 右(@samp{>}) または 境界 (@samp{-}) の印

@item  @emph{%w([<w>[,<i1>[,<i2>]]])} 
git-shortlog(1) の -w オプションのように、
行の折り返しを切り替えます。

@item  @emph{%<(<N>[,trunc|ltrunc|mtrunc])} 
次のプレースホルダーに少なくともN列を使用させ、
必要に応じて右側にスペースを埋め込みます。オプションで、出力がN列より長い場合は、先頭(ltrunc)または中間(mtrunc)または末尾(trunc)で切り捨てます。注意:
切り捨ては、 N >= 2 でのみ正しく機能することに注意してください。

@item  @emph{%<|(<N>)} 
次のプレースホルダーを少なくともN番目の列まで取得し、
必要に応じて右側にスペースを埋め込みます

@item  @emph{%>(<N>)}, @emph{%>|(<N>)} 
それぞれ @emph{%<(<N>)} 、 @emph{%<|(<N>)} に似ていますが、
左側にスペースが埋め込まれています

@item  @emph{%>>(<N>)}, @emph{%>>|(<N>)} 
@emph{%>(<N>)} 、 @emph{%>|(<N>)} とそれぞれ似ていますが、
次のプレースホルダーが指定されたよりも多くのスペースを取り、その左側にスペースがある場合は、それらのスペースを使用します。

@item  @emph{%><(<N>)}, @emph{%><|(<N>)} 
それぞれ @emph{%<(<N>)} 、 @emph{%<|(<N>)} に似ていますが、
両側にパディングがあります(つまり、テキストが中央に配置されます)
@end table

@item
コミットから抽出された情報に展開するプレースホルダー:

@table @asis

@item  @emph{%H} 
コミットハッシュ

@item  @emph{%h} 
省略されたコミットハッシュ

@item  @emph{%T} 
ツリーハッシュ

@item  @emph{%t} 
省略されたツリーハッシュ

@item  @emph{%P} 
親のハッシュ達

@item  @emph{%p} 
省略された親のハッシュ達

@item  @emph{%an} 
作者名

@item  @emph{%aN} 
作者名( .mailmap に関しては、git-shortlog(1) または
git-blame(1) を参照)

@item  @emph{%ae} 
作者電子メールアドレス

@item  @emph{%aE} 
作者電子メールアドレス(.mailmap に関しては git-shortlog(1) または
git-blame(1) を参照)

@item  @emph{%al} 
作者電子メールアドレスアカウント名(local-part)( @emph{@@} の前の部分)

@item  @emph{%aL} 
作者電子メールアドレスアカウント名(local-part)(@emph{%al} 参照) .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ad} 
作成日(フォーマットに関しては --date= オプション参照)

@item  @emph{%aD} 
作成日 RFC2822形式

@item  @emph{%ar} 
作成日 相対(relative)形式

@item  @emph{%at} 
作成日 UNIXタイムスタンプ形式

@item  @emph{%ai} 
作成日 ISO 8601風形式

@item  @emph{%aI} 
作成日 厳密なISO 8601形式

@item  @emph{%as} 
作成日 短い形式(@samp{YYYY-MM-DD})

@item  @emph{%ah} 
作成日 human形式( git-rev-list(1) の @samp{--date=human}
オプションのようなかんじ)

@item  @emph{%cn} 
コミッター名

@item  @emph{%cN} 
コミッター名( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ce} 
コミッター電子メールアドレス

@item  @emph{%cE} 
コミッター電子メールアドレス(.mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%cl} 
コミッター電子メールアドレスアカウント名(local-part)( @emph{@@} の前の部分)

@item  @emph{%cL} 
コミッター電子メールアドレスアカウント名(local-part)( @emph{%cl} 参照) .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%cd} 
コミッター日付(フォーマットに関しては --date= オプション参照)

@item  @emph{%cD} 
コミッター日付 RFC2822形式

@item  @emph{%cr} 
コミッター日付 相対(relative)形式

@item  @emph{%ct} 
コミッター日付 UNIXタイムスタンプ形式

@item  @emph{%ci} 
コミッター日付 ISO 8601風形式

@item  @emph{%cI} 
コミッター日付 厳密なISO 8601形式

@item  @emph{%cs} 
コミッター日付 短い形式(@samp{YYYY-MM-DD})

@item  @emph{%ch} 
コミッター日付 human形式(git-rev-list(1) の @samp{--date=human}
オプションのようなかんじ)

@item  @emph{%d} 
ref名 git-log(1) の --decorate オプションみたいなの

@item  @emph{%D} 
" (", ")" で囲ってないref名

@item  @emph{%(describe[:options])} 
git-describe(1) のような人間が読める名前。
説明できないコミットの場合は空の文字列。 @samp{describe}
文字列の後には、コロンと0個以上のカンマ区切りオプションを続けることができます。タグが同時に追加または削除されると、説明に一貫性がなくなる可能性があります。

@itemize 

@item
@emph{match=<pattern>}:  "refs/tags/" プレフィックスを除いて、指定された @samp{glob(7)}
パターンに一致するタグのみを考慮します。

@item
@emph{exclude=<pattern>}: "refs/tags/" プレフィックスを除いて、指定された @samp{glob(7)}
パターンに一致するタグを考慮しないでください。
@end itemize

@item  @emph{%S} 
コミットに到達したコマンドラインで指定されたref名
( @samp{git log --source} など)は、 @samp{git log} でのみ機能します

@item  @emph{%e} 
エンコーディング

@item  @emph{%s} 
件名(subject)

@item  @emph{%f} 
ファイル名に適した、サニタイズされた件名

@item  @emph{%b} 
本文(body)

@item  @emph{%B} 
生本文(raw body)(ラップされてない件名と本文)

@item  @emph{%N} 
コミットノート(commit notes)

@item  @emph{%GG} 
署名されたコミットの為のGPSからの生の検証メッセージ

@item  @emph{%G?} 
良い(good)な(有効な)署名の場合は "G" 、
悪い(bad)な署名の場合は "B" 、有効性が不明(unknown)な良い署名の場合は "U" 、期限切れ(eXpired)の良い署名の場合は "X"
、期限切れのキーで作成された良い署名の場合は "Y" 、取り消されたキーによって作成された良い署名の場合は "R"
、署名を確認できない場合(キーの欠落など)は "E" 、署名がない場合は "N" を表示します。

@item  @emph{%GS} 
署名されたコミットの署名者の名前を表示する

@item  @emph{%GK} 
署名されたコミットに署名するために使用されるキーを表示する

@item  @emph{%GF} 
署名されたコミットに署名するために使用されるキーのフィンガープリントを表示する

@item  @emph{%GP} 
署名されたコミットに署名するためにサブキーが使用された
主キーのフィンガープリントを表示します

@item  @emph{%GT} 
署名されたコミットに署名するために使用されるキーの信頼レベル(trust level)を表示します

@item  @emph{%gD} 
reflogセレクター(例:@samp{refs/stash@@@{1@}} or @samp{refs/stash@@@{2 minutes ago@}})
この形式は、 @samp{-g} オプションで説明されている規則に従います。 @samp{@@} の前の部分は、コマンドラインで指定されたrefnameです(したがって、
@samp{git log -g refs/heads/master} は @samp{refs/heads/master@@@{0@}} を生成します)。

@item  @emph{%gd} 
短縮されたreflogセレクター。 @samp{%gD} と同じですが、
人間が読みやすいようにrefname部分が短縮されています(したがって、 @samp{refs/heads/master} は単に @samp{master}
になります)。

@item  @emph{%gn} 
reflog ID名

@item  @emph{%gN} 
reflog ID名( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ge} 
reflog ID 電子メールアドレス

@item  @emph{%gE} 
reflog ID 電子メールアドレス( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%gs} 
reflog 件名

@item  @emph{%(trailers[:options])} 
git-interpret-trailers(1) によって解釈されるようにボディのトレーラーを表示します。
@samp{trailers}
文字列の後には、コロンと0個以上のカンマ区切りオプションを続けることができます。いずれかのオプションが複数回提供された場合、それぞれ最後のものが優先されます。

ブール値オプションは、オプションの値 @samp{[=<BOOL>]} を受け入れます。 値 @samp{true} 、@samp{false} 、 @samp{on} 、@samp{off}
などはすべて受け入れられます。 git-config(1) の "EXAMPLES" の "boolean"
サブセクションを参照してください。ブール値オプションが値なしで指定された場合、それは有効を指定した事になります。

@itemize 

@item
@emph{key=<K>}
は指定されたキーを持つトレーラーのみを表示します。マッチングは大文字と小文字を区別せずに行われ、末尾のコロンはオプションです。オプションが複数回指定されている場合、いずれかのキーに一致するトレーラー行が表示されます。このオプションは自動的に
@samp{only} オプションを有効にして、トレーラーブロック内の非トレーラー行が非表示になるようにします。それが望ましくない場合は、
@samp{only=false} で無効にすることができます。 たとえば、 @samp{%(trailers:key=Reviewed-by)} は、キーが
`Reviewed-by`のトレーラー行を表示します。

@item
@emph{only[=<BOOL>]} はトレーラーブロックに非トレーラー行を含めるかどうかを選択します。

@item
@emph{separator=<SEP>}
はトレーラー行の間に挿入される区切り文字を指定します。このオプションが指定されていない場合、各トレーラー行は改行文字で終了します。文字列SEPには、上記のリテラルフォーマットコードが含まれる場合があります。区切り文字としてコンマを使用するには、次のオプションとして解析されないよう
@samp{%x2C} を使用する必要があります。 たとえば、 %(trailers:key=Ticket,separator=%x2C )` は、キーが
"Ticket" であるすべてのトレーラー行をカンマとスペースで区切って表示します。

@item
@emph{unfold[=<BOOL>]} は interpret-trailer の @samp{--unfold}
オプションが指定されたかのように動作させます。たとえば、 @samp{%(trailers:only,unfold=true)}
が展開され、すべてのトレーラー行が表示されます。

@item
@emph{keyonly[=<BOOL>]} トレーラーのキー部分のみを表示。

@item
@emph{valueonly[=<BOOL>]} トレーラーの値部分のみ表示。

@item
@emph{key_value_separator=<SEP>}
トレーラー行の間に挿入される区切り文字を指定します。このオプションが指定されていない場合、各トレーラーのキーと値のペアは ": " で区切られます。
それ以外の場合は、上記の @emph{separator=<SEP>} と同じセマンティクスを共有します。
@end itemize
@end table
@end itemize
@end itemize

@quotation

@strong{Note}

一部のプレースホルダーは、リビジョントラバーサルエンジンに指定された他のオプションに依存する場合があります。 たとえば、 @samp{%g*}
reflogオプションは、reflogエントリをトラバースしない限り(たとえば、 @samp{git log
-g`によって)空の文字列を挿入します。コマンドラインで `--decorate} がまだ指定されていない場合、 @samp{%d} と @samp{%D}
プレースホルダーは「短い」(short)装飾形式を使用します。
@end quotation

プレースホルダーの @emph{%} の後に @samp{+}
(プラス記号)を追加すると、プレースホルダーが空でない文字列に展開される場合に限り、展開の直前に改行が挿入されます。

プレースホルダーの @emph{%} の後に @samp{-}
(マイナス記号)を追加すると、プレースホルダーが空の文字列に展開された場合にのみ、展開の直前の連続するすべての改行が削除されます。

プレースホルダーの @emph{%} の後に ` `
(スペース)を追加すると、プレースホルダーが空でない文字列に展開される場合に限り、展開の直前にスペースが挿入されます。

@itemize 

@item
@emph{tformat:}

@emph{tformat:} 形式は、 "separator" セマンティクスの代わりに "terminator" セマンティクスを提供することを除いて、
@emph{format:} とまったく同じように機能します。
つまり、各コミットには、エントリ間に区切り文字を配置するのではなく、メッセージターミネータ文字(通常は改行)が追加されます。
これは、「1行」形式と同様に、1行形式の最終エントリが新しい行で適切に終了することを意味します。 例えば:

@example
$ git log -2 --pretty=format:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973 -- NO NEWLINE

$ git log -2 --pretty=tformat:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973
@end example


加えて、 @samp{%} が含まれている認識されない文字列は、その前に @samp{tformat:} があるかのように解釈(interpret)されます。
たとえば、以下の2つは同等です:

@example
$ git log -2 --pretty=tformat:%h 4da45bef
$ git log -2 --pretty=%h 4da45bef
@end example

@end itemize

@noindent

@chapheading DIFF FORMATTING

以下のオプションを使用して、 @samp{git show} がdiff出力を生成する方法を変更できます。

@table @asis

@item  @samp{-p} 
@itemx  @samp{-u} 
@itemx  @samp{--patch} 
パッチを生成します(generating patches に関するセクションを参照)。

@item  @samp{-s} 
@itemx  @samp{--no-patch} 
diff出力を抑制します。デフォルトでパッチを表示する @samp{git show} のようなコマンド、または @samp{--patch}
の効果をキャンセルする場合に便利です。

@item  @samp{--diff-merges=(off|none|on|first-parent|1|separate|m|combined|c|dense-combined|cc)} 
@itemx  @samp{--no-diff-merges} 
マージコミットに使用するdiff形式を指定します。 @samp{--first-parent} が使用されている場合を除き、デフォルトは
@samp{dense-combined} です。使用されている場合は、 @samp{first-parent} がデフォルトです。

@table @asis

@item  @samp{--diff-merges=(off|none)} 
@itemx  @samp{--no-diff-merges} 
マージコミットのdiffの出力を無効にします。暗黙の値を上書きするのに便利です。

@item  @samp{--diff-merges=on} 
@itemx  @samp{--diff-merges=m} 
@itemx  @samp{-m} 
このオプションにより、マージコミットのdiff出力がデフォルトの形式で表示されます。 @samp{-m} は、 @samp{-p}
も指定されている場合にのみ出力を生成します。デフォルトの形式は、 @samp{log.diffMerges} 構成パラメーター(configuration
parameter)を使用して変更できます。デフォルト値は @samp{separate} です。

@item  @samp{--diff-merges=first-parent} 
@itemx  @samp{--diff-merges=1} 
このオプションにより、マージコミットは最初の親に関してのみ完全なdiffを表示します。

@item  @samp{--diff-merges=separate} 
これにより、マージコミットは各親に関して完全なdiffを表示します。親ごとに個別のログエントリとdiffが生成されます。

@item  @samp{--diff-merges=combined} 
@itemx  @samp{--diff-merges=c} 
@end table

@item  @samp{-c:} 
このオプションを使用すると、マージコミットのdiff出力は、親と結果のペアごとの差分を一度に1つずつ表示するのではなく、各親からの差分をマージ結果に同時に表示します。さらに、すべての親から変更されたファイルのみが一覧表示されます。
@samp{-c} は @samp{-p} の機能を含んでいます。

@table @asis

@item  @samp{--diff-merges=dense-combined} 
@itemx  @samp{--diff-merges=cc} 
@itemx  @samp{--cc} 
このオプションを使用すると、 @samp{--diff-merges=Combined}
によって生成される出力は、親のコンテンツに2つの派生(variants)しかない、興味のないハンクを省略してさらに圧縮され、マージ結果は変更なしでそのうちの1つを選択します。
@samp{--cc} は @samp{-p} の機能を含んでいます。
@end table

@item  @samp{--combined-all-paths} 
このフラグにより、結合された差分(マージコミットに使用)にすべての親からのファイルの名前が一覧表示されます。したがって、これは
@samp{--diff-merges=[dense-]combined}
が使用されている場合にのみ有効であり、ファイル名の変更が検出された場合(つまり、名前の変更またはコピーの検出が要求された場合)にのみ役立つ可能性があります。

@item  @samp{-U<n>} 
@itemx  @samp{--unified=<n>} 
通常の3行ではなく、<n> 行の内容でdiffを生成します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--output=<file>} 
stdout ではなく指定のファイルに出力します。

@item  @samp{--output-indicator-new=<char>} 
@itemx  @samp{--output-indicator-old=<char>} 
@itemx  @samp{--output-indicator-context=<char>} 
生成されたパッチの新しい行、古い行、またはコンテキスト行を示すために使用される文字を指定します。 通常、それらはそれぞれ @emph{+} 、 @emph{-} 、 ' '
です。

@item  @samp{--raw} 
コミットごとに、生の差分形式を使用して変更の概要を表示します。
git-diff(1) の "RAW OUTPUT FORMAT" セクションを参照してください。
これは、ログ自体をraw形式で表示することとは異なります。
これは @samp{--format=raw} で
実現できます。

@item  @samp{--patch-with-raw} 
@samp{-p --raw} の同義語。

@item  @samp{-t} 
diff出力にツリーオブジェクトを表示します。

@item  @samp{--indent-heuristic} 
diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッチを読みやすくします。 これがデフォルトです。

@item  @samp{--no-indent-heuristic} 
インデントヒューリスティック(indent heuristic)を無効にします。

@item  @samp{--minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{--patience} 
"patience diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--histogram} 
"histogram diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--anchored=<text>} 
"anchored diff" アルゴリズムを使用してdiffを生成します。

このオプションは複数回指定できます。

行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる場合、このアルゴリズムは、その行が出力に削除または追加として表示されないようにします。内部で
"patience diff" アルゴリズムを使用します。

@item  @samp{--diff-algorithm=@{patience|minimal|histogram|myers@}} 
diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

@table @asis

@item  @samp{default}, @samp{myers} 
基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、これがデフォルトです。

@item  @samp{minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{patience} 
パッチを生成する時に "patience diff" アルゴリズムを使います。

@item  @samp{histogram} 
このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張して、「発生率の低い共通要素をサポート」(support
low-occurrence common elements)します。
@end table

たとえば、 あなたが @samp{diff.algorithm}
変数をデフォルト以外の値に設定した上で、それでもデフォルト値を使用する場合は、@samp{--diff-algorithm=default}
オプションを使用する必要があります。

@item  @samp{--stat[=<width>[,<name-width>[,<count>]]]} 
diffstatを生成します。
デフォルトでは、必要なだけのスペースがファイル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォルトで端末幅、または端末に接続されていない場合は80桁であり、
@samp{<width>} で上書きできます。ファイル名部分の幅は、コンマの後に別の幅 @samp{<name-width>}
を指定することで制限できます。グラフ部分の幅は、 @samp{--stat-graph-width=<width>}
(統計グラフを生成するすべてのコマンドに影響します)を使用するか、 @samp{diff.statGraphWidth=<width>} ( @samp{git
format-patch} に影響しません)を設定することによって制限できます。3番目のパラメータ @samp{<count>}
を指定することにより、出力を最初の @samp{<count>} 行に制限し、それに @samp{...} が続く形にできます。

これらのパラメータは、 @samp{--stat-width=<width>} と @samp{--stat-name-width=<name-width>} と
@samp{--stat-count=<count>} を使用して個別に設定することもできます。

@item  @samp{--compact-summary} 
ファイルの作成や削除( "new" または "gone" 。オプションでシンボリックリンクの場合は "+l"
)、diffstatのモード変更(実行可能ビットを追加または削除する場合は、それぞれ "+x" または "-x"
)など、拡張ヘッダー情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置かれます。本機能は @samp{--stat} の機能を含んでいます。

@item  @samp{--numstat} 
@samp{--stat`に似ていますが、プログラムで処理しやすい(machine
friendly)ように、追加および削除された行数を10進表記とパス名で省略形なしで表示します。バイナリファイルの場合、 `0 0} の代わりに2つの
@samp{-} を出力します。

@item  @samp{--shortstat} 
変更されたファイルの総数と、追加および削除された行の数を含む @samp{--stat} 形式の最後の行のみを出力します。

@item  @samp{-X[<param1,param2,...>]} 
@itemx  @samp{--dirstat[=<param1,param2,...>]} 
各サブディレクトリの相対的な変更量の分布を出力します。 @samp{--dirstat}
の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズできます。デフォルトは、 @samp{diff.dirstat}
構成変数によって制御されます(git-config(1) 参照)。以下のパラメータを使用できます:

@table @asis

@item  @samp{changes} 
ソースから削除された、または宛先に追加された行をカウントして、dirstat数を計算します。これは、ファイル内の純粋なコード移動の量を無視します。つまり、ファイル内の行の再配置は、他の変更ほどカウントされません。これは、パラメーターが指定されていない場合のデフォルトの動作です。

@item  @samp{lines} 
通常の行ベースのdiff分析を実行し、削除/追加された行数を合計して、dirstat数を計算します。
(バイナリファイルの場合、バイナリファイルには行の概念がないため、代わりに64バイトのチャンクをカウントします)。 これは @samp{changes}
動作よりも高価な @samp{--dirstat} 動作ですが、他の変更と同じようにファイル内の再配置された行をカウントします。結果の出力は、他の
@samp{--*stat} オプションから得られるものと一致しています。

@item  @samp{files} 
変更されたファイルの数を数えて、dirstat数を計算します。変更された各ファイルは、dirstat分析で等しくカウントされます。これは、ファイルの内容をまったく調べる必要がないため、計算コストが最もかからない
@samp{--dirstat} の動作です。

@item  @samp{cumulative} 
親ディレクトリの子ディレクトリの変更も同様にカウントします。 @samp{cumulative}(累積的)
を使用する場合、報告されるパーセンテージの合計が100%を超える場合があることに注意してください。デフォルトの(非累積的な)動作は、@samp{noncumulative}
パラメーターで指定できます。

@item  <limit> 
整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指定します。指定の割合より少ないディレクトリは、出力に表示されません。
@end table

例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディレクトリに子ディレクトリの数を累積しながら、変更されたファイルをカウント:
@samp{--dirstat=files,10,cumulative}

@item  @samp{--cumulative} 
@samp{--dirstat=cumulative} と同義語

@item  @samp{--dirstat-by-file[=<param1,param2>...]} 
@samp{--dirstat=files,param1,param2...} と同義語

@item  @samp{--summary} 
作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約(condensed summary)を出力します。

@item  @samp{--patch-with-stat} 
@samp{-p --stat} と同義語。

@item  @samp{-z} 
改行(newline)ではなく、NULでコミットを区切ります。

また、 @samp{--raw} または @samp{--numstat}
を指定した場合は、パス名を難読化(munge)したり、出力フィールドターミネータとしてNULを使用したりしないでください。

このオプションがないと、構成変数 @samp{core.quotePath} で説明されているように、 通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。

@item  @samp{--name-only} 
変更されたファイルの名前のみを表示します。 多くの場合、ファイル名はUTF-8でエンコードされます。 詳細については、
git-log(1) のマニュアルページにあるエンコーディングに関する議論(the discussion about
encoding)を参照してください。

@item  @samp{--name-status} 
変更されたファイルの名前とステータスのみを表示します。ステータス文字の意味については、 @samp{--diff-filter}
オプションの説明を参照してください。 @samp{--name-only} と同じように、ファイル名はしばしばUTF-8でエンコードされます。

@item  @samp{--submodule[=<format>]} 
サブモジュールの違いをどのように表示するかを指定します。 @samp{--submodule=short} を指定する場合、 @emph{short}
形式が使用されます。この形式は、範囲の最初と最後にコミットの名前を表示するだけです。 @samp{--submodule} または
@samp{--submodule=log} が指定されている場合、 @emph{log} 形式が使用されます。この形式では、
git-submodule(1) @samp{summary} のように範囲内のコミットが一覧表示されます。 @samp{--submodule=diff}
が指定されている場合、 @emph{diff}
形式が使用されます。この形式は、コミット範囲間のサブモジュールの内容の変更のインラインdiffを示します。configオプションが設定されていない場合、デフォルトは
@samp{diff.submodule} または @emph{short} 形式です。

@item  @samp{--color[=<when>]} 
色付きのdiffを表示します。 @samp{--color} (つまり、 @emph{=<when>} ) は @samp{--color=always} と同じです。
@emph{<when>} は、 @samp{always} または @samp{never} または @samp{auto} のいずれかになります。

@item  @samp{--no-color} 
カラーdiffをオフにします。
@samp{--color=never} と同じです。

@item  @samp{--color-moved[=<mode>]} 
ソースコードの移動した行を別の色にします。
<mode>は、オプションが指定されていない場合はデフォルトで @emph{no} になり、
モードが指定されていないオプションが指定されている場合は @emph{zebra} になります。
モードは以下のいずれかでなければなりません:

@table @asis

@item  no 
移動行をハイライトしません。

@item  default 
@samp{zebra} の同義語です。これは、将来、より賢明なモードに変更される可能性があります。

@item  plain 
ある場所で追加され、別の場所で削除された行は、 @emph{color.diff.newMoved} で色付けされます。 同様に、
@emph{color.diff.oldMoved}
は、差分の別の場所に追加された削除された行に使用されます。このモードは移動された行をピックアップしますが、コードのブロックが順列なしで移動されたかどうかを判断することはレビューではあまり役に立ちません。

@item  blocks 
少なくとも20文字の英数字の移動テキストのブロックが貪欲に検出されます。検出されたブロックは、 @emph{color.diff.@{old,new@}Moved}
色のいずれかを使用して色付けされます。隣接するブロックを区別することはできません。

@item  zebra 
移動されたテキストのブロックは、 @emph{blocks} モードの場合と同様に検出されます。 ブロックは、
@emph{color.diff.@{old,new@}Moved} 色または @emph{color.diff.@{old,new@}MovedAlternative}
色のいずれかを使用して色付けされます。2つの色の間の変化は、新しいブロックが検出されたことを示します。

@item  dimmed-zebra 
@emph{zebra}
に似ていますが、移動されたコードの重要でない部分の追加の調光(dimmed)が実行されます。隣接する2つのブロックの境界線は興味深いと見なされ、残りは興味深いものではありません。
@samp{dimmed_zebra} は非推奨の同義語です。
@end table

@item  @samp{--no-color-moved} 
移動検出をオフにします。 これは、構成設定を上書きするために使用できます。 @samp{--color-moved=no} と同じです。

@item  @samp{--color-moved-ws=<modes>} 
これは、 @samp{--color-moved} の移動検出を実行するときに空白を無視する方法を設定します。
これらのモードは、コンマ区切りのリストとして指定できます:

@table @asis

@item  no 
移動行検出を実行するときに、空白(whitespace)を無視しない。

@item  ignore-space-at-eol 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  ignore-space-change 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  ignore-all-space 
行を比較するときは空白(whitespace)を無視します。これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  allow-indentation-change 
最初に移動検出で空白(whitespace)を無視し、空白(whitespace)の変更が行ごとに同じである場合にのみ、移動されたコードブロックをブロックにグループ化します。
これは他のモードと互換性がありません。
@end table

@item  @samp{--no-color-moved-ws} 
移動検出を実行するときは、空白(whitespace)を無視しないでください。これは、構成設定を上書きするために使用できます。
@samp{--color-moved-ws=no} と同じです。

@item  @samp{--word-diff[=<mode>]} 
<mode> を使用して変更された単語を区切ることにより、単語のdiffを表示します。デフォルトでは、単語は空白で区切られます。 以下の
@samp{--word-diff-regex} を参照してください。 <mode> のデフォルトは 'plain’です。 <mode>
は以下のいずれかである必要があります:

@table @asis

@item  color 
変更された単語(word)を色のみを使用して強調表示します。 @samp{--color} を意味します。

@item  plain 
単語を @samp{[-removed-]} および @samp{@{+added+@}} として表示します。
区切り文字が入力に表示されている場合、区切り文字をエスケープしようとしないため、出力があいまいになる可能性があります。

@item  porcelain 
スクリプトの使用を目的とした特別な行ベースの形式を使用します。追加/削除/無変更については、通常の統一されたdiff形式で印刷され、行の先頭の
@samp{+}/@samp{-}/` ` 文字で始まり、行の終わりまで続きます。入力の改行は、それ自体の行のチルダ @samp{~} で表されます。

@item  none 
単語(word)のdiffを再度無効にします。
@end table

注意: 最初のモードの名前にもかかわらず、有効になっている場合、すべてのモードで変更された部分を強調するために色が使用されることに注意してください。

@item  @samp{--word-diff-regex=<regex>} 
空白以外を単語と見なす代わりに、 <regex> を使用して単語が何であるかを決定します。また、すでに有効になっていない限り、この機能は
@samp{--word-diff} の機能を含んでいます。

<regex> の重複しないマッチはすべて、単語と見なされます。これらのマッチの間のすべては空白と見なされ、違いを見つけるためとしては無視されます！
正規表現に @samp{|[^[:space:]]}
を追加して、空白以外のすべての文字とマッチすることを確認することをお勧めします。改行を含むマッチは、改行で黙って切り捨てられます！

たとえば、 @samp{--word-diff-regex=.} は各文字を単語として扱い、それに応じて文字ごとの違いを表示します。

正規表現は、diffドライバーまたは構成オプション(configuration option)を介して設定することもできます。
gitattributes(5) または git-config(1)
を参照してください。これを指定すると、diffドライバーまたは構成設定(configuration
settings)が明示的にオーバーライドされます。diffドライバーは構成設定を上書きします。

@item  @samp{--color-words[=<regex>]} 
@samp{--word-diff=color} に @samp{--word-diff-regex=<regex>}
を加えたものに相当します(正規表現が指定されている場合)。

@item  @samp{--no-renames} 
構成ファイルにデフォルトで指定されている場合でも、名前変更の検出をオフにします。

@item  @samp{--[no-]rename-empty} 
名前変更ソースとして空のブロブを使用するかどうか。

@item  @samp{--check} 
変更によって競合マーカーまたは空白エラーが発生した場合に警告します。空白エラーと見なされるものは、 @samp{core.whitespace}
構成によって制御されます。
デフォルトでは、末尾の空白(空白のみで構成される行を含む)と、行の最初のインデント内で直後にタブ文字が続くスペース文字は、空白エラーと見なされます。問題が見つかった場合は、ゼロ以外のステータスで終了します。なお、
--exit-code とは互換性がありません。

@item  @samp{--ws-error-highlight=<kind>} 
diffの @samp{context} または @samp{old} または @samp{new} 行の空白エラーを強調表示します。複数の値はコンマで区切られ、 @samp{none}
は前の値をリセットし、 @samp{default} はリストを @samp{new} にリセットし、 @samp{all} は old、new、context
の省略形です。このオプションが指定されておらず、構成変数 @samp{diff.wsErrorHighlight} が設定されていない場合、 @samp{new}
行の空白エラーのみが強調表示されます。空白エラーは @samp{color.diff.whitespace} で色分けされています。

@item  @samp{--full-index} 
パッチ形式の出力を生成するときは、最初の一握りの文字(first handful of
characters)の代わりに、「インデックス」行にイメージ前およびイメージ後の完全ブロブオブジェクト名を表示します。

@item  @samp{--binary} 
@samp{--full-index} に加えて、 @samp{git-apply} で適用できるバイナリ差分を出力します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--abbrev[=<n>]} 
完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくとも
@emph{<n>} 桁の16進数の長さの最短のプレフィックスを表示します。diffパッチ出力形式では、 @samp{--full-index} が優先されます。つまり、
@samp{--full-index} が指定されている場合、 @samp{--abbrev} に関係なく、完全なブロブ名が表示されます。デフォルト以外の桁数は、
@samp{--abbrev=<n>} で指定できます。

@item  @samp{-B[<n>][/<m>]} 
@itemx  @samp{--break-rewrites[=[<n>][/<m>]]} 
完全な書き換えの変更を削除と作成のペアに分割します。これには以下の2つの目的があります:

これは、ファイルの完全な書き換えに相当する変更が、コンテキストとしてテキストで一致する非常に少数の行と混合された一連の削除と挿入としてではなく、古いものすべての単一の削除とそれに続く
すべての新しいものを1回挿入し、数値 @samp{m} が -B オプションのこの側面を制御します(デフォルトは60%)。 @samp{-B/70%}
は、Gitがそれを完全な書き換えと見なすために、元の30%未満が結果に残る必要があることを指定します(つまり、結果のパッチは、コンテキスト行と混合された一連の削除と挿入になります)。

-M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソースと見なされ(通常、 -M
は、消えたファイルのみを名前変更のソースと見なします)、数 @samp{n} が -Bオプションのこの側面を制御します(デフォルトは50%)。 @samp{-B20%}
は、ファイルのサイズの20%以上と比較して、追加および削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取得される資格があることを指定します。

@item  @samp{-M[<n>]} 
@itemx  @samp{--find-renames[=<n>]} 
diffを生成する場合は、コミットごとに名前の変更を検出して報告します。
履歴をトラバースしながら名前を変更してファイルをフォローする方法については、
@samp{--follow} を参照してください。
@samp{n} が指定されている場合、それは類似性インデックスのしきい値です
(つまり、ファイルのサイズと比較した追加/削除の量)。
たとえば、 @samp{-M90%} は、ファイルの90%以上が変更されていない場合、
Gitが削除/追加のペアを名前変更と見なす必要があることを意味します。
@samp{%} 記号がない場合、数値は小数として読み取られ、その前に小数点が付きます。
つまり、 @samp{-M5} は0.5になるため、@samp{-M50%} と同じになります。
同様に、 @samp{-M05} は @samp{-M5%} と同じです。
検出を正確な名前変更に制限するには、 @samp{-M100%} を使用します。
デフォルトの類似性インデックスは50%です。

@item  @samp{-C[<n>]} 
@itemx  @samp{--find-copies[=<n>]} 
名前と同様コピーを検出します。 @samp{--find-copies-harder} @samp{も参照してください。 `n} を指定すると、 @samp{-M<n>}
と同じ意味になります。

@item  @samp{--find-copies-harder} 
パフォーマンス上の理由から、デフォルトでは、 @samp{-C}
オプションは、コピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピーを検索します。このフラグにより、コマンドは変更されていないファイルをコピー元の候補として検査します。これは大規模なプロジェクトでは非常にコストのかかる操作であるため、注意して使用してください。
複数の @samp{-C} オプションを指定しても同じ効果があります。

@item  @samp{-D} 
@itemx  @samp{--irreversible-delete} 
削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを出力し、プレイメージと @samp{/dev/null}
の差分は出力しません。結果のパッチは、 @samp{patch} または @samp{git apply}
で適用されることを意図していません。これは、変更後にテキストを確認することに集中したい人のためだけのものです。さらに、出力には明らかに、そのようなパッチを手動でも逆に適用するのに十分な情報が不足しているため、オプションの名前が付けられています。

@samp{-B} と併用する場合は、削除/作成ペアの削除部分のプリイメージ(preimage)も省略してください。

@item  @samp{-l<num>} 
@samp{-M} および @samp{-C}
オプションには、名前変更/コピーのサブセットを安価に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペアになっていない宛先をすべての関連ソースと比較する徹底的なフォールバック部分が続きます。(名前の変更の場合、残りのペアになっていないソースのみが関係します。コピーの場合、すべての元のソースが関係します)。Nのソースと宛先の場合、この徹底的なチェックのコストは
O(N^2)
です。このオプションは、関係するソース/宛先ファイルの数が指定された数を超えた場合に、名前変更/コピー検出の完全な部分が実行されないようにします。デフォルトは
diff.renameLimit です。 値0は無制限として扱われることに注意してください。

@item  @samp{--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]} 
追加(Add)・コピー(Copy)・削除(Delete)・変更(Modify)・名前変更(Rename)されたファイル、タイプが変更されたファイル(T)、マージされていないファイル(U)、不明なファイル(X)、またはペアリングが壊れているファイル(B)のみを選択します。フィルタ文字(無しも含む)の任意の組み合わせを使用できます。
組み合わせに @samp{*} (全てまたは無し)が追加されると、比較で他の基準に一致するファイルがある場合、すべてのパスが選択されます。
他の基準に一致するファイルがない場合、何も選択されません。

また、逆に、除外したい時はこれらの各大文字指定を小文字にして指定します。例えば @samp{--diff-filter=ad}
は、追加および削除されたパスを除外します。

注意:すべてのdiffがすべてのタイプを特徴とするわけではないことに注意してください。
たとえば、インデックスから作業ツリーへのdiffにエントリを追加することはできません(diffに含まれるパスのセットは、インデックスの内容によって制限されるため)。
同様に、これらのタイプの検出が無効になっている場合、コピーおよび名前変更されたエントリは表示されません。

@item  @samp{-S<string>} 
ファイル内の指定の文字列(つまり、 addition 、deletion)の出現回数の差分を調べます。スクリプターが使用することを目的としています。

(構造体など)コードの正確なブロックを探していて、そのブロックが最初に作成されてからの履歴を知りたい場合に便利です。この機能を繰り返し使用して、プリイメージ(preimage)内の興味深いブロックを
@samp{-S} にフィードバックし、そしてあなたはそれをブロックの最初のバージョンを取得するまで続けます。

バイナリファイルも検索されます。

@item  @samp{-G<regex>} 
パッチテキストに <regex> にマッチする 追加/削除 された行が含まれている差分を探します。

@samp{-S<regex>-pickaxe-regex} と @samp{-G<regex>}
の違いを説明するために、同じファイル内で以下のdiffを使用してコミットすることを検討してください:

@example
+    return frotz(nitfol, two->ptr, 1, 0);
...
-    hit = frotz(nitfol, mf2.ptr, 1, 0);
@end example


@samp{git log -G"frotz\(nitfol"} はこのコミットを表示しますが、 @samp{git log -S"frotz\(nitfol"
--pickaxe-regex} は表示しません(その文字列の出現回数が変更されなかったため)。

@samp{--text} が提供されていない限り、 textconv フィルターのないバイナリファイルのパッチは無視されます。

詳細については gitdiffcore(7) の @emph{pickaxe} エントリを参照してください。

@item  @samp{--find-object=<object-id>} 
指定されたオブジェクトの出現回数を変更する違いを探します。 @samp{-S}
と同様に、引数だけが異なり、特定の文字列ではなく特定のオブジェクトIDを検索します。

オブジェクトは、ブロブまたはサブモジュールのコミットにすることができます。 これは、 @samp{git-log} の @samp{-t}
オプションがツリーも探すことを意味します。

@item  @samp{--pickaxe-all} 
@samp{-S} または @samp{-G} が変更を見つけたら、 <string>
の変更を含むファイルだけでなく、その変更セット(changeset)のすべての変更を表示します。

@item  @samp{--pickaxe-regex} 
@samp{-S} に指定した <string> を拡張POSIX正規表現として扱います。

@item  @samp{-O<orderfile>} 
ファイルが出力に表示される順序を制御します。これは @samp{diff.orderFile}
構成変数をオーバーライドします(git-config(1) 参照)。 @samp{diff.orderFile} をキャンセルするには、
@samp{-O/dev/null} を使用します。

出力順序は、 <orderfile>
内のglobパターンの順序によって決定されます。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力され、2番目のパターンに一致する(ただし最初のパターンには一致しない)パス名を持つすべてのファイルが次に出力されます。パス名がどのパターンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一致パターンがあるかのように、最後に出力されます。複数のパス名のランクが同じである場合(同じパターンに一致するが、以前のパターンには一致しない)、相互の出力順序は通常の順序です。

<orderfile> は以下のとおりパースされます:

@itemize 

@item
空白行は無視されるため、読みやすくするための区切りとして使用できます。

@item
ハッシュ ("@samp{#}") で始まる行は無視されるため、コメントに使用できます。
パターンがハッシュで始まる場合は、パターンの先頭にバックスラッシュ(訳注:日本では環境により円記号)("@samp{\}") を追加します。

@item
他の各行には、単一のパターンが含まれています。
@end itemize

パターンは、 FNM_PATHNAME フラグなしで fnmatch(3)
に使用されるパターンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポーネントをいくつも削除するとパターンと一致する場合、パス名もパターンと一致する点が異なります。
たとえば、パターン "@samp{foo*bar}" は、 "@samp{fooasdfbar}" および "@samp{foo/bar/baz/asdf}" と一致しますが、
"@samp{foobarx}" とは一致しません。

@item  @samp{--skip-to=<file>} 
@itemx  @samp{--rotate-to=<file>} 
名前付き <file> の前のファイルを出力から破棄するか(スキップして)、出力の最後に移動させます(ローテーションさせます)。 これらは主に @samp{git
difftool} コマンドを使用するために考案されたものであり、それ以外の場合はあまり役に立たない可能性があります。

@item  @samp{-R} 
2つの入力を交換します。 つまり、インデックスまたはディスク上のファイルとツリーの内容の違いを表示します。

@item  @samp{--relative[=<path>]} 
@itemx  @samp{--no-relative} 
プロジェクトのサブディレクトリから実行する場合、このオプションを使用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示するように指示できます。サブディレクトリ(ベアリポジトリなど)にいない場合は、引数として
<path> を指定することで、出力を作成するサブディレクトリに名前を付けることができます。 @samp{--no-relative`は、
`diff.relative} 設定オプションと以前の @samp{--relative} の両方を打ち消すために使用できます。

@item  @samp{-a} 
@itemx  @samp{--text} 
すべてのファイルをテキストとして扱います。

@item  @samp{--ignore-cr-at-eol} 
比較を行うときは、行末のキャリッジリターン(carriage-return)を無視します。

@item  @samp{--ignore-space-at-eol} 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  @samp{-b} 
@itemx  @samp{--ignore-space-change} 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  @samp{-w} 
@itemx  @samp{--ignore-all-space} 
行を比較するときは空白を無視します。 これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  @samp{--ignore-blank-lines} 
全て空白の行の変更は無視します。

@item  @samp{-I<regex>} 
@itemx  @samp{--ignore-matching-lines=<regex>} 
すべての行が <regex> にマッチする変更を無視します。このオプションは複数回指定できます。

@item  @samp{--inter-hunk-context=<lines>} 
指定された行数までの差分ハンク間のコンテキストを表示し、それによって互いに近いハンクを融合します。デフォルトは
@samp{diff.interHunkContext} で、設定オプションが設定されていない場合は0です。

@item  @samp{-W} 
@itemx  @samp{--function-context} 
関数全体を各変更のコンテキスト行として表示します。関数名は、 @samp{git diff}
がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の @emph{Defining a custom
hunk-header} を参照)。

@item  @samp{--ext-diff} 
外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外部diffドライバーを設定する場合は、
git-log(1) およびその仲間と一緒にこのオプションを使用する必要があります。

@item  @samp{--no-ext-diff} 
外部diffドライバーを禁止します。

@item  @samp{--textconv} 
@itemx  @samp{--no-textconv} 
バイナリファイルを比較するときに、外部テキスト変換フィルターの実行を許可(または禁止)します。 詳細については、
gitattributes(5)
を参照してください。textconvフィルターは通常、一方向の変換であるため、結果のdiffは人間の消費に適していますが、適用(apply)することはできません。このため、textconvフィルターは、
git-diff(1) および git-log(1) に対してのみデフォルトで有効になりますが、
git-format-patch(1) またはdiff配管コマンドに対しては有効になりません。

@item  @samp{--ignore-submodules[=<when>]} 
diff生成のサブモジュールへの変更を無視します。 <when> は、
none・untracked・dirty・allのいずれかになります。これがデフォルトです。noneを使用すると、追跡されていないファイルまたは変更されたファイルが含まれている場合、またはそのHEADがスーパープロジェクトに記録されているコミットと異なる場合にサブモジュールが変更されたと見なされ、
git-config(1) または gitmodules(5) の
ignoreオプションの設定をオーバーライドするために使用できます。untrackedが使用されている場合、サブモジュールには追跡されていないコンテンツのみが含まれている場合、サブモジュールはダーティとは見なされません(ただし、変更されたコンテンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作業ツリーへのすべての変更が無視され、スーパープロジェクトに格納されているコミットへの変更のみが表示されます(これは1.7.0までの動作でした)。「all」を使用すると、サブモジュールへのすべての変更が非表示になります。

@item  @samp{--src-prefix=<prefix>} 
"a/" の代わりに、与えられたソースプレフィックス(source prefix)を表示します。

@item  @samp{--dst-prefix=<prefix>} 
"b/" の代わりに、指定された宛先プレフィックス(destination prefix)を表示します。

@item  @samp{--no-prefix} 
送信元(source)または宛先(destination)のプレフィックスを表示しません。

@item  @samp{--line-prefix=<prefix>} 
出力のすべての行に追加のプレフィックスを付加します。

@item  @samp{--ita-invisible-in-index} 
デフォルトでは、 "git add -N" によって追加されたエントリは、 "git diff" に既存の空のファイルとして表示され、 "git
diff --cached" に新しいファイルとして表示されます。このオプションを使用すると、エントリは "git diff"
では新しいファイルとして表示され、 "git diff --cached" では存在しません。このオプションは、
@samp{--ita-visible-in-index} で元に戻すことができます。どちらのオプションも実験的なものであり、将来削除される可能性があります。
@end table

これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照してください。

@noindent

@chapheading Generating patch text with -p

git-diff(1) 、 git-log(1) 、 git-show(1) 、
git-diff-index(1) 、 git-diff-tree(1) 、
git-diff-files(1) に @samp{-p} オプションを付けて実行するとパッチテキストを生成します。パッチテキストの作成は、
@samp{GIT_EXTERNAL_DIFF} と @samp{GIT_DIFF_OPTS} 環境変数( git(1) 参照)、および @samp{diff}
属性( gitattributes(5) 参照)を介してカスタマイズできます。

-pオプションが生成するものは、従来のdiff形式とは少々異なります:

@enumerate 

@item
先行して、以下のような "git diff" ヘッダーがあります:

@example
diff --git a/file1 b/file2
@end example

名前の変更/コピーが含まれない限り、 @samp{a/} と @samp{b/} のファイル名は同じです。 特に、作成または削除の場合でも、 @samp{a/} または @samp{b/}
ファイル名の代わりに @samp{/dev/ null} が使用されることはありません。

名前変更/コピーが含まれる場合、 @samp{file1} と`file2`
は、それぞれ名前変更/コピーのソースファイルの名前と、名前変更/コピーが生成するファイルの名前を示します。

@item
その後に、1つ以上の拡張ヘッダー行達が続きます:

@example
old mode <mode>
new mode <mode>
deleted file mode <mode>
new file mode <mode>
copy from <path>
copy to <path>
rename from <path>
rename to <path>
similarity index <number>
dissimilarity index <number>
index <hash>..<hash> <mode>
@end example

ファイルモードは、ファイルタイプとファイル許可ビットを含む6桁の8進数として出力されます。

拡張ヘッダーのパス名には、 @samp{a/} および @samp{b/} プレフィックスは含まれません。

類似インデックス(similarity index)は変更されていない行のパーセンテージであり、非類似インデックス(dissimilarity
index)は変更された行のパーセンテージです。これは切り捨てられた整数であり、その後にパーセント記号が続きます。したがって、100％の類似インデックス値は2つの等しいファイルを表し、100％の非類似性は古いファイルから新しいファイルに移行された行がないことを意味します。

インデックス行には、変更前後のブロブオブジェクト名が含まれます。 <mode>
は、ファイルモードが変更されない場合に含まれます。それ以外の場合、別々の行は古いモードと新しいモードを示します。

@item
通常の文字でないキャラクタ(\"unusual\" characters)を含むパス名は、構成変数 @samp{core.quotePath}
で説明されているように引用符で囲まれています( git-config(1)参照)。

@item
出力内のすべての @samp{file1} ファイルはコミット前のファイルを参照し、すべての @samp{file2}
ファイルはコミット後のファイルを参照します。各変更を各ファイルに順番に適用するのは誤りです。たとえば、以下のパッチはaとbを交換します:

@example
diff --git a/a b/b
rename from a
rename to b
diff --git a/b b/a
rename from b
rename to a
@end example

@item
ハンクのヘッダーには、ハンクが適用される関数の名前が記載されています。特定の言語に合わせてこれを調整する方法の詳細については、
gitattributes(5) の "Defining a custom hunk-header" を参照してください。
@end enumerate

@noindent

@chapheading Combined diff format

diffを生成するコマンドは、マージを表示するときに @samp{-c} または @samp{--cc} オプションを使用して「合成diff」(combined
diff)を生成できます。これは git-diff(1) または git-show(1)
でのマージを表示するときのデフォルトの形式です。 注意: これらのコマンドのいずれかに適切な @samp{--diff-merges}
オプションを指定して、特定の形式で差分を強制的に生成できることにも注意してください。

合成diff形式は以下のようになります:

@example
diff --combined describe.c
index fabadb8,cc95eb0..4866510
--- a/describe.c
+++ b/describe.c
@@@@@@ -98,20 -98,12 +98,20 @@@@@@
        return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
  @}

- static void describe(char *arg)
 -static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  @{
 +      unsigned char sha1[20];
 +      struct commit *cmit;
        struct commit_list *list;
        static int initialized = 0;
        struct commit_name *n;

 +      if (get_sha1(arg, sha1) < 0)
 +              usage(describe_usage);
 +      cmit = lookup_commit_reference(sha1);
 +      if (!cmit)
 +              usage(describe_usage);
 +
        if (!initialized) @{
                initialized = 1;
                for_each_ref(get_name);
@end example


@enumerate 

@item
まず "git diff"  ヘッダーがあり、以下のようになります( @samp{-c} オプションが使用されている場合):

@example
diff --combined file
@end example

または、以下のようになります( @samp{--cc} オプションが使用されている場合):

@example
diff --cc file
@end example

@item
その後に1つ以上の拡張ヘッダー行が続きます(以下の例は、2つの親とのマージを示しています):

@example
index <hash>,<hash>..<hash>
mode <mode>,<mode>..<mode>
new file mode <mode>
deleted file mode <mode>,<mode>
@end example

@samp{mode <mode>,<mode>..<mode>} 行は、<mode> の少なくとも1つが他の <mode>
と異なる場合にのみ表示されます。検出されたコンテンツの移動(名前の変更とコピーの検出)に関する情報を含む拡張ヘッダーは、2つの <tree-ish>
のdiffで機能するように設計されており、合成diff形式では使用されません。

@item
その後に2行の from-file/to-file ヘッダーが続きます

@example
--- a/file
+++ b/file
@end example

従来の統一diff形式の2行ヘッダーと同様に、 @samp{/dev/null} は、作成または削除されたファイルを通知するために使用されます。

ただし、 --combined-all-paths  オプションが指定されている場合、2行の from-file/to-file の代わりに、 N+1
行の from-file/to-file ヘッダーが取得されます。ここで、 N はマージコミットの親の数です。

@example
--- a/file
--- a/file
--- a/file
+++ b/file
@end example

この拡張形式は、名前変更またはコピー検出がアクティブな場合に役立ち、別の親のファイルの元の名前を確認できます。

@item
チャンクヘッダーの形式が変更され、誤って @samp{patch-p1}
にフィードされるのを防ぎます。合成差分形式は、マージコミットの変更を確認するために作成されたものであり、適用されることを意図したものではありません。この変更は、拡張された「インデックス」ヘッダーの変更に似ています:

@example
@@@@@@ <from-file-range> <from-file-range> <to-file-range> @@@@@@
@end example

合成diff形式のチャンクヘッダーには親の数+1の @samp{@@} 文字があります。
@end enumerate

従来の統一diff形式とは異なり、2つのファイルAとBが、 @samp{-} (マイナスはAに表示されますが、Bでは削除されます) または @samp{+}
(プラスはAにはありませんが、Bには追加されます)、または @samp{" "}（スペースは変更なし)
プレフィックスを持つ単一の列で表示される場合、この形式は2つ以上のファイル file1, file2,… を1つのファイルXと比較し、Xが各
fileN とどのように異なるかを示します。ファイルNごとに1つの列が出力行の前に追加され、Xの行が出力行とどのように異なるかを示します。

列Nの @samp{-} 文字は、その行が fileN に表示されているが、結果には表示されていないことを意味します。 列Nの @samp{+}
文字は、結果に行が表示され、 fileN にその行がないことを意味します(つまり、その親の観点から見て行が追加されたことを示す)。

上記の出力例では、関数のシグネチャが両方のファイルから見て変更されています(したがって、 file1 と file2 の両方から2つの @samp{-}
が削除され、さらに @samp{++} が追加されたため、 file1 と file2 のどちらにも表示されません)。また、他の8行は file1 と同じですが、
file2 には表示されません(したがって、接頭辞として @samp{+} が付けられます)。

@samp{git diff-tree -c} で表示される場合、マージコミットの親をマージ結果と比較します(つまり、 file1..fileN が親です)。
@samp{git diff-files -c} で表示される場合、2つの未解決のマージ親を作業ツリーファイルと比較します(つまり、 file1
はステージ2、別名「私たちのバージョン」、 file2 はステージ3、別名「彼らのバージョン」です)。

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git show v1.0.0} 
タグ @samp{v1.0.0} と、タグが指すオブジェクトを表示します。

@item  @samp{git show v1.0.0^@{tree@}} 
タグ @samp{v1.0.0} が指すツリーを表示します。

@item  @samp{git show -s --format=%s v1.0.0^@{commit@}} 
タグ @samp{v1.0.0} が指すコミットの件名を表示します。

@item  @samp{git show next~10:Documentation/README} 
ブランチ @samp{next} の最後から10番目のコミットで最新であったファイル @samp{Documentation/README} の内容を表示します。

@item  @samp{git show master:Makefile master:t/Makefile} 
ブランチ @samp{master} の先頭にあるMakefileの内容を連結して表示します。
@end table

@noindent

@chapheading DISCUSSION

Gitは、ある程度までは文字エンコードに依存しません。

@itemize 

@item
ブロブオブジェクトの内容は、解釈されていないバイトのシーケンスです。コアレベルでのエンコーディング変換はありません。

@item
パス名はUTF-8正規化形式C(UTF-8 normalization form
C)でエンコードされます。これは、ツリーオブジェクト、インデックスファイル、ref名、およびコマンドライン引数、環境変数、構成ファイル(
@samp{.git/config} (git-config(1) 参照) と gitignore(5) と
gitattributes(5) と gitmodules(5)) のパス名に適用されます。

コアレベルのGitは、パス名を単に非NULバイトのシーケンスとして扱い、パス名をエンコードする変換はありません(MacとWindowsを除く)。したがって、非ASCIIパス名の使用は、レガシー拡張ASCIIエンコーディングを使用するプラットフォームやファイルシステムでもほとんど機能します。ただし、そのようなシステムで作成されたリポジトリは、UTF-8ベースのシステム(Linux、Mac、Windowsなど)では正しく機能しません。その逆も同様です。さらに、多くのGitベースのツールは、パス名がUTF-8であると単純に想定しており、他のエンコーディングを正しく表示できません。

@item
コミットログメッセージは通常UTF-8でエンコードされますが、他の拡張ASCIIエンコードもサポートされています。これには、ISO-8859-x、CP125xなどが含まれますが、UTF-16/32、EBCDIC、およびCJKマルチバイトエンコーディング(GBK、Shift-JIS、Big5、EUC-x、CP9xxなど)は含まれません。
@end itemize

我々はコミットログメッセージをUTF-8でエンコードすることをお勧めしますが、コアとGit
Porcelainはどちらも、プロジェクトでUTF-8を強制しないように設計されています。特定のプロジェクトのすべての参加者がレガシーエンコーディングを使用する方が便利だと感じた場合、Gitはそれを禁止しません。
ただし、覚えておくべきことがいくつかあります。

@enumerate 

@item
@emph{git commit} と @emph{git commit-tree}
は、プロジェクトがレガシーエンコーディングを使用していることを明示的に指定しない限り、与えられたコミットログメッセージが有効なUTF-8文字列のように見えない場合に警告を発します。明示的に指定する方法は、以下のように、
@samp{.git/config} ファイルに @samp{i18n.commitEncoding} を含めることです。

@example
[i18n]
        commitEncoding = ISO-8859-1
@end example


上記の設定で作成されたコミットオブジェクトは、 @samp{encoding} ヘッダーに @samp{i18n.commitEncoding} の値を記録します。
これは、後でそれらを見る他の人々を助けるためです。このヘッダーがないということは、コミットログメッセージがUTF-8でエンコードされていることを意味します。

@item
@emph{git log} と @emph{git show} と @emph{git blame} とその仲間たちは、コミットオブジェクトの @samp{encoding}
ヘッダーを見て、特に指定がない限り、ログメッセージをUTF-8に再コーディングしようとします。あなたは以下のように、 @samp{.git/config}
ファイルの @samp{i18n.logOutputEncoding} を使用して目的の出力エンコーディングを指定できます。

@example
[i18n]
        logOutputEncoding = ISO-8859-1
@end example


この構成変数がない場合は、代わりに @samp{i18n.commitEncoding} の値が使用されます。
@end enumerate

UTF-8への再コーディングは必ずしも可逆的な操作ではないため、我々はコミットが行われたときにコミットログメッセージを再コーディングしないことを意図的に選択したことに注意してください。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-sparse-checkout,,,Top
@chapheading Name

git-sparse-checkout — Initialize and modify the sparse-checkout configuration, which reduces the checkout to a set of paths given by a list of patterns.

@noindent

@chapheading Synopsis

@display
git sparse-checkout <subcommand> [options]
@end display


@noindent

@chapheading DESCRIPTION

Initialize and modify the sparse-checkout configuration, which reduces the
checkout to a set of paths given by a list of patterns.

THIS COMMAND IS EXPERIMENTAL. ITS BEHAVIOR, AND THE BEHAVIOR OF OTHER
COMMANDS IN THE PRESENCE OF SPARSE-CHECKOUTS, WILL LIKELY CHANGE IN THE
FUTURE.

@noindent

@chapheading COMMANDS

@table @asis

@item  @emph{list} 
Describe the patterns in the sparse-checkout file.

@item  @emph{init} 
Enable the @samp{core.sparseCheckout} setting. If the sparse-checkout file does
not exist, then populate it with patterns that match every file in the root
directory and no other directories, then will remove all directories tracked
by Git. Add patterns to the sparse-checkout file to repopulate the working
directory.

To avoid interfering with other worktrees, it first enables the
@samp{extensions.worktreeConfig} setting and makes sure to set the
@samp{core.sparseCheckout} setting in the worktree-specific config file.

When @samp{--cone} is provided, the @samp{core.sparseCheckoutCone} setting is also
set, allowing for better performance with a limited set of patterns (see
@emph{CONE PATTERN SET} below).

Use the @samp{--[no-]sparse-index} option to toggle the use of the sparse index
format. This reduces the size of the index to be more closely aligned with
your sparse-checkout definition. This can have significant performance
advantages for commands such as @samp{git status} or @samp{git add}.  This feature is
still experimental. Some commands might be slower with a sparse index until
they are properly integrated with the feature.

@strong{WARNING:} Using a sparse index requires modifying the index in a way
that is not completely understood by external tools. If you have trouble
with this compatibility, then run @samp{git sparse-checkout init --no-sparse-index}
to rewrite your index to not be sparse. Older versions of Git will not
understand the sparse directory entries index extension and may fail to
interact with your repository until it is disabled.

@item  @emph{set} 
Write a set of patterns to the sparse-checkout file, as given as a list of
arguments following the @emph{set} subcommand. Update the working directory to
match the new patterns. Enable the core.sparseCheckout config setting if it
is not already enabled.

When the @samp{--stdin} option is provided, the patterns are read from standard
in as a newline-delimited list instead of from the arguments.

When @samp{core.sparseCheckoutCone} is enabled, the input list is considered a
list of directories instead of sparse-checkout patterns. The command writes
patterns to the sparse-checkout file to include all files contained in those
directories (recursively) as well as files that are siblings of ancestor
directories. The input format matches the output of @samp{git ls-tree
--name-only}.  This includes interpreting pathnames that begin with a double
quote (") as C-style quoted strings.

@item  @emph{add} 
Update the sparse-checkout file to include additional patterns.  By default,
these patterns are read from the command-line arguments, but they can be
read from stdin using the @samp{--stdin} option. When @samp{core.sparseCheckoutCone}
is enabled, the given patterns are interpreted as directory names as in the
@emph{set} subcommand.

@item  @emph{reapply} 
Reapply the sparsity pattern rules to paths in the working tree.  Commands
like merge or rebase can materialize paths to do their work (e.g. in order
to show you a conflict), and other sparse-checkout commands might fail to
sparsify an individual file (e.g. because it has unstaged changes or
conflicts).  In such cases, it can make sense to run @samp{git sparse-checkout
reapply} later after cleaning up affected paths (e.g. resolving conflicts,
undoing or committing changes, etc.).

@item  @emph{disable} 
Disable the @samp{core.sparseCheckout} config setting, and restore the working
directory to include all files. Leaves the sparse-checkout file intact so a
later @emph{git sparse-checkout init} command may return the working directory to
the same state.
@end table

@noindent

@chapheading SPARSE CHECKOUT

"Sparse checkout" allows populating the working directory sparsely.  It uses
the skip-worktree bit (see git-update-index(1)) to tell Git whether
a file in the working directory is worth looking at. If the skip-worktree
bit is set, then the file is ignored in the working directory. Git will not
populate the contents of those files, which makes a sparse checkout helpful
when working in a repository with many files, but only a few are important
to the current user.

The @samp{$GIT_DIR/info/sparse-checkout} file is used to define the skip-worktree
reference bitmap. When Git updates the working directory, it updates the
skip-worktree bits in the index based on this file. The files matching the
patterns in the file will appear in the working directory, and the rest will
not.

To enable the sparse-checkout feature, run @samp{git sparse-checkout init} to
initialize a simple sparse-checkout file and enable the
@samp{core.sparseCheckout} config setting. Then, run @samp{git sparse-checkout set} to
modify the patterns in the sparse-checkout file.

To repopulate the working directory with all files, use the @samp{git
sparse-checkout disable} command.

@noindent

@chapheading FULL PATTERN SET

By default, the sparse-checkout file uses the same syntax as @samp{.gitignore}
files.

While @samp{$GIT_DIR/info/sparse-checkout} is usually used to specify what files
are included, you can also specify what files are @emph{not} included, using
negative patterns. For example, to remove the file @samp{unwanted}:

@example
/*
!unwanted
@end example


@noindent

@chapheading CONE PATTERN SET

The full pattern set allows for arbitrary pattern matches and complicated
inclusion/exclusion rules. These can result in O(N*M) pattern matches when
updating the index, where N is the number of patterns and M is the number of
paths in the index. To combat this performance issue, a more restricted
pattern set is allowed when @samp{core.sparseCheckoutCone} is enabled.

The accepted patterns in the cone pattern set are:

@enumerate 

@item
@strong{Recursive:} All paths inside a directory are included.

@item
@strong{Parent:} All files immediately inside a directory are included.
@end enumerate

In addition to the above two patterns, we also expect that all files in the
root directory are included. If a recursive pattern is added, then all
leading directories are added as parent patterns.

By default, when running @samp{git sparse-checkout init}, the root directory is
added as a parent pattern. At this point, the sparse-checkout file contains
the following patterns:

@example
/*
!/*/
@end example


This says "include everything in root, but nothing two levels below root."

When in cone mode, the @samp{git sparse-checkout set} subcommand takes a list of
directories instead of a list of sparse-checkout patterns. In this mode, the
command @samp{git sparse-checkout set A/B/C} sets the directory @samp{A/B/C} as a
recursive pattern, the directories @samp{A} and @samp{A/B} are added as parent
patterns. The resulting sparse-checkout file is now

@example
/*
!/*/
/A/
!/A/*/
/A/B/
!/A/B/*/
/A/B/C/
@end example


Here, order matters, so the negative patterns are overridden by the positive
patterns that appear lower in the file.

If @samp{core.sparseCheckoutCone=true}, then Git will parse the sparse-checkout
file expecting patterns of these types. Git will warn if the patterns do not
match.  If the patterns do match the expected format, then Git will use
faster hash- based algorithms to compute inclusion in the sparse-checkout.

In the cone mode case, the @samp{git sparse-checkout list} subcommand will list
the directories that define the recursive patterns. For the example
sparse-checkout file above, the output is as follows:

@example
$ git sparse-checkout list
A/B/C
@end example


If @samp{core.ignoreCase=true}, then the pattern-matching algorithm will use a
case-insensitive check. This corrects for case mismatched filenames in the
@emph{git sparse-checkout set} command to reflect the expected cone in the
working directory.

When changing the sparse-checkout patterns in cone mode, Git will inspect
each tracked directory that is not within the sparse-checkout cone to see if
it contains any untracked files. If all of those files are ignored due to
the @samp{.gitignore} patterns, then the directory will be deleted. If any of the
untracked files within that directory is not ignored, then no deletions will
occur within that directory and a warning message will appear. If these
files are important, then reset your sparse-checkout definition so they are
included, use @samp{git add} and @samp{git commit} to store them, then remove any
remaining files manually to ensure Git can behave optimally.

@noindent

@chapheading SUBMODULES

If your repository contains one or more submodules, then submodules are
populated based on interactions with the @samp{git submodule} command.
Specifically, @samp{git submodule init -- <path>} will ensure the submodule at
@samp{<path>} is present, while @samp{git submodule deinit [-f] -- <path>} will remove
the files for the submodule at @samp{<path>} (including any untracked files,
uncommitted changes, and unpushed history).  Similar to how sparse-checkout
removes files from the working tree but still leaves entries in the index,
deinitialized submodules are removed from the working directory but still
have an entry in the index.

Since submodules may have unpushed changes or untracked files, removing them
could result in data loss.  Thus, changing sparse inclusion/exclusion rules
will not cause an already checked out submodule to be removed from the
working copy.  Said another way, just as @samp{checkout} will not cause
submodules to be automatically removed or initialized even when switching
between branches that remove or add submodules, using @samp{sparse-checkout} to
reduce or expand the scope of "interesting" files will not cause submodules
to be automatically deinitialized or initialized either.

Further, the above facts mean that there are multiple reasons that "tracked"
files might not be present in the working copy: sparsity pattern application
from sparse-checkout, and submodule initialization state.  Thus, commands
like @samp{git grep} that work on tracked files in the working copy may return
results that are limited by either or both of these restrictions.

@noindent

@chapheading SEE ALSO

git-read-tree(1) gitignore(5)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-stage,,,Top
@chapheading Name

git-stage — ファイルの内容をステージング領域に追加

@noindent

@chapheading Synopsis

@display
git stage args…
@end display


@noindent

@chapheading DESCRIPTION

これは git-add(1) の同義語です。 git-add(1) の文書を参照してください。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-stash,,,Top
@chapheading Name

git-stash — Stash the changes in a dirty working directory away

@noindent

@chapheading Synopsis

@display
git stash list [<log-options>]
git stash show [-u|--include-untracked|--only-untracked] [<diff-options>] [<stash>]
git stash drop [-q|--quiet] [<stash>]
git stash ( pop | apply ) [--index] [-q|--quiet] [<stash>]
git stash branch <branchname> [<stash>]
git stash [push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]
             [-u|--include-untracked] [-a|--all] [-m|--message <message>]
             [--pathspec-from-file=<file> [--pathspec-file-nul]]
             [--] [<pathspec>…]]
git stash clear
git stash create [<message>]
git stash store [-m|--message <message>] [-q|--quiet] <commit>
@end display


@noindent

@chapheading DESCRIPTION

Use @samp{git stash} when you want to record the current state of the working
directory and the index, but want to go back to a clean working directory.
The command saves your local modifications away and reverts the working
directory to match the @samp{HEAD} commit.

The modifications stashed away by this command can be listed with @samp{git stash
list}, inspected with @samp{git stash show}, and restored (potentially on top of
a different commit) with @samp{git stash apply}.  Calling @samp{git stash} without any
arguments is equivalent to @samp{git stash push}.  A stash is by default listed
as "WIP on @emph{branchname} …", but you can give a more descriptive message on
the command line when you create one.

The latest stash you created is stored in @samp{refs/stash}; older stashes are
found in the reflog of this reference and can be named using the usual
reflog syntax (e.g. @samp{stash@@@{0@}} is the most recently created stash,
@samp{stash@@@{1@}} is the one before it, @samp{stash@@@{2.hours.ago@}} is also
possible). Stashes may also be referenced by specifying just the stash index
(e.g. the integer @samp{n} is equivalent to @samp{stash@@@{n@}}).

@noindent

@chapheading COMMANDS

@table @asis

@item  push [-p|--patch] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [-m|--message <message>] [--pathspec-from-file=<file> [--pathspec-file-nul]] [--] [<pathspec>…] 
Save your local modifications to a new @emph{stash entry} and roll them back to
HEAD (in the working tree and in the index).  The <message> part is optional
and gives the description along with the stashed state.

For quickly making a snapshot, you can omit "push".  In this mode,
non-option arguments are not allowed to prevent a misspelled subcommand from
making an unwanted stash entry.  The two exceptions to this are @samp{stash -p}
which acts as alias for @samp{stash push -p} and pathspec elements, which are
allowed after a double hyphen @samp{--} for disambiguation.

@item  save [-p|--patch] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [<message>] 
This option is deprecated in favour of @emph{git stash push}.  It differs from
"stash push" in that it cannot take pathspec.  Instead, all non-option
arguments are concatenated to form the stash message.

@item  list [<log-options>] 
List the stash entries that you currently have.  Each @emph{stash entry} is
listed with its name (e.g. @samp{stash@@@{0@}} is the latest entry, @samp{stash@@@{1@}} is
the one before, etc.), the name of the branch that was current when the
entry was made, and a short description of the commit the entry was based
on.

@example
stash@@@{0@}: WIP on submit: 6ebd0e2... Update git-stash documentation
stash@@@{1@}: On master: 9cc0589... Add git-stash
@end example


The command takes options applicable to the @emph{git log} command to control
what is shown and how. See git-log(1).

@item  show [-u|--include-untracked|--only-untracked] [<diff-options>] [<stash>] 
Show the changes recorded in the stash entry as a diff between the stashed
contents and the commit back when the stash entry was first created.  By
default, the command shows the diffstat, but it will accept any format known
to @emph{git diff} (e.g., @samp{git stash show -p stash@@@{1@}} to view the second most
recent entry in patch form).  If no @samp{<diff-option>} is provided, the default
behavior will be given by the @samp{stash.showStat}, and @samp{stash.showPatch} config
variables. You can also use @samp{stash.showIncludeUntracked} to set whether
@samp{--include-untracked} is enabled by default.

@item  pop [--index] [-q|--quiet] [<stash>] 
Remove a single stashed state from the stash list and apply it on top of the
current working tree state, i.e., do the inverse operation of @samp{git stash
push}. The working directory must match the index.

Applying the state can fail with conflicts; in this case, it is not removed
from the stash list. You need to resolve the conflicts by hand and call @samp{git
stash drop} manually afterwards.

@item  apply [--index] [-q|--quiet] [<stash>] 
Like @samp{pop}, but do not remove the state from the stash list. Unlike @samp{pop},
@samp{<stash>} may be any commit that looks like a commit created by @samp{stash push}
or @samp{stash create}.

@item  branch <branchname> [<stash>] 
Creates and checks out a new branch named @samp{<branchname>} starting from the
commit at which the @samp{<stash>} was originally created, applies the changes
recorded in @samp{<stash>} to the new working tree and index.  If that succeeds,
and @samp{<stash>} is a reference of the form @samp{stash@@@{<revision>@}}, it then drops
the @samp{<stash>}.

This is useful if the branch on which you ran @samp{git stash push} has changed
enough that @samp{git stash apply} fails due to conflicts. Since the stash entry
is applied on top of the commit that was HEAD at the time @samp{git stash} was
run, it restores the originally stashed state with no conflicts.

@item  clear 
Remove all the stash entries. Note that those entries will then be subject
to pruning, and may be impossible to recover (see @emph{Examples} below for a
possible strategy).

@item  drop [-q|--quiet] [<stash>] 
Remove a single stash entry from the list of stash entries.

@item  create 
Create a stash entry (which is a regular commit object) and return its
object name, without storing it anywhere in the ref namespace.  This is
intended to be useful for scripts.  It is probably not the command you want
to use; see "push" above.

@item  store 
Store a given stash created via @emph{git stash create} (which is a dangling
merge commit) in the stash ref, updating the stash reflog.  This is intended
to be useful for scripts.  It is probably not the command you want to use;
see "push" above.
@end table

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-a} 
@itemx  @samp{--all} 
This option is only valid for @samp{push} and @samp{save} commands.

All ignored and untracked files are also stashed and then cleaned up with
@samp{git clean}.

@item  @samp{-u} 
@itemx  @samp{--include-untracked} 
@itemx  @samp{--no-include-untracked} 
When used with the @samp{push} and @samp{save} commands, all untracked files are also
stashed and then cleaned up with @samp{git clean}.

When used with the @samp{show} command, show the untracked files in the stash
entry as part of the diff.

@item  @samp{--only-untracked} 
This option is only valid for the @samp{show} command.

Show only the untracked files in the stash entry as part of the diff.

@item  @samp{--index} 
This option is only valid for @samp{pop} and @samp{apply} commands.

Tries to reinstate not only the working tree’s changes, but also the index’s
ones. However, this can fail, when you have conflicts (which are stored in
the index, where you therefore can no longer apply the changes as they were
originally).

@item  @samp{-k} 
@itemx  @samp{--keep-index} 
@itemx  @samp{--no-keep-index} 
This option is only valid for @samp{push} and @samp{save} commands.

All changes already added to the index are left intact.

@item  @samp{-p} 
@itemx  @samp{--patch} 
This option is only valid for @samp{push} and @samp{save} commands.

Interactively select hunks from the diff between HEAD and the working tree
to be stashed.  The stash entry is constructed such that its index state is
the same as the index state of your repository, and its worktree contains
only the changes you selected interactively.  The selected changes are then
rolled back from your worktree. See the “Interactive Mode” section of
git-add(1) to learn how to operate the @samp{--patch} mode.

The @samp{--patch} option implies @samp{--keep-index}.  You can use @samp{--no-keep-index}
to override this.

@item  @samp{--pathspec-from-file=<file>} 
This option is only valid for @samp{push} command.

Pathspec is passed in @samp{<file>} instead of commandline args. If @samp{<file>} is
exactly @samp{-} then standard input is used. Pathspec elements are separated by
LF or CR/LF. Pathspec elements can be quoted as explained for the
configuration variable @samp{core.quotePath} (see git-config(1)). See
also @samp{--pathspec-file-nul} and global @samp{--literal-pathspecs}.

@item  @samp{--pathspec-file-nul} 
This option is only valid for @samp{push} command.

Only meaningful with @samp{--pathspec-from-file}. Pathspec elements are separated
with NUL character and all other characters are taken literally (including
newlines and quotes).

@item  @samp{-q} 
@itemx  @samp{--quiet} 
This option is only valid for @samp{apply}, @samp{drop}, @samp{pop}, @samp{push}, @samp{save},
@samp{store} commands.

Quiet, suppress feedback messages.

@item  -- 
This option is only valid for @samp{push} command.

Separates pathspec from options for disambiguation purposes.

@item  <pathspec>… 
This option is only valid for @samp{push} command.

The new stash entry records the modified states only for the files that
match the pathspec.  The index entries and working tree files are then
rolled back to the state in HEAD only for these files, too, leaving files
that do not match the pathspec intact.

For more details, see the @emph{pathspec} entry in gitglossary(7).

@item  <stash> 
This option is only valid for @samp{apply}, @samp{branch}, @samp{drop}, @samp{pop}, @samp{show}
commands.

A reference of the form @samp{stash@@@{<revision>@}}. When no @samp{<stash>} is given,
the latest stash is assumed (that is, @samp{stash@@@{0@}}).
@end table

@noindent

@chapheading DISCUSSION

A stash entry is represented as a commit whose tree records the state of the
working directory, and its first parent is the commit at @samp{HEAD} when the
entry was created.  The tree of the second parent records the state of the
index when the entry is made, and it is made a child of the @samp{HEAD} commit.
The ancestry graph looks like this:

@example
       .----W
      /    /
-----H----I
@end example

where @samp{H} is the @samp{HEAD} commit, @samp{I} is a commit that records the state of
the index, and @samp{W} is a commit that records the state of the working tree.

@noindent

@chapheading EXAMPLES

@table @asis

@item  Pulling into a dirty tree 
When you are in the middle of something, you learn that there are upstream
changes that are possibly relevant to what you are doing.  When your local
changes do not conflict with the changes in the upstream, a simple @samp{git
pull} will let you move forward.

However, there are cases in which your local changes do conflict with the
upstream changes, and @samp{git pull} refuses to overwrite your changes.  In such
a case, you can stash your changes away, perform a pull, and then unstash,
like this:

@example
$ git pull
 ...
file foobar not up to date, cannot merge.
$ git stash
$ git pull
$ git stash pop
@end example


@item  Interrupted workflow 
When you are in the middle of something, your boss comes in and demands that
you fix something immediately.  Traditionally, you would make a commit to a
temporary branch to store your changes away, and return to your original
branch to make the emergency fix, like this:

@example
# ... hack hack hack ...
$ git switch -c my_wip
$ git commit -a -m "WIP"
$ git switch master
$ edit emergency fix
$ git commit -a -m "Fix in a hurry"
$ git switch my_wip
$ git reset --soft HEAD^
# ... continue hacking ...
@end example


You can use @emph{git stash} to simplify the above, like this:

@example
# ... hack hack hack ...
$ git stash
$ edit emergency fix
$ git commit -a -m "Fix in a hurry"
$ git stash pop
# ... continue hacking ...
@end example


@item  Testing partial commits 
You can use @samp{git stash push --keep-index} when you want to make two or more
commits out of the changes in the work tree, and you want to test each
change before committing:

@example
# ... hack hack hack ...
$ git add --patch foo            # add just first part to the index
$ git stash push --keep-index    # save all other changes to the stash
$ edit/build/test first part
$ git commit -m 'First part'     # commit fully tested change
$ git stash pop                  # prepare to work on all other changes
# ... repeat above five steps until one commit remains ...
$ edit/build/test remaining parts
$ git commit foo -m 'Remaining parts'
@end example


@item  Recovering stash entries that were cleared/dropped erroneously 
If you mistakenly drop or clear stash entries, they cannot be recovered
through the normal safety mechanisms.  However, you can try the following
incantation to get a list of stash entries that are still in your
repository, but not reachable any more:

@example
git fsck --unreachable |
grep commit | cut -d\  -f3 |
xargs git log --merges --no-walk --grep=WIP
@end example

@end table

@noindent

@chapheading SEE ALSO

git-checkout(1), git-commit(1), git-reflog(1),
git-reset(1), git-switch(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-status,,,Top
@chapheading Name

git-status — Show the working tree status

@noindent

@chapheading Synopsis

@display
git status [<options>…] [--] [<pathspec>…]
@end display


@noindent

@chapheading DESCRIPTION

Displays paths that have differences between the index file and the current
HEAD commit, paths that have differences between the working tree and the
index file, and paths in the working tree that are not tracked by Git (and
are not ignored by gitignore(5)). The first are what you @emph{would}
commit by running @samp{git commit}; the second and third are what you @emph{could}
commit by running @emph{git add} before running @samp{git commit}.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-s} 
@itemx  @samp{--short} 
Give the output in the short-format.

@item  @samp{-b} 
@itemx  @samp{--branch} 
Show the branch and tracking info even in short-format.

@item  @samp{--show-stash} 
Show the number of entries currently stashed away.

@item  @samp{--porcelain[=<version>]} 
Give the output in an easy-to-parse format for scripts.  This is similar to
the short output, but will remain stable across Git versions and regardless
of user configuration. See below for details.

The version parameter is used to specify the format version.  This is
optional and defaults to the original version @emph{v1} format.

@item  @samp{--long} 
Give the output in the long-format. This is the default.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
In addition to the names of files that have been changed, also show the
textual changes that are staged to be committed (i.e., like the output of
@samp{git diff --cached}). If @samp{-v} is specified twice, then also show the changes
in the working tree that have not yet been staged (i.e., like the output of
@samp{git diff}).

@item  @samp{-u[<mode>]} 
@itemx  @samp{--untracked-files[=<mode>]} 
Show untracked files.

The mode parameter is used to specify the handling of untracked files.  It
is optional: it defaults to @emph{all}, and if specified, it must be stuck to the
option (e.g. @samp{-uno}, but not @samp{-u no}).

The possible options are:

@itemize 

@item
@emph{no}     - Show no untracked files.

@item
@emph{normal} - Shows untracked files and directories.

@item
@emph{all}    - Also shows individual files in untracked directories.
@end itemize

When @samp{-u} option is not used, untracked files and directories are shown
(i.e. the same as specifying @samp{normal}), to help you avoid forgetting to add
newly created files.  Because it takes extra work to find untracked files in
the filesystem, this mode may take some time in a large working tree.
Consider enabling untracked cache and split index if supported (see @samp{git
update-index --untracked-cache} and @samp{git update-index --split-index}),
Otherwise you can use @samp{no} to have @samp{git status} return more quickly without
showing untracked files.

The default can be changed using the status.showUntrackedFiles configuration
variable documented in git-config(1).

@item  @samp{--ignore-submodules[=<when>]} 
Ignore changes to submodules when looking for changes. <when> can be either
"none", "untracked", "dirty" or "all", which is the default.  Using "none"
will consider the submodule modified when it either contains untracked or
modified files or its HEAD differs from the commit recorded in the
superproject and can be used to override any settings of the @emph{ignore} option
in git-config(1) or gitmodules(5). When "untracked" is used
submodules are not considered dirty when they only contain untracked content
(but they are still scanned for modified content). Using "dirty" ignores all
changes to the work tree of submodules, only changes to the commits stored
in the superproject are shown (this was the behavior before 1.7.0). Using
"all" hides all changes to submodules (and suppresses the output of
submodule summaries when the config option @samp{status.submoduleSummary} is
set).

@item  @samp{--ignored[=<mode>]} 
Show ignored files as well.

The mode parameter is used to specify the handling of ignored files.  It is
optional: it defaults to @emph{traditional}.

The possible options are:

@itemize 

@item
@emph{traditional} - Shows ignored files and directories, unless
--untracked-files=all is specified, in which case
individual files in ignored directories are
displayed.

@item
@emph{no}          - Show no ignored files.

@item
@emph{matching}    - Shows ignored files and directories matching an
ignore pattern.
@end itemize

When @emph{matching} mode is specified, paths that explicitly match an ignored
pattern are shown. If a directory matches an ignore pattern, then it is
shown, but not paths contained in the ignored directory. If a directory does
not match an ignore pattern, but all contents are ignored, then the
directory is not shown, but all contents are shown.

@item  @samp{-z} 
Terminate entries with NUL, instead of LF.  This implies the
@samp{--porcelain=v1} output format if no other format is given.

@item  @samp{--column[=<options>]} 
@itemx  @samp{--no-column} 
Display untracked files in columns. See configuration variable
@samp{column.status} for option syntax. @samp{--column} and @samp{--no-column} without
options are equivalent to @emph{always} and @emph{never} respectively.

@item  @samp{--ahead-behind} 
@itemx  @samp{--no-ahead-behind} 
Display or do not display detailed ahead/behind counts for the branch
relative to its upstream branch.  Defaults to true.

@item  @samp{--renames} 
@itemx  @samp{--no-renames} 
Turn on/off rename detection regardless of user configuration.  See also
git-diff(1) @samp{--no-renames}.

@item  @samp{--find-renames[=<n>]} 
Turn on rename detection, optionally setting the similarity threshold.  See
also git-diff(1) @samp{--find-renames}.

@item  <pathspec>… 
See the @emph{pathspec} entry in gitglossary(7).
@end table

@noindent

@chapheading OUTPUT

The output from this command is designed to be used as a commit template
comment.  The default, long format, is designed to be human readable,
verbose and descriptive.  Its contents and format are subject to change at
any time.

The paths mentioned in the output, unlike many other Git commands, are made
relative to the current directory if you are working in a subdirectory (this
is on purpose, to help cutting and pasting). See the status.relativePaths
config option below.

@noindent

@heading Short Format

In the short-format, the status of each path is shown as one of these forms

@example
XY PATH
XY ORIG_PATH -> PATH
@end example

where @samp{ORIG_PATH} is where the renamed/copied contents came
from. @samp{ORIG_PATH} is only shown when the entry is renamed or copied. The
@samp{XY} is a two-letter status code.

The fields (including the @samp{->}) are separated from each other by a single
space. If a filename contains whitespace or other nonprintable characters,
that field will be quoted in the manner of a C string literal: surrounded by
ASCII double quote (34) characters, and with interior special characters
backslash-escaped.

There are three different types of states that are shown using this format,
and each one uses the @samp{XY} syntax differently:

@itemize 

@item
When a merge is occurring and the merge was successful, or outside of a
merge
situation, @samp{X} shows the status of the index and @samp{Y} shows the status of the
working tree.

@item
When a merge conflict has occurred and has not yet been resolved, @samp{X} and
@samp{Y}
show the state introduced by each head of the merge, relative to the common
ancestor. These paths are said to be @emph{unmerged}.

@item
When a path is untracked, @samp{X} and @samp{Y} are always the same, since they are
unknown to the index. @samp{??} is used for untracked paths. Ignored files are
not listed unless @samp{--ignored} is used; if it is, ignored files are indicated
by @samp{!!}.
@end itemize

Note that the term @emph{merge} here also includes rebases using the default
@samp{--merge} strategy, cherry-picks, and anything else using the merge
machinery.

In the following table, these three classes are shown in separate sections,
and these characters are used for @samp{X} and @samp{Y} fields for the first two
sections that show tracked paths:

@itemize 

@item
' ' = unmodified

@item
@emph{M} = modified

@item
@emph{A} = added

@item
@emph{D} = deleted

@item
@emph{R} = renamed

@item
@emph{C} = copied

@item
@emph{U} = updated but unmerged
@end itemize

@example
X          Y     Meaning
-------------------------------------------------
         [AMD]   not updated
M        [ MD]   updated in index
A        [ MD]   added to index
D                deleted from index
R        [ MD]   renamed in index
C        [ MD]   copied in index
[MARC]           index and work tree matches
[ MARC]     M    work tree changed since index
[ MARC]     D    deleted in work tree
[ D]        R    renamed in work tree
[ D]        C    copied in work tree
-------------------------------------------------
D           D    unmerged, both deleted
A           U    unmerged, added by us
U           D    unmerged, deleted by them
U           A    unmerged, added by them
D           U    unmerged, deleted by us
A           A    unmerged, both added
U           U    unmerged, both modified
-------------------------------------------------
?           ?    untracked
!           !    ignored
-------------------------------------------------
@end example

Submodules have more state and instead report
M    the submodule has a different HEAD than
recorded in the index
m    the submodule has modified content
?    the submodule has untracked files
since modified content or untracked files in a submodule cannot be added
via @samp{git add} in the superproject to prepare a commit.

@emph{m} and @emph{?} are applied recursively. For example if a nested submodule in a
submodule contains an untracked file, this is reported as @emph{?} as well.

If -b is used the short-format status is preceded by a line

@example
## branchname tracking info
@end example

@noindent

@heading Porcelain Format Version 1

Version 1 porcelain format is similar to the short format, but is guaranteed
not to change in a backwards-incompatible way between Git versions or based
on user configuration. This makes it ideal for parsing by scripts.  The
description of the short format above also describes the porcelain format,
with a few exceptions:

@enumerate 

@item
The user’s color.status configuration is not respected; color will always be
off.

@item
The user’s status.relativePaths configuration is not respected; paths shown
will always be relative to the repository root.
@end enumerate

There is also an alternate -z format recommended for machine parsing. In
that format, the status field is the same, but some other things change.
First, the @emph{->} is omitted from rename entries and the field order is
reversed (e.g @emph{from -> to} becomes @emph{to from}). Second, a NUL (ASCII 0)
follows each filename, replacing space as a field separator and the
terminating newline (but a space still separates the status field from the
first filename).  Third, filenames containing special characters are not
specially formatted; no quoting or backslash-escaping is performed.

Any submodule changes are reported as modified @samp{M} instead of @samp{m} or single
@samp{?}.

@noindent

@heading Porcelain Format Version 2

Version 2 format adds more detailed information about the state of the
worktree and changed items.  Version 2 also defines an extensible set of
easy to parse optional headers.

Header lines start with "#" and are added in response to specific command
line arguments.  Parsers should ignore headers they don’t recognize.

@noindent

@subheading Branch Headers

If @samp{--branch} is given, a series of header lines are printed with
information about the current branch.

@example
Line                                     Notes
------------------------------------------------------------
# branch.oid <commit> | (initial)        Current commit.
# branch.head <branch> | (detached)      Current branch.
# branch.upstream <upstream_branch>      If upstream is set.
# branch.ab +<ahead> -<behind>           If upstream is set and
                                         the commit is present.
------------------------------------------------------------
@end example

@noindent

@subheading Changed Tracked Entries

Following the headers, a series of lines are printed for tracked entries.
One of three different line formats may be used to describe an entry
depending on the type of change.  Tracked entries are printed in an
undefined order; parsers should allow for a mixture of the 3 line types in
any order.

Ordinary changed entries have the following format:

@example
1 <XY> <sub> <mH> <mI> <mW> <hH> <hI> <path>
@end example

Renamed or copied entries have the following format:

@example
2 <XY> <sub> <mH> <mI> <mW> <hH> <hI> <X><score> <path><sep><origPath>
@end example

@example
Field       Meaning
--------------------------------------------------------
<XY>        A 2 character field containing the staged and
            unstaged XY values described in the short format,
            with unchanged indicated by a "." rather than
            a space.
<sub>       A 4 character field describing the submodule state.
            "N..." when the entry is not a submodule.
            "S<c><m><u>" when the entry is a submodule.
            <c> is "C" if the commit changed; otherwise ".".
            <m> is "M" if it has tracked changes; otherwise ".".
            <u> is "U" if there are untracked changes; otherwise ".".
<mH>        The octal file mode in HEAD.
<mI>        The octal file mode in the index.
<mW>        The octal file mode in the worktree.
<hH>        The object name in HEAD.
<hI>        The object name in the index.
<X><score>  The rename or copy score (denoting the percentage
            of similarity between the source and target of the
            move or copy). For example "R100" or "C75".
<path>      The pathname.  In a renamed/copied entry, this
            is the target path.
<sep>       When the `-z` option is used, the 2 pathnames are separated
            with a NUL (ASCII 0x00) byte; otherwise, a tab (ASCII 0x09)
            byte separates them.
<origPath>  The pathname in the commit at HEAD or in the index.
            This is only present in a renamed/copied entry, and
            tells where the renamed/copied contents came from.
--------------------------------------------------------
@end example

Unmerged entries have the following format; the first character is a "u" to
distinguish from ordinary changed entries.

@example
u <xy> <sub> <m1> <m2> <m3> <mW> <h1> <h2> <h3> <path>
@end example

@example
Field       Meaning
--------------------------------------------------------
<XY>        A 2 character field describing the conflict type
            as described in the short format.
<sub>       A 4 character field describing the submodule state
            as described above.
<m1>        The octal file mode in stage 1.
<m2>        The octal file mode in stage 2.
<m3>        The octal file mode in stage 3.
<mW>        The octal file mode in the worktree.
<h1>        The object name in stage 1.
<h2>        The object name in stage 2.
<h3>        The object name in stage 3.
<path>      The pathname.
--------------------------------------------------------
@end example

@noindent

@subheading Other Items

Following the tracked entries (and if requested), a series of lines will be
printed for untracked and then ignored items found in the worktree.

Untracked items have the following format:

@example
? <path>
@end example

Ignored items have the following format:

@example
! <path>
@end example

@noindent

@subheading Pathname Format Notes and -z

When the @samp{-z} option is given, pathnames are printed as is and without any
quoting and lines are terminated with a NUL (ASCII 0x00)  byte.

Without the @samp{-z} option, pathnames with "unusual" characters are quoted as
explained for the configuration variable @samp{core.quotePath} (see
git-config(1)).

@noindent

@chapheading CONFIGURATION

The command honors @samp{color.status} (or @samp{status.color} — they mean the same
thing and the latter is kept for backward compatibility) and
@samp{color.status.<slot>} configuration variables to colorize its output.

If the config variable @samp{status.relativePaths} is set to false, then all
paths shown are relative to the repository root, not to the current
directory.

If @samp{status.submoduleSummary} is set to a non zero number or true (identical
to -1 or an unlimited number), the submodule summary will be enabled for the
long format and a summary of commits for modified submodules will be shown
(see --summary-limit option of git-submodule(1)). Please note that
the summary output from the status command will be suppressed for all
submodules when @samp{diff.ignoreSubmodules} is set to @emph{all} or only for those
submodules where @samp{submodule.<name>.ignore=all}. To also view the summary for
ignored submodules you can either use the --ignore-submodules=dirty command
line option or the @emph{git submodule summary} command, which shows a similar
output but does not honor these settings.

@noindent

@chapheading BACKGROUND REFRESH

By default, @samp{git status} will automatically refresh the index, updating the
cached stat information from the working tree and writing out the
result. Writing out the updated index is an optimization that isn’t strictly
necessary (@samp{status} computes the values for itself, but writing them out is
just to save subsequent programs from repeating our computation). When
@samp{status} is run in the background, the lock held during the write may
conflict with other simultaneous processes, causing them to fail. Scripts
running @samp{status} in the background should consider using @samp{git
--no-optional-locks status} (see git(1) for details).

@noindent

@chapheading SEE ALSO

gitignore(5)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-stripspace,,,Top
@chapheading Name

git-stripspace — 不要な空白(whitespace)を削除します

@noindent

@chapheading Synopsis

@display
git stripspace [-s | --strip-comments]
git stripspace [-c | --comment-lines]
@end display


@noindent

@chapheading DESCRIPTION

コミットメッセージ・メモ・タグ・ブランチの説明などのテキストを標準の入力から読み取り、Gitで使用されている作法でクリーンアップします。

引数なしの場合、この作法は以下のようになります:

@itemize 

@item
全ての行の末尾の空白(whitespace)を取り除く

@item
複数の連続する空行を1つの空行に折りたたむ

@item
入力の最初と最後から空行を削除

@item
必要に応じて、欠落している @emph{\n} を最後の行に追加します。
@end itemize

入力がすべて空白文字(whitespace characters)で構成されている場合、出力は生成されません。

@strong{注意} これはメタデータのクリーニングを目的としています。リポジトリ内のパッチまたは
ファイルの空白を修正するには、 git-apply(1) の @samp{--whitespace=fix}
モードをお勧めします。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-s} 
@itemx  @samp{--strip-comments} 
コメント文字で始まるすべての行をスキップして削除します(デフォルトは @emph{#} )。

@item  @samp{-c} 
@itemx  @samp{--comment-lines} 
各行の前にコメント文字と空白を付けます。行は自動的に改行で終了します。 空行では、コメント文字のみが先頭に追加されます。
@end table

@noindent

@chapheading EXAMPLES

以下のようなノイズの多い入力があるとします。 @emph{$} は行の終わりを示しています:

@example
|A brief introduction   $
|   $
|$
|A new paragraph$
|# with a commented-out line    $
|explaining lots of stuff.$
|$
|# An old paragraph, also commented-out. $
|      $
|The end.$
|  $
@end example


@emph{git stripspace} を引数無しで実行すると以下のようになります:

@example
|A brief introduction$
|$
|A new paragraph$
|# with a commented-out line$
|explaining lots of stuff.$
|$
|# An old paragraph, also commented-out.$
|$
|The end.$
@end example


@emph{git stripspace --strip-comments} を使うと以下のようになります:

@example
|A brief introduction$
|$
|A new paragraph$
|explaining lots of stuff.$
|$
|The end.$
@end example


@noindent

@chapheading GIT

Part of the git(1) suite

@node git-submodule,,,Top
@chapheading Name

git-submodule — サブモジュールを初期化、更新、または検査します

@noindent

@chapheading Synopsis

@display
git submodule [--quiet] [--cached]
git submodule [--quiet] add [<options>] [--] <repository> [<path>]
git submodule [--quiet] status [--cached] [--recursive] [--] [<path>…]
git submodule [--quiet] init [--] [<path>…]
git submodule [--quiet] deinit [-f|--force] (--all|[--] <path>…)
git submodule [--quiet] update [<options>] [--] [<path>…]
git submodule [--quiet] set-branch [<options>] [--] <path>
git submodule [--quiet] set-url [--] <path> <newurl>
git submodule [--quiet] summary [<options>] [--] [<path>…]
git submodule [--quiet] foreach [--recursive] <command>
git submodule [--quiet] sync [--recursive] [--] [<path>…]
git submodule [--quiet] absorbgitdirs [--] [<path>…]
@end display


@noindent

@chapheading DESCRIPTION

Inspects, updates and manages submodules.

For more information about submodules, see gitsubmodules(7).

@noindent

@chapheading COMMANDS

With no arguments, shows the status of existing submodules.  Several
subcommands are available to perform operations on the submodules.

@table @asis

@item  add [-b <branch>] [-f|--force] [--name <name>] [--reference <repository>] [--depth <depth>] [--] <repository> [<path>] 
Add the given repository as a submodule at the given path to the changeset
to be committed next to the current project: the current project is termed
the "superproject".

<repository> is the URL of the new submodule’s origin repository.  This may
be either an absolute URL, or (if it begins with ./ or ../), the location
relative to the superproject’s default remote repository (Please note that
to specify a repository @emph{foo.git} which is located right next to a
superproject @emph{bar.git}, you’ll have to use @samp{../foo.git} instead of
@samp{./foo.git} - as one might expect when following the rules for relative URLs
- because the evaluation of relative URLs in Git is identical to that of
relative directories).

The default remote is the remote of the remote-tracking branch of the
current branch. If no such remote-tracking branch exists or the HEAD is
detached, "origin" is assumed to be the default remote.  If the superproject
doesn’t have a default remote configured the superproject is its own
authoritative upstream and the current working directory is used instead.

The optional argument <path> is the relative location for the cloned
submodule to exist in the superproject. If <path> is not given, the
canonical part of the source repository is used ("repo" for
"/path/to/repo.git" and "foo" for "host.xz:foo/.git"). If <path> exists and
is already a valid Git repository, then it is staged for commit without
cloning. The <path> is also used as the submodule’s logical name in its
configuration entries unless @samp{--name} is used to specify a logical name.

The given URL is recorded into @samp{.gitmodules} for use by subsequent users
cloning the superproject. If the URL is given relative to the superproject’s
repository, the presumption is the superproject and submodule repositories
will be kept together in the same relative location, and only the
superproject’s URL needs to be provided.  git-submodule will correctly
locate the submodule using the relative URL in @samp{.gitmodules}.

@item  status [--cached] [--recursive] [--] [<path>…] 
Show the status of the submodules. This will print the SHA-1 of the
currently checked out commit for each submodule, along with the submodule
path and the output of @emph{git describe} for the SHA-1. Each SHA-1 will
possibly be prefixed with @samp{-} if the submodule is not initialized, @samp{+} if
the currently checked out submodule commit does not match the SHA-1 found in
the index of the containing repository and @samp{U} if the submodule has merge
conflicts.

If @samp{--cached} is specified, this command will instead print the SHA-1
recorded in the superproject for each submodule.

If @samp{--recursive} is specified, this command will recurse into nested
submodules, and show their status as well.

If you are only interested in changes of the currently initialized
submodules with respect to the commit recorded in the index or the HEAD,
git-status(1) and git-diff(1) will provide that information
too (and can also report changes to a submodule’s work tree).

@item  init [--] [<path>…] 
Initialize the submodules recorded in the index (which were added and
committed elsewhere) by setting @samp{submodule.$name.url} in .git/config. It
uses the same setting from @samp{.gitmodules} as a template. If the URL is
relative, it will be resolved using the default remote. If there is no
default remote, the current repository will be assumed to be upstream.

Optional <path> arguments limit which submodules will be initialized.  If no
path is specified and submodule.active has been configured, submodules
configured to be active will be initialized, otherwise all submodules are
initialized.

When present, it will also copy the value of @samp{submodule.$name.update}.  This
command does not alter existing information in .git/config.  You can then
customize the submodule clone URLs in .git/config for your local setup and
proceed to @samp{git submodule update}; you can also just use @samp{git submodule
update --init} without the explicit @emph{init} step if you do not intend to
customize any submodule locations.

See the add subcommand for the definition of default remote.

@item  deinit [-f|--force] (--all|[--] <path>…) 
Unregister the given submodules, i.e. remove the whole @samp{submodule.$name}
section from .git/config together with their work tree. Further calls to
@samp{git submodule update}, @samp{git submodule foreach} and @samp{git submodule sync}
will skip any unregistered submodules until they are initialized again, so
use this command if you don’t want to have a local checkout of the submodule
in your working tree anymore.

When the command is run without pathspec, it errors out, instead of
deinit-ing everything, to prevent mistakes.

If @samp{--force} is specified, the submodule’s working tree will be removed even
if it contains local modifications.

If you really want to remove a submodule from the repository and commit that
use git-rm(1) instead. See gitsubmodules(7) for removal
options.

@item  update [--init] [--remote] [-N|--no-fetch] [--[no-]recommend-shallow] [-f|--force] [--checkout|--rebase|--merge] [--reference <repository>] [--depth <depth>] [--recursive] [--jobs <n>] [--[no-]single-branch] [--] [<path>…] 
Update the registered submodules to match what the superproject expects by
cloning missing submodules, fetching missing commits in submodules and
updating the working tree of the submodules. The "updating" can be done in
several ways depending on command line options and the value of
@samp{submodule.<name>.update} configuration variable. The command line option
takes precedence over the configuration variable. If neither is given, a
@emph{checkout} is performed.  The @emph{update} procedures supported both from the
command line as well as through the @samp{submodule.<name>.update} configuration
are:

@table @asis

@item  checkout 
the commit recorded in the superproject will be
checked out in the submodule on a detached HEAD.

If @samp{--force} is specified, the submodule will be checked out (using @samp{git
checkout --force}), even if the commit specified in the index of the
containing repository already matches the commit checked out in the
submodule.

@item  rebase 
the current branch of the submodule will be rebased
onto the commit recorded in the superproject.

@item  merge 
the commit recorded in the superproject will be merged
into the current branch in the submodule.
@end table

The following @emph{update} procedures are only available via the
@samp{submodule.<name>.update} configuration variable:

@table @asis

@item  custom command 
arbitrary shell command that takes a single
argument (the sha1 of the commit recorded in the
superproject) is executed. When @samp{submodule.<name>.update}
is set to @emph{!command}, the remainder after the exclamation mark
is the custom command.

@item  none 
the submodule is not updated.
@end table

If the submodule is not yet initialized, and you just want to use the
setting as stored in @samp{.gitmodules}, you can automatically initialize the
submodule with the @samp{--init} option.

If @samp{--recursive} is specified, this command will recurse into the registered
submodules, and update any nested submodules within.

@item  set-branch (-b|--branch) <branch> [--] <path> 
@itemx  set-branch (-d|--default) [--] <path> 
Sets the default remote tracking branch for the submodule. The @samp{--branch}
option allows the remote branch to be specified. The @samp{--default} option
removes the submodule.<name>.branch configuration key, which causes the
tracking branch to default to the remote @emph{HEAD}.

@item  set-url [--] <path> <newurl> 
Sets the URL of the specified submodule to <newurl>. Then, it will
automatically synchronize the submodule’s new remote URL configuration.

@item  summary [--cached|--files] [(-n|--summary-limit) <n>] [commit] [--] [<path>…] 
Show commit summary between the given commit (defaults to HEAD) and working
tree/index. For a submodule in question, a series of commits in the
submodule between the given super project commit and the index or working
tree (switched by @samp{--cached}) are shown. If the option @samp{--files} is given,
show the series of commits in the submodule between the index of the super
project and the working tree of the submodule (this option doesn’t allow to
use the @samp{--cached} option or to provide an explicit commit).

Using the @samp{--submodule=log} option with git-diff(1) will provide
that information too.

@item  foreach [--recursive] <command> 
Evaluates an arbitrary shell command in each checked out submodule.  The
command has access to the variables $name, $sm_path, $displaypath, $sha1 and
$toplevel: $name is the name of the relevant submodule section in
@samp{.gitmodules}, $sm_path is the path of the submodule as recorded in the
immediate superproject, $displaypath contains the relative path from the
current working directory to the submodules root directory, $sha1 is the
commit as recorded in the immediate superproject, and $toplevel is the
absolute path to the top-level of the immediate superproject.  Note that to
avoid conflicts with @emph{$PATH} on Windows, the @emph{$path} variable is now a
deprecated synonym of @emph{$sm_path} variable.  Any submodules defined in the
superproject but not checked out are ignored by this command. Unless given
@samp{--quiet}, foreach prints the name of each submodule before evaluating the
command.  If @samp{--recursive} is given, submodules are traversed recursively
(i.e.  the given shell command is evaluated in nested submodules as well).
A non-zero return from the command in any submodule causes the processing to
terminate. This can be overridden by adding @emph{|| :} to the end of the
command.

As an example, the command below will show the path and currently checked
out commit for each submodule:

@example
git submodule foreach 'echo $sm_path `git rev-parse HEAD`'
@end example


@item  sync [--recursive] [--] [<path>…] 
Synchronizes submodules' remote URL configuration setting to the value
specified in @samp{.gitmodules}. It will only affect those submodules which
already have a URL entry in .git/config (that is the case when they are
initialized or freshly added). This is useful when submodule URLs change
upstream and you need to update your local repositories accordingly.

@samp{git submodule sync} synchronizes all submodules while @samp{git submodule sync
-- A} synchronizes submodule "A" only.

If @samp{--recursive} is specified, this command will recurse into the registered
submodules, and sync any nested submodules within.

@item  absorbgitdirs 
サブモジュールのgitディレクトリがサブモジュール内にある場合、サブモジュールのgitディレクトリをそのスーパープロジェクトの
@samp{$GIT_DIR/modules} パスに移動し、次に、 @samp{core.worktree}
を設定して、gitディレクトリとその作業ディレクトリを接続し、そして、スーパープロジェクトのgitディレクトリに埋め込んだサブモジュールのgitディレクトリを指す
.git ファイルを追加します。

独立して複製され、後でサブモジュールまたは古いセットアップとして追加されたリポジトリでは、スーパープロジェクトのgitディレクトリに埋め込まれるのではなく、サブモジュール内にサブモジュールのgitディレクトリがあります。

このコマンドはデフォルトで再帰的に実行されます。
@end table

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Only print error messages.

@item  @samp{--progress} 
This option is only valid for add and update commands.  Progress status is
reported on the standard error stream by default when it is attached to a
terminal, unless -q is specified. This flag forces progress status even if
the standard error stream is not directed to a terminal.

@item  @samp{--all} 
This option is only valid for the deinit command. Unregister all submodules
in the working tree.

@item  @samp{-b <branch>} 
@itemx  @samp{--branch <branch>} 
Branch of repository to add as submodule.  The name of the branch is
recorded as @samp{submodule.<name>.branch} in @samp{.gitmodules} for @samp{update
--remote}.  A special value of @samp{.} is used to indicate that the name of the
branch in the submodule should be the same name as the current branch in the
current repository.  If the option is not specified, it defaults to the
remote @emph{HEAD}.

@item  @samp{-f} 
@itemx  @samp{--force} 
This option is only valid for add, deinit and update commands.  When running
add, allow adding an otherwise ignored submodule path.  When running deinit
the submodule working trees will be removed even if they contain local
changes.  When running update (only effective with the checkout procedure),
throw away local changes in submodules when switching to a different commit;
and always run a checkout operation in the submodule, even if the commit
listed in the index of the containing repository matches the commit checked
out in the submodule.

@item  @samp{--cached} 
This option is only valid for status and summary commands.  These commands
typically use the commit found in the submodule HEAD, but with this option,
the commit stored in the index is used instead.

@item  @samp{--files} 
This option is only valid for the summary command. This command compares the
commit in the index with that in the submodule HEAD when this option is
used.

@item  @samp{-n} 
@itemx  @samp{--summary-limit} 
This option is only valid for the summary command.  Limit the summary size
(number of commits shown in total).  Giving 0 will disable the summary; a
negative number means unlimited (the default). This limit only applies to
modified submodules. The size is always limited to 1 for
added/deleted/typechanged submodules.

@item  @samp{--remote} 
This option is only valid for the update command.  Instead of using the
superproject’s recorded SHA-1 to update the submodule, use the status of the
submodule’s remote-tracking branch.  The remote used is branch’s remote
(@samp{branch.<name>.remote}), defaulting to @samp{origin}.  The remote branch used
defaults to the remote @samp{HEAD}, but the branch name may be overridden by
setting the @samp{submodule.<name>.branch} option in either @samp{.gitmodules} or
@samp{.git/config} (with @samp{.git/config} taking precedence).

This works for any of the supported update procedures (@samp{--checkout},
@samp{--rebase}, etc.).  The only change is the source of the target SHA-1.  For
example, @samp{submodule update --remote --merge} will merge upstream submodule
changes into the submodules, while @samp{submodule update --merge} will merge
superproject gitlink changes into the submodules.

In order to ensure a current tracking branch state, @samp{update --remote}
fetches the submodule’s remote repository before calculating the SHA-1.  If
you don’t want to fetch, you should use @samp{submodule update --remote
--no-fetch}.

Use this option to integrate changes from the upstream subproject with your
submodule’s current HEAD.  Alternatively, you can run @samp{git pull} from the
submodule, which is equivalent except for the remote branch name: @samp{update
--remote} uses the default upstream repository and
@samp{submodule.<name>.branch}, while @samp{git pull} uses the submodule’s
@samp{branch.<name>.merge}.  Prefer @samp{submodule.<name>.branch} if you want to
distribute the default upstream branch with the superproject and
@samp{branch.<name>.merge} if you want a more native feel while working in the
submodule itself.

@item  @samp{-N} 
@itemx  @samp{--no-fetch} 
This option is only valid for the update command.  Don’t fetch new objects
from the remote site.

@item  @samp{--checkout} 
This option is only valid for the update command.  Checkout the commit
recorded in the superproject on a detached HEAD in the submodule. This is
the default behavior, the main use of this option is to override
@samp{submodule.$name.update} when set to a value other than @samp{checkout}.  If the
key @samp{submodule.$name.update} is either not explicitly set or set to
@samp{checkout}, this option is implicit.

@item  @samp{--merge} 
This option is only valid for the update command.  Merge the commit recorded
in the superproject into the current branch of the submodule. If this option
is given, the submodule’s HEAD will not be detached. If a merge failure
prevents this process, you will have to resolve the resulting conflicts
within the submodule with the usual conflict resolution tools.  If the key
@samp{submodule.$name.update} is set to @samp{merge}, this option is implicit.

@item  @samp{--rebase} 
This option is only valid for the update command.  Rebase the current branch
onto the commit recorded in the superproject. If this option is given, the
submodule’s HEAD will not be detached. If a merge failure prevents this
process, you will have to resolve these failures with
git-rebase(1).  If the key @samp{submodule.$name.update} is set to
@samp{rebase}, this option is implicit.

@item  @samp{--init} 
This option is only valid for the update command.  Initialize all submodules
for which "git submodule init" has not been called so far before updating.

@item  @samp{--name} 
This option is only valid for the add command. It sets the submodule’s name
to the given string instead of defaulting to its path. The name must be
valid as a directory name and may not end with a @emph{/}.

@item  @samp{--reference <repository>} 
This option is only valid for add and update commands.  These commands
sometimes need to clone a remote repository. In this case, this option will
be passed to the git-clone(1) command.

@strong{NOTE}: Do @strong{not} use this option unless you have read the note
for git-clone(1)'s @samp{--reference}, @samp{--shared}, and @samp{--dissociate}
options carefully.

@item  @samp{--dissociate} 
This option is only valid for add and update commands.  These commands
sometimes need to clone a remote repository. In this case, this option will
be passed to the git-clone(1) command.

@strong{NOTE}: see the NOTE for the @samp{--reference} option.

@item  @samp{--recursive} 
This option is only valid for foreach, update, status and sync commands.
Traverse submodules recursively. The operation is performed not only in the
submodules of the current repo, but also in any nested submodules inside
those submodules (and so on).

@item  @samp{--depth} 
This option is valid for add and update commands. Create a @emph{shallow} clone
with a history truncated to the specified number of revisions.  See
git-clone(1)

@item  @samp{--[no-]recommend-shallow} 
This option is only valid for the update command.  The initial clone of a
submodule will use the recommended @samp{submodule.<name>.shallow} as provided by
the @samp{.gitmodules} file by default. To ignore the suggestions use
@samp{--no-recommend-shallow}.

@item  @samp{-j <n>} 
@itemx  @samp{--jobs <n>} 
This option is only valid for the update command.  Clone new submodules in
parallel with as many jobs.  Defaults to the @samp{submodule.fetchJobs} option.

@item  @samp{--[no-]single-branch} 
This option is only valid for the update command.  Clone only one branch
during update: HEAD or one specified by --branch.

@item  <path>… 
Paths to submodule(s). When specified this will restrict the command to only
operate on the submodules found at the specified paths.  (This argument is
required with add).
@end table

@noindent

@chapheading FILES

When initializing submodules, a @samp{.gitmodules} file in the top-level
directory of the containing repository is used to find the url of each
submodule.  This file should be formatted in the same way as
@samp{$GIT_DIR/config}. The key to each submodule url is "submodule.$name.url".
See gitmodules(5) for details.

@noindent

@chapheading SEE ALSO

gitsubmodules(7), gitmodules(5).

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-svn,,,Top
@chapheading Name

git-svn — Bidirectional operation between a Subversion repository and Git

@noindent

@chapheading Synopsis

@display
git svn <command> [<options>] [<arguments>]
@end display


@noindent

@chapheading DESCRIPTION

@emph{git svn} is a simple conduit for changesets between Subversion and Git.  It
provides a bidirectional flow of changes between a Subversion and a Git
repository.

@emph{git svn} can track a standard Subversion repository, following the common
"trunk/branches/tags" layout, with the --stdlayout option.  It can also
follow branches and tags in any layout with the -T/-t/-b options (see
options to @emph{init} below, and also the @emph{clone} command).

Once tracking a Subversion repository (with any of the above methods), the
Git repository can be updated from Subversion by the @emph{fetch} command and
Subversion updated from Git by the @emph{dcommit} command.

@noindent

@chapheading COMMANDS

@table @asis

@item  @emph{init} 
Initializes an empty Git repository with additional metadata directories for
@emph{git svn}.  The Subversion URL may be specified as a command-line argument,
or as full URL arguments to -T/-t/-b.  Optionally, the target directory to
operate on can be specified as a second argument.  Normally this command
initializes the current directory.

@table @asis

@item  -T<trunk_subdir> 
@itemx  --trunk=<trunk_subdir> 
@itemx  -t<tags_subdir> 
@itemx  --tags=<tags_subdir> 
@itemx  -b<branches_subdir> 
@itemx  --branches=<branches_subdir> 
@itemx  -s 
@itemx  --stdlayout 
These are optional command-line options for init.  Each of these flags can
point to a relative repository path (--tags=project/tags) or a full url
(--tags=https://foo.org/project/tags).  You can specify more than one --tags
and/or --branches options, in case your Subversion repository places tags or
branches under multiple paths.  The option --stdlayout is a shorthand way of
setting trunk,tags,branches as the relative paths, which is the Subversion
default. If any of the other options are given as well, they take
precedence.

@item  --no-metadata 
Set the @emph{noMetadata} option in the [svn-remote] config.  This option is not
recommended, please read the @emph{svn.noMetadata} section of this manpage before
using this option.

@item  --use-svm-props 
Set the @emph{useSvmProps} option in the [svn-remote] config.

@item  --use-svnsync-props 
Set the @emph{useSvnsyncProps} option in the [svn-remote] config.

@item  --rewrite-root=<URL> 
Set the @emph{rewriteRoot} option in the [svn-remote] config.

@item  --rewrite-uuid=<UUID> 
Set the @emph{rewriteUUID} option in the [svn-remote] config.

@item  --username=<user> 
For transports that SVN handles authentication for (http, https, and plain
svn), specify the username.  For other transports (e.g. @samp{svn+ssh://}), you
must include the username in the URL,
e.g. @samp{svn+ssh://foo@@svn.bar.com/project}

@item  --prefix=<prefix> 
This allows one to specify a prefix which is prepended to the names of
remotes if trunk/branches/tags are specified.  The prefix does not
automatically include a trailing slash, so be sure you include one in the
argument if that is what you want.  If --branches/-b is specified, the
prefix must include a trailing slash.  Setting a prefix (with a trailing
slash) is strongly encouraged in any case, as your SVN-tracking refs will
then be located at "refs/remotes/$prefix/@strong{", which is compatible with Git’s
own remote-tracking ref layout (refs/remotes/$remote/}). Setting a prefix is
also useful if you wish to track multiple projects that share a common
repository.  By default, the prefix is set to @emph{origin/}.

@quotation

@strong{Note}

Before Git v2.0, the default prefix was "" (no prefix). This meant that
SVN-tracking refs were put at "refs/remotes/*", which is incompatible with
how Git’s own remote-tracking refs are organized.  If you still want the old
default, you can get it by passing @samp{--prefix ""} on the command line
(@samp{--prefix=""} may not work if your Perl’s Getopt::Long is < v2.37).
@end quotation

@item  --ignore-refs=<regex> 
When passed to @emph{init} or @emph{clone} this regular expression will be preserved
as a config key.  See @emph{fetch} for a description of @samp{--ignore-refs}.

@item  --ignore-paths=<regex> 
When passed to @emph{init} or @emph{clone} this regular expression will be preserved
as a config key.  See @emph{fetch} for a description of @samp{--ignore-paths}.

@item  --include-paths=<regex> 
When passed to @emph{init} or @emph{clone} this regular expression will be preserved
as a config key.  See @emph{fetch} for a description of @samp{--include-paths}.

@item  --no-minimize-url 
When tracking multiple directories (using --stdlayout, --branches, or --tags
options), git svn will attempt to connect to the root (or highest allowed
level) of the Subversion repository.  This default allows better tracking of
history if entire projects are moved within a repository, but may cause
issues on repositories where read access restrictions are in place.  Passing
@samp{--no-minimize-url} will allow git svn to accept URLs as-is without
attempting to connect to a higher level directory.  This option is off by
default when only one URL/branch is tracked (it would do little good).
@end table

@item  @emph{fetch} 
Fetch unfetched revisions from the Subversion remote we are tracking.  The
name of the [svn-remote "…"] section in the $GIT_DIR/config file may be
specified as an optional command-line argument.

This automatically updates the rev_map if needed (see
@emph{$GIT_DIR/svn/**/.rev_map.*} in the FILES section below for details).

@table @asis

@item  --localtime 
Store Git commit times in the local time zone instead of UTC.  This makes
@emph{git log} (even without --date=local) show the same times that @samp{svn log}
would in the local time zone.

This doesn’t interfere with interoperating with the Subversion repository
you cloned from, but if you wish for your local Git repository to be able to
interoperate with someone else’s local Git repository, either don’t use this
option or you should both use it in the same local time zone.

@item  --parent 
Fetch only from the SVN parent of the current HEAD.

@item  --ignore-refs=<regex> 
Ignore refs for branches or tags matching the Perl regular expression. A
"negative look-ahead assertion" like
@samp{^refs/remotes/origin/(?!tags/wanted-tag|wanted-branch).*$} can be used to
allow only certain refs.

@display
config key: svn-remote.<name>.ignore-refs
@end display


If the ignore-refs configuration key is set, and the command-line option is
also given, both regular expressions will be used.

@item  --ignore-paths=<regex> 
This allows one to specify a Perl regular expression that will cause
skipping of all matching paths from checkout from SVN.  The @samp{--ignore-paths}
option should match for every @emph{fetch} (including automatic fetches due to
@emph{clone}, @emph{dcommit}, @emph{rebase}, etc) on a given repository.

@display
config key: svn-remote.<name>.ignore-paths
@end display


If the ignore-paths configuration key is set, and the command-line option is
also given, both regular expressions will be used.

Examples:

@table @asis

@item  Skip "doc*" directory for every fetch 
@example
--ignore-paths="^doc"
@end example


@item  Skip "branches" and "tags" of first level directories 
@example
--ignore-paths="^[^/]+/(?:branches|tags)"
@end example

@end table

@item  --include-paths=<regex> 
This allows one to specify a Perl regular expression that will cause the
inclusion of only matching paths from checkout from SVN.  The
@samp{--include-paths} option should match for every @emph{fetch} (including automatic
fetches due to @emph{clone}, @emph{dcommit}, @emph{rebase}, etc) on a given
repository. @samp{--ignore-paths} takes precedence over @samp{--include-paths}.

@display
config key: svn-remote.<name>.include-paths
@end display


@item  --log-window-size=<n> 
Fetch <n> log entries per request when scanning Subversion history.  The
default is 100. For very large Subversion repositories, larger values may be
needed for @emph{clone}/@emph{fetch} to complete in reasonable time. But overly large
values may lead to higher memory usage and request timeouts.
@end table

@item  @emph{clone} 
Runs @emph{init} and @emph{fetch}.  It will automatically create a directory based on
the basename of the URL passed to it; or if a second argument is passed; it
will create a directory and work within that.  It accepts all arguments that
the @emph{init} and @emph{fetch} commands accept; with the exception of @samp{--fetch-all}
and @samp{--parent}.  After a repository is cloned, the @emph{fetch} command will be
able to update revisions without affecting the working tree; and the
@emph{rebase} command will be able to update the working tree with the latest
changes.

@table @asis

@item  --preserve-empty-dirs 
Create a placeholder file in the local Git repository for each empty
directory fetched from Subversion.  This includes directories that become
empty by removing all entries in the Subversion repository (but not the
directory itself).  The placeholder files are also tracked and removed when
no longer necessary.

@item  --placeholder-filename=<filename> 
Set the name of placeholder files created by --preserve-empty-dirs.
Default: ".gitignore"
@end table

@item  @emph{rebase} 
This fetches revisions from the SVN parent of the current HEAD and rebases
the current (uncommitted to SVN) work against it.

This works similarly to @samp{svn update} or @emph{git pull} except that it preserves
linear history with @emph{git rebase} instead of @emph{git merge} for ease of
dcommitting with @emph{git svn}.

This accepts all options that @emph{git svn fetch} and @emph{git rebase} accept.
However, @samp{--fetch-all} only fetches from the current [svn-remote], and not
all [svn-remote] definitions.

Like @emph{git rebase}; this requires that the working tree be clean and have no
uncommitted changes.

This automatically updates the rev_map if needed (see
@emph{$GIT_DIR/svn/**/.rev_map.*} in the FILES section below for details).

@table @asis

@item  -l 
@itemx  --local 
Do not fetch remotely; only run @emph{git rebase} against the last fetched commit
from the upstream SVN.
@end table

@item  @emph{dcommit} 
Commit each diff from the current branch directly to the SVN repository, and
then rebase or reset (depending on whether or not there is a diff between
SVN and head).  This will create a revision in SVN for each commit in Git.

When an optional Git branch name (or a Git commit object name)  is specified
as an argument, the subcommand works on the specified branch, not on the
current branch.

Use of @emph{dcommit} is preferred to @emph{set-tree} (below).

@table @asis

@item  --no-rebase 
After committing, do not rebase or reset.

@item  --commit-url <URL> 
Commit to this SVN URL (the full path).  This is intended to allow existing
@emph{git svn} repositories created with one transport method (e.g. @samp{svn://} or
@samp{http://} for anonymous read) to be reused if a user is later given access
to an alternate transport method (e.g. @samp{svn+ssh://} or @samp{https://}) for
commit.

@display
config key: svn-remote.<name>.commiturl
config key: svn.commiturl (overwrites all svn-remote.<name>.commiturl options)
@end display


Note that the SVN URL of the commiturl config key includes the SVN branch.
If you rather want to set the commit URL for an entire SVN repository use
svn-remote.<name>.pushurl instead.

Using this option for any other purpose (don’t ask) is very strongly
discouraged.

@item  --mergeinfo=<mergeinfo> 
Add the given merge information during the dcommit
(e.g. @samp{--mergeinfo="/branches/foo:1-10"}). All svn server versions can store
this information (as a property), and svn clients starting from version 1.5
can make use of it. To specify merge information from multiple branches, use
a single space character between the branches
(@samp{--mergeinfo="/branches/foo:1-10 /branches/bar:3,5-6,8"})

@display
config key: svn.pushmergeinfo
@end display


This option will cause git-svn to attempt to automatically populate the
svn:mergeinfo property in the SVN repository when possible. Currently, this
can only be done when dcommitting non-fast-forward merges where all parents
but the first have already been pushed into SVN.

@item  --interactive 
Ask the user to confirm that a patch set should actually be sent to SVN.
For each patch, one may answer "yes" (accept this patch), "no" (discard this
patch), "all" (accept all patches), or "quit".

@emph{git svn dcommit} returns immediately if answer is "no" or "quit", without
committing anything to SVN.
@end table

@item  @emph{branch} 
Create a branch in the SVN repository.

@table @asis

@item  -m 
@itemx  --message 
Allows to specify the commit message.

@item  -t 
@itemx  --tag 
Create a tag by using the tags_subdir instead of the branches_subdir
specified during git svn init.

@item  -d<path> 
@itemx  --destination=<path> 
If more than one --branches (or --tags) option was given to the @emph{init} or
@emph{clone} command, you must provide the location of the branch (or tag) you
wish to create in the SVN repository.  <path> specifies which path to use to
create the branch or tag and should match the pattern on the left-hand side
of one of the configured branches or tags refspecs.  You can see these
refspecs with the commands

@example
git config --get-all svn-remote.<name>.branches git config --get-all
svn-remote.<name>.tags
@end example

where <name> is the name of the SVN repository as specified by the -R option
to @emph{init} (or "svn" by default).

@item  --username 
Specify the SVN username to perform the commit as.  This option overrides
the @emph{username} configuration property.

@item  --commit-url 
Use the specified URL to connect to the destination Subversion repository.
This is useful in cases where the source SVN repository is read-only.  This
option overrides configuration property @emph{commiturl}.

@example
git config --get-all svn-remote.<name>.commiturl
@end example

@item  --parents 
Create parent folders. This parameter is equivalent to the parameter
--parents on svn cp commands and is useful for non-standard repository
layouts.
@end table

@item  @emph{tag} 
Create a tag in the SVN repository. This is a shorthand for @emph{branch -t}.

@item  @emph{log} 
This should make it easy to look up svn log messages when svn users refer to
-r/--revision numbers.

The following features from ‘svn log’ are supported:

@table @asis

@item  -r <n>[:<n>] 
@itemx  --revision=<n>[:<n>] 
is supported, non-numeric args are not: HEAD, NEXT, BASE, PREV, etc …

@item  -v 
@itemx  --verbose 
it’s not completely compatible with the --verbose output in svn log, but
reasonably close.

@item  --limit=<n> 
is NOT the same as --max-count, doesn’t count merged/excluded commits

@item  --incremental 
supported
@end table

New features:

@table @asis

@item  --show-commit 
shows the Git commit sha1, as well

@item  --oneline 
our version of --pretty=oneline
@end table

@quotation

@strong{Note}

SVN itself only stores times in UTC and nothing else. The regular svn client
converts the UTC time to the local time (or based on the TZ=
environment). This command has the same behaviour.
@end quotation

Any other arguments are passed directly to @emph{git log}

@item  @emph{blame} 
Show what revision and author last modified each line of a file. The output
of this mode is format-compatible with the output of ‘svn blame’ by
default. Like the SVN blame command, local uncommitted changes in the
working tree are ignored; the version of the file in the HEAD revision is
annotated. Unknown arguments are passed directly to @emph{git blame}.

@table @asis

@item  --git-format 
Produce output in the same format as @emph{git blame}, but with SVN revision
numbers instead of Git commit hashes. In this mode, changes that haven’t
been committed to SVN (including local working-copy edits) are shown as
revision 0.
@end table

@item  @emph{find-rev} 
When given an SVN revision number of the form @emph{rN}, returns the
corresponding Git commit hash (this can optionally be followed by a tree-ish
to specify which branch should be searched).  When given a tree-ish, returns
the corresponding SVN revision number.

@table @asis

@item  -B 
@itemx  --before 
Don’t require an exact match if given an SVN revision, instead find the
commit corresponding to the state of the SVN repository (on the current
branch) at the specified revision.

@item  -A 
@itemx  --after 
Don’t require an exact match if given an SVN revision; if there is not an
exact match return the closest match searching forward in the history.
@end table

@item  @emph{set-tree} 
You should consider using @emph{dcommit} instead of this command.  Commit
specified commit or tree objects to SVN.  This relies on your imported fetch
data being up to date.  This makes absolutely no attempts to do patching
when committing to SVN, it simply overwrites files with those specified in
the tree or commit.  All merging is assumed to have taken place
independently of @emph{git svn} functions.

@item  @emph{create-ignore} 
Recursively finds the svn:ignore property on directories and creates
matching .gitignore files. The resulting files are staged to be committed,
but are not committed. Use -r/--revision to refer to a specific revision.

@item  @emph{show-ignore} 
Recursively finds and lists the svn:ignore property on directories.  The
output is suitable for appending to the $GIT_DIR/info/exclude file.

@item  @emph{mkdirs} 
Attempts to recreate empty directories that core Git cannot track based on
information in $GIT_DIR/svn/<refname>/unhandled.log files.  Empty
directories are automatically recreated when using "git svn clone" and "git
svn rebase", so "mkdirs" is intended for use after commands like "git
checkout" or "git reset".  (See the svn-remote.<name>.automkdirs config file
option for more information.)

@item  @emph{commit-diff} 
Commits the diff of two tree-ish arguments from the command-line.  This
command does not rely on being inside a @samp{git svn init}-ed repository.  This
command takes three arguments, (a) the original tree to diff against, (b)
the new tree result, (c) the URL of the target Subversion repository.  The
final argument (URL) may be omitted if you are working from a @emph{git
svn}-aware repository (that has been @samp{init}-ed with @emph{git svn}).  The
-r<revision> option is required for this.

The commit message is supplied either directly with the @samp{-m} or @samp{-F} option,
or indirectly from the tag or commit when the second tree-ish denotes such
an object, or it is requested by invoking an editor (see @samp{--edit} option
below).

@table @asis

@item  -m <msg> 
@itemx  --message=<msg> 
Use the given @samp{msg} as the commit message. This option disables the @samp{--edit}
option.

@item  -F <filename> 
@itemx  --file=<filename> 
Take the commit message from the given file. This option disables the
@samp{--edit} option.
@end table

@item  @emph{info} 
Shows information about a file or directory similar to what ‘svn info’
provides.  Does not currently support a -r/--revision argument.  Use the
--url option to output only the value of the @emph{URL:} field.

@item  @emph{proplist} 
Lists the properties stored in the Subversion repository about a given file
or directory.  Use -r/--revision to refer to a specific Subversion revision.

@item  @emph{propget} 
Gets the Subversion property given as the first argument, for a file.  A
specific revision can be specified with -r/--revision.

@item  @emph{propset} 
Sets the Subversion property given as the first argument, to the value given
as the second argument for the file given as the third argument.

Example:

@example
git svn propset svn:keywords "FreeBSD=%H" devel/py-tipper/Makefile
@end example


This will set the property @emph{svn:keywords} to @emph{FreeBSD=%H} for the file
@emph{devel/py-tipper/Makefile}.

@item  @emph{show-externals} 
Shows the Subversion externals.  Use -r/--revision to specify a specific
revision.

@item  @emph{gc} 
Compress $GIT_DIR/svn/<refname>/unhandled.log files and remove
$GIT_DIR/svn/<refname>/index files.

@item  @emph{reset} 
Undoes the effects of @emph{fetch} back to the specified revision.  This allows
you to re-@emph{fetch} an SVN revision.  Normally the contents of an SVN revision
should never change and @emph{reset} should not be necessary.  However, if SVN
permissions change, or if you alter your --ignore-paths option, a @emph{fetch}
may fail with "not found in commit" (file not previously visible) or
"checksum mismatch" (missed a modification).  If the problem file cannot be
ignored forever (with --ignore-paths) the only way to repair the repo is to
use @emph{reset}.

Only the rev_map and refs/remotes/git-svn are changed (see
@emph{$GIT_DIR/svn/**/.rev_map.*} in the FILES section below for details).
Follow @emph{reset} with a @emph{fetch} and then @emph{git reset} or @emph{git rebase} to move
local branches onto the new tree.

@table @asis

@item  -r <n> 
@itemx  --revision=<n> 
Specify the most recent revision to keep.  All later revisions are
discarded.

@item  -p 
@itemx  --parent 
Discard the specified revision as well, keeping the nearest parent instead.

@item  Example: 
Assume you have local changes in "master", but you need to refetch "r2".

@example
    r1---r2---r3 remotes/git-svn
                \
                 A---B master
@end example


Fix the ignore-paths or SVN permissions problem that caused "r2" to be
incomplete in the first place.  Then:

@display
git svn reset -r2 -p
git svn fetch
@end display


@example
    r1---r2'--r3' remotes/git-svn
      \
       r2---r3---A---B master
@end example


Then fixup "master" with @emph{git rebase}.  Do NOT use @emph{git merge} or your
history will not be compatible with a future @emph{dcommit}!

@display
git rebase --onto remotes/git-svn A^ master
@end display


@example
    r1---r2'--r3' remotes/git-svn
                \
                 A'--B' master
@end example

@end table
@end table

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--shared[=(false|true|umask|group|all|world|everybody)]} 
@itemx  @samp{--template=<template_directory>} 
Only used with the @emph{init} command.  These are passed directly to @emph{git init}.

@item  @samp{-r <arg>} 
@itemx  @samp{--revision <arg>} 
Used with the @emph{fetch} command.

This allows revision ranges for partial/cauterized history to be supported.
$NUMBER, $NUMBER1:$NUMBER2 (numeric ranges), $NUMBER:HEAD, and BASE:$NUMBER
are all supported.

This can allow you to make partial mirrors when running fetch; but is
generally not recommended because history will be skipped and lost.

@item  - 
@itemx  @samp{--stdin} 
Only used with the @emph{set-tree} command.

Read a list of commits from stdin and commit them in reverse order.  Only
the leading sha1 is read from each line, so @emph{git rev-list --pretty=oneline}
output can be used.

@item  @samp{--rmdir} 
Only used with the @emph{dcommit}, @emph{set-tree} and @emph{commit-diff} commands.

Remove directories from the SVN tree if there are no files left behind.  SVN
can version empty directories, and they are not removed by default if there
are no files left in them.  Git cannot version empty directories.  Enabling
this flag will make the commit to SVN act like Git.

@display
config key: svn.rmdir
@end display


@item  @samp{-e} 
@itemx  @samp{--edit} 
Only used with the @emph{dcommit}, @emph{set-tree} and @emph{commit-diff} commands.

Edit the commit message before committing to SVN.  This is off by default
for objects that are commits, and forced on when committing tree objects.

@display
config key: svn.edit
@end display


@item  @samp{-l<num>} 
@itemx  @samp{--find-copies-harder} 
Only used with the @emph{dcommit}, @emph{set-tree} and @emph{commit-diff} commands.

They are both passed directly to @emph{git diff-tree}; see
git-diff-tree(1) for more information.

@display
config key: svn.l
config key: svn.findcopiesharder
@end display


@item  @samp{-A<filename>} 
@itemx  @samp{--authors-file=<filename>} 
Syntax is compatible with the file used by @emph{git cvsimport} but an empty
email address can be supplied with @emph{<>}:

@example
        loginname = Joe User <user@@example.com>
@end example


If this option is specified and @emph{git svn} encounters an SVN committer name
that does not exist in the authors-file, @emph{git svn} will abort operation. The
user will then have to add the appropriate entry.  Re-running the previous
@emph{git svn} command after the authors-file is modified should continue
operation.

@display
config key: svn.authorsfile
@end display


@item  @samp{--authors-prog=<filename>} 
If this option is specified, for each SVN committer name that does not exist
in the authors file, the given file is executed with the committer name as
the first argument.  The program is expected to return a single line of the
form "Name <email>" or "Name <>", which will be treated as if included in
the authors file.

Due to historical reasons a relative @emph{filename} is first searched relative
to the current directory for @emph{init} and @emph{clone} and relative to the root of
the working tree for @emph{fetch}. If @emph{filename} is not found, it is searched
like any other command in @emph{$PATH}.

@display
config key: svn.authorsProg
@end display


@item  @samp{-q} 
@itemx  @samp{--quiet} 
Make @emph{git svn} less verbose. Specify a second time to make it even less
verbose.

@item  @samp{-m} 
@itemx  @samp{--merge} 
@itemx  @samp{-s<strategy>} 
@itemx  @samp{--strategy=<strategy>} 
@itemx  @samp{-p} 
@itemx  @samp{--rebase-merges} 
@itemx  @samp{--preserve-merges (DEPRECATED)} 
These are only used with the @emph{dcommit} and @emph{rebase} commands.

Passed directly to @emph{git rebase} when using @emph{dcommit} if a @emph{git reset} cannot
be used (see @emph{dcommit}).

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
This can be used with the @emph{dcommit}, @emph{rebase}, @emph{branch} and @emph{tag} commands.

For @emph{dcommit}, print out the series of Git arguments that would show which
diffs would be committed to SVN.

For @emph{rebase}, display the local branch associated with the upstream svn
repository associated with the current branch and the URL of svn repository
that will be fetched from.

For @emph{branch} and @emph{tag}, display the urls that will be used for copying when
creating the branch or tag.

@item  @samp{--use-log-author} 
When retrieving svn commits into Git (as part of @emph{fetch}, @emph{rebase}, or
@emph{dcommit} operations), look for the first @samp{From:} line or @samp{Signed-off-by}
trailer in the log message and use that as the author string.

@display
config key: svn.useLogAuthor
@end display


@item  @samp{--add-author-from} 
When committing to svn from Git (as part of @emph{set-tree} or @emph{dcommit}
operations), if the existing log message doesn’t already have a @samp{From:} or
@samp{Signed-off-by} trailer, append a @samp{From:} line based on the Git commit’s
author string.  If you use this, then @samp{--use-log-author} will retrieve a
valid author string for all commits.

@display
config key: svn.addAuthorFrom
@end display

@end table

@noindent

@chapheading ADVANCED OPTIONS

@table @asis

@item  @samp{-i<GIT_SVN_ID>} 
@itemx  @samp{--id <GIT_SVN_ID>} 
This sets GIT_SVN_ID (instead of using the environment).  This allows the
user to override the default refname to fetch from when tracking a single
URL.  The @emph{log} and @emph{dcommit} commands no longer require this switch as an
argument.

@item  @samp{-R<remote name>} 
@itemx  @samp{--svn-remote <remote name>} 
Specify the [svn-remote "<remote name>"] section to use, this allows SVN
multiple repositories to be tracked.  Default: "svn"

@item  @samp{--follow-parent} 
This option is only relevant if we are tracking branches (using one of the
repository layout options --trunk, --tags, --branches, --stdlayout). For
each tracked branch, try to find out where its revision was copied from, and
set a suitable parent in the first Git commit for the branch.  This is
especially helpful when we’re tracking a directory that has been moved
around within the repository.  If this feature is disabled, the branches
created by @emph{git svn} will all be linear and not share any history, meaning
that there will be no information on where branches were branched off or
merged.  However, following long/convoluted histories can take a long time,
so disabling this feature may speed up the cloning process. This feature is
enabled by default, use --no-follow-parent to disable it.

@display
config key: svn.followparent
@end display

@end table

@noindent

@chapheading CONFIG FILE-ONLY OPTIONS

@table @asis

@item  svn.noMetadata 
@itemx  svn-remote.<name>.noMetadata 
This gets rid of the @emph{git-svn-id:} lines at the end of every commit.

This option can only be used for one-shot imports as @emph{git svn} will not be
able to fetch again without metadata. Additionally, if you lose your
@emph{$GIT_DIR/svn/**/.rev_map.*} files, @emph{git svn} will not be able to rebuild
them.

The @emph{git svn log} command will not work on repositories using this, either.
Using this conflicts with the @emph{useSvmProps} option for (hopefully) obvious
reasons.

This option is NOT recommended as it makes it difficult to track down old
references to SVN revision numbers in existing documentation, bug reports,
and archives.  If you plan to eventually migrate from SVN to Git and are
certain about dropping SVN history, consider
@uref{https://github.com/newren/git-filter-repo,git-filter-repo} instead.
filter-repo also allows reformatting of metadata for ease-of-reading and
rewriting authorship info for non-"svn.authorsFile" users.

@item  svn.useSvmProps 
@itemx  svn-remote.<name>.useSvmProps 
This allows @emph{git svn} to re-map repository URLs and UUIDs from mirrors
created using SVN::Mirror (or svk) for metadata.

If an SVN revision has a property, "svm:headrev", it is likely that the
revision was created by SVN::Mirror (also used by SVK).  The property
contains a repository UUID and a revision.  We want to make it look like we
are mirroring the original URL, so introduce a helper function that returns
the original identity URL and UUID, and use it when generating metadata in
commit messages.

@item  svn.useSvnsyncProps 
@itemx  svn-remote.<name>.useSvnsyncprops 
Similar to the useSvmProps option; this is for users of the svnsync(1)
command distributed with SVN 1.4.x and later.

@item  svn-remote.<name>.rewriteRoot 
This allows users to create repositories from alternate URLs.  For example,
an administrator could run @emph{git svn} on the server locally (accessing via
file://) but wish to distribute the repository with a public http:// or
svn:// URL in the metadata so users of it will see the public URL.

@item  svn-remote.<name>.rewriteUUID 
Similar to the useSvmProps option; this is for users who need to remap the
UUID manually. This may be useful in situations where the original UUID is
not available via either useSvmProps or useSvnsyncProps.

@item  svn-remote.<name>.pushurl 
Similar to Git’s @samp{remote.<name>.pushurl}, this key is designed to be used in
cases where @emph{url} points to an SVN repository via a read-only transport, to
provide an alternate read/write transport. It is assumed that both keys
point to the same repository. Unlike @emph{commiturl}, @emph{pushurl} is a base
path. If either @emph{commiturl} or @emph{pushurl} could be used, @emph{commiturl} takes
precedence.

@item  svn.brokenSymlinkWorkaround 
This disables potentially expensive checks to workaround broken symlinks
checked into SVN by broken clients.  Set this option to "false" if you track
a SVN repository with many empty blobs that are not symlinks.  This option
may be changed while @emph{git svn} is running and take effect on the next
revision fetched.  If unset, @emph{git svn} assumes this option to be "true".

@item  svn.pathnameencoding 
This instructs git svn to recode pathnames to a given encoding.  It can be
used by windows users and by those who work in non-utf8 locales to avoid
corrupted file names with non-ASCII characters.  Valid encodings are the
ones supported by Perl’s Encode module.

@item  svn-remote.<name>.automkdirs 
Normally, the "git svn clone" and "git svn rebase" commands attempt to
recreate empty directories that are in the Subversion repository.  If this
option is set to "false", then empty directories will only be created if the
"git svn mkdirs" command is run explicitly.  If unset, @emph{git svn} assumes
this option to be "true".
@end table

Since the noMetadata, rewriteRoot, rewriteUUID, useSvnsyncProps and
useSvmProps options all affect the metadata generated and used by @emph{git svn};
they @strong{must} be set in the configuration file before any history is imported
and these settings should never be changed once they are set.

Additionally, only one of these options can be used per svn-remote section
because they affect the @emph{git-svn-id:} metadata line, except for rewriteRoot
and rewriteUUID which can be used together.

@noindent

@chapheading BASIC EXAMPLES

Tracking and contributing to the trunk of a Subversion-managed project
(ignoring tags and branches):

@example
# Clone a repo (like git clone):
        git svn clone http://svn.example.com/project/trunk
# Enter the newly cloned directory:
        cd trunk
# You should be on master branch, double-check with 'git branch'
        git branch
# Do some work and commit locally to Git:
        git commit ...
# Something is committed to SVN, rebase your local changes against the
# latest changes in SVN:
        git svn rebase
# Now commit your changes (that were committed previously using Git) to SVN,
# as well as automatically updating your working HEAD:
        git svn dcommit
# Append svn:ignore settings to the default Git exclude file:
        git svn show-ignore >> .git/info/exclude
@end example


Tracking and contributing to an entire Subversion-managed project (complete
with a trunk, tags and branches):

@example
# Clone a repo with standard SVN directory layout (like git clone):
        git svn clone http://svn.example.com/project --stdlayout --prefix svn/
# Or, if the repo uses a non-standard directory layout:
        git svn clone http://svn.example.com/project -T tr -b branch -t tag --prefix svn/
# View all branches and tags you have cloned:
        git branch -r
# Create a new branch in SVN
        git svn branch waldo
# Reset your master to trunk (or any other branch, replacing 'trunk'
# with the appropriate name):
        git reset --hard svn/trunk
# You may only dcommit to one branch/tag/trunk at a time.  The usage
# of dcommit/rebase/show-ignore should be the same as above.
@end example


The initial @emph{git svn clone} can be quite time-consuming (especially for
large Subversion repositories). If multiple people (or one person with
multiple machines) want to use @emph{git svn} to interact with the same
Subversion repository, you can do the initial @emph{git svn clone} to a
repository on a server and have each person clone that repository with @emph{git
clone}:

@example
# Do the initial import on a server
        ssh server "cd /pub && git svn clone http://svn.example.com/project [options...]"
# Clone locally - make sure the refs/remotes/ space matches the server
        mkdir project
        cd project
        git init
        git remote add origin server:/pub/project
        git config --replace-all remote.origin.fetch '+refs/remotes/*:refs/remotes/*'
        git fetch
# Prevent fetch/pull from remote Git server in the future,
# we only want to use git svn for future updates
        git config --remove-section remote.origin
# Create a local branch from one of the branches just fetched
        git checkout -b master FETCH_HEAD
# Initialize 'git svn' locally (be sure to use the same URL and
# --stdlayout/-T/-b/-t/--prefix options as were used on server)
        git svn init http://svn.example.com/project [options...]
# Pull the latest changes from Subversion
        git svn rebase
@end example


@noindent

@chapheading REBASE VS. PULL/MERGE

Prefer to use @emph{git svn rebase} or @emph{git rebase}, rather than @emph{git pull} or
@emph{git merge} to synchronize unintegrated commits with a @emph{git svn}
branch. Doing so will keep the history of unintegrated commits linear with
respect to the upstream SVN repository and allow the use of the preferred
@emph{git svn dcommit} subcommand to push unintegrated commits back into SVN.

Originally, @emph{git svn} recommended that developers pulled or merged from the
@emph{git svn} branch.  This was because the author favored @samp{git svn set-tree B}
to commit a single head rather than the @samp{git svn set-tree A..B} notation to
commit multiple commits. Use of @emph{git pull} or @emph{git merge} with @samp{git svn
set-tree A..B} will cause non-linear history to be flattened when committing
into SVN and this can lead to merge commits unexpectedly reversing previous
commits in SVN.

@noindent

@chapheading MERGE TRACKING

While @emph{git svn} can track copy history (including branches and tags) for
repositories adopting a standard layout, it cannot yet represent merge
history that happened inside git back upstream to SVN users.  Therefore it
is advised that users keep history as linear as possible inside Git to ease
compatibility with SVN (see the CAVEATS section below).

@noindent

@chapheading HANDLING OF SVN BRANCHES

If @emph{git svn} is configured to fetch branches (and --follow-branches is in
effect), it sometimes creates multiple Git branches for one SVN branch,
where the additional branches have names of the form @emph{branchname@@nnn} (with
nnn an SVN revision number).  These additional branches are created if @emph{git
svn} cannot find a parent commit for the first commit in an SVN branch, to
connect the branch to the history of the other branches.

Normally, the first commit in an SVN branch consists of a copy
operation. @emph{git svn} will read this commit to get the SVN revision the
branch was created from. It will then try to find the Git commit that
corresponds to this SVN revision, and use that as the parent of the
branch. However, it is possible that there is no suitable Git commit to
serve as parent.  This will happen, among other reasons, if the SVN branch
is a copy of a revision that was not fetched by @emph{git svn} (e.g. because it
is an old revision that was skipped with @samp{--revision}), or if in SVN a
directory was copied that is not tracked by @emph{git svn} (such as a branch that
is not tracked at all, or a subdirectory of a tracked branch). In these
cases, @emph{git svn} will still create a Git branch, but instead of using an
existing Git commit as the parent of the branch, it will read the SVN
history of the directory the branch was copied from and create appropriate
Git commits.  This is indicated by the message "Initializing parent:
<branchname>".

Additionally, it will create a special branch named
@emph{<branchname>@@<SVN-Revision>}, where <SVN-Revision> is the SVN revision
number the branch was copied from.  This branch will point to the newly
created parent commit of the branch.  If in SVN the branch was deleted and
later recreated from a different version, there will be multiple such
branches with an @emph{@@}.

Note that this may mean that multiple Git commits are created for a single
SVN revision.

An example: in an SVN repository with a standard trunk/tags/branches layout,
a directory trunk/sub is created in r.100.  In r.200, trunk/sub is branched
by copying it to branches/. @emph{git svn clone -s} will then create a branch
@emph{sub}. It will also create new Git commits for r.100 through r.199 and use
these as the history of branch @emph{sub}. Thus there will be two Git commits for
each revision from r.100 to r.199 (one containing trunk/, one containing
trunk/sub/). Finally, it will create a branch @emph{sub@@200} pointing to the new
parent commit of branch @emph{sub} (i.e. the commit for r.200 and trunk/sub/).

@noindent

@chapheading CAVEATS

For the sake of simplicity and interoperating with Subversion, it is
recommended that all @emph{git svn} users clone, fetch and dcommit directly from
the SVN server, and avoid all @emph{git clone}/@emph{pull}/@emph{merge}/@emph{push} operations
between Git repositories and branches.  The recommended method of exchanging
code between Git branches and users is @emph{git format-patch} and @emph{git am}, or
just 'dcommit’ing to the SVN repository.

Running @emph{git merge} or @emph{git pull} is NOT recommended on a branch you plan to
@emph{dcommit} from because Subversion users cannot see any merges you’ve made.
Furthermore, if you merge or pull from a Git branch that is a mirror of an
SVN branch, @emph{dcommit} may commit to the wrong branch.

If you do merge, note the following rule: @emph{git svn dcommit} will attempt to
commit on top of the SVN commit named in

@example
git log --grep=^git-svn-id: --first-parent -1
@end example


You @emph{must} therefore ensure that the most recent commit of the branch you
want to dcommit to is the @emph{first} parent of the merge.  Chaos will ensue
otherwise, especially if the first parent is an older commit on the same SVN
branch.

@emph{git clone} does not clone branches under the refs/remotes/ hierarchy or any
@emph{git svn} metadata, or config.  So repositories created and managed with
using @emph{git svn} should use @emph{rsync} for cloning, if cloning is to be done at
all.

Since @emph{dcommit} uses rebase internally, any Git branches you @emph{git push} to
before @emph{dcommit} on will require forcing an overwrite of the existing ref on
the remote repository.  This is generally considered bad practice, see the
git-push(1) documentation for details.

Do not use the --amend option of git-commit(1) on a change you’ve
already dcommitted.  It is considered bad practice to --amend commits you’ve
already pushed to a remote repository for other users, and dcommit with SVN
is analogous to that.

When cloning an SVN repository, if none of the options for describing the
repository layout is used (--trunk, --tags, --branches, --stdlayout), @emph{git
svn clone} will create a Git repository with completely linear history,
where branches and tags appear as separate directories in the working copy.
While this is the easiest way to get a copy of a complete repository, for
projects with many branches it will lead to a working copy many times larger
than just the trunk. Thus for projects using the standard directory
structure (trunk/branches/tags), it is recommended to clone with option
@samp{--stdlayout}. If the project uses a non-standard structure, and/or if
branches and tags are not required, it is easiest to only clone one
directory (typically trunk), without giving any repository layout options.
If the full history with branches and tags is required, the options
@samp{--trunk} / @samp{--branches} / @samp{--tags} must be used.

When using multiple --branches or --tags, @emph{git svn} does not automatically
handle name collisions (for example, if two branches from different paths
have the same name, or if a branch and a tag have the same name).  In these
cases, use @emph{init} to set up your Git repository then, before your first
@emph{fetch}, edit the $GIT_DIR/config file so that the branches and tags are
associated with different name spaces.  For example:

@example
branches = stable/*:refs/remotes/svn/stable/*
branches = debug/*:refs/remotes/svn/debug/*
@end example

@noindent

@chapheading CONFIGURATION

@emph{git svn} stores [svn-remote] configuration information in the repository
$GIT_DIR/config file.  It is similar the core Git [remote] sections except
@emph{fetch} keys do not accept glob arguments; but they are instead handled by
the @emph{branches} and @emph{tags} keys.  Since some SVN repositories are oddly
configured with multiple projects glob expansions such those listed below
are allowed:

@example
[svn-remote "project-a"]
        url = http://server.org/svn
        fetch = trunk/project-a:refs/remotes/project-a/trunk
        branches = branches/*/project-a:refs/remotes/project-a/branches/*
        branches = branches/release_*:refs/remotes/project-a/branches/release_*
        branches = branches/re*se:refs/remotes/project-a/branches/*
        tags = tags/*/project-a:refs/remotes/project-a/tags/*
@end example


Keep in mind that the @samp{*} (asterisk) wildcard of the local ref
(right of the @samp{:}) @strong{must} be the farthest right path component;
however the remote wildcard may be anywhere as long as it’s an
independent path component (surrounded by @samp{/} or EOL).   This
type of configuration is not automatically created by @emph{init} and
should be manually entered with a text-editor or using @emph{git config}.

Also note that only one asterisk is allowed per word. For example:

@example
branches = branches/re*se:refs/remotes/project-a/branches/*
@end example

will match branches @emph{release}, @emph{rese}, @emph{re123se}, however

@example
branches = branches/re*s*e:refs/remotes/project-a/branches/*
@end example

will produce an error.

It is also possible to fetch a subset of branches or tags by using a
comma-separated list of names within braces. For example:

@example
[svn-remote "huge-project"]
        url = http://server.org/svn
        fetch = trunk/src:refs/remotes/trunk
        branches = branches/@{red,green@}/src:refs/remotes/project-a/branches/*
        tags = tags/@{1.0,2.0@}/src:refs/remotes/project-a/tags/*
@end example


Multiple fetch, branches, and tags keys are supported:

@example
[svn-remote "messy-repo"]
        url = http://server.org/svn
        fetch = trunk/project-a:refs/remotes/project-a/trunk
        fetch = branches/demos/june-project-a-demo:refs/remotes/project-a/demos/june-demo
        branches = branches/server/*:refs/remotes/project-a/branches/*
        branches = branches/demos/2011/*:refs/remotes/project-a/2011-demos/*
        tags = tags/server/*:refs/remotes/project-a/tags/*
@end example


Creating a branch in such a configuration requires disambiguating which
location to use using the -d or --destination flag:

@example
$ git svn branch -d branches/server release-2-3-0
@end example


Note that git-svn keeps track of the highest revision in which a branch or
tag has appeared. If the subset of branches or tags is changed after
fetching, then $GIT_DIR/svn/.metadata must be manually edited to remove (or
reset) branches-maxRev and/or tags-maxRev as appropriate.

@noindent

@chapheading FILES

@table @asis

@item  $GIT_DIR/svn/**/.rev_map.* 
Mapping between Subversion revision numbers and Git commit names.  In a
repository where the noMetadata option is not set, this can be rebuilt from
the git-svn-id: lines that are at the end of every commit (see the
@emph{svn.noMetadata} section above for details).

@emph{git svn fetch} and @emph{git svn rebase} automatically update the rev_map if it
is missing or not up to date.  @emph{git svn reset} automatically rewinds it.
@end table

@noindent

@chapheading BUGS

We ignore all SVN properties except svn:executable.  Any unhandled
properties are logged to $GIT_DIR/svn/<refname>/unhandled.log

Renamed and copied directories are not detected by Git and hence not tracked
when committing to SVN.  I do not plan on adding support for this as it’s
quite difficult and time-consuming to get working for all the possible
corner cases (Git doesn’t do it, either).  Committing renamed and copied
files is fully supported if they’re similar enough for Git to detect them.

In SVN, it is possible (though discouraged) to commit changes to a tag
(because a tag is just a directory copy, thus technically the same as a
branch). When cloning an SVN repository, @emph{git svn} cannot know if such a
commit to a tag will happen in the future. Thus it acts conservatively and
imports all SVN tags as branches, prefixing the tag name with @emph{tags/}.

@noindent

@chapheading SEE ALSO

git-rebase(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-switch,,,Top
@chapheading Name

git-switch — ブランチを切り替える

@noindent

@chapheading Synopsis

@display
git switch [<options>] [--no-guess] <branch>
git switch [<options>] --detach [<start-point>]
git switch [<options>] (-c|-C) <new-branch> [<start-point>]
git switch [<options>] --orphan <new-branch>
@end display


@noindent

@chapheading DESCRIPTION

指定のブランチに切り替えます。作業ツリーとインデックスは、ブランチに一致するように更新されます。新規コミットは、全てこのブランチの先端に追加されることになります。

オプションで、同じ名前のリモートブランチから自動的に @samp{-c} や @samp{-C} を使用して新しいブランチを作成するか(@samp{--guess}
参照)、あるいは切り替え時に @samp{--detach} を使用して任意のブランチから作業ツリーをデタッチできます。

ブランチを切り替えるには、クリーンなインデックスと作業ツリーは必要ありません(つまり、「HEAD」との違いはありません)。ただし、操作によってローカル変更が失われる場合、
@samp{--discard-changes} または @samp{--merge} で特に指示されない限り、操作は中止されます。

!!このコマンドは実験的なものです。 動作が変わる可能性があります!!

@noindent

@chapheading OPTIONS

@table @asis

@item  <branch> 
切り替え先のブランチ

@item  <new-branch> 
新ブランチの名前

@item  <start-point> 
新ブランチの開始点。 @samp{<start-point>}
を指定すると、HEADが現在指し示している場所以外の履歴内の場所に基づいてブランチを作成できます。(または、 @samp{--detach}
の場合、他の場所から検査してデタッチすることができます。)

@samp{@@@{-N@}} 構文を使用して、「git switch」または「git
checkout」操作を使用して切り替えられた最後からN番目のブランチ/コミットを参照できます。 @samp{@@@{-1@}} と同義の @samp{-}
を指定することもできます。これは、2つのブランチをすばやく切り替えたり、誤って切り替えたブランチを元に戻したりするためによく使用されます。

特別な場合として、マージベースが1つしかない場合は、 @samp{A} と @samp{B} のマージベースのショートカットとして @samp{A...B} を使用できます。 @samp{A}
と @samp{B} のうち片方を省略できます。その場合、省略した方はデフォルトで @samp{HEAD} になります。

@item  @samp{-c <new-branch>} 
@itemx  @samp{--create <new-branch>} 
ブランチに切り替える前に、 @samp{<start-point>} で始まる @samp{<new-branch>}
という名前の新しいブランチを作成します。これは以下に代わる便利なショートカットです:

@example
$ git branch <new-branch>
$ git switch <new-branch>
@end example


@item  @samp{-C <new-branch>} 
@itemx  @samp{--force-create <new-branch>} 
@samp{--create`と似ていますが、 `<new-branch>} がすでに存在する場合、 @samp{<start-point>}
にリセットされる点が異なります。これは以下に代わる便利なショートカットです:

@example
$ git branch -f <new-branch>
$ git switch <new-branch>
@end example


@item  @samp{-d} 
@itemx  @samp{--detach} 
検査と破棄可能な実験のためのコミットに切り替えます。詳細については、 git-checkout(1) の「DETACHED
HEAD」セクションを参照してください。

@item  @samp{--guess} 
@itemx  @samp{--no-guess} 
@samp{<branch>} が見つからないが、名前が一致するリモートが正確に1つだけあり(@samp{<remote>}
と呼びます)、それに追跡ブランチが存在する場合は、以下と同等のものとして扱います。

@example
$ git switch -c <branch> --track <remote>/<branch>
@end example


ブランチが複数のリモートに存在し、そのうちの1つが @samp{checkout.defaultRemote} 構成変数によって名前が付けられている場合、
@samp{<branch>} がすべてのリモートで一意でなくても、曖昧さ回避の目的でそのブランチを使用します。例えば、 @samp{<branch>}
があいまいであるが、 @emph{origin} リモートに存在する場合、そこからリモートブランチを常にチェックアウトするには、これを
@samp{checkout.defaultRemote=origin} と設定します。 git-config(1) の
@samp{checkout.defaultRemote} も参照してください。

@samp{--guess} がデフォルトの動作です。無効にするには、 @samp{--no-guess} を使用します。

デフォルトの動作は、 @samp{checkout.guess} 構成変数で設定できます。

@item  @samp{-f} 
@itemx  @samp{--force} 
@samp{--discard-changes} のエイリアス。

@item  @samp{--discard-changes} 
インデックスまたは作業ツリーが @samp{HEAD} と異なっていても続行します。インデックスと作業ツリーの両方が、切り替え先(switching
target)に一致するように復元されます。 @samp{--recurse-submodules}
が指定されている場合、サブモジュールの内容も切り替え先に一致するように復元されます。これは、ローカルの変更を破棄するために使用されます。

@item  @samp{-m} 
@itemx  @samp{--merge} 
現在のブランチと切り替え先のブランチの間で異なる1つ以上のファイルにローカルの変更がある場合、コマンドは、変更をコンテキストに保持するためにブランチの切り替えを拒否します。
ただし、このオプションを使用すると、現在のブランチ、作業ツリーの内容、および新しいブランチの間の3方向のマージが実行され、新しいブランチに移動します。

マージの競合が発生すると、競合するパスのインデックスエントリはマージされないままになり、競合を解決し、解決されたパスを @samp{git add}
(またはマージによってパスが削除される場合は @samp{git rm})でマークする必要があります。

@item  @samp{--conflict=<style>} 
上記の @samp{--merge} オプションと同じですが、競合するハンクの表示方法を変更し、 @samp{merge.conflictStyle}
構成変数をオーバーライドします。指定可能な値は「merge」(デフォルト)と「diff3」(「merge」スタイルで表示されるものに加えて、元のコンテンツを表示)です。

@item  @samp{-q} 
@itemx  @samp{--quiet} 
静かにします。フィードバックメッセージを抑制します。

@item  @samp{--progress} 
@itemx  @samp{--no-progress} 
@samp{--quiet} が指定されていない限り、進行状況は、端末に接続されている場合、デフォルトで標準エラーストリームに報告されます。このフラグは、
@samp{--quiet} に関係なく、端末に接続されていない場合でも進行状況のレポートを有効にします。

@item  @samp{-t} 
@itemx  @samp{--track} 
新しいブランチを作成するときは、 "upstream" 構成をセットアップします。 @samp{-c} が暗黙に指定されたものと見なします。詳細については、
git-branch(1) の @samp{--track} を参照してください。

@samp{-c}
オプションが指定されていない場合、新しいブランチの名前は、対応するリモート用に構成されたrefspecのローカル部分を調べ、次に、最初の部分を「*」まで削除することにより、リモート追跡ブランチから取得されます。これは、
@samp{origin/hack} (または @samp{remotes/origin/hack} あるいは
@samp{refs/remotes/origin/hack})から分岐するときに、ローカルブランチとして @samp{hack}
を使用するように指示します。指定された名前にスラッシュ(/)がない場合、または上記の推測の結果が空の名前になる場合、推測は中止されます。このような場合は、
@samp{-c} を使用して明示的に名前を付けることができます。

@item  @samp{--no-track} 
@samp{branch.autoSetupMerge} 構成変数がtrueであっても、 "upstream" 構成をセットアップしない。

@item  @samp{--orphan <new-branch>} 
@samp{<new-branch>} という名前の新しい 「孤立した」(orphan)ブランチを作成します。追跡中のファイルはすべて削除されます。

@item  @samp{--ignore-other-worktrees} 
@samp{git switch}
は、必要なrefが別のワークツリーによってすでにチェックアウトされている場合に拒否します。このオプションを使用すると、とにかくrefをチェックアウトできます。つまり、refは複数のワークツリーで保持できます。

@item  @samp{--recurse-submodules} 
@itemx  @samp{--no-recurse-submodules} 
@samp{--recurse-submodules}
を使用すると、スーパープロジェクト(親プロジェクト)に記録されたコミットに従って、すべてのアクティブなサブモジュールのコンテンツが更新されます。何も使用されていない(または
@samp{--no-recurse-submodules})場合、サブモジュールの作業ツリーは更新されません。 git-submodule(1)
と同様に、これはサブモジュールの @samp{HEAD} を切り離します(detach)。
@end table

@noindent

@chapheading EXAMPLES

以下のコマンドは "master" ブランチに切り替えます:

@example
$ git switch master
@end example


間違ったブランチで作業した後、正しいブランチへの切り替えは以下を使用して行われます:

@example
$ git switch mytopic
@end example


ただし、「間違った」ブランチと正しい「mytopic」ブランチは、ローカルで変更したファイルが異なる場合があります。その場合、上記のswitchは以下のように失敗します:

@example
$ git switch mytopic
error: You have local changes to 'frotz'; not switching branches.
@end example


コマンドに @samp{-m} フラグを指定すると、3方向のマージを試行します:

@example
$ git switch -m mytopic
Auto-merging frotz
@end example


この3者間マージの後、ローカルの変更はインデックスファイルに登録されないため、 @samp{git diff}
は、新しいブランチの先端以降に行った変更を示します。

mytopicに切り替える前に前のブランチ(つまり、 "master" ブランチ)に戻すには:

@example
$ git switch -
@end example


どのコミットからでも新しいブランチを成長させることができます。たとえば、 "HEAD~3" に切り替えて、ブランチ "fixup" を作成します:

@example
$ git switch -c fixup HEAD~3
Switched to a new branch 'fixup'
@end example


同じ名前のリモートブランチから新しいブランチを開始する場合:

@example
$ git switch new-topic
Branch 'new-topic' set up to track remote branch 'new-topic' from 'origin'
Switched to a new branch 'new-topic'
@end example


新しいブランチを作成せずに、一時的な検査または実験のためにコミット @samp{HEAD~3} をチェックアウトするには:

@example
$ git switch --detach HEAD~3
HEAD is now at 9fc9555312 Merge branch 'cc/shared-index-permbits'
@end example


一時的な検査または実験のために行ったことに維持する価値があることが判明した場合は、(切り替えることなく)、いつでも新しい名前を作成できます:

@example
$ git switch -c good-surprises
@end example


@noindent

@chapheading SEE ALSO

git-checkout(1), git-branch(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-symbolic-ref,,,Top
@chapheading Name

git-symbolic-ref — シンボリックrefの読み取り、変更、および削除

@noindent

@chapheading Synopsis

@display
git symbolic-ref [-m <reason>] <name> <ref>
git symbolic-ref [-q] [--short] <name>
git symbolic-ref --delete [-q] <name>
@end display


@noindent

@chapheading DESCRIPTION

引数が1つ与えられると、指定されたシンボリックrefが参照するブランチヘッドを読み取り、 @samp{.git/} ディレクトリを基準にしてそのパスを出力します。
通常、作業ツリーがどのブランチにあるかを確認するには、 <name> 引数として @samp{HEAD} を指定します。

2つの引数を与えると、指定されたブランチ <ref> を指すようにシンボリックref <name> を作成または更新します。

@samp{--delete} と追加の引数を指定すると、指定されたシンボリックrefが削除されます。

シンボリックrefは、 @samp{ref: refs/} で始まる文字列を格納する通常のファイルです。 たとえば、 @samp{.git/HEAD} は、内容が
@samp{ref: refs/heads/master} である通常のファイルです。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-d} 
@itemx  @samp{--delete} 
シンボリックref <name> を削除します。

@item  @samp{-q} 
@itemx  @samp{--quiet} 
<name> がシンボリックrefではなく、切り離されたHEAD(detached HEAD)である場合は、エラーメッセージを発行しないでください。
代わりに、ゼロ以外のステータスで何も言わずに終了します。

@item  @samp{--short} 
<name> の値をシンボリックrefとして表示する場合は、値を短くする事を試みます。例えば @samp{refs/heads/master} から
@samp{master} へ。

@item  @samp{-m} 
<name> のreflogを <reason> で更新します。これは、シンボリックrefを作成または更新する場合にのみ有効です。
@end table

@noindent

@chapheading NOTES

以前は、 @samp{.git/HEAD} は @samp{refs/heads/master} を指すシンボリックリンクでした。別のブランチに切り替えたい場合は、 @samp{ln
-sf refs/heads/newbranch .git/HEAD} を実行し、現在のブランチを確認したい場合は、 @samp{readlink
.git/HEAD} を実行しました。
ただし、シンボリックリンクは完全に移植可能ではないため、非推奨になり、(上記のとおり)シンボリックrefがデフォルトで使用されます。

@emph{git symbolic-ref}
は、シンボリックrefの内容が正しく出力された場合はステータス0で終了し、要求された名前がシンボリックrefでない場合はステータス1で終了し、別のエラーが発生した場合は128で終了します。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-tag,,,Top
@chapheading Name

git-tag — Create, list, delete or verify a tag object signed with GPG

@noindent

@chapheading Synopsis

@display
git tag [-a | -s | -u <keyid>] [-f] [-m <msg> | -F <file>] [-e]
        <tagname> [<commit> | <object>]
git tag -d <tagname>…
git tag [-n[<num>]] -l [--contains <commit>] [--no-contains <commit>]
        [--points-at <object>] [--column[=<options>] | --no-column]
        [--create-reflog] [--sort=<key>] [--format=<format>]
        [--merged <commit>] [--no-merged <commit>] [<pattern>…]
git tag -v [--format=<format>] <tagname>…
@end display


@noindent

@chapheading DESCRIPTION

Add a tag reference in @samp{refs/tags/}, unless @samp{-d/-l/-v} is given to delete,
list or verify tags.

Unless @samp{-f} is given, the named tag must not yet exist.

If one of @samp{-a}, @samp{-s}, or @samp{-u <keyid>} is passed, the command creates a @emph{tag}
object, and requires a tag message.  Unless @samp{-m <msg>} or @samp{-F <file>} is
given, an editor is started for the user to type in the tag message.

If @samp{-m <msg>} or @samp{-F <file>} is given and @samp{-a}, @samp{-s}, and @samp{-u <keyid>} are
absent, @samp{-a} is implied.

Otherwise, a tag reference that points directly at the given object (i.e., a
lightweight tag) is created.

A GnuPG signed tag object will be created when @samp{-s} or @samp{-u <keyid>} is
used.  When @samp{-u <keyid>} is not used, the committer identity for the current
user is used to find the GnuPG key for signing.         The configuration variable
@samp{gpg.program} is used to specify custom GnuPG binary.

Tag objects (created with @samp{-a}, @samp{-s}, or @samp{-u}) are called "annotated" tags;
they contain a creation date, the tagger name and e-mail, a tagging message,
and an optional GnuPG signature. Whereas a "lightweight" tag is simply a
name for an object (usually a commit object).

Annotated tags are meant for release while lightweight tags are meant for
private or temporary object labels. For this reason, some git commands for
naming objects (like @samp{git describe}) will ignore lightweight tags by
default.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-a} 
@itemx  @samp{--annotate} 
Make an unsigned, annotated tag object

@item  @samp{-s} 
@itemx  @samp{--sign} 
Make a GPG-signed tag, using the default e-mail address’s key.  The default
behavior of tag GPG-signing is controlled by @samp{tag.gpgSign} configuration
variable if it exists, or disabled otherwise.  See git-config(1).

@item  @samp{--no-sign} 
Override @samp{tag.gpgSign} configuration variable that is set to force each and
every tag to be signed.

@item  @samp{-u <keyid>} 
@itemx  @samp{--local-user=<keyid>} 
Make a GPG-signed tag, using the given key.

@item  @samp{-f} 
@itemx  @samp{--force} 
Replace an existing tag with the given name (instead of failing)

@item  @samp{-d} 
@itemx  @samp{--delete} 
Delete existing tags with the given names.

@item  @samp{-v} 
@itemx  @samp{--verify} 
Verify the GPG signature of the given tag names.

@item  @samp{-n<num>} 
<num> specifies how many lines from the annotation, if any, are printed when
using -l. Implies @samp{--list}.

The default is not to print any annotation lines.  If no number is given to
@samp{-n}, only the first line is printed.  If the tag is not annotated, the
commit message is displayed instead.

@item  @samp{-l} 
@itemx  @samp{--list} 
List tags. With optional @samp{<pattern>...}, e.g. @samp{git tag --list 'v-*'}, list
only the tags that match the pattern(s).

Running "git tag" without arguments also lists all tags. The pattern is a
shell wildcard (i.e., matched using fnmatch(3)). Multiple patterns may be
given; if any of them matches, the tag is shown.

This option is implicitly supplied if any other list-like option such as
@samp{--contains} is provided. See the documentation for each of those options
for details.

@item  @samp{--sort=<key>} 
Sort based on the key given.  Prefix @samp{-} to sort in descending order of the
value. You may use the --sort=<key> option multiple times, in which case the
last key becomes the primary key. Also supports "version:refname" or
"v:refname" (tag names are treated as versions). The "version:refname" sort
order can also be affected by the "versionsort.suffix" configuration
variable.  The keys supported are the same as those in @samp{git for-each-ref}.
Sort order defaults to the value configured for the @samp{tag.sort} variable if
it exists, or lexicographic order otherwise. See git-config(1).

@item  @samp{--color[=<when>]} 
Respect any colors specified in the @samp{--format} option. The @samp{<when>} field
must be one of @samp{always}, @samp{never}, or @samp{auto} (if @samp{<when>} is absent, behave
as if @samp{always} was given).

@item  @samp{-i} 
@itemx  @samp{--ignore-case} 
Sorting and filtering tags are case insensitive.

@item  @samp{--column[=<options>]} 
@itemx  @samp{--no-column} 
Display tag listing in columns. See configuration variable @samp{column.tag} for
option syntax. @samp{--column} and @samp{--no-column} without options are equivalent
to @emph{always} and @emph{never} respectively.

This option is only applicable when listing tags without annotation lines.

@item  @samp{--contains [<commit>]} 
Only list tags which contain the specified commit (HEAD if not
specified). Implies @samp{--list}.

@item  @samp{--no-contains [<commit>]} 
Only list tags which don’t contain the specified commit (HEAD if not
specified). Implies @samp{--list}.

@item  @samp{--merged [<commit>]} 
Only list tags whose commits are reachable from the specified commit (@samp{HEAD}
if not specified).

@item  @samp{--no-merged [<commit>]} 
Only list tags whose commits are not reachable from the specified commit
(@samp{HEAD} if not specified).

@item  @samp{--points-at <object>} 
Only list tags of the given object (HEAD if not specified). Implies
@samp{--list}.

@item  @samp{-m <msg>} 
@itemx  @samp{--message=<msg>} 
Use the given tag message (instead of prompting).  If multiple @samp{-m} options
are given, their values are concatenated as separate paragraphs.  Implies
@samp{-a} if none of @samp{-a}, @samp{-s}, or @samp{-u <keyid>} is given.

@item  @samp{-F <file>} 
@itemx  @samp{--file=<file>} 
Take the tag message from the given file.  Use @emph{-} to read the message from
the standard input.  Implies @samp{-a} if none of @samp{-a}, @samp{-s}, or @samp{-u <keyid>} is
given.

@item  @samp{-e} 
@itemx  @samp{--edit} 
The message taken from file with @samp{-F} and command line with @samp{-m} are usually
used as the tag message unmodified.  This option lets you further edit the
message taken from these sources.

@item  @samp{--cleanup=<mode>} 
This option sets how the tag message is cleaned up.  The @emph{<mode>} can be one
of @emph{verbatim}, @emph{whitespace} and @emph{strip}.  The @emph{strip} mode is default. The
@emph{verbatim} mode does not change message at all, @emph{whitespace} removes just
leading/trailing whitespace lines and @emph{strip} removes both whitespace and
commentary.

@item  @samp{--create-reflog} 
Create a reflog for the tag. To globally enable reflogs for tags, see
@samp{core.logAllRefUpdates} in git-config(1).  The negated form
@samp{--no-create-reflog} only overrides an earlier @samp{--create-reflog}, but
currently does not negate the setting of @samp{core.logAllRefUpdates}.

@item  @samp{--format=<format>} 
A string that interpolates @samp{%(fieldname)} from a tag ref being shown and the
object it points at.  The format is the same as that of
git-for-each-ref(1).  When unspecified, defaults to
@samp{%(refname:strip=2)}.

@item  <tagname> 
The name of the tag to create, delete, or describe.  The new tag name must
pass all checks defined by git-check-ref-format(1).  Some of these
checks may restrict the characters allowed in a tag name.

@item  <commit> 
@itemx  <object> 
The object that the new tag will refer to, usually a commit.  Defaults to
HEAD.
@end table

@noindent

@chapheading CONFIGURATION

By default, @emph{git tag} in sign-with-default mode (-s) will use your committer
identity (of the form @samp{Your Name <your@@email.address>}) to find a key.  If
you want to use a different default key, you can specify it in the
repository configuration as follows:

@example
[user]
    signingKey = <gpg-keyid>
@end example


@samp{pager.tag} is only respected when listing tags, i.e., when @samp{-l} is used or
implied. The default is to use a pager.  See git-config(1).

@noindent

@chapheading DISCUSSION

@noindent

@heading On Re-tagging

What should you do when you tag a wrong commit and you would want to re-tag?

If you never pushed anything out, just re-tag it. Use "-f" to replace the
old one. And you’re done.

But if you have pushed things out (or others could just read your repository
directly), then others will have already seen the old tag. In that case you
can do one of two things:

@enumerate 

@item
The sane thing.  Just admit you screwed up, and use a different name. Others
have already seen one tag-name, and if you keep the same name, you may be in
the situation that two people both have "version X", but they actually have
@emph{different} "X"'s.  So just call it "X.1" and be done with it.

@item
The insane thing.  You really want to call the new version "X" too, @emph{even
though} others have already seen the old one. So just use @emph{git tag -f}
again, as if you hadn’t already published the old one.
@end enumerate

However, Git does @strong{not} (and it should not) change tags behind users
back. So if somebody already got the old tag, doing a @emph{git pull} on your
tree shouldn’t just make them overwrite the old one.

If somebody got a release tag from you, you cannot just change the tag for
them by updating your own one. This is a big security issue, in that people
MUST be able to trust their tag-names.  If you really want to do the insane
thing, you need to just fess up to it, and tell people that you messed
up. You can do that by making a very public announcement saying:

@example
Ok, I messed up, and I pushed out an earlier version tagged as X. I
then fixed something, and retagged the *fixed* tree as X again.

If you got the wrong tag, and want the new one, please delete
the old one and fetch the new one by doing:

        git tag -d X
        git fetch origin tag X

to get my updated tag.

You can test which tag you have by doing

        git rev-parse X

which should return 0123456789abcdef.. if you have the new version.

Sorry for the inconvenience.
@end example


Does this seem a bit complicated? It @strong{should} be. There is no way that it
would be correct to just "fix" it automatically.  People need to know that
their tags might have been changed.

@noindent

@heading On Automatic following

If you are following somebody else’s tree, you are most likely using
remote-tracking branches (eg. @samp{refs/remotes/origin/master}).  You usually
want the tags from the other end.

On the other hand, if you are fetching because you would want a one-shot
merge from somebody else, you typically do not want to get tags from there.
This happens more often for people near the toplevel but not limited to
them.  Mere mortals when pulling from each other do not necessarily want to
automatically get private anchor point tags from the other person.

Often, "please pull" messages on the mailing list just provide two pieces of
information: a repo URL and a branch name; this is designed to be easily
cut&pasted at the end of a @emph{git fetch} command line:

@example
Linus, please pull from

        git://git..../proj.git master

to get the following updates...
@end example


becomes:

@example
$ git pull git://git..../proj.git master
@end example


In such a case, you do not want to automatically follow the other person’s
tags.

One important aspect of Git is its distributed nature, which largely means
there is no inherent "upstream" or "downstream" in the system.  On the face
of it, the above example might seem to indicate that the tag namespace is
owned by the upper echelon of people and that tags only flow downwards, but
that is not the case.  It only shows that the usage pattern determines who
are interested in whose tags.

A one-shot pull is a sign that a commit history is now crossing the boundary
between one circle of people (e.g. "people who are primarily interested in
the networking part of the kernel") who may have their own set of tags
(e.g. "this is the third release candidate from the networking group to be
proposed for general consumption with 2.6.21 release") to another circle of
people (e.g. "people who integrate various subsystem improvements").  The
latter are usually not interested in the detailed tags used internally in
the former group (that is what "internal" means).  That is why it is
desirable not to follow tags automatically in this case.

It may well be that among networking people, they may want to exchange the
tags internal to their group, but in that workflow they are most likely
tracking each other’s progress by having remote-tracking branches.  Again,
the heuristic to automatically follow such tags is a good thing.

@noindent

@heading On Backdating Tags

If you have imported some changes from another VCS and would like to add
tags for major releases of your work, it is useful to be able to specify the
date to embed inside of the tag object; such data in the tag object affects,
for example, the ordering of tags in the gitweb interface.

To set the date used in future tag objects, set the environment variable
GIT_COMMITTER_DATE (see the later discussion of possible values; the most
common form is "YYYY-MM-DD HH:MM").

For example:

@example
$ GIT_COMMITTER_DATE="2006-10-02 10:31" git tag -s v1.0.1
@end example


@noindent

@chapheading DATE FORMATS

@samp{GIT_AUTHOR_DATE} と @samp{GIT_COMMITTER_DATE} 環境変数は、以下の日付形式をサポートします:

@table @asis

@item  Git internal format 
これは @samp{<unix timestamp> <time zone offset>} ここで、 @samp{<unix timestamp>}
UNIXエポックからの秒数です。 @samp{<time zone offset>} はUTCからの正または負のオフセットです。
たとえば、CET(UTCより1時間進んでいます)は @samp{+0100} です。

@item  RFC 2822 
RFC 2822で説明されている標準の電子メール形式。たとえば、 @samp{Thu, 07 Apr 2005 22:13:13 +0200} 。

@item  ISO 8601 
ISO 8601規格で指定されている日時(例: @samp{2005-04-07T22:13:13})。パーサは、 @samp{T}
文字の代わりにスペースも受け入れます。秒の小数部分は無視されます。たとえば、 @samp{2005-04-07T22:13:13.019} は
@samp{2005-04-07T22:13:13} として扱われます。

@quotation

@strong{Note}

日付部分は、上記に加えて、 @samp{YYYY.MM.DD} または @samp{MM/DD/YYYY} または @samp{DD.MM.YYYY} 形式が受け入れられます。
@end quotation
@end table

@noindent

@chapheading NOTES

複数の @samp{--contains} フィルターと @samp{--no-contains} フィルターを組み合わせる場合、少なくとも1つの @samp{--contains}
コミットを含み、 @samp{--no-contains} コミットを含まない参照のみが表示されます。

複数の @samp{--merged} フィルターと @samp{--no-merged} フィルターを組み合わせると、少なくとも1つの @samp{--merged}
コミットから到達可能で、 @samp{--no-merged} コミットのいずれからも到達できない参照のみが表示されます。

@noindent

@chapheading SEE ALSO

git-check-ref-format(1).  git-config(1).

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-unpack-file,,,Top
@chapheading Name

git-unpack-file — ブロブの内容を含む一時(temporary)ファイルを作成します

@noindent

@chapheading Synopsis

@display
git unpack-file <blob>
@end display


@noindent

@chapheading DESCRIPTION

sha1で指定されたブロブの内容を保持するファイルを作成します。
一時(temporary)ファイルの名前を次の形式で返します:
.merge_file_XXXXX

@noindent

@chapheading OPTIONS

@table @asis

@item  <blob> 
ブロブIDである必要があります
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-unpack-objects,,,Top
@chapheading Name

git-unpack-objects — パックされたアーカイブからオブジェクトを取り出します

@noindent

@chapheading Synopsis

@display
git unpack-objects [-n] [-q] [-r] [--strict]
@end display


@noindent

@chapheading DESCRIPTION

標準入力からパックされたアーカイブ(.pack)を読み取り、そこに含まれるオブジェクトを展開して、"loose"
形式(ファイルごとに1つのオブジェクト)でリポジトリに書き込みます。

リポジトリにすでに存在するオブジェクトは、パックファイルから取り出されません。したがって、ターゲットリポジトリ内に存在するパックファイルでこのコマンドを使用しても、何も取り出されません。

新しいパックを生成して既存のパックを置き換えるオプションについては、 git-repack(1) を参照してください。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-n} 
ドライランします。
実際にオブジェクトを取り出さずにパックファイルを確認するのみです。

@item  @samp{-q} 
このコマンドは通常、進捗率を表示しますが、このフラグはそれを抑制します。

@item  @samp{-r} 
破損したパックファイルから取り出そうとすると、コマンドは最初の破損で終了します。このフラグは破損があっても続行し、できるだけ多くのオブジェクトを回復するために最善を尽くすことを指示します。

@item  @samp{--strict} 
壊れたコンテンツやリンクを含むオブジェクトをリポジトリに書き込まない

@item  @samp{--max-input-size=<size>} 
入力サイズが <size> より大きい場合は何もせず終了します。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-update-index,,,Top
@chapheading Name

git-update-index — Register file contents in the working tree to the index

@noindent

@chapheading Synopsis

@display
git update-index
             [--add] [--remove | --force-remove] [--replace]
             [--refresh] [-q] [--unmerged] [--ignore-missing]
             [(--cacheinfo <mode>,<object>,<file>)…]
             [--chmod=(+|-)x]
             [--[no-]assume-unchanged]
             [--[no-]skip-worktree]
             [--[no-]ignore-skip-worktree-entries]
             [--[no-]fsmonitor-valid]
             [--ignore-submodules]
             [--[no-]split-index]
             [--[no-|test-|force-]untracked-cache]
             [--[no-]fsmonitor]
             [--really-refresh] [--unresolve] [--again | -g]
             [--info-only] [--index-info]
             [-z] [--stdin] [--index-version <n>]
             [--verbose]
             [--] [<file>…]
@end display


@noindent

@chapheading DESCRIPTION

Modifies the index. Each file mentioned is updated into the index and any
@emph{unmerged} or @emph{needs updating} state is cleared.

See also git-add(1) for a more user-friendly way to do some of the
most common operations on the index.

The way @emph{git update-index} handles files it is told about can be modified
using the various options:

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--add} 
If a specified file isn’t in the index already then it’s added.  Default
behaviour is to ignore new files.

@item  @samp{--remove} 
If a specified file is in the index but is missing then it’s removed.
Default behavior is to ignore removed file.

@item  @samp{--refresh} 
Looks at the current index and checks to see if merges or updates are needed
by checking stat() information.

@item  @samp{-q} 
Quiet.  If --refresh finds that the index needs an update, the default
behavior is to error out.  This option makes
@emph{git update-index} continue anyway.

@item  @samp{--ignore-submodules} 
Do not try to update submodules.  This option is only respected when passed
before --refresh.

@item  @samp{--unmerged} 
If --refresh finds unmerged changes in the index, the default
behavior is to error out.  This option makes @emph{git update-index}
continue anyway.

@item  @samp{--ignore-missing} 
Ignores missing files during a --refresh

@item  @samp{--cacheinfo <mode>,<object>,<path>} 
@itemx  @samp{--cacheinfo <mode> <object> <path>} 
Directly insert the specified info into the index.  For backward
compatibility, you can also give these three arguments as three separate
parameters, but new users are encouraged to use a single-parameter form.

@item  @samp{--index-info} 
Read index information from stdin.

@item  @samp{--chmod=(+|-)x} 
Set the execute permissions on the updated files.

@item  @samp{--[no-]assume-unchanged} 
When this flag is specified, the object names recorded for the paths are not
updated.  Instead, this option sets/unsets the "assume unchanged" bit for
the paths.  When the "assume unchanged" bit is on, the user promises not to
change the file and allows Git to assume that the working tree file matches
what is recorded in the index.  If you want to change the working tree file,
you need to unset the bit to tell Git.  This is sometimes helpful when
working with a big project on a filesystem that has very slow lstat(2)
system call (e.g. cifs).

Git will fail (gracefully) in case it needs to modify this file in the index
e.g. when merging in a commit; thus, in case the assumed-untracked file is
changed upstream, you will need to handle the situation manually.

@item  @samp{--really-refresh} 
Like @samp{--refresh}, but checks stat information unconditionally, without
regard to the "assume unchanged" setting.

@item  @samp{--[no-]skip-worktree} 
When one of these flags is specified, the object name recorded for the paths
are not updated. Instead, these options set and unset the "skip-worktree"
bit for the paths. See section "Skip-worktree bit" below for more
information.

@item  @samp{--[no-]ignore-skip-worktree-entries} 
Do not remove skip-worktree (AKA "index-only") entries even when the
@samp{--remove} option was specified.

@item  @samp{--[no-]fsmonitor-valid} 
When one of these flags is specified, the object name recorded for the paths
are not updated. Instead, these options set and unset the "fsmonitor valid"
bit for the paths. See section "File System Monitor" below for more
information.

@item  @samp{-g} 
@itemx  @samp{--again} 
Runs @emph{git update-index} itself on the paths whose index entries are
different from those from the @samp{HEAD} commit.

@item  @samp{--unresolve} 
Restores the @emph{unmerged} or @emph{needs updating} state of a file during a merge
if it was cleared by accident.

@item  @samp{--info-only} 
Do not create objects in the object database for all <file> arguments that
follow this flag; just insert their object IDs into the index.

@item  @samp{--force-remove} 
Remove the file from the index even when the working directory still has
such a file. (Implies --remove.)

@item  @samp{--replace} 
By default, when a file @samp{path} exists in the index, @emph{git update-index}
refuses an attempt to add @samp{path/file}.  Similarly if a file @samp{path/file}
exists, a file @samp{path} cannot be added.  With --replace flag, existing
entries that conflict with the entry being added are automatically removed
with warning messages.

@item  @samp{--stdin} 
Instead of taking list of paths from the command line, read list of paths
from the standard input.  Paths are separated by LF (i.e. one path per line)
by default.

@item  @samp{--verbose} 
Report what is being added and removed from index.

@item  @samp{--index-version <n>} 
Write the resulting index out in the named on-disk format version.
Supported versions are 2, 3 and 4. The current default version is 2 or 3,
depending on whether extra features are used, such as @samp{git add -N}.

Version 4 performs a simple pathname compression that reduces index size by
30%-50% on large repositories, which results in faster load time. Version 4
is relatively young (first released in 1.8.0 in October 2012). Other Git
implementations such as JGit and libgit2 may not support it yet.

@item  @samp{-z} 
Only meaningful with @samp{--stdin} or @samp{--index-info}; paths are separated with
NUL character instead of LF.

@item  @samp{--split-index} 
@itemx  @samp{--no-split-index} 
Enable or disable split index mode. If split-index mode is already enabled
and @samp{--split-index} is given again, all changes in $GIT_DIR/index are pushed
back to the shared index file.

These options take effect whatever the value of the @samp{core.splitIndex}
configuration variable (see git-config(1)). But a warning is emitted
when the change goes against the configured value, as the configured value
will take effect next time the index is read and this will remove the
intended effect of the option.

@item  @samp{--untracked-cache} 
@itemx  @samp{--no-untracked-cache} 
Enable or disable untracked cache feature. Please use
@samp{--test-untracked-cache} before enabling it.

These options take effect whatever the value of the @samp{core.untrackedCache}
configuration variable (see git-config(1)). But a warning is emitted
when the change goes against the configured value, as the configured value
will take effect next time the index is read and this will remove the
intended effect of the option.

@item  @samp{--test-untracked-cache} 
Only perform tests on the working directory to make sure untracked cache can
be used. You have to manually enable untracked cache using
@samp{--untracked-cache} or @samp{--force-untracked-cache} or the
@samp{core.untrackedCache} configuration variable afterwards if you really want
to use it. If a test fails the exit code is 1 and a message explains what is
not working as needed, otherwise the exit code is 0 and OK is printed.

@item  @samp{--force-untracked-cache} 
Same as @samp{--untracked-cache}. Provided for backwards compatibility with older
versions of Git where @samp{--untracked-cache} used to imply
@samp{--test-untracked-cache} but this option would enable the extension
unconditionally.

@item  @samp{--fsmonitor} 
@itemx  @samp{--no-fsmonitor} 
Enable or disable files system monitor feature. These options take effect
whatever the value of the @samp{core.fsmonitor} configuration variable (see
git-config(1)). But a warning is emitted when the change goes
against the configured value, as the configured value will take effect next
time the index is read and this will remove the intended effect of the
option.

@item  -- 
Do not interpret any more arguments as options.

@item  <file> 
Files to act on.  Note that files beginning with @emph{.} are discarded. This
includes @samp{./file} and @samp{dir/./file}. If you don’t want this, then use cleaner
names.  The same applies to directories ending @emph{/} and paths with @emph{//}
@end table

@noindent

@chapheading USING --REFRESH

@samp{--refresh} does not calculate a new sha1 file or bring the index up to date
for mode/content changes. But what it @strong{does} do is to "re-match" the stat
information of a file with the index, so that you can refresh the index for
a file that hasn’t been changed but where the stat entry is out of date.

For example, you’d want to do this after doing a @emph{git read-tree}, to link up
the stat index details with the proper files.

@noindent

@chapheading USING --CACHEINFO OR --INFO-ONLY

@samp{--cacheinfo} is used to register a file that is not in the current working
directory.  This is useful for minimum-checkout merging.

To pretend you have a file at path with mode and sha1, say:

@example
$ git update-index --add --cacheinfo <mode>,<sha1>,<path>
@end example


@samp{--info-only} is used to register files without placing them in the object
database.  This is useful for status-only repositories.

Both @samp{--cacheinfo} and @samp{--info-only} behave similarly: the index is updated
but the object database isn’t.  @samp{--cacheinfo} is useful when the object is
in the database but the file isn’t available locally.  @samp{--info-only} is
useful when the file is available, but you do not wish to update the object
database.

@noindent

@chapheading USING --INDEX-INFO

@samp{--index-info} is a more powerful mechanism that lets you feed multiple
entry definitions from the standard input, and designed specifically for
scripts.  It can take inputs of three formats:

@enumerate 

@item
mode SP type SP sha1          TAB path

This format is to stuff @samp{git ls-tree} output into the index.

@item
mode         SP sha1 SP stage TAB path

This format is to put higher order stages into the index file and matches
@emph{git ls-files --stage} output.

@item
mode         SP sha1          TAB path

This format is no longer produced by any Git command, but is and will
continue to be supported by @samp{update-index --index-info}.
@end enumerate

To place a higher stage entry to the index, the path should first be removed
by feeding a mode=0 entry for the path, and then feeding necessary input
lines in the third format.

For example, starting with this index:

@example
$ git ls-files -s
100644 8a1218a1024a212bb3db30becd860315f9f3ac52 0       frotz
@end example


you can feed the following input to @samp{--index-info}:

@example
$ git update-index --index-info
0 0000000000000000000000000000000000000000      frotz
100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1       frotz
100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2       frotz
@end example


The first line of the input feeds 0 as the mode to remove the path; the
SHA-1 does not matter as long as it is well formatted.  Then the second and
third line feeds stage 1 and stage 2 entries for that path.  After the
above, we would end up with this:

@example
$ git ls-files -s
100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1       frotz
100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2       frotz
@end example


@noindent

@chapheading USING “ASSUME UNCHANGED” BIT

Many operations in Git depend on your filesystem to have an efficient
@samp{lstat(2)} implementation, so that @samp{st_mtime} information for working tree
files can be cheaply checked to see if the file contents have changed from
the version recorded in the index file.  Unfortunately, some filesystems
have inefficient @samp{lstat(2)}.  If your filesystem is one of them, you can set
"assume unchanged" bit to paths you have not changed to cause Git not to do
this check.  Note that setting this bit on a path does not mean Git will
check the contents of the file to see if it has changed — it makes Git to
omit any checking and assume it has @strong{not} changed.  When you make changes to
working tree files, you have to explicitly tell Git about it by dropping
"assume unchanged" bit, either before or after you modify them.

In order to set "assume unchanged" bit, use @samp{--assume-unchanged} option.  To
unset, use @samp{--no-assume-unchanged}. To see which files have the "assume
unchanged" bit set, use @samp{git ls-files -v} (see git-ls-files(1)).

The command looks at @samp{core.ignorestat} configuration variable.  When this is
true, paths updated with @samp{git update-index paths...} and paths updated with
other Git commands that update both index and working tree (e.g. @emph{git apply
--index}, @emph{git checkout-index -u}, and @emph{git read-tree -u}) are automatically
marked as "assume unchanged".  Note that "assume unchanged" bit is @strong{not} set
if @samp{git update-index --refresh} finds the working tree file matches the
index (use @samp{git update-index --really-refresh} if you want to mark them as
"assume unchanged").

@noindent

@chapheading EXAMPLES

To update and refresh only the files already checked out:

@example
$ git checkout-index -n -f -a && git update-index --ignore-missing --refresh
@end example


@table @asis

@item  On an inefficient filesystem with @samp{core.ignorestat} set 
@example
$ git update-index --really-refresh              (1)
$ git update-index --no-assume-unchanged foo.c   (2)
$ git diff --name-only                           (3)
$ edit foo.c
$ git diff --name-only                           (4)
M foo.c
$ git update-index foo.c                         (5)
$ git diff --name-only                           (6)
$ edit foo.c
$ git diff --name-only                           (7)
$ git update-index --no-assume-unchanged foo.c   (8)
$ git diff --name-only                           (9)
M foo.c
@end example


@table @asis

@item @pxref{CO1-1,,(1)}
forces lstat(2) to set "assume unchanged" bits for paths that match index.

@item @pxref{CO1-2,,(2)}
mark the path to be edited.

@item @pxref{CO1-3,,(3)}
this does lstat(2) and finds index matches the path.

@item @pxref{CO1-4,,(4)}
this does lstat(2) and finds index does @strong{not} match the path.

@item @pxref{CO1-5,,(5)}
registering the new version to index sets "assume unchanged" bit.

@item @pxref{CO1-6,,(6)}
and it is assumed unchanged.

@item @pxref{CO1-7,,(7)}
even after you edit it.

@item @pxref{CO1-8,,(8)}
you can tell about the change after the fact.

@item @pxref{CO1-9,,(9)}
now it checks with lstat(2) and finds it has been changed.
@end table
@end table

@noindent

@chapheading SKIP-WORKTREE BIT

Skip-worktree bit can be defined in one (long) sentence: When reading an
entry, if it is marked as skip-worktree, then Git pretends its working
directory version is up to date and read the index version instead.

To elaborate, "reading" means checking for file existence, reading file
attributes or file content. The working directory version may be present or
absent. If present, its content may match against the index version or
not. Writing is not affected by this bit, content safety is still first
priority. Note that Git @emph{can} update working directory file, that is marked
skip-worktree, if it is safe to do so (i.e.  working directory version
matches index version)

Although this bit looks similar to assume-unchanged bit, its goal is
different from assume-unchanged bit’s. Skip-worktree also takes precedence
over assume-unchanged bit when both are set.

@noindent

@chapheading SPLIT INDEX

This mode is designed for repositories with very large indexes, and aims at
reducing the time it takes to repeatedly write these indexes.

In this mode, the index is split into two files, $GIT_DIR/index and
$GIT_DIR/sharedindex.<SHA-1>. Changes are accumulated in $GIT_DIR/index, the
split index, while the shared index file contains all index entries and
stays unchanged.

All changes in the split index are pushed back to the shared index file when
the number of entries in the split index reaches a level specified by the
splitIndex.maxPercentChange config variable (see git-config(1)).

Each time a new shared index file is created, the old shared index files are
deleted if their modification time is older than what is specified by the
splitIndex.sharedIndexExpire config variable (see git-config(1)).

To avoid deleting a shared index file that is still used, its modification
time is updated to the current time every time a new split index based on
the shared index file is either created or read from.

@noindent

@chapheading UNTRACKED CACHE

This cache is meant to speed up commands that involve determining untracked
files such as @samp{git status}.

This feature works by recording the mtime of the working tree directories
and then omitting reading directories and stat calls against files in those
directories whose mtime hasn’t changed. For this to work the underlying
operating system and file system must change the @samp{st_mtime} field of
directories if files in the directory are added, modified or deleted.

You can test whether the filesystem supports that with the
@samp{--test-untracked-cache} option. The @samp{--untracked-cache} option used to
implicitly perform that test in older versions of Git, but that’s no longer
the case.

If you want to enable (or disable) this feature, it is easier to use the
@samp{core.untrackedCache} configuration variable (see git-config(1))
than using the @samp{--untracked-cache} option to @samp{git update-index} in each
repository, especially if you want to do so across all repositories you use,
because you can set the configuration variable to @samp{true} (or @samp{false}) in
your @samp{$HOME/.gitconfig} just once and have it affect all repositories you
touch.

When the @samp{core.untrackedCache} configuration variable is changed, the
untracked cache is added to or removed from the index the next time a
command reads the index; while when @samp{--[no-|force-]untracked-cache} are
used, the untracked cache is immediately added to or removed from the index.

Before 2.17, the untracked cache had a bug where replacing a directory with
a symlink to another directory could cause it to incorrectly show files
tracked by git as untracked. See the "status: add a failing test showing a
core.untrackedCache bug" commit to git.git. A workaround for that is (and
this might work for other undiscovered bugs in the future):

@example
$ git -c core.untrackedCache=false status
@end example


This bug has also been shown to affect non-symlink cases of replacing a
directory with a file when it comes to the internal structures of the
untracked cache, but no case has been reported where this resulted in wrong
"git status" output.

There are also cases where existing indexes written by git versions before
2.17 will reference directories that don’t exist anymore, potentially
causing many "could not open directory" warnings to be printed on "git
status". These are new warnings for existing issues that were previously
silently discarded.

As with the bug described above the solution is to one-off do a "git status"
run with @samp{core.untrackedCache=false} to flush out the leftover bad data.

@noindent

@chapheading FILE SYSTEM MONITOR

This feature is intended to speed up git operations for repos that have
large working directories.

It enables git to work together with a file system monitor (see the
"fsmonitor-watchman" section of githooks(5)) that can inform it as
to what files have been modified. This enables git to avoid having to
lstat() every file to find modified files.

When used in conjunction with the untracked cache, it can further improve
performance by avoiding the cost of scanning the entire working directory
looking for new files.

If you want to enable (or disable) this feature, it is easier to use the
@samp{core.fsmonitor} configuration variable (see git-config(1)) than
using the @samp{--fsmonitor} option to @samp{git update-index} in each repository,
especially if you want to do so across all repositories you use, because you
can set the configuration variable in your @samp{$HOME/.gitconfig} just once and
have it affect all repositories you touch.

When the @samp{core.fsmonitor} configuration variable is changed, the file system
monitor is added to or removed from the index the next time a command reads
the index. When @samp{--[no-]fsmonitor} are used, the file system monitor is
immediately added to or removed from the index.

@noindent

@chapheading CONFIGURATION

The command honors @samp{core.filemode} configuration variable.  If
your repository is on a filesystem whose executable bits are
unreliable, this should be set to @emph{false} (see git-config(1)).
This causes the command to ignore differences in file modes recorded
in the index and the file mode on the filesystem if they differ only on
executable bit.   On such an unfortunate filesystem, you may
need to use @emph{git update-index --chmod=}.

Quite similarly, if @samp{core.symlinks} configuration variable is set to @emph{false}
(see git-config(1)), symbolic links are checked out as plain files,
and this command does not modify a recorded file mode from symbolic link to
regular file.

The command looks at @samp{core.ignorestat} configuration variable.  See @emph{Using
"assume unchanged" bit} section above.

The command also looks at @samp{core.trustctime} configuration variable.  It can
be useful when the inode change time is regularly modified by something
outside Git (file system crawlers and backup systems use ctime for marking
files processed) (see git-config(1)).

The untracked cache extension can be enabled by the @samp{core.untrackedCache}
configuration variable (see git-config(1)).

@noindent

@chapheading NOTES

Users often try to use the assume-unchanged and skip-worktree bits to tell
Git to ignore changes to files that are tracked.  This does not work as
expected, since Git may still check working tree files against the index
when performing certain operations.  In general, Git does not provide a way
to ignore changes to tracked files, so alternate solutions are recommended.

For example, if the file you want to change is some sort of config file, the
repository can include a sample config file that can then be copied into the
ignored name and modified.  The repository can even include a script to
treat the sample file as a template, modifying and copying it automatically.

@noindent

@chapheading SEE ALSO

git-config(1), git-add(1), git-ls-files(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-update-ref,,,Top
@chapheading Name

git-update-ref — Update the object name stored in a ref safely

@noindent

@chapheading Synopsis

@display
git update-ref [-m <reason>] [--no-deref] (-d <ref> [<oldvalue>] | [--create-reflog] <ref> <newvalue> [<oldvalue>] | --stdin [-z])
@end display


@noindent

@chapheading DESCRIPTION

Given two arguments, stores the <newvalue> in the <ref>, possibly
dereferencing the symbolic refs.  E.g. @samp{git update-ref HEAD <newvalue>}
updates the current branch head to the new object.

Given three arguments, stores the <newvalue> in the <ref>, possibly
dereferencing the symbolic refs, after verifying that the current value of
the <ref> matches <oldvalue>.  E.g. @samp{git update-ref refs/heads/master
<newvalue> <oldvalue>} updates the master branch head to <newvalue> only if
its current value is <oldvalue>.  You can specify 40 "0" or an empty string
as <oldvalue> to make sure that the ref you are creating does not exist.

It also allows a "ref" file to be a symbolic pointer to another ref file by
starting with the four-byte header sequence of "ref:".

More importantly, it allows the update of a ref file to follow these
symbolic pointers, whether they are symlinks or these "regular file symbolic
refs".  It follows @strong{real} symlinks only if they start with "refs/":
otherwise it will just try to read them and update them as a regular file
(i.e. it will allow the filesystem to follow them, but will overwrite such a
symlink to somewhere else with a regular filename).

If --no-deref is given, <ref> itself is overwritten, rather than the result
of following the symbolic pointers.

In general, using

@example
git update-ref HEAD "$head"
@end example

should be a @emph{lot} safer than doing

@example
echo "$head" > "$GIT_DIR/HEAD"
@end example

both from a symlink following standpoint @strong{and} an error checking
standpoint.  The "refs/" rule for symlinks means that symlinks that point to
"outside" the tree are safe: they’ll be followed for reading but not for
writing (so we’ll never write through a ref symlink to some other tree, if
you have copied a whole archive by creating a symlink tree).

With @samp{-d} flag, it deletes the named <ref> after verifying it still contains
<oldvalue>.

With @samp{--stdin}, update-ref reads instructions from standard input and
performs all modifications together.  Specify commands of the form:

@example
update SP <ref> SP <newvalue> [SP <oldvalue>] LF
create SP <ref> SP <newvalue> LF
delete SP <ref> [SP <oldvalue>] LF
verify SP <ref> [SP <oldvalue>] LF
option SP <opt> LF
start LF
prepare LF
commit LF
abort LF
@end example

With @samp{--create-reflog}, update-ref will create a reflog for each ref even if
one would not ordinarily be created.

Quote fields containing whitespace as if they were strings in C source code;
i.e., surrounded by double-quotes and with backslash escapes.  Use 40 "0"
characters or the empty string to specify a zero value.  To specify a
missing value, omit the value and its preceding SP entirely.

Alternatively, use @samp{-z} to specify in NUL-terminated format, without
quoting:

@example
update SP <ref> NUL <newvalue> NUL [<oldvalue>] NUL
create SP <ref> NUL <newvalue> NUL
delete SP <ref> NUL [<oldvalue>] NUL
verify SP <ref> NUL [<oldvalue>] NUL
option SP <opt> NUL
start NUL
prepare NUL
commit NUL
abort NUL
@end example

In this format, use 40 "0" to specify a zero value, and use the empty string
to specify a missing value.

In either format, values can be specified in any form that Git recognizes as
an object name.  Commands in any other format or a repeated <ref> produce an
error.  Command meanings are:

@table @asis

@item  update 
Set <ref> to <newvalue> after verifying <oldvalue>, if given.  Specify a
zero <newvalue> to ensure the ref does not exist after the update and/or a
zero <oldvalue> to make sure the ref does not exist before the update.

@item  create 
Create <ref> with <newvalue> after verifying it does not exist.  The given
<newvalue> may not be zero.

@item  delete 
Delete <ref> after verifying it exists with <oldvalue>, if given.  If given,
<oldvalue> may not be zero.

@item  verify 
Verify <ref> against <oldvalue> but do not change it.  If <oldvalue> is zero
or missing, the ref must not exist.

@item  option 
Modify behavior of the next command naming a <ref>.  The only valid option
is @samp{no-deref} to avoid dereferencing a symbolic ref.

@item  start 
Start a transaction. In contrast to a non-transactional session, a
transaction will automatically abort if the session ends without an explicit
commit. This command may create a new empty transaction when the current one
has been committed or aborted already.

@item  prepare 
Prepare to commit the transaction. This will create lock files for all
queued reference updates. If one reference could not be locked, the
transaction will be aborted.

@item  commit 
Commit all reference updates queued for the transaction, ending the
transaction.

@item  abort 
Abort the transaction, releasing all locks if the transaction is in prepared
state.
@end table

If all <ref>s can be locked with matching <oldvalue>s simultaneously, all
modifications are performed.  Otherwise, no modifications are performed.
Note that while each individual <ref> is updated or deleted atomically, a
concurrent reader may still see a subset of the modifications.

@noindent

@chapheading LOGGING UPDATES

If config parameter "core.logAllRefUpdates" is true and the ref is one under
"refs/heads/", "refs/remotes/", "refs/notes/", or a pseudoref like HEAD or
ORIG_HEAD; or the file "$GIT_DIR/logs/<ref>" exists then @samp{git update-ref}
will append a line to the log file "$GIT_DIR/logs/<ref>" (dereferencing all
symbolic refs before creating the log name) describing the change in ref
value.  Log lines are formatted as:

@example
oldsha1 SP newsha1 SP committer LF
@end example

Where "oldsha1" is the 40 character hexadecimal value previously stored in
<ref>, "newsha1" is the 40 character hexadecimal value of <newvalue> and
"committer" is the committer’s name, email address and date in the standard
Git committer ident format.

Optionally with -m:

@example
oldsha1 SP newsha1 SP committer TAB message LF
@end example

Where all fields are as described above and "message" is the value supplied
to the -m option.

An update will fail (without changing <ref>) if the current user is unable
to create a new log file, append to the existing log file or does not have
committer information available.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-update-server-info,,,Top
@chapheading Name

git-update-server-info — ダムサーバー(dumb servers)を支援するために補助情報ファイル(auxiliary info file)を更新する

@noindent

@chapheading Synopsis

@display
git update-server-info
@end display


@noindent

@chapheading DESCRIPTION

オンザフライパック生成(on-the-fly pack generations)を行わないダムサーバー(dumb
server)は、クライアントがサーバーの参照とパックを検出できるように、 $GIT_DIR/info と
$GIT_OBJECT_DIRECTORY/info ディレクトリにいくつかの補助情報ファイル(auxiliary information
files)を持っている必要があります。このコマンドは、そのような補助ファイルを生成します。

@noindent

@chapheading OUTPUT

現在、このコマンドは以下のファイルを更新します。それらの目的の説明については、 gitrepository-layout(5)
を参照してください:

@itemize 

@item
objects/info/packs

@item
info/refs
@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-upload-archive,,,Top
@chapheading Name

git-upload-archive — アーカイブを git-archive に送り返す

@noindent

@chapheading Synopsis

@display
git upload-archive <directory>
@end display


@noindent

@chapheading DESCRIPTION

@emph{git archive --remote} によって呼び出され、生成されたアーカイブをGitプロトコルを介して送信します。

このコマンドは通常、エンドユーザーによって直接呼び出されることはありません。 プロトコルのUIは @emph{git archive}
側にあり、プログラムのペアはリモートリポジトリからアーカイブを取得するために使用することを目的としています。

@noindent

@chapheading SECURITY

履歴から削除されたが、まだ剪定(prune)されてない可能性のあるオブジェクトのプライバシーを保護するために、 @samp{git-upload-archive}
は、リポジトリのrefから到達できないコミットおよびツリーのアーカイブの提供を回避します。ただし、オブジェクトの到達可能性の計算には計算コストがかかるため、
@samp{git-upload-archive} は、より厳密でありながらチェックしやすい一連のルールを実装します。

@enumerate 

@item
クライアントは、refが直接指すコミットまたはツリーを要求できます。 例: @samp{git archive --remote=origin v1.0}

@item
クライアントは、 @samp{ref：path} 構文を使用して、コミットまたはツリー内のサブツリーを要求できます。例: @samp{git archive
--remote=origin v1.0:Documentation}

@item
最終結果に到達できる場合でも、クライアントは他のsha1式を使用できません。 たとえば、refから結果に到達できる場合でも、 @samp{master^}
のような相対コミットや @samp{abcd1234} のようなリテラルsha1は許可されません。
@end enumerate

注意:
3番目の規則3は、プライバシーに影響を与えない多くの場合を許可しないことに注意してください。これらのルールはgitの将来のバージョンで変更される可能性があり、
@samp{git archive --remote} によってアクセスされるサーバーは、これらの正確なルールに従う場合と従わない場合があります。

構成オプション @samp{uploadArchive.allowUnreachable}
がtrueの場合、これらの規則は無視され、クライアントは任意のsha1式を使用できます。これは、到達不能なオブジェクトのプライバシーを気にしない場合、またはオブジェクトデータベースが非スマートhttp経由でアクセスできるようにすでに公開されている場合に役立ちます。

@noindent

@chapheading OPTIONS

@table @asis

@item  <directory> 
tarアーカイブを取得するリポジトリ。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-upload-pack,,,Top
@chapheading Name

git-upload-pack — パックされたオブジェクトをgit-fetch-packに送り返す

@noindent

@chapheading Synopsis

@display
git-upload-pack [--[no-]strict] [--timeout=<n>] [--stateless-rpc]
                  [--advertise-refs] <directory>
@end display


@noindent

@chapheading DESCRIPTION

@emph{git fetch-pack} によって呼び出され、通信の反対側で欠落しているオブジェクトを調べ、パッキング後にそれらを送信します。

このコマンドは通常、エンドユーザーによって直接呼び出されることはありません。プロトコルのUIは「git
fetch-pack」側にあり、プログラムのペアはリモートリポジトリから更新をプルするために使用されることを目的としています。プッシュ操作については、「git
send-pack」を参照してください。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--[no-]strict} 
<directory> Gitディレクトリでない場合、 <directory>/.git/ を試さない

@item  @samp{--timeout=<n>} 
非アクティブになった <n> 秒後に転送を中断します。

@item  @samp{--stateless-rpc} 
stdinとstdoutを使用して 読み取り/書き込み
サイクルを1回だけ実行します。これは、プログラムが要求を読み取り、応答を書き込み、終了する必要があるHTTP POST要求処理モデルに適合します。

@item  @samp{--http-backend-info-refs} 
git-http-backend(1) が、 @samp{$GIT_URL/info/refs?service=git-upload-pack}
リクエストを処理するために使用します。 @uref{technical/http-protocol.html,the HTTP transfer  protocols} 文書の「Smart Clients」および @uref{technical/protocol-v2.html,the Git  Wire Protocol@comma{} Version 2} 文書の「HTTP Transport」を参照してください。なお、
git-receive-pack(1) でも同様です。

@item  <directory> 
同期元のリポジトリ。
@end table

@noindent

@chapheading ENVIRONMENT

@table @asis

@item  @samp{GIT_PROTOCOL} 
ワイヤープロトコルをハンドシェイクするために使用される内部変数。サーバー管理者は、この変数を渡すことができるようにいくつかのトランスポートを構成する必要がある場合があります。
git(1) のdiscussionを参照してください。
@end table

@noindent

@chapheading SEE ALSO

gitnamespaces(7)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-var,,,Top
@chapheading Name

git-var — Git論理変数を表示します

@noindent

@chapheading Synopsis

@display
git var ( -l | <variable> )
@end display


@noindent

@chapheading DESCRIPTION

Git論理変数を出力します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-l} 
論理変数をリストします。さらに、Git構成ファイル .git/config のすべての変数も一覧表示されます。
(ただし、構成変数を一覧表示する機能は非推奨になり、 @samp{git config -l} が採用されました。)
@end table

@noindent

@chapheading EXAMPLES

@example
$ git var GIT_AUTHOR_IDENT
Eric W. Biederman <ebiederm@@lnxi.com> 1121223278 -0600
@end example

@noindent

@chapheading VARIABLES

@table @asis

@item  GIT_AUTHOR_IDENT 
コードの作者。

@item  GIT_COMMITTER_IDENT 
コードの一部をGitに入れた人。

@item  GIT_EDITOR 
Gitコマンドで使用するためのテキストエディタ。この値は、使用時にシェルによって解釈されることを意図しています。例: @samp{~/bin/vi} 、
@samp{$SOME_ENVIRONMENT_VARIABLE} 、 @samp{"C:\Program Files\Vim\gvim.exe" --nofork} 。
優先順位は、 @samp{$GIT_EDITOR} 環境変数 、@samp{core.editor} 構成、 @samp{$VISUAL} 、@samp{$EDITOR}
、そしてコンパイル時に選択されるデフォルト(通常は @emph{vi})です。

@item  GIT_PAGER 
Gitコマンドで使用するためのテキストビューア(例: less)。値はシェルによって解釈されることを意図しています。 優先順位は、
@samp{$GIT_PAGER} 環境変数、 @samp{core.pager} 構成、 @samp{$PAGER} 、そしてコンパイル時に選択されるデフォルト(通常は
@emph{less})です。
@end table

@noindent

@chapheading SEE ALSO

git-commit-tree(1) git-tag(1) git-config(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-verify-commit,,,Top
@chapheading Name

git-verify-commit — コミットのGPG署名を確認します。

@noindent

@chapheading Synopsis

@display
git verify-commit <commit>…
@end display


@noindent

@chapheading DESCRIPTION

@emph{git commit -S} によって作成されたGPG署名を検証します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--raw} 
通常の人間が読める形式の出力ではなく、生のgpgステータス出力を、標準エラーに出力します。

@item  @samp{-v} 
@itemx  @samp{--verbose} 
検証する前に、コミットオブジェクトの内容を出力します。

@item  <commit>… 
GitコミットオブジェクトのSHA-1 ID。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-verify-pack,,,Top
@chapheading Name

git-verify-pack — パックされたGitアーカイブファイルを検証する

@noindent

@chapheading Synopsis

@display
git verify-pack [-v|--verbose] [-s|--stat-only] [--] <pack>.idx …
@end display


@noindent

@chapheading DESCRIPTION

@emph{git pack-objects}
コマンドで作成されたパックされたGitアーカイブの指定のidxファイルを読み取り、idxファイルと、対応するパックファイルが正しいことを確認します。

@noindent

@chapheading OPTIONS

@table @asis

@item  <pack>.idx … 
確認するidxファイル(複数ファイル指定可)

@item  @samp{-v} 
@itemx  @samp{--verbose} 
パックを確認した後、パックに含まれるオブジェクトのリストとデルタチェーン長のヒストグラムを表示します。

@item  @samp{-s} 
@itemx  @samp{--stat-only} 
パックの内容を確認せず、デルタチェーン長のヒストグラムのみを表示します。 @samp{--verbose} を使用すると、オブジェクトのリストも表示されます。

@item  -- 
これ以降の引数をオプションとして解釈しないでください。
@end table

@noindent

@chapheading OUTPUT FORMAT

オプション -v を指定する場合、使用される形式は以下のとおりです:

@example
SHA-1 type size size-in-packfile offset-in-packfile
@end example

は、パックで削除されていないオブジェクトの場合です。そして、

@example
SHA-1 type size size-in-packfile offset-in-packfile depth base-SHA-1
@end example

は、削除されたオブジェクトの場合です。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-verify-tag,,,Top
@chapheading Name

git-verify-tag — タグのGPG署名を確認する

@noindent

@chapheading Synopsis

@display
git verify-tag [--format=<format>] <tag>…
@end display


@noindent

@chapheading DESCRIPTION

@emph{git tag} によって作成されたgpg署名を検証します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--raw} 
通常の人間が読める形式の出力の代わりに、生のgpgステータス出力を標準エラーに出力します。

@item  @samp{-v} 
@itemx  @samp{--verbose} 
検証する前に、タグオブジェクトの内容を出力します。

@item  <tag>… 
GitタグオブジェクトのSHA-1 ID。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-version,,,Top
@chapheading Name

git-version — Gitに関するバージョン情報を表示する

@noindent

@chapheading Synopsis

@display
git version [--build-options]
@end display


@noindent

@chapheading DESCRIPTION

オプションが指定されていない場合、 @emph{git} のバージョンが標準出力に出力されます。

@samp{git --version} は @samp{git version} と同じであることに注意してください。これは、前者が内部で後者に変換されるためです。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--build-options} 
診断目的でgitがどのように構築されたかに関する追加情報を含めます。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-web--browse,,,Top
@chapheading Name

git-web--browse — Git helper script to launch a web browser

@noindent

@chapheading Synopsis

@display
git web--browse [<options>] <url|file>…
@end display


@noindent

@chapheading DESCRIPTION

This script tries, as much as possible, to display the URLs and FILEs that
are passed as arguments, as HTML pages in new tabs on an already opened web
browser.

The following browsers (or commands) are currently supported:

@itemize 

@item
firefox (this is the default under X Window when not using KDE)

@item
iceweasel

@item
seamonkey

@item
iceape

@item
chromium (also supported as chromium-browser)

@item
google-chrome (also supported as chrome)

@item
konqueror (this is the default under KDE, see @emph{Note about konqueror} below)

@item
opera

@item
w3m (this is the default outside graphical environments)

@item
elinks

@item
links

@item
lynx

@item
dillo

@item
open (this is the default under Mac OS X GUI)

@item
start (this is the default under MinGW)

@item
cygstart (this is the default under Cygwin)

@item
xdg-open
@end itemize

Custom commands may also be specified.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-b <browser>} 
@itemx  @samp{--browser=<browser>} 
Use the specified browser. It must be in the list of supported browsers.

@item  @samp{-t <browser>} 
@itemx  @samp{--tool=<browser>} 
Same as above.

@item  @samp{-c <conf.var>} 
@itemx  @samp{--config=<conf.var>} 
CONF.VAR is looked up in the Git config files. If it’s set, then its value
specifies the browser that should be used.
@end table

@noindent

@chapheading CONFIGURATION VARIABLES

@noindent

@heading CONF.VAR (from -c option) and web.browser

The web browser can be specified using a configuration variable passed with
the -c (or --config) command-line option, or the @samp{web.browser} configuration
variable if the former is not used.

@noindent

@heading browser.<tool>.path

You can explicitly provide a full path to your preferred browser by setting
the configuration variable @samp{browser.<tool>.path}. For example, you can
configure the absolute path to firefox by setting
@emph{browser.firefox.path}. Otherwise, @emph{git web--browse} assumes the tool
is available in PATH.

@noindent

@heading browser.<tool>.cmd

When the browser, specified by options or configuration variables, is not
among the supported ones, then the corresponding @samp{browser.<tool>.cmd}
configuration variable will be looked up. If this variable exists then @emph{git
web--browse} will treat the specified tool as a custom command and will
use a shell eval to run the command with the URLs passed as arguments.

@noindent

@chapheading NOTE ABOUT KONQUEROR

When @emph{konqueror} is specified by a command-line option or a configuration
variable, we launch @emph{kfmclient} to try to open the HTML man page on an
already opened konqueror in a new tab if possible.

For consistency, we also try such a trick if @emph{browser.konqueror.path} is set
to something like @samp{A_PATH_TO/konqueror}. That means we will try to launch
@samp{A_PATH_TO/kfmclient} instead.

If you really want to use @emph{konqueror}, then you can use something like the
following:

@example
        [web]
                browser = konq

        [browser "konq"]
                cmd = A_PATH_TO/konqueror
@end example


@noindent

@heading Note about git-config --global

Note that these configuration variables should probably be set using the
@samp{--global} flag, for example like this:

@example
$ git config --global web.browser firefox
@end example


as they are probably more user specific than repository specific.  See
git-config(1) for more information about this.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-whatchanged,,,Top
@chapheading Name

git-whatchanged — 各コミットでの差分のログを表示

@noindent

@chapheading Synopsis

@display
git whatchanged <option>…
@end display


@noindent

@chapheading DESCRIPTION

各コミットのコミットログとdiff出力を表示します。

新規ユーザーは、これの代わりに git-log(1) を使用することをお勧めします。 @samp{whatchanged} コマンドは基本的に
git-log(1) と同じですが、デフォルトでは生の形式の差分出力を表示し、マージをスキップします。

このコマンドは主に歴史的な理由で保持されています。@samp{git log} が発明されるずっと前に Linux kernel mailing list
を読んで Gitを学んだ多くの人々の指は、このコマンドをタイプするよう訓練されています。

@noindent

@chapheading Examples

@table @asis

@item  @samp{git whatchanged -p v2.6.12.. include/scsi drivers/scsi} 
include/scsi または drivers/scsi サブディレクトリ内のファイルを変更したバージョン @emph{v2.6.12}
以降のコミットをパッチとして表示する

@item  @samp{git whatchanged --since="2 weeks ago" -- gitk} 
過去2週間の変更をファイル @emph{gitk} に表示します。 "--" は、「ブランチ名 @emph{gitk} 」との混同を避けるために必要です。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-worktree,,,Top
@chapheading Name

git-worktree — Manage multiple working trees

@noindent

@chapheading Synopsis

@display
git worktree add [-f] [--detach] [--checkout] [--lock [--reason <string>]] [-b <new-branch>] <path> [<commit-ish>]
git worktree list [--porcelain]
git worktree lock [--reason <string>] <worktree>
git worktree move <worktree> <new-path>
git worktree prune [-n] [-v] [--expire <expire>]
git worktree remove [-f] <worktree>
git worktree repair [<path>…]
git worktree unlock <worktree>
@end display


@noindent

@chapheading DESCRIPTION

Manage multiple working trees attached to the same repository.

A git repository can support multiple working trees, allowing you to check
out more than one branch at a time.  With @samp{git worktree add} a new working
tree is associated with the repository.  This new working tree is called a
"linked working tree" as opposed to the "main working tree" prepared by
git-init(1) or git-clone(1).  A repository has one main
working tree (if it’s not a bare repository) and zero or more linked working
trees. When you are done with a linked working tree, remove it with @samp{git
worktree remove}.

In its simplest form, @samp{git worktree add <path>} automatically creates a new
branch whose name is the final component of @samp{<path>}, which is convenient if
you plan to work on a new topic. For instance, @samp{git worktree add ../hotfix}
creates new branch @samp{hotfix} and checks it out at path @samp{../hotfix}. To
instead work on an existing branch in a new working tree, use @samp{git worktree
add <path> <branch>}. On the other hand, if you just plan to make some
experimental changes or do testing without disturbing existing development,
it is often convenient to create a @emph{throwaway} working tree not associated
with any branch. For instance, @samp{git worktree add -d <path>} creates a new
working tree with a detached @samp{HEAD} at the same commit as the current
branch.

If a working tree is deleted without using @samp{git worktree remove}, then its
associated administrative files, which reside in the repository (see
"DETAILS" below), will eventually be removed automatically (see
@samp{gc.worktreePruneExpire} in git-config(1)), or you can run @samp{git
worktree prune} in the main or any linked working tree to clean up any stale
administrative files.

If a linked working tree is stored on a portable device or network share
which is not always mounted, you can prevent its administrative files from
being pruned by issuing the @samp{git worktree lock} command, optionally
specifying @samp{--reason} to explain why the working tree is locked.

@noindent

@chapheading COMMANDS

@table @asis

@item  add <path> [<commit-ish>] 
Create @samp{<path>} and checkout @samp{<commit-ish>} into it. The new working
directory is linked to the current repository, sharing everything except
working directory specific files such as @samp{HEAD}, @samp{index}, etc. As a
convenience, @samp{<commit-ish>} may be a bare "@samp{-}", which is synonymous with
@samp{@@@{-1@}}.

If @samp{<commit-ish>} is a branch name (call it @samp{<branch>}) and is not found,
and neither @samp{-b} nor @samp{-B} nor @samp{--detach} are used, but there does exist a
tracking branch in exactly one remote (call it @samp{<remote>})  with a matching
name, treat as equivalent to:

@example
$ git worktree add --track -b <branch> <path> <remote>/<branch>
@end example


If the branch exists in multiple remotes and one of them is named by the
@samp{checkout.defaultRemote} configuration variable, we’ll use that one for the
purposes of disambiguation, even if the @samp{<branch>} isn’t unique across all
remotes. Set it to e.g. @samp{checkout.defaultRemote=origin} to always checkout
remote branches from there if @samp{<branch>} is ambiguous but exists on the
@samp{origin} remote. See also @samp{checkout.defaultRemote} in git-config(1).

If @samp{<commit-ish>} is omitted and neither @samp{-b} nor @samp{-B} nor @samp{--detach} used,
then, as a convenience, the new working tree is associated with a branch
(call it @samp{<branch>}) named after @samp{$(basename <path>)}.  If @samp{<branch>}
doesn’t exist, a new branch based on @samp{HEAD} is automatically created as if
@samp{-b <branch>} was given.  If @samp{<branch>} does exist, it will be checked out
in the new working tree, if it’s not checked out anywhere else, otherwise
the command will refuse to create the working tree (unless @samp{--force} is
used).

@item  list 
List details of each working tree.  The main working tree is listed first,
followed by each of the linked working trees.  The output details include
whether the working tree is bare, the revision currently checked out, the
branch currently checked out (or "detached HEAD" if none), "locked" if the
worktree is locked, "prunable" if the worktree can be pruned by @samp{prune}
command.

@item  lock 
If a working tree is on a portable device or network share which is not
always mounted, lock it to prevent its administrative files from being
pruned automatically. This also prevents it from being moved or
deleted. Optionally, specify a reason for the lock with @samp{--reason}.

@item  move 
Move a working tree to a new location. Note that the main working tree or
linked working trees containing submodules cannot be moved with this
command. (The @samp{git worktree repair} command, however, can reestablish the
connection with linked working trees if you move the main working tree
manually.)

@item  prune 
Prune working tree information in @samp{$GIT_DIR/worktrees}.

@item  remove 
Remove a working tree. Only clean working trees (no untracked files and no
modification in tracked files) can be removed. Unclean working trees or ones
with submodules can be removed with @samp{--force}. The main working tree cannot
be removed.

@item  repair [<path>…] 
Repair working tree administrative files, if possible, if they have become
corrupted or outdated due to external factors.

For instance, if the main working tree (or bare repository) is moved, linked
working trees will be unable to locate it. Running @samp{repair} in the main
working tree will reestablish the connection from linked working trees back
to the main working tree.

Similarly, if a linked working tree is moved without using @samp{git worktree
move}, the main working tree (or bare repository) will be unable to locate
it. Running @samp{repair} within the recently-moved working tree will reestablish
the connection. If multiple linked working trees are moved, running @samp{repair}
from any working tree with each tree’s new @samp{<path>} as an argument, will
reestablish the connection to all the specified paths.

If both the main working tree and linked working trees have been moved
manually, then running @samp{repair} in the main working tree and specifying the
new @samp{<path>} of each linked working tree will reestablish all connections in
both directions.

@item  unlock 
Unlock a working tree, allowing it to be pruned, moved or deleted.
@end table

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-f} 
@itemx  @samp{--force} 
By default, @samp{add} refuses to create a new working tree when @samp{<commit-ish>}
is a branch name and is already checked out by another working tree, or if
@samp{<path>} is already assigned to some working tree but is missing (for
instance, if @samp{<path>} was deleted manually). This option overrides these
safeguards. To add a missing but locked working tree path, specify @samp{--force}
twice.

@samp{move} refuses to move a locked working tree unless @samp{--force} is specified
twice. If the destination is already assigned to some other working tree but
is missing (for instance, if @samp{<new-path>} was deleted manually), then
@samp{--force} allows the move to proceed; use @samp{--force} twice if the destination
is locked.

@samp{remove} refuses to remove an unclean working tree unless @samp{--force} is
used.  To remove a locked working tree, specify @samp{--force} twice.

@item  @samp{-b <new-branch>} 
@itemx  @samp{-B <new-branch>} 
With @samp{add}, create a new branch named @samp{<new-branch>} starting at
@samp{<commit-ish>}, and check out @samp{<new-branch>} into the new working tree.  If
@samp{<commit-ish>} is omitted, it defaults to @samp{HEAD}.  By default, @samp{-b} refuses
to create a new branch if it already exists. @samp{-B} overrides this safeguard,
resetting @samp{<new-branch>} to @samp{<commit-ish>}.

@item  @samp{-d} 
@itemx  @samp{--detach} 
With @samp{add}, detach @samp{HEAD} in the new working tree. See "DETACHED HEAD" in
git-checkout(1).

@item  @samp{--[no-]checkout} 
By default, @samp{add} checks out @samp{<commit-ish>}, however, @samp{--no-checkout} can be
used to suppress checkout in order to make customizations, such as
configuring sparse-checkout. See "Sparse checkout" in
git-read-tree(1).

@item  @samp{--[no-]guess-remote} 
With @samp{worktree add <path>}, without @samp{<commit-ish>}, instead of creating a
new branch from @samp{HEAD}, if there exists a tracking branch in exactly one
remote matching the basename of @samp{<path>}, base the new branch on the
remote-tracking branch, and mark the remote-tracking branch as "upstream"
from the new branch.

This can also be set up as the default behaviour by using the
@samp{worktree.guessRemote} config option.

@item  @samp{--[no-]track} 
When creating a new branch, if @samp{<commit-ish>} is a branch, mark it as
"upstream" from the new branch.  This is the default if @samp{<commit-ish>} is a
remote-tracking branch.  See @samp{--track} in git-branch(1) for details.

@item  @samp{--lock} 
Keep the working tree locked after creation. This is the equivalent of @samp{git
worktree lock} after @samp{git worktree add}, but without a race condition.

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
With @samp{prune}, do not remove anything; just report what it would remove.

@item  @samp{--porcelain} 
With @samp{list}, output in an easy-to-parse format for scripts.  This format
will remain stable across Git versions and regardless of user
configuration.  See below for details.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
With @samp{add}, suppress feedback messages.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
With @samp{prune}, report all removals.

With @samp{list}, output additional information about worktrees (see below).

@item  @samp{--expire <time>} 
With @samp{prune}, only expire unused working trees older than @samp{<time>}.

With @samp{list}, annotate missing working trees as prunable if they are older
than @samp{<time>}.

@item  @samp{--reason <string>} 
With @samp{lock} or with @samp{add --lock}, an explanation why the working tree is
locked.

@item  <worktree> 
Working trees can be identified by path, either relative or absolute.

If the last path components in the working tree’s path is unique among
working trees, it can be used to identify a working tree. For example if you
only have two working trees, at @samp{/abc/def/ghi} and @samp{/abc/def/ggg}, then
@samp{ghi} or @samp{def/ghi} is enough to point to the former working tree.
@end table

@noindent

@chapheading REFS

In multiple working trees, some refs may be shared between all working trees
and some refs are local. One example is @samp{HEAD} which is different for each
working tree. This section is about the sharing rules and how to access refs
of one working tree from another.

In general, all pseudo refs are per working tree and all refs starting with
@samp{refs/} are shared. Pseudo refs are ones like @samp{HEAD} which are directly
under @samp{$GIT_DIR} instead of inside @samp{$GIT_DIR/refs}. There are exceptions,
however: refs inside @samp{refs/bisect} and @samp{refs/worktree} are not shared.

Refs that are per working tree can still be accessed from another working
tree via two special paths, @samp{main-worktree} and @samp{worktrees}. The former
gives access to per-working tree refs of the main working tree, while the
latter to all linked working trees.

For example, @samp{main-worktree/HEAD} or @samp{main-worktree/refs/bisect/good}
resolve to the same value as the main working tree’s @samp{HEAD} and
@samp{refs/bisect/good} respectively. Similarly, @samp{worktrees/foo/HEAD} or
@samp{worktrees/bar/refs/bisect/bad} are the same as
@samp{$GIT_COMMON_DIR/worktrees/foo/HEAD} and
@samp{$GIT_COMMON_DIR/worktrees/bar/refs/bisect/bad}.

To access refs, it’s best not to look inside @samp{$GIT_DIR} directly. Instead
use commands such as git-rev-parse(1) or git-update-ref(1)
which will handle refs correctly.

@noindent

@chapheading CONFIGURATION FILE

By default, the repository @samp{config} file is shared across all working
trees. If the config variables @samp{core.bare} or @samp{core.worktree} are already
present in the config file, they will be applied to the main working trees
only.

In order to have configuration specific to working trees, you can turn on
the @samp{worktreeConfig} extension, e.g.:

@example
$ git config extensions.worktreeConfig true
@end example


In this mode, specific configuration stays in the path pointed by @samp{git
rev-parse --git-path config.worktree}. You can add or update configuration
in this file with @samp{git config --worktree}. Older Git versions will refuse to
access repositories with this extension.

Note that in this file, the exception for @samp{core.bare} and @samp{core.worktree} is
gone. If they exist in @samp{$GIT_DIR/config}, you must move them to the
@samp{config.worktree} of the main working tree. You may also take this
opportunity to review and move other configuration that you do not want to
share to all working trees:

@itemize 

@item
@samp{core.worktree} and @samp{core.bare} should never be shared

@item
@samp{core.sparseCheckout} is recommended per working tree, unless you are sure
you always use sparse checkout for all working trees.
@end itemize

@noindent

@chapheading DETAILS

Each linked working tree has a private sub-directory in the repository’s
@samp{$GIT_DIR/worktrees} directory.  The private sub-directory’s name is usually
the base name of the linked working tree’s path, possibly appended with a
number to make it unique.  For example, when @samp{$GIT_DIR=/path/main/.git} the
command @samp{git worktree add /path/other/test-next next} creates the linked
working tree in @samp{/path/other/test-next} and also creates a
@samp{$GIT_DIR/worktrees/test-next} directory (or @samp{$GIT_DIR/worktrees/test-next1}
if @samp{test-next} is already taken).

Within a linked working tree, @samp{$GIT_DIR} is set to point to this private
directory (e.g. @samp{/path/main/.git/worktrees/test-next} in the example) and
@samp{$GIT_COMMON_DIR} is set to point back to the main working tree’s @samp{$GIT_DIR}
(e.g. @samp{/path/main/.git}). These settings are made in a @samp{.git} file located
at the top directory of the linked working tree.

Path resolution via @samp{git rev-parse --git-path} uses either @samp{$GIT_DIR} or
@samp{$GIT_COMMON_DIR} depending on the path. For example, in the linked working
tree @samp{git rev-parse --git-path HEAD} returns
@samp{/path/main/.git/worktrees/test-next/HEAD} (not
@samp{/path/other/test-next/.git/HEAD} or @samp{/path/main/.git/HEAD}) while @samp{git
rev-parse --git-path refs/heads/master} uses @samp{$GIT_COMMON_DIR} and returns
@samp{/path/main/.git/refs/heads/master}, since refs are shared across all
working trees, except @samp{refs/bisect} and @samp{refs/worktree}.

See gitrepository-layout(5) for more information. The rule of thumb
is do not make any assumption about whether a path belongs to @samp{$GIT_DIR} or
@samp{$GIT_COMMON_DIR} when you need to directly access something inside
@samp{$GIT_DIR}. Use @samp{git rev-parse --git-path} to get the final path.

If you manually move a linked working tree, you need to update the @samp{gitdir}
file in the entry’s directory. For example, if a linked working tree is
moved to @samp{/newpath/test-next} and its @samp{.git} file points to
@samp{/path/main/.git/worktrees/test-next}, then update
@samp{/path/main/.git/worktrees/test-next/gitdir} to reference
@samp{/newpath/test-next} instead. Better yet, run @samp{git worktree repair} to
reestablish the connection automatically.

To prevent a @samp{$GIT_DIR/worktrees} entry from being pruned (which can be
useful in some situations, such as when the entry’s working tree is stored
on a portable device), use the @samp{git worktree lock} command, which adds a
file named @samp{locked} to the entry’s directory. The file contains the reason
in plain text. For example, if a linked working tree’s @samp{.git} file points to
@samp{/path/main/.git/worktrees/test-next} then a file named
@samp{/path/main/.git/worktrees/test-next/locked} will prevent the @samp{test-next}
entry from being pruned.  See gitrepository-layout(5) for details.

When @samp{extensions.worktreeConfig} is enabled, the config file
@samp{.git/worktrees/<id>/config.worktree} is read after @samp{.git/config} is.

@noindent

@chapheading LIST OUTPUT FORMAT

The @samp{worktree list} command has two output formats. The default format shows
the details on a single line with columns.  For example:

@example
$ git worktree list
/path/to/bare-source            (bare)
/path/to/linked-worktree        abcd1234 [master]
/path/to/other-linked-worktree  1234abc  (detached HEAD)
@end example


The command also shows annotations for each working tree, according to its
state.  These annotations are:

@itemize 

@item
@samp{locked}, if the working tree is locked.

@item
@samp{prunable}, if the working tree can be pruned via @samp{git worktree prune}.
@end itemize

@example
$ git worktree list
/path/to/linked-worktree    abcd1234 [master]
/path/to/locked-worktree    acbd5678 (brancha) locked
/path/to/prunable-worktree  5678abc  (detached HEAD) prunable
@end example


For these annotations, a reason might also be available and this can be seen
using the verbose mode. The annotation is then moved to the next line
indented followed by the additional information.

@example
$ git worktree list --verbose
/path/to/linked-worktree              abcd1234 [master]
/path/to/locked-worktree-no-reason    abcd5678 (detached HEAD) locked
/path/to/locked-worktree-with-reason  1234abcd (brancha)
        locked: working tree path is mounted on a portable device
/path/to/prunable-worktree            5678abc1 (detached HEAD)
        prunable: gitdir file points to non-existent location
@end example


Note that the annotation is moved to the next line if the additional
information is available, otherwise it stays on the same line as the working
tree itself.

@noindent

@heading Porcelain Format

The porcelain format has a line per attribute.  Attributes are listed with a
label and value separated by a single space.  Boolean attributes (like
@samp{bare} and @samp{detached}) are listed as a label only, and are present only if
the value is true.  Some attributes (like @samp{locked}) can be listed as a label
only or with a value depending upon whether a reason is available.  The
first attribute of a working tree is always @samp{worktree}, an empty line
indicates the end of the record.  For example:

@example
$ git worktree list --porcelain
worktree /path/to/bare-source
bare

worktree /path/to/linked-worktree
HEAD abcd1234abcd1234abcd1234abcd1234abcd1234
branch refs/heads/master

worktree /path/to/other-linked-worktree
HEAD 1234abc1234abc1234abc1234abc1234abc1234a
detached

worktree /path/to/linked-worktree-locked-no-reason
HEAD 5678abc5678abc5678abc5678abc5678abc5678c
branch refs/heads/locked-no-reason
locked

worktree /path/to/linked-worktree-locked-with-reason
HEAD 3456def3456def3456def3456def3456def3456b
branch refs/heads/locked-with-reason
locked reason why is locked

worktree /path/to/linked-worktree-prunable
HEAD 1233def1234def1234def1234def1234def1234b
detached
prunable gitdir file points to non-existent location
@end example


If the lock reason contains "unusual" characters such as newline, they are
escaped and the entire reason is quoted as explained for the configuration
variable @samp{core.quotePath} (see git-config(1)).  For Example:

@example
$ git worktree list --porcelain
...
locked "reason\nwhy is locked"
...
@end example


@noindent

@chapheading EXAMPLES

You are in the middle of a refactoring session and your boss comes in and
demands that you fix something immediately. You might typically use
git-stash(1) to store your changes away temporarily, however, your
working tree is in such a state of disarray (with new, moved, and removed
files, and other bits and pieces strewn around) that you don’t want to risk
disturbing any of it. Instead, you create a temporary linked working tree to
make the emergency fix, remove it when done, and then resume your earlier
refactoring session.

@example
$ git worktree add -b emergency-fix ../temp master
$ pushd ../temp
# ... hack hack hack ...
$ git commit -a -m 'emergency fix for boss'
$ popd
$ git worktree remove ../temp
@end example


@noindent

@chapheading BUGS

Multiple checkout in general is still experimental, and the support for
submodules is incomplete. It is NOT recommended to make multiple checkouts
of a superproject.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-write-tree,,,Top
@chapheading Name

git-write-tree — 現在のインデックスからツリーオブジェクトを作成します

@noindent

@chapheading Synopsis

@display
git write-tree [--missing-ok] [--prefix=<prefix>/]
@end display


@noindent

@chapheading DESCRIPTION

現在のインデックスを使用してツリーオブジェクトを作成します。新しいツリーオブジェクトの名前が標準出力に出力されます。

インデックスは完全にマージされた状態である必要があります。

概念的には、 @emph{git write-tree} は、現在のインデックスの内容をツリーファイルのセットに sync()
します。現在ディレクトリに実際にあるものと一致させるには、 @emph{git write-tree} を実行する前に @emph{git update-index}
フェイズを実行する必要があります。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--missing-ok} 
通常、 @emph{git write-tree}
は、ディレクトリによって参照されるオブジェクトがオブジェクトデータベースに存在することを保証します。このオプションは、このチェックを無効にします。

@item  @samp{--prefix=<prefix>/} 
サブディレクトリ @samp{<prefix>}
を表すツリーオブジェクトを書き込みます。これは、指定されたサブディレクトリにあるサブプロジェクトのツリーオブジェクトを書き込むために使用できます。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git,,,Top
@chapheading Name

git — くだらないコンテンツトラッカー

@noindent

@chapheading Synopsis

@display
git [--version] [--help] [-C <path>] [-c <name>=<value>]
    [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
    [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]
    [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
    [--super-prefix=<path>] [--config-env=<name>=<envvar>]
    <command> [<args>]
@end display


@noindent

@chapheading DESCRIPTION

Gitは、高速でスケーラブルな分散型リビジョン管理システムであり、高レベルの操作と内部へのフルアクセスの両方を提供する非常に豊富なコマンドセットを備えています。

始めは gittutorial(7) を参照してください。次に、便利な最小限のコマンドセットについては
giteveryday(7) を参照してください。 @uref{user-manual.html,Git User’s Manual}
には、より詳細な紹介があります。

あなたが基本的な概念をマスターしたら、このページに戻ってGitが提供するコマンドを学ぶことができます。「git help
command」を使用して、個々のGitコマンドについて詳しく知ることができます。 gitcli(7)
のマニュアルページには、コマンドラインコマンド構文の概要が記載されています。

最新のGitドキュメントの、フォーマットされ、ハイパーリンクされたコピーは、
@uref{https://git.github.io/htmldocs/git.html,https://git.github.io/htmldocs/git.html} または @uref{https://git-scm.com/docs,https://git-scm.com/docs}
で表示できます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--version} 
@emph{git} プログラムの元となったGitスイートのバージョンを出力します。

このオプションは内部で @samp{git version ...} に変換されるので、 git-version(1)
コマンドと同じオプションを受け入れます。 @samp{--help} も指定されている場合は @samp{--version} よりも優先されます。

@item  @samp{--help} 
概要と、最も一般的に使用されるコマンドのリストを出力します。 オプション @samp{--all} または @samp{-a}
を指定すると、使用可能なすべてのコマンドが出力されます。Gitコマンドが明示された場合、このオプションはそのコマンドのマニュアルページを表示します。

マニュアルページの表示方法を制御するために、他のオプションを使用できます。@samp{git --help ...} は内部で @samp{git help ...}
に変換されるため、詳細については git-help(1) を参照してください。

@item  @samp{-C <path>} 
現在の作業ディレクトリではなく、「<path>」でgitが開始されたかのように実行します。 複数の @samp{-C}
オプションが指定されている場合、後続の「非絶対 @samp{-C <path> ` 」は、それぞれ先行する `-C <path>} に関連して解釈されます。
'<path>'は存在するが空の場合(例: @samp{-C" "})の場合、現在の作業ディレクトリは変更されません。

このオプションは、パス名の解釈が @samp{-C} オプションによって引き起こされる作業ディレクトリに対して行われるという点で、 @samp{--git-dir} や
@samp{--work-tree} のようなパス名を期待するオプションに影響します。たとえば、以下の2つの呼び出しは同等です:

@example
git --git-dir=a.git --work-tree=b -C c status
git --git-dir=c/a.git --work-tree=c/b status
@end example

@item  @samp{-c <name>=<value>} 
構成パラメーターをコマンドに渡します。指定された値は、構成ファイルの値を上書きします。 <name>は、「git
config」(ドットで区切られたサブキー)でリストされているものと同じ形式である必要があります。

@samp{git -c foo.bar ...} で @samp{=} を省略することは許可されており、その場合 @samp{foo.bar} を(設定ファイルの
@samp{[foo]bar} と同様に)ブール値のtrueに設定することに注意してください。等号と空の値(@samp{git -c foo.bar= ...}
など)を含むと、 @samp{foo.bar} が空の文字列に設定されます。 @samp{git config --type=bool} ではこれを @samp{false}
に変換します。

@item  @samp{--config-env=<name>=<envvar>} 
Like @samp{-c <name>=<value>}, give configuration variable @emph{<name>} a value,
where <envvar> is the name of an environment variable from which to retrieve
the value. Unlike @samp{-c} there is no shortcut for directly setting the value
to an empty string, instead the environment variable itself must be set to
the empty string.  It is an error if the @samp{<envvar>} does not exist in the
environment. @samp{<envvar>} may not contain an equals sign to avoid ambiguity
with @samp{<name>} containing one.

This is useful for cases where you want to pass transitory configuration
options to git, but are doing so on OS’s where other processes might be able
to read your cmdline (e.g. @samp{/proc/self/cmdline}), but not your environ
(e.g. @samp{/proc/self/environ}). That behavior is the default on Linux, but may
not be on your system.

Note that this might add security for variables such as @samp{http.extraHeader}
where the sensitive information is part of the value, but not
e.g. @samp{url.<base>.insteadOf} where the sensitive information can be part of
the key.

@item  @samp{--exec-path[=<path>]} 
Path to wherever your core Git programs are installed.  This can also be
controlled by setting the GIT_EXEC_PATH environment variable. If no path is
given, @emph{git} will print the current setting and then exit.

@item  @samp{--html-path} 
GitのHTMLドキュメントがインストールされているパスを末尾のスラッシュなしで印刷し、終了します。

@item  @samp{--man-path} 
このバージョンのGitのマニュアルページのmanpath(@samp{man(1)} 参照)を印刷して終了します。

@item  @samp{--info-path} 
このバージョンのGitを文書化したInfoファイルがインストールされているパスを印刷して終了します。

@item  @samp{-p} 
@itemx  @samp{--paginate} 
Pipe all output into @emph{less} (or if set, $PAGER) if standard output is a
terminal.  This overrides the @samp{pager.<cmd>} configuration options (see the
"Configuration Mechanism" section below).

@item  @samp{-P} 
@itemx  @samp{--no-pager} 
Git出力をページャーにパイプしないでください。

@item  @samp{--git-dir=<path>} 
Set the path to the repository (".git" directory). This can also be
controlled by setting the @samp{GIT_DIR} environment variable. It can be an
absolute path or relative path to current working directory.

Specifying the location of the ".git" directory using this option (or
@samp{GIT_DIR} environment variable) turns off the repository discovery that
tries to find a directory with ".git" subdirectory (which is how the
repository and the top-level of the working tree are discovered), and tells
Git that you are at the top level of the working tree.  If you are not at
the top-level directory of the working tree, you should tell Git where the
top-level of the working tree is, with the @samp{--work-tree=<path>} option (or
@samp{GIT_WORK_TREE} environment variable)

@samp{<path>} で開始されたかのようにgitを実行したい場合は、 @samp{git -C <path>} を使用します。

@item  @samp{--work-tree=<path>} 
Set the path to the working tree. It can be an absolute path or a path
relative to the current working directory.  This can also be controlled by
setting the GIT_WORK_TREE environment variable and the core.worktree
configuration variable (see core.worktree in git-config(1) for a
more detailed discussion).

@item  @samp{--namespace=<path>} 
Git名前空間を設定します。詳細については linkgit: gitnamespaces[7] を参照してください。 @samp{GIT_NAMESPACE}
環境変数を設定するのと同じです。

@item  @samp{--super-prefix=<path>} 
Currently for internal use only.  Set a prefix which gives a path from above
a repository down to its root.  One use is to give submodules context about
the superproject that invoked it.

@item  @samp{--bare} 
リポジトリをベアリポジトリとして扱います。GIT_DIR環境が設定されていない場合は、現在の作業ディレクトリに設定されます。

@item  @samp{--no-replace-objects} 
Gitオブジェクトを置き換えるための置換refを使用しません。 詳細については git-replace(1) を参照してください。

@item  @samp{--literal-pathspecs} 
Treat pathspecs literally (i.e. no globbing, no pathspec magic).  This is
equivalent to setting the @samp{GIT_LITERAL_PATHSPECS} environment variable to
@samp{1}.

@item  @samp{--glob-pathspecs} 
Add "glob" magic to all pathspec. This is equivalent to setting the
@samp{GIT_GLOB_PATHSPECS} environment variable to @samp{1}. Disabling globbing on
individual pathspecs can be done using pathspec magic ":(literal)"

@item  @samp{--noglob-pathspecs} 
Add "literal" magic to all pathspec. This is equivalent to setting the
@samp{GIT_NOGLOB_PATHSPECS} environment variable to @samp{1}. Enabling globbing on
individual pathspecs can be done using pathspec magic ":(glob)"

@item  @samp{--icase-pathspecs} 
Add "icase" magic to all pathspec. This is equivalent to setting the
@samp{GIT_ICASE_PATHSPECS} environment variable to @samp{1}.

@item  @samp{--no-optional-locks} 
Do not perform optional operations that require locks. This is equivalent to
setting the @samp{GIT_OPTIONAL_LOCKS} to @samp{0}.

@item  @samp{--list-cmds=group[,group...]} 
List commands by group. This is an internal/experimental option and may
change or be removed in the future. Supported groups are: builtins, parseopt
(builtin commands that use parse-options), main (all commands in libexec
directory), others (all other commands in @samp{$PATH} that have git- prefix),
list-<category> (see categories in command-list.txt), nohelpers (exclude
helper commands), alias and config (retrieve command list from config
variable completion.commands)
@end table

@noindent

@chapheading GIT COMMANDS

私達はGitを、高レベル(porcelain;磁器)コマンドと低レベル(plumbing;配管)コマンドに分けています。

@noindent

@chapheading High-level commands (porcelain)

磁器コマンドは、メインコマンド群といくつかの補助ユーティリティに分けられます。

@noindent

@heading Main porcelain commands

@table @asis

@item  git-add(1) 
Add file contents to the index.

@item  git-am(1) 
Apply a series of patches from a mailbox.

@item  git-archive(1) 
Create an archive of files from a named tree.

@item  git-bisect(1) 
Use binary search to find the commit that introduced a bug.

@item  git-branch(1) 
List, create, or delete branches.

@item  git-bundle(1) 
Move objects and refs by archive.

@item  git-checkout(1) 
ブランチの切り替え、または作業ツリーファイルの復元を行います。.

@item  git-cherry-pick(1) 
Apply the changes introduced by some existing commits.

@item  git-citool(1) 
git-commitのグラフィカルな代替手段.

@item  git-clean(1) 
作業ツリーから追跡されていないファイルを削除する.

@item  git-clone(1) 
Clone a repository into a new directory.

@item  git-commit(1) 
Record changes to the repository.

@item  git-describe(1) 
Give an object a human readable name based on an available.

@item  git-diff(1) 
Show changes between commits, commit and working tree, etc.

@item  git-fetch(1) 
Download objects and refs from another repository.

@item  git-format-patch(1) 
Prepare patches for e-mail submission.

@item  git-gc(1) 
不要なファイルをクリーンアップし、ローカルリポジトリを最適化する.

@item  git-grep(1) 
Print lines matching a pattern.

@item  git-gui(1) 
Gitのための移植性の高いGUI.

@item  git-init(1) 
Create an empty Git repository or reinitialize an existing one.

@item  git-log(1) 
コミットのログを表示.

@item  git-maintenance(1) 
Run tasks to optimize Git repository data.

@item  git-merge(1) 
Join two or more development histories together.

@item  git-mv(1) 
ファイルまたはディレクトリまたはシンボリックリンクを移動(move)または名前変更(rename)します.

@item  git-notes(1) 
Add or inspect object notes.

@item  git-pull(1) 
Fetch from and integrate with another repository or a local.

@item  git-push(1) 
Update remote refs along with associated objects.

@item  git-range-diff(1) 
Compare two commit ranges (e.g. two versions of a branch).

@item  git-rebase(1) 
Reapply commits on top of another base tip.

@item  git-reset(1) 
Reset current HEAD to the specified state.

@item  git-restore(1) 
作業ツリーファイルを復元します.

@item  git-revert(1) 
Revert some existing commits.

@item  git-rm(1) 
Remove files from the working tree and from the index.

@item  git-shortlog(1) 
Summarize @emph{git log} output.

@item  git-show(1) 
git-show-さまざまなタイプのオブジェクトを表示.

@item  git-sparse-checkout(1) 
Initialize and modify the sparse-checkout.

@item  git-stash(1) 
Stash the changes in a dirty working directory away.

@item  git-status(1) 
Show the working tree status.

@item  git-submodule(1) 
サブモジュールを初期化、更新、または検査します.

@item  git-switch(1) 
ブランチを切り替える.

@item  git-tag(1) 
Create, list, delete or verify a tag object signed with GPG.

@item  git-worktree(1) 
Manage multiple working trees.

@item  gitk(1) 
The Git repository browser.
@end table

@noindent

@heading Ancillary Commands

操作コマンド:

@table @asis

@item  git-config(1) 
リポジトリオプションまたはグローバルオプションを、取得および設定する.

@item  git-fast-export(1) 
Git data exporter.

@item  git-fast-import(1) 
Backend for fast Git data importers.

@item  git-filter-branch(1) 
Rewrite branches.

@item  git-mergetool(1) 
Run merge conflict resolution tools to resolve merge.

@item  git-pack-refs(1) 
効率的なリポジトリアクセスのためにヘッド(heads)とタグ(tags)をパックします.

@item  git-prune(1) 
オブジェクトデータベースで、到達不能なすべてのオブジェクトを剪定(prune)します.

@item  git-reflog(1) 
Manage reflog information.

@item  git-remote(1) 
Manage set of tracked repositories.

@item  git-repack(1) 
リポジトリ内のアンパックオブジェクトをパックする.

@item  git-replace(1) 
オブジェクトを置き換えるためのrefsの作成、一覧表示、削除.
@end table

問合せコマンド:

@table @asis

@item  git-annotate(1) 
指定ファイルの各行のコミット情報を表示.

@item  git-blame(1) 
Show what revision and author last modified each line of a file.

@item  git-bugreport(1) 
ユーザーがバグ報告を提出するための情報を収集する.

@item  git-count-objects(1) 
パックされていない(unpack)オブジェクトの数とそのディスク消費量を計量します.

@item  git-difftool(1) 
Show changes using common diff tools.

@item  git-fsck(1) 
データベース内のオブジェクトの接続性(connectivity)と有効性(validity)を検証します.

@item  git-help(1) 
Display help information about Git.

@item  git-instaweb(1) 
gitwebで作業リポジトリをインスタントにブラウズします.

@item  git-merge-tree(1) 
インデックスに触れずに(without touching)3者間マージを表示する.

@item  git-rerere(1) 
競合するマージの記録された競合解決決定を再利用する.

@item  git-show-branch(1) 
Show branches and their commits.

@item  git-verify-commit(1) 
コミットのGPG署名を確認します。.

@item  git-verify-tag(1) 
タグのGPG署名を確認する.

@item  git-whatchanged(1) 
各コミットでの差分のログを表示.

@item  gitweb(1) 
Git web interface (web frontend to Git repositories).
@end table

@noindent

@heading Interacting with Others

これらのコマンドは、電子メールを利用したパッチを介して、他のSCMや人々と対話するためのものです。

@table @asis

@item  git-archimport(1) 
Import a GNU Arch repository into Git.

@item  git-cvsexportcommit(1) 
Export a single commit to a CVS checkout.

@item  git-cvsimport(1) 
Salvage your data out of another SCM people love to hate.

@item  git-cvsserver(1) 
A CVS server emulator for Git.

@item  git-imap-send(1) 
Send a collection of patches from stdin to an IMAP folder.

@item  git-p4(1) 
Perforceリポジトリからのインポートと、Perforceリポジトリへのsubmit.

@item  git-quiltimport(1) 
quilt(キルト)パッチセットを現在のブランチに適用します.

@item  git-request-pull(1) 
保留中の変更の概要を生成します.

@item  git-send-email(1) 
Send a collection of patches as emails.

@item  git-svn(1) 
Bidirectional operation between a Subversion repository and Git.
@end table

@noindent

@heading Reset, restore and revert

同様の名前の3つのコマンドがあります。それは @samp{git reset} と @samp{git restore} と @samp{git revert} です。

@itemize 

@item
git-revert(1) は、他のコミットによって行われた変更を元に戻す新しいコミットを作成することです。

@item
git-restore(1)
は、インデックスまたは別のコミットから作業ツリー内のファイルを復元することです。このコマンドはブランチを更新しません。このコマンドを使用して、別のコミットからインデックス内のファイルを復元することもできます。

@item
git-reset(1)
は、ブランチを更新し、ブランチにコミットを追加または削除するために先端ポインタが指し示す先端(tip)を移動させることです。この操作により、コミット履歴が変更されます。

@samp{git restore} と重複しますが、 @samp{git reset} はインデックスを復元するためにも使用できます。
@end itemize

@noindent

@chapheading Low-level commands (plumbing)

Gitには独自の磁器コマンドレイヤーが含まれていますが、代替磁器コマンドの開発をサポートするには、その低レベルのコマンドで十分です。このような磁器コマンドの開発者は
git-update-index(1) と git-read-tree(1) を読むことから始めるといいでしょう。

The interface (input, output, set of options and the semantics)  to these
low-level commands are meant to be a lot more stable than Porcelain level
commands, because these commands are primarily for scripted use.  The
interface to Porcelain commands on the other hand are subject to change in
order to improve the end user experience.

The following description divides the low-level commands into commands that
manipulate objects (in the repository, index, and working tree), commands
that interrogate and compare objects, and commands that move objects and
references between repositories.

@noindent

@heading Manipulation commands

@table @asis

@item  git-apply(1) 
Apply a patch to files and/or to the index.

@item  git-checkout-index(1) 
Copy files from the index to the working tree.

@item  git-commit-graph(1) 
Write and verify Git commit-graph files.

@item  git-commit-tree(1) 
新しいコミットオブジェクトを作成します.

@item  git-hash-object(1) 
オブジェクトIDを計算し、オプションでファイルからブロブを作成する.

@item  git-index-pack(1) 
Build pack index file for an existing packed archive.

@item  git-merge-file(1) 
3方向ファイルマージを実行する.

@item  git-merge-index(1) 
マージが必要なファイルのマージを実行します.

@item  git-mktag(1) 
追加の検証(extra validation)でタグオブジェクトを作成します.

@item  git-mktree(1) 
ls-tree形式のテキストからツリーオブジェクトを構築する.

@item  git-multi-pack-index(1) 
Write and verify multi-pack-indexes.

@item  git-pack-objects(1) 
Create a packed archive of objects.

@item  git-prune-packed(1) 
すでにパックファイルにある余分なオブジェクトを削除します.

@item  git-read-tree(1) 
Reads tree information into the index.

@item  git-symbolic-ref(1) 
シンボリックrefの読み取り、変更、および削除.

@item  git-unpack-objects(1) 
パックされたアーカイブからオブジェクトを取り出します.

@item  git-update-index(1) 
Register file contents in the working tree to the index.

@item  git-update-ref(1) 
Update the object name stored in a ref safely.

@item  git-write-tree(1) 
現在のインデックスからツリーオブジェクトを作成します.
@end table

@noindent

@heading Interrogation commands

@table @asis

@item  git-cat-file(1) 
Provide content or type and size information for repository.

@item  git-cherry(1) 
アップストリームにまだ適用されていないコミットを検索する.

@item  git-diff-files(1) 
作業ツリーとインデックス内のファイルを比較します.

@item  git-diff-index(1) 
Compare a tree to the working tree or index.

@item  git-diff-tree(1) 
Compares the content and mode of blobs found via two tree.

@item  git-for-each-ref(1) 
Output information on each ref.

@item  git-for-each-repo(1) 
リポジトリのリストでGitコマンドを実行します.

@item  git-get-tar-commit-id(1) 
git-archiveを使用して作成されたアーカイブからコミットIDを抽出します.

@item  git-ls-files(1) 
インデックスと作業ツリーのファイルに関する情報を表示する.

@item  git-ls-remote(1) 
List references in a remote repository.

@item  git-ls-tree(1) 
ツリーオブジェクトの内容を一覧表示します.

@item  git-merge-base(1) 
Find as good common ancestors as possible for a merge.

@item  git-name-rev(1) 
指定のrevのシンボリック名を検索します.

@item  git-pack-redundant(1) 
無駄なパックファイルを探す.

@item  git-rev-list(1) 
コミットオブジェクトを新しい順に一覧表示します.

@item  git-rev-parse(1) 
Pick out and massage parameters.

@item  git-show-index(1) 
パックされたアーカイブインデックスを表示する.

@item  git-show-ref(1) 
List references in a local repository.

@item  git-unpack-file(1) 
ブロブの内容を含む一時(temporary)ファイルを作成します.

@item  git-var(1) 
Git論理変数を表示します.

@item  git-verify-pack(1) 
パックされたGitアーカイブファイルを検証する.
@end table

一般に、問い合わせコマンドは作業ツリー内のファイルには影響しません。

@noindent

@heading Syncing repositories

@table @asis

@item  git-daemon(1) 
A really simple server for Git repositories.

@item  git-fetch-pack(1) 
Receive missing objects from another repository.

@item  git-http-backend(1) 
Server side implementation of Git over HTTP.

@item  git-send-pack(1) 
Push objects over Git protocol to another repository.

@item  git-update-server-info(1) 
ダムサーバー(dumb servers)を支援するために補助情報ファイル(auxiliary info.
@end table

以下は、上記で使用されるヘルパーコマンドです。エンドユーザーは通常、これらを直接使用することはありません。

@table @asis

@item  git-http-fetch(1) 
HTTPでリモートGitリポジトリからダウンロード.

@item  git-http-push(1) 
HTTP/DAV を介してオブジェクトを別のリポジトリにプッシュする.

@item  git-receive-pack(1) 
Receive what is pushed into the repository.

@item  git-shell(1) 
GitのみのSSHアクセス用の制限付きログインシェル.

@item  git-upload-archive(1) 
アーカイブを git-archive に送り返す.

@item  git-upload-pack(1) 
パックされたオブジェクトをgit-fetch-packに送り返す.
@end table

@noindent

@heading Internal helper commands

これらは、他のコマンドで使用される内部ヘルパーコマンドです。エンドユーザーは通常、これらを直接使用することはありません。

@table @asis

@item  git-check-attr(1) 
Display gitattributes information.

@item  git-check-ignore(1) 
Debug gitignore / exclude files.

@item  git-check-mailmap(1) 
連絡先(contacts)の、正式な名前と電子メールアドレスを表示.

@item  git-check-ref-format(1) 
Ensures that a reference name is well formed.

@item  git-column(1) 
データを複数列表示する.

@item  git-credential(1) 
Retrieve and store user credentials.

@item  git-credential-cache(1) 
パスワードを一時的にメモリに保存するヘルパー.

@item  git-credential-store(1) 
資格情報をディスクに保存するヘルパー.

@item  git-fmt-merge-msg(1) 
git-fmt-merge-msg-マージコミットメッセージを生成します.

@item  git-interpret-trailers(1) 
コミットメッセージの構造化情報を追加またはパースします.

@item  git-mailinfo(1) 
Extracts patch and authorship from a single e-mail message.

@item  git-mailsplit(1) 
簡易 UNIX mbox 分割プログラム.

@item  git-merge-one-file(1) 
git-merge-indexで使用する標準のヘルパープログラム.

@item  git-patch-id(1) 
パッチの一意のIDを計算します.

@item  git-sh-i18n(1) 
シェルスクリプトのためのGit用i18nセットアップコード.

@item  git-sh-setup(1) 
一般的なGitシェルスクリプトのセットアップコード.

@item  git-stripspace(1) 
不要な空白(whitespace)を削除します.
@end table

@noindent

@chapheading Guides

以下のドキュメントページ群は、Gitの概念に関するガイドです。

@table @asis

@item  gitattributes(5) 
Defining attributes per path.

@item  gitcli(7) 
Git command-line interface and conventions.

@item  gitcore-tutorial(7) 
A Git core tutorial for developers.

@item  gitcredentials(7) 
Gitにユーザー名とパスワードを提供する.

@item  gitcvs-migration(7) 
Git for CVS users.

@item  gitdiffcore(7) 
Tweaking diff output.

@item  giteveryday(7) 
Git日常利用に役立つ最小限のコマンドセット.

@item  gitfaq(7) 
Gitの使用に関するよくある質問(FAQ).

@item  gitglossary(7) 
Git用語集.

@item  githooks(5) 
Hooks used by Git.

@item  gitignore(5) 
Specifies intentionally untracked files to ignore.

@item  gitmailmap(5) 
作者(author)/コミッター(committer) および/または 電子メールアドレス(E-Mail.

@item  gitmodules(5) 
Defining submodule properties.

@item  gitnamespaces(7) 
Git名前空間.

@item  gitremote-helpers(7) 
Helper programs to interact with remote repositories.

@item  gitrepository-layout(5) 
Gitリポジトリの間取り.

@item  gitrevisions(7) 
Gitのリビジョンと範囲を指定する.

@item  gitsubmodules(7) 
Mounting one repository inside another.

@item  gittutorial(7) 
Git入門.

@item  gittutorial-2(7) 
A tutorial introduction to Git: part two.

@item  gitworkflows(7) 
Gitで推奨の作業手順の概要.
@end table

@noindent

@chapheading Configuration Mechanism

Git uses a simple text format to store customizations that are per
repository and are per user.  Such a configuration file may look like this:

@example
#
# A '#' or ';' character indicates a comment.
#

; core variables
[core]
        ; Don't trust file modes
        filemode = false

; user identity
[user]
        name = "Junio C Hamano"
        email = "gitster@@pobox.com"
@end example


Various commands read from the configuration file and adjust their operation
accordingly.  See git-config(1) for a list and more details about
the configuration mechanism.

@noindent

@chapheading Identifier Terminology

@table @asis

@item  <object> 
任意のタイプのオブジェクトのオブジェクト名を現します。

@item  <blob> 
BLOBオブジェクト名を現します。

@item  <tree> 
ツリーオブジェクト名を示します。

@item  <commit> 
コミットオブジェクト名を示します。

@item  <tree-ish> 
Indicates a tree, commit or tag object name.  A command that takes a
<tree-ish> argument ultimately wants to operate on a <tree> object but
automatically dereferences <commit> and <tag> objects that point at a
<tree>.

@item  <commit-ish> 
Indicates a commit or tag object name.  A command that takes a <commit-ish>
argument ultimately wants to operate on a <commit> object but automatically
dereferences <tag> objects that point at a <commit>.

@item  <type> 
オブジェクトタイプが必要であることを示します。 現在、 @samp{blob} または @samp{tree} または @samp{commit} または @samp{tag}
のいずれかです。

@item  <file> 
Indicates a filename - almost always relative to the root of the tree
structure @samp{GIT_INDEX_FILE} describes.
@end table

@noindent

@chapheading Symbolic Identifiers

Any Git command accepting any <object> can also use the following symbolic
notation:

@table @asis

@item  HEAD 
現在のブランチのヘッドを現します。

@item  <tag> 
有効なタグ名(つまり @samp{refs/tags/<tag>} ref)。

@item  <head> 
有効なhead名(つまり @samp{refs/heads/<head>} ref)。
@end table

For a more complete list of ways to spell object names, see "SPECIFYING
REVISIONS" section in gitrevisions(7).

@noindent

@chapheading File/Directory Structure

gitrepository-layout(5) 文書を参照してください。

各フックの詳細については githooks(5) をご覧下さい。

高レベルのSCMは、 @samp{$ GIT_DIR} で追加情報を提供および管理する場合があります。

@noindent

@chapheading Terminology

gitglossary(7) を参照してください。

@noindent

@chapheading Environment Variables

さまざまなGitコマンドは、以下の環境変数を使用します:

@noindent

@heading The Git Repository

These environment variables apply to @emph{all} core Git commands. Nb: it is
worth noting that they may be used/overridden by SCMS sitting above Git so
take care if using a foreign front-end.

@table @asis

@item  @samp{GIT_INDEX_FILE} 
This environment allows the specification of an alternate index file. If not
specified, the default of @samp{$GIT_DIR/index} is used.

@item  @samp{GIT_INDEX_VERSION} 
This environment variable allows the specification of an index version for
new repositories.  It won’t affect existing index files.  By default index
file version 2 or 3 is used. See git-update-index(1) for more
information.

@item  @samp{GIT_OBJECT_DIRECTORY} 
If the object storage directory is specified via this environment variable
then the sha1 directories are created underneath - otherwise the default
@samp{$GIT_DIR/objects} directory is used.

@item  @samp{GIT_ALTERNATE_OBJECT_DIRECTORIES} 
Due to the immutable nature of Git objects, old objects can be archived into
shared, read-only directories. This variable specifies a ":" separated (on
Windows ";" separated) list of Git object directories which can be used to
search for Git objects. New objects will not be written to these
directories.

Entries that begin with @samp{"} (double-quote) will be interpreted as C-style
quoted paths, removing leading and trailing double-quotes and respecting
backslash escapes. E.g., the value @samp{"path-with-\"-and-:-in-it":vanilla-path}
has two paths: @samp{path-with-"-and-:-in-it} and @samp{vanilla-path}.

@item  @samp{GIT_DIR} 
@samp{GIT_DIR} 環境変数が設定されている場合、リポジトリのベースにデフォルトの @samp{.git} の代わりに使用するパスを指定します。
@samp{--git-dir} コマンドラインオプションもこの値を設定します。

@item  @samp{GIT_WORK_TREE} 
Set the path to the root of the working tree.  This can also be controlled
by the @samp{--work-tree} command-line option and the core.worktree configuration
variable.

@item  @samp{GIT_NAMESPACE} 
Set the Git namespace; see gitnamespaces(7) for details.  The
@samp{--namespace} command-line option also sets this value.

@item  @samp{GIT_CEILING_DIRECTORIES} 
This should be a colon-separated list of absolute paths.  If set, it is a
list of directories that Git should not chdir up into while looking for a
repository directory (useful for excluding slow-loading network
directories).  It will not exclude the current working directory or a
GIT_DIR set on the command line or in the environment.  Normally, Git has to
read the entries in this list and resolve any symlink that might be present
in order to compare them with the current directory.  However, if even this
access is slow, you can add an empty entry to the list to tell Git that the
subsequent entries are not symlinks and needn’t be resolved; e.g.,
@samp{GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink}.

@item  @samp{GIT_DISCOVERY_ACROSS_FILESYSTEM} 
When run in a directory that does not have ".git" repository directory, Git
tries to find such a directory in the parent directories to find the top of
the working tree, but by default it does not cross filesystem boundaries.
This environment variable can be set to true to tell Git not to stop at
filesystem boundaries.  Like @samp{GIT_CEILING_DIRECTORIES}, this will not affect
an explicit repository directory set via @samp{GIT_DIR} or on the command line.

@item  @samp{GIT_COMMON_DIR} 
If this variable is set to a path, non-worktree files that are normally in
$GIT_DIR will be taken from this path instead. Worktree-specific files such
as HEAD or index are taken from $GIT_DIR. See
gitrepository-layout(5) and git-worktree(1) for
details. This variable has lower precedence than other path variables such
as GIT_INDEX_FILE, GIT_OBJECT_DIRECTORY…

@item  @samp{GIT_DEFAULT_HASH} 
If this variable is set, the default hash algorithm for new repositories
will be set to this value. This value is currently ignored when cloning; the
setting of the remote repository is used instead. The default is
"sha1". THIS VARIABLE IS EXPERIMENTAL! See @samp{--object-format} in
git-init(1).
@end table

@noindent

@heading Git Commits

@table @asis

@item  @samp{GIT_AUTHOR_NAME} 
The human-readable name used in the author identity when creating commit or
tag objects, or when writing reflogs. Overrides the @samp{user.name} and
@samp{author.name} configuration settings.

@item  @samp{GIT_AUTHOR_EMAIL} 
The email address used in the author identity when creating commit or tag
objects, or when writing reflogs. Overrides the @samp{user.email} and
@samp{author.email} configuration settings.

@item  @samp{GIT_AUTHOR_DATE} 
The date used for the author identity when creating commit or tag objects,
or when writing reflogs. See git-commit(1) for valid formats.

@item  @samp{GIT_COMMITTER_NAME} 
The human-readable name used in the committer identity when creating commit
or tag objects, or when writing reflogs. Overrides the @samp{user.name} and
@samp{committer.name} configuration settings.

@item  @samp{GIT_COMMITTER_EMAIL} 
The email address used in the author identity when creating commit or tag
objects, or when writing reflogs. Overrides the @samp{user.email} and
@samp{committer.email} configuration settings.

@item  @samp{GIT_COMMITTER_DATE} 
The date used for the committer identity when creating commit or tag
objects, or when writing reflogs. See git-commit(1) for valid
formats.

@item  @samp{EMAIL} 
The email address used in the author and committer identities if no other
relevant environment variable or configuration setting has been set.
@end table

@noindent

@heading Git Diffs

@table @asis

@item  @samp{GIT_DIFF_OPTS} 
Only valid setting is "--unified=??" or "-u??" to set the number of context
lines shown when a unified diff is created.  This takes precedence over any
"-U" or "--unified" option value passed on the Git diff command line.

@item  @samp{GIT_EXTERNAL_DIFF} 
When the environment variable @samp{GIT_EXTERNAL_DIFF} is set, the program named
by it is called to generate diffs, and Git does not use its builtin diff
machinery.  For a path that is added, removed, or modified,
@samp{GIT_EXTERNAL_DIFF} is called with 7 parameters:

@example
path old-file old-hex old-mode new-file new-hex new-mode
@end example

これは:

@item  <old|new>-file 
GIT_EXTERNAL_DIFF が <old|new> の内容を読み取るために
使用できるファイルです。

@item  <old|new>-hex 
16進40桁のSHA-1ハッシュです。

@item  <old|new>-mode 
8進数で表現されたファイルモードです。

The file parameters can point at the user’s working file (e.g. @samp{new-file} in
"git-diff-files"), @samp{/dev/null} (e.g. @samp{old-file} when a new file is added),
or a temporary file (e.g. @samp{old-file} in the index).  @samp{GIT_EXTERNAL_DIFF}
should not worry about unlinking the temporary file --- it is removed when
@samp{GIT_EXTERNAL_DIFF} exits.

For a path that is unmerged, @samp{GIT_EXTERNAL_DIFF} is called with 1 parameter,
<path>.

For each path @samp{GIT_EXTERNAL_DIFF} is called, two environment variables,
@samp{GIT_DIFF_PATH_COUNTER} and @samp{GIT_DIFF_PATH_TOTAL} are set.

@item  @samp{GIT_DIFF_PATH_COUNTER} 
パスごとに1ずつインクリメントされる1で始まるカウンター。

@item  @samp{GIT_DIFF_PATH_TOTAL} 
パスの総数。
@end table

@noindent

@heading other

@table @asis

@item  @samp{GIT_MERGE_VERBOSITY} 
A number controlling the amount of output shown by the recursive merge
strategy.  Overrides merge.verbosity.  See git-merge(1)

@item  @samp{GIT_PAGER} 
This environment variable overrides @samp{$PAGER}. If it is set to an empty
string or to the value "cat", Git will not launch a pager.  See also the
@samp{core.pager} option in git-config(1).

@item  @samp{GIT_PROGRESS_DELAY} 
A number controlling how many seconds to delay before showing optional
progress indicators. Defaults to 2.

@item  @samp{GIT_EDITOR} 
This environment variable overrides @samp{$EDITOR} and @samp{$VISUAL}.  It is used by
several Git commands when, on interactive mode, an editor is to be
launched. See also git-var(1) and the @samp{core.editor} option in
git-config(1).

@item  @samp{GIT_SEQUENCE_EDITOR} 
This environment variable overrides the configured Git editor when editing
the todo list of an interactive rebase. See also git-rebase(1) and
the @samp{sequence.editor} option in git-config(1).

@item  @samp{GIT_SSH} 
@itemx  @samp{GIT_SSH_COMMAND} 
If either of these environment variables is set then @emph{git fetch} and @emph{git
push} will use the specified command instead of @emph{ssh} when they need to
connect to a remote system.  The command-line parameters passed to the
configured command are determined by the ssh variant.  See @samp{ssh.variant}
option in git-config(1) for details.

@samp{$GIT_SSH_COMMAND} takes precedence over @samp{$GIT_SSH}, and is interpreted by
the shell, which allows additional arguments to be included.  @samp{$GIT_SSH} on
the other hand must be just the path to a program (which can be a wrapper
shell script, if additional arguments are needed).

Usually it is easier to configure any desired options through your personal
@samp{.ssh/config} file.  Please consult your ssh documentation for further
details.

@item  @samp{GIT_SSH_VARIANT} 
If this environment variable is set, it overrides Git’s autodetection
whether @samp{GIT_SSH}/@samp{GIT_SSH_COMMAND}/@samp{core.sshCommand} refer to OpenSSH,
plink or tortoiseplink. This variable overrides the config setting
@samp{ssh.variant} that serves the same purpose.

@item  @samp{GIT_ASKPASS} 
If this environment variable is set, then Git commands which need to acquire
passwords or passphrases (e.g. for HTTP or IMAP authentication)  will call
this program with a suitable prompt as command-line argument and read the
password from its STDOUT. See also the @samp{core.askPass} option in
git-config(1).

@item  @samp{GIT_TERMINAL_PROMPT} 
If this environment variable is set to @samp{0}, git will not prompt on the
terminal (e.g., when asking for HTTP authentication).

@item  @samp{GIT_CONFIG_GLOBAL} 
@itemx  @samp{GIT_CONFIG_SYSTEM} 
Take the configuration from the given files instead from global or
system-level configuration files. If @samp{GIT_CONFIG_SYSTEM} is set, the system
config file defined at build time (usually @samp{/etc/gitconfig})  will not be
read. Likewise, if @samp{GIT_CONFIG_GLOBAL} is set, neither @samp{$HOME/.gitconfig}
nor @samp{$XDG_CONFIG_HOME/git/config} will be read. Can be set to @samp{/dev/null} to
skip reading configuration files of the respective level.

@item  @samp{GIT_CONFIG_NOSYSTEM} 
Whether to skip reading settings from the system-wide
@samp{$(prefix)/etc/gitconfig} file.  This environment variable can be used along
with @samp{$HOME} and @samp{$XDG_CONFIG_HOME} to create a predictable environment for
a picky script, or you can set it temporarily to avoid using a buggy
@samp{/etc/gitconfig} file while waiting for someone with sufficient permissions
to fix it.

@item  @samp{GIT_FLUSH} 
If this environment variable is set to "1", then commands such
as @emph{git blame} (in incremental mode), @emph{git rev-list}, @emph{git log},
@emph{git check-attr} and @emph{git check-ignore} will
force a flush of the output stream after each record have been
flushed. If this
variable is set to "0", the output of these commands will be done
using completely buffered I/O.   If this environment variable is
not set, Git will choose buffered or record-oriented flushing
based on whether stdout appears to be redirected to a file or not.

@item  @samp{GIT_TRACE} 
Enables general trace messages, e.g. alias expansion, built-in command
execution and external command execution.

If this variable is set to "1", "2" or "true" (comparison is case
insensitive), trace messages will be printed to stderr.

If the variable is set to an integer value greater than 2 and lower than 10
(strictly) then Git will interpret this value as an open file descriptor and
will try to write the trace messages into this file descriptor.

Alternatively, if the variable is set to an absolute path (starting with a
@emph{/} character), Git will interpret this as a file path and will try to
append the trace messages to it.

Unsetting the variable, or setting it to empty, "0" or "false" (case
insensitive) disables trace messages.

@item  @samp{GIT_TRACE_FSMONITOR} 
Enables trace messages for the filesystem monitor extension.  See
@samp{GIT_TRACE} for available trace output options.

@item  @samp{GIT_TRACE_PACK_ACCESS} 
Enables trace messages for all accesses to any packs. For each access, the
pack file name and an offset in the pack is recorded. This may be helpful
for troubleshooting some pack-related performance problems.  See @samp{GIT_TRACE}
for available trace output options.

@item  @samp{GIT_TRACE_PACKET} 
Enables trace messages for all packets coming in or out of a given
program. This can help with debugging object negotiation or other protocol
issues. Tracing is turned off at a packet starting with "PACK" (but see
@samp{GIT_TRACE_PACKFILE} below).  See @samp{GIT_TRACE} for available trace output
options.

@item  @samp{GIT_TRACE_PACKFILE} 
Enables tracing of packfiles sent or received by a given program. Unlike
other trace output, this trace is verbatim: no headers, and no quoting of
binary data. You almost certainly want to direct into a file (e.g.,
@samp{GIT_TRACE_PACKFILE=/tmp/my.pack}) rather than displaying it on the terminal
or mixing it with other trace output.

Note that this is currently only implemented for the client side of clones
and fetches.

@item  @samp{GIT_TRACE_PERFORMANCE} 
Enables performance related trace messages, e.g. total execution time of
each Git command.  See @samp{GIT_TRACE} for available trace output options.

@item  @samp{GIT_TRACE_REFS} 
Enables trace messages for operations on the ref database.  See @samp{GIT_TRACE}
for available trace output options.

@item  @samp{GIT_TRACE_SETUP} 
Enables trace messages printing the .git, working tree and current working
directory after Git has completed its setup phase.  See @samp{GIT_TRACE} for
available trace output options.

@item  @samp{GIT_TRACE_SHALLOW} 
Enables trace messages that can help debugging fetching / cloning of shallow
repositories.  See @samp{GIT_TRACE} for available trace output options.

@item  @samp{GIT_TRACE_CURL} 
Enables a curl full trace dump of all incoming and outgoing data, including
descriptive information, of the git transport protocol.  This is similar to
doing curl @samp{--trace-ascii} on the command line.  See @samp{GIT_TRACE} for
available trace output options.

@item  @samp{GIT_TRACE_CURL_NO_DATA} 
When a curl trace is enabled (see @samp{GIT_TRACE_CURL} above), do not dump data
(that is, only dump info lines and headers).

@item  @samp{GIT_TRACE2} 
「trace2」ライブラリからのより詳細なトレースメッセージを有効にします。 @samp{GIT_TRACE2}
からの出力は、人間が読みやすいように単純なテキストベースの形式です。

If this variable is set to "1", "2" or "true" (comparison is case
insensitive), trace messages will be printed to stderr.

If the variable is set to an integer value greater than 2 and lower than 10
(strictly) then Git will interpret this value as an open file descriptor and
will try to write the trace messages into this file descriptor.

Alternatively, if the variable is set to an absolute path (starting with a
@emph{/} character), Git will interpret this as a file path and will try to
append the trace messages to it.  If the path already exists and is a
directory, the trace messages will be written to files (one per process)  in
that directory, named according to the last component of the SID and an
optional counter (to avoid filename collisions).

In addition, if the variable is set to
@samp{af_unix:[<socket_type>:]<absolute-pathname>}, Git will try to open the path
as a Unix Domain Socket.  The socket type can be either @samp{stream} or @samp{dgram}.

Unsetting the variable, or setting it to empty, "0" or "false" (case
insensitive) disables trace messages.

詳細については @uref{technical/api-trace2.html,Trace2 documentation} を参照してください。

@item  @samp{GIT_TRACE2_EVENT} 
This setting writes a JSON-based format that is suited for machine
interpretation.  See @samp{GIT_TRACE2} for available trace output options and
@uref{technical/api-trace2.html,Trace2 documentation} for full details.

@item  @samp{GIT_TRACE2_PERF} 
In addition to the text-based messages available in @samp{GIT_TRACE2}, this
setting writes a column-based format for understanding nesting regions.  See
@samp{GIT_TRACE2} for available trace output options and
@uref{technical/api-trace2.html,Trace2 documentation} for full details.

@item  @samp{GIT_TRACE_REDACT} 
By default, when tracing is activated, Git redacts the values of cookies,
the "Authorization:" header, and the "Proxy-Authorization:" header. Set this
variable to @samp{0} to prevent this redaction.

@item  @samp{GIT_LITERAL_PATHSPECS} 
Setting this variable to @samp{1} will cause Git to treat all pathspecs
literally, rather than as glob patterns. For example, running
@samp{GIT_LITERAL_PATHSPECS=1 git log -- '*.c'} will search for commits that
touch the path @samp{*.c}, not any paths that the glob @samp{*.c} matches. You might
want this if you are feeding literal paths to Git (e.g., paths previously
given to you by @samp{git ls-tree}, @samp{--raw} diff output, etc).

@item  @samp{GIT_GLOB_PATHSPECS} 
Setting this variable to @samp{1} will cause Git to treat all pathspecs as glob
patterns (aka "glob" magic).

@item  @samp{GIT_NOGLOB_PATHSPECS} 
Setting this variable to @samp{1} will cause Git to treat all pathspecs as
literal (aka "literal" magic).

@item  @samp{GIT_ICASE_PATHSPECS} 
Setting this variable to @samp{1} will cause Git to treat all pathspecs as
case-insensitive.

@item  @samp{GIT_REFLOG_ACTION} 
When a ref is updated, reflog entries are created to keep track of the
reason why the ref was updated (which is typically the name of the
high-level command that updated the ref), in addition to the old and new
values of the ref.  A scripted Porcelain command can use set_reflog_action
helper function in @samp{git-sh-setup} to set its name to this variable when it
is invoked as the top level command by the end user, to be recorded in the
body of the reflog.

@item  @samp{GIT_REF_PARANOIA} 
If set to @samp{1}, include broken or badly named refs when iterating over lists
of refs. In a normal, non-corrupted repository, this does nothing. However,
enabling it may help git to detect and abort some operations in the presence
of broken refs. Git sets this variable automatically when performing
destructive operations like git-prune(1). You should not need to set
it yourself unless you want to be paranoid about making sure an operation
has touched every ref (e.g., because you are cloning a repository to make a
backup).

@item  @samp{GIT_ALLOW_PROTOCOL} 
If set to a colon-separated list of protocols, behave as if @samp{protocol.allow}
is set to @samp{never}, and each of the listed protocols has
@samp{protocol.<name>.allow} set to @samp{always} (overriding any existing
configuration). In other words, any protocol not mentioned will be
disallowed (i.e., this is a whitelist, not a blacklist). See the description
of @samp{protocol.allow} in git-config(1) for more details.

@item  @samp{GIT_PROTOCOL_FROM_USER} 
Set to 0 to prevent protocols used by fetch/push/clone which are configured
to the @samp{user} state.  This is useful to restrict recursive submodule
initialization from an untrusted repository or for programs which feed
potentially-untrusted URLS to git commands.  See git-config(1) for
more details.

@item  @samp{GIT_PROTOCOL} 
For internal use only.  Used in handshaking the wire protocol.  Contains a
colon @emph{:} separated list of keys with optional values @emph{key[=value]}.
Presence of unknown keys and values must be ignored.

Note that servers may need to be configured to allow this variable to pass
over some transports. It will be propagated automatically when accessing
local repositories (i.e., @samp{file://} or a filesystem path), as well as over
the @samp{git://} protocol. For git-over-http, it should work automatically in
most configurations, but see the discussion in
git-http-backend(1). For git-over-ssh, the ssh server may need to be
configured to allow clients to pass this variable (e.g., by using @samp{AcceptEnv
GIT_PROTOCOL} with OpenSSH).

This configuration is optional. If the variable is not propagated, then
clients will fall back to the original "v0" protocol (but may miss out on
some performance improvements or features). This variable currently only
affects clones and fetches; it is not yet used for pushes (but may be in the
future).

@item  @samp{GIT_OPTIONAL_LOCKS} 
If set to @samp{0}, Git will complete any requested operation without performing
any optional sub-operations that require taking a lock.  For example, this
will prevent @samp{git status} from refreshing the index as a side effect. This
is useful for processes running in the background which do not want to cause
lock contention with other operations on the repository.  Defaults to @samp{1}.

@item  @samp{GIT_REDIRECT_STDIN} 
@itemx  @samp{GIT_REDIRECT_STDOUT} 
@itemx  @samp{GIT_REDIRECT_STDERR} 
Windows-only: allow redirecting the standard input/output/error handles to
paths specified by the environment variables. This is particularly useful in
multi-threaded applications where the canonical way to pass standard handles
via @samp{CreateProcess()} is not an option because it would require the handles
to be marked inheritable (and consequently @strong{every} spawned process would
inherit them, possibly blocking regular Git operations). The primary
intended use case is to use named pipes for communication
(e.g. @samp{\\.\pipe\my-git-stdin-123}).

Two special values are supported: @samp{off} will simply close the corresponding
standard handle, and if @samp{GIT_REDIRECT_STDERR} is @samp{2>&1}, standard error will
be redirected to the same handle as standard output.

@item  @samp{GIT_PRINT_SHA1_ELLIPSIS} (deprecated) 
If set to @samp{yes}, print an ellipsis following an (abbreviated) SHA-1 value.
This affects indications of detached HEADs (git-checkout(1)) and the
raw diff output (git-diff(1)).  Printing an ellipsis in the cases
mentioned is no longer considered adequate and support for it is likely to
be removed in the foreseeable future (along with the variable).
@end table

@noindent

@chapheading Discussion

More detail on the following is available from the
@uref{user-manual.html#git-concepts,Git concepts chapter of the user-manual}
and gitcore-tutorial(7).

A Git project normally consists of a working directory with a ".git"
subdirectory at the top level.  The .git directory contains, among other
things, a compressed object database representing the complete history of
the project, an "index" file which links that history to the current
contents of the working tree, and named pointers into that history such as
tags and branch heads.

The object database contains objects of three main types: blobs, which hold
file data; trees, which point to blobs and other trees to build up directory
hierarchies; and commits, which each reference a single tree and some number
of parent commits.

The commit, equivalent to what other systems call a "changeset" or
"version", represents a step in the project’s history, and each parent
represents an immediately preceding step.  Commits with more than one parent
represent merges of independent lines of development.

All objects are named by the SHA-1 hash of their contents, normally written
as a string of 40 hex digits.  Such names are globally unique.  The entire
history leading up to a commit can be vouched for by signing just that
commit.  A fourth object type, the tag, is provided for this purpose.

When first created, objects are stored in individual files, but for
efficiency may later be compressed together into "pack files".

Named pointers called refs mark interesting points in history.  A ref may
contain the SHA-1 name of an object or the name of another ref.  Refs with
names beginning @samp{ref/head/} contain the SHA-1 name of the most recent commit
(or "head") of a branch under development.  SHA-1 names of tags of interest
are stored under @samp{ref/tags/}.  A special ref named @samp{HEAD} contains the name
of the currently checked-out branch.

The index file is initialized with a list of all paths and, for each path, a
blob object and a set of attributes.  The blob object represents the
contents of the file as of the head of the current branch.  The attributes
(last modified time, size, etc.) are taken from the corresponding file in
the working tree.  Subsequent changes to the working tree can be found by
comparing these attributes.  The index may be updated with new content, and
new commits may be created from the content stored in the index.

The index is also capable of storing multiple entries (called "stages")  for
a given pathname.  These stages are used to hold the various unmerged
version of a file when a merge is in progress.

@noindent

@chapheading FURTHER DOCUMENTATION

Gitの使用を開始するには、「description」セクションのリファレンスを参照してください。
以下は、初めてのユーザーにとっては、おそらく必要以上に詳細です。

@uref{user-manual.html#git-concepts,Git concepts chapter of the user-manual}
と gitcore-tutorial(7) はどちらも、基盤となるGitアーキテクチャの概要を示しています。

おすすめの作業手順の概要については gitworkflows(7) を参照してください。

いくつかの便利な実例について @uref{howto-index.html,howto} 文書もご覧下さい。

Git内部については @uref{technical/api-index.html,Git API documentation} に記載されています。

CVSから移行するユーザーには gitcvs-migration(7) も読んで欲しいです。

@noindent

@chapheading Authors

Git was started by Linus Torvalds, and is currently maintained by Junio C
Hamano. Numerous contributions have come from the Git mailing list
<@uref{mailto:git@@vger.kernel.org,git@@vger.kernel.org}>.  @uref{http://www.openhub.net/p/git/contributors/summary,http://www.openhub.net/p/git/contributors/summary}
gives you a more complete list of contributors.

If you have a clone of git.git itself, the output of git-shortlog(1)
and git-blame(1) can show you the authors for specific parts of the
project.

@noindent

@chapheading Reporting Bugs

Report bugs to the Git mailing list <@uref{mailto:git@@vger.kernel.org,git@@vger.kernel.org}> where the
development and maintenance is primarily done.  You do not have to be
subscribed to the list to send a message there.  See the list archive at
@uref{https://lore.kernel.org/git,https://lore.kernel.org/git} for previous bug reports and other discussions.

Issues which are security relevant should be disclosed privately to the Git
Security mailing list <@uref{mailto:git-security@@googlegroups.com,git-security@@googlegroups.com}>.

@noindent

@chapheading SEE ALSO

gittutorial(7), gittutorial-2(7), giteveryday(7),
gitcvs-migration(7), gitglossary(7),
gitcore-tutorial(7), gitcli(7), @uref{user-manual.html,The Git User’s Manual}, gitworkflows(7)

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitattributes,,,Top
@chapheading Name

gitattributes — Defining attributes per path

@noindent

@chapheading Synopsis

$GIT_DIR/info/attributes, .gitattributes

@noindent

@chapheading DESCRIPTION

A @samp{gitattributes} file is a simple text file that gives @samp{attributes} to
pathnames.

Each line in @samp{gitattributes} file is of form:

@example
pattern attr1 attr2 ...
@end example

That is, a pattern followed by an attributes list, separated by
whitespaces. Leading and trailing whitespaces are ignored. Lines that begin
with @emph{#} are ignored. Patterns that begin with a double quote are quoted in
C style.  When the pattern matches the path in question, the attributes
listed on the line are given to the path.

Each attribute can be in one of these states for a given path:

@table @asis

@item  Set 
The path has the attribute with special value "true"; this is specified by
listing only the name of the attribute in the attribute list.

@item  Unset 
The path has the attribute with special value "false"; this is specified by
listing the name of the attribute prefixed with a dash @samp{-} in the attribute
list.

@item  Set to a value 
The path has the attribute with specified string value; this is specified by
listing the name of the attribute followed by an equal sign @samp{=} and its
value in the attribute list.

@item  Unspecified 
No pattern matches the path, and nothing says if the path has or does not
have the attribute, the attribute for the path is said to be Unspecified.
@end table

When more than one pattern matches the path, a later line overrides an
earlier line.  This overriding is done per attribute.

The rules by which the pattern matches paths are the same as in @samp{.gitignore}
files (see gitignore(5)), with a few exceptions:

@itemize 

@item
negative patterns are forbidden

@item
patterns that match a directory do not recursively match paths inside that
directory (so using the trailing-slash @samp{path/} syntax is pointless in an
attributes file; use @samp{path/**} instead)
@end itemize

When deciding what attributes are assigned to a path, Git consults
@samp{$GIT_DIR/info/attributes} file (which has the highest precedence),
@samp{.gitattributes} file in the same directory as the path in question, and its
parent directories up to the toplevel of the work tree (the further the
directory that contains @samp{.gitattributes} is from the path in question, the
lower its precedence). Finally global and system-wide files are considered
(they have the lowest precedence).

When the @samp{.gitattributes} file is missing from the work tree, the path in
the index is used as a fall-back.  During checkout process, @samp{.gitattributes}
in the index is used and then the file in the working tree is used as a
fall-back.

If you wish to affect only a single repository (i.e., to assign attributes
to files that are particular to one user’s workflow for that repository),
then attributes should be placed in the @samp{$GIT_DIR/info/attributes} file.
Attributes which should be version-controlled and distributed to other
repositories (i.e., attributes of interest to all users) should go into
@samp{.gitattributes} files. Attributes that should affect all repositories for a
single user should be placed in a file specified by the
@samp{core.attributesFile} configuration option (see git-config(1)).  Its
default value is $XDG_CONFIG_HOME/git/attributes. If $XDG_CONFIG_HOME is
either not set or empty, $HOME/.config/git/attributes is used instead.
Attributes for all users on a system should be placed in the
@samp{$(prefix)/etc/gitattributes} file.

Sometimes you would need to override a setting of an attribute for a path to
@samp{Unspecified} state.  This can be done by listing the name of the attribute
prefixed with an exclamation point @samp{!}.

@noindent

@chapheading EFFECTS

Certain operations by Git can be influenced by assigning particular
attributes to a path.  Currently, the following operations are
attributes-aware.

@noindent

@heading Checking-out and checking-in

These attributes affect how the contents stored in the repository are copied
to the working tree files when commands such as @emph{git switch}, @emph{git checkout}
and @emph{git merge} run.  They also affect how Git stores the contents you
prepare in the working tree in the repository upon @emph{git add} and @emph{git
commit}.

@noindent

@subheading text

This attribute enables and controls end-of-line normalization.  When a text
file is normalized, its line endings are converted to LF in the repository.
To control what line ending style is used in the working directory, use the
@samp{eol} attribute for a single file and the @samp{core.eol} configuration variable
for all text files.  Note that setting @samp{core.autocrlf} to @samp{true} or @samp{input}
overrides @samp{core.eol} (see the definitions of those options in
git-config(1)).

@table @asis

@item  Set 
Setting the @samp{text} attribute on a path enables end-of-line normalization and
marks the path as a text file.  End-of-line conversion takes place without
guessing the content type.

@item  Unset 
Unsetting the @samp{text} attribute on a path tells Git not to attempt any
end-of-line conversion upon checkin or checkout.

@item  Set to string value "auto" 
When @samp{text} is set to "auto", the path is marked for automatic end-of-line
conversion.  If Git decides that the content is text, its line endings are
converted to LF on checkin.  When the file has been committed with CRLF, no
conversion is done.

@item  Unspecified 
If the @samp{text} attribute is unspecified, Git uses the @samp{core.autocrlf}
configuration variable to determine if the file should be converted.
@end table

Any other value causes Git to act as if @samp{text} has been left unspecified.

@noindent

@subheading eol

This attribute sets a specific line-ending style to be used in the working
directory.  It enables end-of-line conversion without any content checks,
effectively setting the @samp{text} attribute.  Note that setting this attribute
on paths which are in the index with CRLF line endings may make the paths to
be considered dirty.  Adding the path to the index again will normalize the
line endings in the index.

@table @asis

@item  Set to string value "crlf" 
This setting forces Git to normalize line endings for this file on checkin
and convert them to CRLF when the file is checked out.

@item  Set to string value "lf" 
This setting forces Git to normalize line endings to LF on checkin and
prevents conversion to CRLF when the file is checked out.
@end table

@noindent

@subheading Backwards compatibility with crlf attribute

For backwards compatibility, the @samp{crlf} attribute is interpreted as follows:

@example
crlf            text
-crlf           -text
crlf=input      eol=lf
@end example


@noindent

@subheading End-of-line conversion

While Git normally leaves file contents alone, it can be configured to
normalize line endings to LF in the repository and, optionally, to convert
them to CRLF when files are checked out.

If you simply want to have CRLF line endings in your working directory
regardless of the repository you are working with, you can set the config
variable "core.autocrlf" without using any attributes.

@example
[core]
        autocrlf = true
@end example


This does not force normalization of text files, but does ensure that text
files that you introduce to the repository have their line endings
normalized to LF when they are added, and that files that are already
normalized in the repository stay normalized.

If you want to ensure that text files that any contributor introduces to the
repository have their line endings normalized, you can set the @samp{text}
attribute to "auto" for @emph{all} files.

@example
*       text=auto
@end example


The attributes allow a fine-grained control, how the line endings are
converted.  Here is an example that will make Git normalize .txt, .vcproj
and .sh files, ensure that .vcproj files have CRLF and .sh files have LF in
the working directory, and prevent .jpg files from being normalized
regardless of their content.

@example
*               text=auto
*.txt           text
*.vcproj        text eol=crlf
*.sh            text eol=lf
*.jpg           -text
@end example


@quotation

@strong{Note}

When @samp{text=auto} conversion is enabled in a cross-platform project using
push and pull to a central repository the text files containing CRLFs should
be normalized.
@end quotation

From a clean working directory:

@example
$ echo "* text=auto" >.gitattributes
$ git add --renormalize .
$ git status        # Show files that will be normalized
$ git commit -m "Introduce end-of-line normalization"
@end example


If any files that should not be normalized show up in @emph{git status}, unset
their @samp{text} attribute before running @emph{git add -u}.

@example
manual.pdf      -text
@end example


Conversely, text files that Git does not detect can have normalization
enabled manually.

@example
weirdchars.txt  text
@end example


If @samp{core.safecrlf} is set to "true" or "warn", Git verifies if the
conversion is reversible for the current setting of @samp{core.autocrlf}.  For
"true", Git rejects irreversible conversions; for "warn", Git only prints a
warning but accepts an irreversible conversion.  The safety triggers to
prevent such a conversion done to the files in the work tree, but there are
a few exceptions.  Even though…

@itemize 

@item
@emph{git add} itself does not touch the files in the work tree, the next
checkout would, so the safety triggers;

@item
@emph{git apply} to update a text file with a patch does touch the files in the
work tree, but the operation is about text files and CRLF conversion is
about fixing the line ending inconsistencies, so the safety does not
trigger;

@item
@emph{git diff} itself does not touch the files in the work tree, it is often run
to inspect the changes you intend to next @emph{git add}.  To catch potential
problems early, safety triggers.
@end itemize

@noindent

@subheading working-tree-encoding

Git recognizes files encoded in ASCII or one of its supersets (e.g.  UTF-8,
ISO-8859-1, …) as text files. Files encoded in certain other encodings
(e.g. UTF-16) are interpreted as binary and consequently built-in Git text
processing tools (e.g. @emph{git diff}) as well as most Git web front ends do not
visualize the contents of these files by default.

In these cases you can tell Git the encoding of a file in the working
directory with the @samp{working-tree-encoding} attribute. If a file with this
attribute is added to Git, then Git re-encodes the content from the
specified encoding to UTF-8. Finally, Git stores the UTF-8 encoded content
in its internal data structure (called "the index"). On checkout the content
is re-encoded back to the specified encoding.

Please note that using the @samp{working-tree-encoding} attribute may have a
number of pitfalls:

@itemize 

@item
Alternative Git implementations (e.g. JGit or libgit2) and older Git
versions (as of March 2018) do not support the @samp{working-tree-encoding}
attribute. If you decide to use the @samp{working-tree-encoding} attribute in
your repository, then it is strongly recommended to ensure that all clients
working with the repository support it.

For example, Microsoft Visual Studio resources files (@samp{*.rc}) or PowerShell
script files (@samp{*.ps1}) are sometimes encoded in UTF-16.  If you declare
@samp{*.ps1} as files as UTF-16 and you add @samp{foo.ps1} with a
@samp{working-tree-encoding} enabled Git client, then @samp{foo.ps1} will be stored as
UTF-8 internally. A client without @samp{working-tree-encoding} support will
checkout @samp{foo.ps1} as UTF-8 encoded file. This will typically cause trouble
for the users of this file.

If a Git client that does not support the @samp{working-tree-encoding} attribute
adds a new file @samp{bar.ps1}, then @samp{bar.ps1} will be stored "as-is" internally
(in this example probably as UTF-16).  A client with @samp{working-tree-encoding}
support will interpret the internal contents as UTF-8 and try to convert it
to UTF-16 on checkout.  That operation will fail and cause an error.

@item
Reencoding content to non-UTF encodings can cause errors as the conversion
might not be UTF-8 round trip safe. If you suspect your encoding to not be
round trip safe, then add it to @samp{core.checkRoundtripEncoding} to make Git
check the round trip encoding (see git-config(1)). SHIFT-JIS
(Japanese character set) is known to have round trip issues with UTF-8 and
is checked by default.

@item
Reencoding content requires resources that might slow down certain Git
operations (e.g @emph{git checkout} or @emph{git add}).
@end itemize

Use the @samp{working-tree-encoding} attribute only if you cannot store a file in
UTF-8 encoding and if you want Git to be able to process the content as
text.

As an example, use the following attributes if your @emph{*.ps1} files are UTF-16
encoded with byte order mark (BOM) and you want Git to perform automatic
line ending conversion based on your platform.

@example
*.ps1           text working-tree-encoding=UTF-16
@end example


Use the following attributes if your @emph{*.ps1} files are UTF-16 little endian
encoded without BOM and you want Git to use Windows line endings in the
working directory (use @samp{UTF-16LE-BOM} instead of @samp{UTF-16LE} if you want
UTF-16 little endian with BOM).  Please note, it is highly recommended to
explicitly define the line endings with @samp{eol} if the @samp{working-tree-encoding}
attribute is used to avoid ambiguity.

@example
*.ps1           text working-tree-encoding=UTF-16LE eol=CRLF
@end example


You can get a list of all available encodings on your platform with the
following command:

@example
iconv --list
@end example


If you do not know the encoding of a file, then you can use the @samp{file}
command to guess the encoding:

@example
file foo.ps1
@end example


@noindent

@subheading ident

When the attribute @samp{ident} is set for a path, Git replaces @samp{$Id$} in the
blob object with @samp{$Id:}, followed by the 40-character hexadecimal blob
object name, followed by a dollar sign @samp{$} upon checkout.  Any byte sequence
that begins with @samp{$Id:} and ends with @samp{$} in the worktree file is replaced
with @samp{$Id$} upon check-in.

@noindent

@subheading filter

A @samp{filter} attribute can be set to a string value that names a filter driver
specified in the configuration.

A filter driver consists of a @samp{clean} command and a @samp{smudge} command, either
of which can be left unspecified.  Upon checkout, when the @samp{smudge} command
is specified, the command is fed the blob object from its standard input,
and its standard output is used to update the worktree file.  Similarly, the
@samp{clean} command is used to convert the contents of worktree file upon
checkin. By default these commands process only a single blob and
terminate. If a long running @samp{process} filter is used in place of @samp{clean}
and/or @samp{smudge} filters, then Git can process all blobs with a single filter
command invocation for the entire life of a single Git command, for example
@samp{git add --all}. If a long running @samp{process} filter is configured then it
always takes precedence over a configured single blob filter. See section
below for the description of the protocol used to communicate with a
@samp{process} filter.

One use of the content filtering is to massage the content into a shape that
is more convenient for the platform, filesystem, and the user to use.  For
this mode of operation, the key phrase here is "more convenient" and not
"turning something unusable into usable".  In other words, the intent is
that if someone unsets the filter driver definition, or does not have the
appropriate filter program, the project should still be usable.

Another use of the content filtering is to store the content that cannot be
directly used in the repository (e.g. a UUID that refers to the true content
stored outside Git, or an encrypted content) and turn it into a usable form
upon checkout (e.g. download the external content, or decrypt the encrypted
content).

These two filters behave differently, and by default, a filter is taken as
the former, massaging the contents into more convenient shape.  A missing
filter driver definition in the config, or a filter driver that exits with a
non-zero status, is not an error but makes the filter a no-op passthru.

You can declare that a filter turns a content that by itself is unusable
into a usable content by setting the filter.<driver>.required configuration
variable to @samp{true}.

Note: Whenever the clean filter is changed, the repo should be renormalized:
$ git add --renormalize .

For example, in .gitattributes, you would assign the @samp{filter} attribute for
paths.

@example
*.c     filter=indent
@end example


Then you would define a "filter.indent.clean" and "filter.indent.smudge"
configuration in your .git/config to specify a pair of commands to modify
the contents of C programs when the source files are checked in ("clean" is
run) and checked out (no change is made because the command is "cat").

@example
[filter "indent"]
        clean = indent
        smudge = cat
@end example


For best results, @samp{clean} should not alter its output further if it is run
twice ("clean→clean" should be equivalent to "clean"), and multiple
@samp{smudge} commands should not alter @samp{clean}'s output ("smudge→smudge→clean"
should be equivalent to "clean").  See the section on merging below.

The "indent" filter is well-behaved in this regard: it will not modify input
that is already correctly indented.  In this case, the lack of a smudge
filter means that the clean filter @emph{must} accept its own output without
modifying it.

If a filter @emph{must} succeed in order to make the stored contents usable, you
can declare that the filter is @samp{required}, in the configuration:

@example
[filter "crypt"]
        clean = openssl enc ...
        smudge = openssl enc -d ...
        required
@end example


Sequence "%f" on the filter command line is replaced with the name of the
file the filter is working on.  A filter might use this in keyword
substitution.  For example:

@example
[filter "p4"]
        clean = git-p4-filter --clean %f
        smudge = git-p4-filter --smudge %f
@end example


Note that "%f" is the name of the path that is being worked on. Depending on
the version that is being filtered, the corresponding file on disk may not
exist, or may have different contents. So, smudge and clean commands should
not try to access the file on disk, but only act as filters on the content
provided to them on standard input.

@noindent

@subheading Long Running Filter Process

If the filter command (a string value) is defined via
@samp{filter.<driver>.process} then Git can process all blobs with a single
filter invocation for the entire life of a single Git command. This is
achieved by using the long-running process protocol (described in
technical/long-running-process-protocol.txt).

When Git encounters the first file that needs to be cleaned or smudged, it
starts the filter and performs the handshake. In the handshake, the welcome
message sent by Git is "git-filter-client", only version 2 is supported, and
the supported capabilities are "clean", "smudge", and "delay".

Afterwards Git sends a list of "key=value" pairs terminated with a flush
packet. The list will contain at least the filter command (based on the
supported capabilities) and the pathname of the file to filter relative to
the repository root. Right after the flush packet Git sends the content
split in zero or more pkt-line packets and a flush packet to terminate
content. Please note, that the filter must not send any response before it
received the content and the final flush packet. Also note that the "value"
of a "key=value" pair can contain the "=" character whereas the key would
never contain that character.

@example
packet:          git> command=smudge
packet:          git> pathname=path/testfile.dat
packet:          git> 0000
packet:          git> CONTENT
packet:          git> 0000
@end example


The filter is expected to respond with a list of "key=value" pairs
terminated with a flush packet. If the filter does not experience problems
then the list must contain a "success" status. Right after these packets the
filter is expected to send the content in zero or more pkt-line packets and
a flush packet at the end. Finally, a second list of "key=value" pairs
terminated with a flush packet is expected. The filter can change the status
in the second list or keep the status as is with an empty list. Please note
that the empty list must be terminated with a flush packet regardless.

@example
packet:          git< status=success
packet:          git< 0000
packet:          git< SMUDGED_CONTENT
packet:          git< 0000
packet:          git< 0000  # empty list, keep "status=success" unchanged!
@end example


If the result content is empty then the filter is expected to respond with a
"success" status and a flush packet to signal the empty content.

@example
packet:          git< status=success
packet:          git< 0000
packet:          git< 0000  # empty content!
packet:          git< 0000  # empty list, keep "status=success" unchanged!
@end example


In case the filter cannot or does not want to process the content, it is
expected to respond with an "error" status.

@example
packet:          git< status=error
packet:          git< 0000
@end example


If the filter experiences an error during processing, then it can send the
status "error" after the content was (partially or completely) sent.

@example
packet:          git< status=success
packet:          git< 0000
packet:          git< HALF_WRITTEN_ERRONEOUS_CONTENT
packet:          git< 0000
packet:          git< status=error
packet:          git< 0000
@end example


In case the filter cannot or does not want to process the content as well as
any future content for the lifetime of the Git process, then it is expected
to respond with an "abort" status at any point in the protocol.

@example
packet:          git< status=abort
packet:          git< 0000
@end example


Git neither stops nor restarts the filter process in case the
"error"/"abort" status is set. However, Git sets its exit code according to
the @samp{filter.<driver>.required} flag, mimicking the behavior of the
@samp{filter.<driver>.clean} / @samp{filter.<driver>.smudge} mechanism.

If the filter dies during the communication or does not adhere to the
protocol then Git will stop the filter process and restart it with the next
file that needs to be processed. Depending on the @samp{filter.<driver>.required}
flag Git will interpret that as error.

@noindent

@subheading Delay

If the filter supports the "delay" capability, then Git can send the flag
"can-delay" after the filter command and pathname. This flag denotes that
the filter can delay filtering the current blob (e.g. to compensate network
latencies) by responding with no content but with the status "delayed" and a
flush packet.

@example
packet:          git> command=smudge
packet:          git> pathname=path/testfile.dat
packet:          git> can-delay=1
packet:          git> 0000
packet:          git> CONTENT
packet:          git> 0000
packet:          git< status=delayed
packet:          git< 0000
@end example


If the filter supports the "delay" capability then it must support the
"list_available_blobs" command. If Git sends this command, then the filter
is expected to return a list of pathnames representing blobs that have been
delayed earlier and are now available.  The list must be terminated with a
flush packet followed by a "success" status that is also terminated with a
flush packet. If no blobs for the delayed paths are available, yet, then the
filter is expected to block the response until at least one blob becomes
available. The filter can tell Git that it has no more delayed blobs by
sending an empty list. As soon as the filter responds with an empty list,
Git stops asking. All blobs that Git has not received at this point are
considered missing and will result in an error.

@example
packet:          git> command=list_available_blobs
packet:          git> 0000
packet:          git< pathname=path/testfile.dat
packet:          git< pathname=path/otherfile.dat
packet:          git< 0000
packet:          git< status=success
packet:          git< 0000
@end example


After Git received the pathnames, it will request the corresponding blobs
again. These requests contain a pathname and an empty content section. The
filter is expected to respond with the smudged content in the usual way as
explained above.

@example
packet:          git> command=smudge
packet:          git> pathname=path/testfile.dat
packet:          git> 0000
packet:          git> 0000  # empty content!
packet:          git< status=success
packet:          git< 0000
packet:          git< SMUDGED_CONTENT
packet:          git< 0000
packet:          git< 0000  # empty list, keep "status=success" unchanged!
@end example


@noindent

@subheading Example

A long running filter demo implementation can be found in
@samp{contrib/long-running-filter/example.pl} located in the Git core
repository. If you develop your own long running filter process then the
@samp{GIT_TRACE_PACKET} environment variables can be very helpful for debugging
(see git(1)).

Please note that you cannot use an existing @samp{filter.<driver>.clean} or
@samp{filter.<driver>.smudge} command with @samp{filter.<driver>.process} because the
former two use a different inter process communication protocol than the
latter one.

@noindent

@subheading Interaction between checkin/checkout attributes

In the check-in codepath, the worktree file is first converted with @samp{filter}
driver (if specified and corresponding driver defined), then the result is
processed with @samp{ident} (if specified), and then finally with @samp{text} (again,
if specified and applicable).

In the check-out codepath, the blob content is first converted with @samp{text},
and then @samp{ident} and fed to @samp{filter}.

@noindent

@subheading Merging branches with differing checkin/checkout attributes

If you have added attributes to a file that cause the canonical repository
format for that file to change, such as adding a clean/smudge filter or
text/eol/ident attributes, merging anything where the attribute is not in
place would normally cause merge conflicts.

To prevent these unnecessary merge conflicts, Git can be told to run a
virtual check-out and check-in of all three stages of a file when resolving
a three-way merge by setting the @samp{merge.renormalize} configuration
variable.  This prevents changes caused by check-in conversion from causing
spurious merge conflicts when a converted file is merged with an unconverted
file.

As long as a "smudge→clean" results in the same output as a "clean" even on
files that are already smudged, this strategy will automatically resolve all
filter-related conflicts.  Filters that do not act in this way may cause
additional merge conflicts that must be resolved manually.

@noindent

@heading Generating diff text

@noindent

@subheading diff

The attribute @samp{diff} affects how Git generates diffs for particular
files. It can tell Git whether to generate a textual patch for the path or
to treat the path as a binary file.  It can also affect what line is shown
on the hunk header @samp{@@@@ -k,l +n,m @@@@} line, tell Git to use an external
command to generate the diff, or ask Git to convert binary files to a text
format before generating the diff.

@table @asis

@item  Set 
A path to which the @samp{diff} attribute is set is treated as text, even when
they contain byte values that normally never appear in text files, such as
NUL.

@item  Unset 
A path to which the @samp{diff} attribute is unset will generate @samp{Binary files
differ} (or a binary patch, if binary patches are enabled).

@item  Unspecified 
A path to which the @samp{diff} attribute is unspecified first gets its contents
inspected, and if it looks like text and is smaller than
core.bigFileThreshold, it is treated as text. Otherwise it would generate
@samp{Binary files differ}.

@item  String 
Diff is shown using the specified diff driver.  Each driver may specify one
or more options, as described in the following section. The options for the
diff driver "foo" are defined by the configuration variables in the
"diff.foo" section of the Git config file.
@end table

@noindent

@subheading Defining an external diff driver

The definition of a diff driver is done in @samp{gitconfig}, not @samp{gitattributes}
file, so strictly speaking this manual page is a wrong place to talk about
it.  However…

To define an external diff driver @samp{jcdiff}, add a section to your
@samp{$GIT_DIR/config} file (or @samp{$HOME/.gitconfig} file) like this:

@example
[diff "jcdiff"]
        command = j-c-diff
@end example


When Git needs to show you a diff for the path with @samp{diff} attribute set to
@samp{jcdiff}, it calls the command you specified with the above configuration,
i.e. @samp{j-c-diff}, with 7 parameters, just like @samp{GIT_EXTERNAL_DIFF} program is
called.  See git(1) for details.

@noindent

@subheading Defining a custom hunk-header

Each group of changes (called a "hunk") in the textual diff output is
prefixed with a line of the form:

@example
@@@@ -k,l +n,m @@@@ TEXT
@end example

This is called a @emph{hunk header}.  The "TEXT" portion is by default a line
that begins with an alphabet, an underscore or a dollar sign; this matches
what GNU @emph{diff -p} output uses.  This default selection however is not
suited for some contents, and you can use a customized pattern to make a
selection.

First, in .gitattributes, you would assign the @samp{diff} attribute for paths.

@example
*.tex   diff=tex
@end example


Then, you would define a "diff.tex.xfuncname" configuration to specify a
regular expression that matches a line that you would want to appear as the
hunk header "TEXT". Add a section to your @samp{$GIT_DIR/config} file (or
@samp{$HOME/.gitconfig} file) like this:

@example
[diff "tex"]
        xfuncname = "^(\\\\(sub)*section\\@{.*)$"
@end example


Note.  A single level of backslashes are eaten by the configuration file
parser, so you would need to double the backslashes; the pattern above picks
a line that begins with a backslash, and zero or more occurrences of @samp{sub}
followed by @samp{section} followed by open brace, to the end of line.

There are a few built-in patterns to make this easier, and @samp{tex} is one of
them, so you do not have to write the above in your configuration file (you
still need to enable this with the attribute mechanism, via
@samp{.gitattributes}).  The following built in patterns are available:

@itemize 

@item
@samp{ada} suitable for source code in the Ada language.

@item
@samp{bash} suitable for source code in the Bourne-Again SHell language.  Covers
a superset of POSIX shell function definitions.

@item
@samp{bibtex} suitable for files with BibTeX coded references.

@item
@samp{cpp} suitable for source code in the C and C++ languages.

@item
@samp{csharp} suitable for source code in the C# language.

@item
@samp{css} suitable for cascading style sheets.

@item
@samp{dts} suitable for devicetree (DTS) files.

@item
@samp{elixir} suitable for source code in the Elixir language.

@item
@samp{fortran} suitable for source code in the Fortran language.

@item
@samp{fountain} suitable for Fountain documents.

@item
@samp{golang} suitable for source code in the Go language.

@item
@samp{html} suitable for HTML/XHTML documents.

@item
@samp{java} suitable for source code in the Java language.

@item
@samp{markdown} suitable for Markdown documents.

@item
@samp{matlab} suitable for source code in the MATLAB and Octave languages.

@item
@samp{objc} suitable for source code in the Objective-C language.

@item
@samp{pascal} suitable for source code in the Pascal/Delphi language.

@item
@samp{perl} suitable for source code in the Perl language.

@item
@samp{php} suitable for source code in the PHP language.

@item
@samp{python} suitable for source code in the Python language.

@item
@samp{ruby} suitable for source code in the Ruby language.

@item
@samp{rust} suitable for source code in the Rust language.

@item
@samp{scheme} suitable for source code in the Scheme language.

@item
@samp{tex} suitable for source code for LaTeX documents.
@end itemize

@noindent

@subheading Customizing word diff

You can customize the rules that @samp{git diff --word-diff} uses to split words
in a line, by specifying an appropriate regular expression in the
"diff.*.wordRegex" configuration variable.  For example, in TeX a backslash
followed by a sequence of letters forms a command, but several such commands
can be run together without intervening whitespace.  To separate them, use a
regular expression in your @samp{$GIT_DIR/config} file (or @samp{$HOME/.gitconfig}
file) like this:

@example
[diff "tex"]
        wordRegex = "\\\\[a-zA-Z]+|[@{@}]|\\\\.|[^\\@{@}[:space:]]+"
@end example


A built-in pattern is provided for all languages listed in the previous
section.

@noindent

@subheading Performing text diffs of binary files

Sometimes it is desirable to see the diff of a text-converted version of
some binary files. For example, a word processor document can be converted
to an ASCII text representation, and the diff of the text shown. Even though
this conversion loses some information, the resulting diff is useful for
human viewing (but cannot be applied directly).

The @samp{textconv} config option is used to define a program for performing such
a conversion. The program should take a single argument, the name of a file
to convert, and produce the resulting text on stdout.

For example, to show the diff of the exif information of a file instead of
the binary information (assuming you have the exif tool installed), add the
following section to your @samp{$GIT_DIR/config} file (or @samp{$HOME/.gitconfig}
file):

@example
[diff "jpg"]
        textconv = exif
@end example


@quotation

@strong{Note}

The text conversion is generally a one-way conversion; in this example, we
lose the actual image contents and focus just on the text data. This means
that diffs generated by textconv are @emph{not} suitable for applying. For this
reason, only @samp{git diff} and the @samp{git log} family of commands (i.e., log,
whatchanged, show) will perform text conversion. @samp{git format-patch} will
never generate this output. If you want to send somebody a text-converted
diff of a binary file (e.g., because it quickly conveys the changes you have
made), you should generate it separately and send it as a comment @emph{in
addition to} the usual binary diff that you might send.
@end quotation

Because text conversion can be slow, especially when doing a large number of
them with @samp{git log -p}, Git provides a mechanism to cache the output and use
it in future diffs.  To enable caching, set the "cachetextconv" variable in
your diff driver’s config. For example:

@example
[diff "jpg"]
        textconv = exif
        cachetextconv = true
@end example


This will cache the result of running "exif" on each blob indefinitely. If
you change the textconv config variable for a diff driver, Git will
automatically invalidate the cache entries and re-run the textconv
filter. If you want to invalidate the cache manually (e.g., because your
version of "exif" was updated and now produces better output), you can
remove the cache manually with @samp{git update-ref -d refs/notes/textconv/jpg}
(where "jpg" is the name of the diff driver, as in the example above).

@noindent

@subheading Choosing textconv versus external diff

If you want to show differences between binary or specially-formatted blobs
in your repository, you can choose to use either an external diff command,
or to use textconv to convert them to a diff-able text format.  Which method
you choose depends on your exact situation.

The advantage of using an external diff command is flexibility. You are not
bound to find line-oriented changes, nor is it necessary for the output to
resemble unified diff. You are free to locate and report changes in the most
appropriate way for your data format.

A textconv, by comparison, is much more limiting. You provide a
transformation of the data into a line-oriented text format, and Git uses
its regular diff tools to generate the output. There are several advantages
to choosing this method:

@enumerate 

@item
Ease of use. It is often much simpler to write a binary to text
transformation than it is to perform your own diff. In many cases, existing
programs can be used as textconv filters (e.g., exif, odt2txt).

@item
Git diff features. By performing only the transformation step yourself, you
can still utilize many of Git’s diff features, including colorization,
word-diff, and combined diffs for merges.

@item
Caching. Textconv caching can speed up repeated diffs, such as those you
might trigger by running @samp{git log -p}.
@end enumerate

@noindent

@subheading Marking files as binary

Git usually guesses correctly whether a blob contains text or binary data by
examining the beginning of the contents. However, sometimes you may want to
override its decision, either because a blob contains binary data later in
the file, or because the content, while technically composed of text
characters, is opaque to a human reader. For example, many postscript files
contain only ASCII characters, but produce noisy and meaningless diffs.

The simplest way to mark a file as binary is to unset the diff attribute in
the @samp{.gitattributes} file:

@example
*.ps -diff
@end example


This will cause Git to generate @samp{Binary files differ} (or a binary patch, if
binary patches are enabled) instead of a regular diff.

However, one may also want to specify other diff driver attributes. For
example, you might want to use @samp{textconv} to convert postscript files to an
ASCII representation for human viewing, but otherwise treat them as binary
files. You cannot specify both @samp{-diff} and @samp{diff=ps} attributes.  The
solution is to use the @samp{diff.*.binary} config option:

@example
[diff "ps"]
  textconv = ps2ascii
  binary = true
@end example


@noindent

@heading Performing a three-way merge

@noindent

@subheading merge

The attribute @samp{merge} affects how three versions of a file are merged when a
file-level merge is necessary during @samp{git merge}, and other commands such as
@samp{git revert} and @samp{git cherry-pick}.

@table @asis

@item  Set 
Built-in 3-way merge driver is used to merge the contents in a way similar
to @emph{merge} command of @samp{RCS} suite.  This is suitable for ordinary text
files.

@item  Unset 
Take the version from the current branch as the tentative merge result, and
declare that the merge has conflicts.  This is suitable for binary files
that do not have a well-defined merge semantics.

@item  Unspecified 
By default, this uses the same built-in 3-way merge driver as is the case
when the @samp{merge} attribute is set.  However, the @samp{merge.default}
configuration variable can name different merge driver to be used with paths
for which the @samp{merge} attribute is unspecified.

@item  String 
3-way merge is performed using the specified custom merge driver.  The
built-in 3-way merge driver can be explicitly specified by asking for "text"
driver; the built-in "take the current branch" driver can be requested with
"binary".
@end table

@noindent

@subheading Built-in merge drivers

There are a few built-in low-level merge drivers defined that can be asked
for via the @samp{merge} attribute.

@table @asis

@item  text 
Usual 3-way file level merge for text files.  Conflicted regions are marked
with conflict markers @samp{<<<<<<<}, @samp{=======} and @samp{>>>>>>>}.  The version from
your branch appears before the @samp{=======} marker, and the version from the
merged branch appears after the @samp{=======} marker.

@item  binary 
Keep the version from your branch in the work tree, but leave the path in
the conflicted state for the user to sort out.

@item  union 
Run 3-way file level merge for text files, but take lines from both
versions, instead of leaving conflict markers.  This tends to leave the
added lines in the resulting file in random order and the user should verify
the result. Do not use this if you do not understand the implications.
@end table

@noindent

@subheading Defining a custom merge driver

The definition of a merge driver is done in the @samp{.git/config} file, not in
the @samp{gitattributes} file, so strictly speaking this manual page is a wrong
place to talk about it.  However…

To define a custom merge driver @samp{filfre}, add a section to your
@samp{$GIT_DIR/config} file (or @samp{$HOME/.gitconfig} file) like this:

@example
[merge "filfre"]
        name = feel-free merge driver
        driver = filfre %O %A %B %L %P
        recursive = binary
@end example


The @samp{merge.*.name} variable gives the driver a human-readable name.

The ‘merge.*.driver` variable’s value is used to construct a command to run
to merge ancestor’s version (@samp{%O}), current version (@samp{%A}) and the other
branches’ version (@samp{%B}).  These three tokens are replaced with the names of
temporary files that hold the contents of these versions when the command
line is built. Additionally, %L will be replaced with the conflict marker
size (see below).

The merge driver is expected to leave the result of the merge in the file
named with @samp{%A} by overwriting it, and exit with zero status if it managed
to merge them cleanly, or non-zero if there were conflicts.

The @samp{merge.*.recursive} variable specifies what other merge driver to use
when the merge driver is called for an internal merge between common
ancestors, when there are more than one.  When left unspecified, the driver
itself is used for both internal merge and the final merge.

The merge driver can learn the pathname in which the merged result will be
stored via placeholder @samp{%P}.

@noindent

@subheading conflict-marker-size

This attribute controls the length of conflict markers left in the work tree
file during a conflicted merge.  Only setting to the value to a positive
integer has any meaningful effect.

For example, this line in @samp{.gitattributes} can be used to tell the merge
machinery to leave much longer (instead of the usual 7-character-long)
conflict markers when merging the file @samp{Documentation/git-merge.txt} results
in a conflict.

@example
Documentation/git-merge.txt     conflict-marker-size=32
@end example


@noindent

@heading Checking whitespace errors

@noindent

@subheading whitespace

The @samp{core.whitespace} configuration variable allows you to define what
@emph{diff} and @emph{apply} should consider whitespace errors for all paths in the
project (See git-config(1)).  This attribute gives you finer control
per path.

@table @asis

@item  Set 
Notice all types of potential whitespace errors known to Git.  The tab width
is taken from the value of the @samp{core.whitespace} configuration variable.

@item  Unset 
Do not notice anything as error.

@item  Unspecified 
Use the value of the @samp{core.whitespace} configuration variable to decide what
to notice as error.

@item  String 
Specify a comma separate list of common whitespace problems to notice in the
same format as the @samp{core.whitespace} configuration variable.
@end table

@noindent

@heading Creating an archive

@noindent

@subheading export-ignore

Files and directories with the attribute @samp{export-ignore} won’t be added to
archive files.

@noindent

@subheading export-subst

If the attribute @samp{export-subst} is set for a file then Git will expand
several placeholders when adding this file to an archive.  The expansion
depends on the availability of a commit ID, i.e., if git-archive(1)
has been given a tree instead of a commit or a tag then no replacement will
be done.  The placeholders are the same as those for the option
@samp{--pretty=format:} of git-log(1), except that they need to be
wrapped like this: @samp{$Format:PLACEHOLDERS$} in the file.  E.g. the string
@samp{$Format:%H$} will be replaced by the commit hash.  However, only one
@samp{%(describe)} placeholder is expanded per archive to avoid denial-of-service
attacks.

@noindent

@heading Packing objects

@noindent

@subheading delta

Delta compression will not be attempted for blobs for paths with the
attribute @samp{delta} set to false.

@noindent

@heading Viewing files in GUI tools

@noindent

@subheading encoding

The value of this attribute specifies the character encoding that should be
used by GUI tools (e.g. gitk(1) and git-gui(1)) to display
the contents of the relevant file. Note that due to performance
considerations gitk(1) does not use this attribute unless you
manually enable per-file encodings in its options.

If this attribute is not set or has an invalid value, the value of the
@samp{gui.encoding} configuration variable is used instead (See
git-config(1)).

@noindent

@chapheading USING MACRO ATTRIBUTES

You do not want any end-of-line conversions applied to, nor textual diffs
produced for, any binary file you track.  You would need to specify e.g.

@example
*.jpg -text -diff
@end example


but that may become cumbersome, when you have many attributes.  Using macro
attributes, you can define an attribute that, when set, also sets or unsets
a number of other attributes at the same time.  The system knows a built-in
macro attribute, @samp{binary}:

@example
*.jpg binary
@end example


Setting the "binary" attribute also unsets the "text" and "diff" attributes
as above.  Note that macro attributes can only be "Set", though setting one
might have the effect of setting or unsetting other attributes or even
returning other attributes to the "Unspecified" state.

@noindent

@chapheading DEFINING MACRO ATTRIBUTES

Custom macro attributes can be defined only in top-level gitattributes files
(@samp{$GIT_DIR/info/attributes}, the @samp{.gitattributes} file at the top level of
the working tree, or the global or system-wide gitattributes files), not in
@samp{.gitattributes} files in working tree subdirectories.  The built-in macro
attribute "binary" is equivalent to:

@example
[attr]binary -diff -merge -text
@end example


@noindent

@chapheading NOTES

Git does not follow symbolic links when accessing a @samp{.gitattributes} file in
the working tree. This keeps behavior consistent when the file is accessed
from the index or a tree versus from the filesystem.

@noindent

@chapheading EXAMPLES

If you have these three @samp{gitattributes} file:

@example
(in $GIT_DIR/info/attributes)

a*      foo !bar -baz

(in .gitattributes)
abc     foo bar baz

(in t/.gitattributes)
ab*     merge=filfre
abc     -foo -bar
*.c     frotz
@end example


the attributes given to path @samp{t/abc} are computed as follows:

@enumerate 

@item
By examining @samp{t/.gitattributes} (which is in the same directory as the path
in question), Git finds that the first line matches.  @samp{merge} attribute is
set.  It also finds that the second line matches, and attributes @samp{foo} and
@samp{bar} are unset.

@item
Then it examines @samp{.gitattributes} (which is in the parent directory), and
finds that the first line matches, but @samp{t/.gitattributes} file already
decided how @samp{merge}, @samp{foo} and @samp{bar} attributes should be given to this
path, so it leaves @samp{foo} and @samp{bar} unset.  Attribute @samp{baz} is set.

@item
Finally it examines @samp{$GIT_DIR/info/attributes}.  This file is used to
override the in-tree settings.  The first line is a match, and @samp{foo} is set,
@samp{bar} is reverted to unspecified state, and @samp{baz} is unset.
@end enumerate

As the result, the attributes assignment to @samp{t/abc} becomes:

@example
foo     set to true
bar     unspecified
baz     set to false
merge   set to string value "filfre"
frotz   unspecified
@end example


@noindent

@chapheading SEE ALSO

git-check-attr(1).

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitcli,,,Top
@chapheading Name

gitcli — Git command-line interface and conventions

@noindent

@chapheading Synopsis

gitcli

@noindent

@chapheading DESCRIPTION

This manual describes the convention used throughout Git CLI.

Many commands take revisions (most often "commits", but sometimes
"tree-ish", depending on the context and command) and paths as their
arguments.  Here are the rules:

@itemize 

@item
Revisions come first and then paths.  E.g. in @samp{git diff v1.0 v2.0 arch/x86
include/asm-x86}, @samp{v1.0} and @samp{v2.0} are revisions and @samp{arch/x86} and
@samp{include/asm-x86} are paths.

@item
When an argument can be misunderstood as either a revision or a path, they
can be disambiguated by placing @samp{--} between them.  E.g. @samp{git diff -- HEAD}
is, "I have a file called HEAD in my work tree.  Please show changes between
the version I staged in the index and what I have in the work tree for that
file", not "show difference between the HEAD commit and the work tree as a
whole".  You can say @samp{git diff HEAD --} to ask for the latter.

@item
Without disambiguating @samp{--}, Git makes a reasonable guess, but errors out
and asking you to disambiguate when ambiguous.  E.g. if you have a file
called HEAD in your work tree, @samp{git diff HEAD} is ambiguous, and you have to
say either @samp{git diff HEAD --} or @samp{git diff -- HEAD} to disambiguate.

@item
Because @samp{--} disambiguates revisions and paths in some commands, it cannot
be used for those commands to separate options and revisions.  You can use
@samp{--end-of-options} for this (it also works for commands that do not
distinguish between revisions in paths, in which case it is simply an alias
for @samp{--}).

When writing a script that is expected to handle random user-input, it is a
good practice to make it explicit which arguments are which by placing
disambiguating @samp{--} at appropriate places.

@item
Many commands allow wildcards in paths, but you need to protect them from
getting globbed by the shell.  These two mean different things:

@example
$ git restore *.c
$ git restore \*.c
@end example


The former lets your shell expand the fileglob, and you are asking the dot-C
files in your working tree to be overwritten with the version in the index.
The latter passes the @samp{*.c} to Git, and you are asking the paths in the
index that match the pattern to be checked out to your working tree.  After
running @samp{git add hello.c; rm hello.c}, you will @emph{not} see @samp{hello.c} in your
working tree with the former, but with the latter you will.

@item
Just as the filesystem @emph{.} (period) refers to the current directory, using a
@emph{.} as a repository name in Git (a dot-repository) is a relative path and
means your current repository.
@end itemize

Here are the rules regarding the "flags" that you should follow when you are
scripting Git:

@itemize 

@item
it’s preferred to use the non-dashed form of Git commands, which means that
you should prefer @samp{git foo} to @samp{git-foo}.

@item
splitting short options to separate words (prefer @samp{git foo -a -b} to @samp{git
foo -ab}, the latter may not even work).

@item
when a command-line option takes an argument, use the @emph{stuck} form.  In
other words, write @samp{git foo -oArg} instead of @samp{git foo -o Arg} for short
options, and @samp{git foo --long-opt=Arg} instead of @samp{git foo --long-opt Arg}
for long options.  An option that takes optional option-argument must be
written in the @emph{stuck} form.

@item
when you give a revision parameter to a command, make sure the parameter is
not ambiguous with a name of a file in the work tree.  E.g. do not write
@samp{git log -1 HEAD} but write @samp{git log -1 HEAD --}; the former will not work
if you happen to have a file called @samp{HEAD} in the work tree.

@item
many commands allow a long option @samp{--option} to be abbreviated only to their
unique prefix (e.g. if there is no other option whose name begins with
@samp{opt}, you may be able to spell @samp{--opt} to invoke the @samp{--option} flag), but
you should fully spell them out when writing your scripts; later versions of
Git may introduce a new option whose name shares the same prefix,
e.g. @samp{--optimize}, to make a short prefix that used to be unique no longer
unique.
@end itemize

@noindent

@chapheading ENHANCED OPTION PARSER

From the Git 1.5.4 series and further, many Git commands (not all of them at
the time of the writing though) come with an enhanced option parser.

Here is a list of the facilities provided by this option parser.

@noindent

@heading Magic Options

Commands which have the enhanced option parser activated all understand a
couple of magic command-line options:

@table @asis

@item  @samp{-h} 
gives a pretty printed usage of the command.

@example
$ git describe -h
usage: git describe [<options>] <commit-ish>*
   or: git describe [<options>] --dirty

    --contains            find the tag that comes after the commit
    --debug               debug search strategy on stderr
    --all                 use any ref
    --tags                use any tag, even unannotated
    --long                always use long format
    --abbrev[=<n>]        use <n> digits to display SHA-1s
@end example


Note that some subcommand (e.g. @samp{git grep}) may behave differently when
there are things on the command line other than @samp{-h}, but @samp{git subcmd -h}
without anything else on the command line is meant to consistently give the
usage.

@item  @samp{--help-all} 
Some Git commands take options that are only used for plumbing or that are
deprecated, and such options are hidden from the default usage. This option
gives the full list of options.
@end table

@noindent

@heading Negating options

Options with long option names can be negated by prefixing @samp{--no-}. For
example, @samp{git branch} has the option @samp{--track} which is @emph{on} by default. You
can use @samp{--no-track} to override that behaviour. The same goes for @samp{--color}
and @samp{--no-color}.

@noindent

@heading Aggregating short options

Commands that support the enhanced option parser allow you to aggregate
short options. This means that you can for example use @samp{git rm -rf} or @samp{git
clean -fdx}.

@noindent

@heading Abbreviating long options

Commands that support the enhanced option parser accepts unique prefix of a
long option as if it is fully spelled out, but use this with a caution.  For
example, @samp{git commit --amen} behaves as if you typed @samp{git commit --amend},
but that is true only until a later version of Git introduces another option
that shares the same prefix, e.g. @samp{git commit --amenity} option.

@noindent

@heading Separating argument from the option

You can write the mandatory option parameter to an option as a separate word
on the command line.  That means that all the following uses work:

@example
$ git foo --long-opt=Arg
$ git foo --long-opt Arg
$ git foo -oArg
$ git foo -o Arg
@end example


However, this is @strong{NOT} allowed for switches with an optional value, where
the @emph{stuck} form must be used:

@example
$ git describe --abbrev HEAD     # correct
$ git describe --abbrev=10 HEAD  # correct
$ git describe --abbrev 10 HEAD  # NOT WHAT YOU MEANT
@end example


@noindent

@chapheading NOTES ON FREQUENTLY CONFUSED OPTIONS

Many commands that can work on files in the working tree and/or in the index
can take @samp{--cached} and/or @samp{--index} options.  Sometimes people incorrectly
think that, because the index was originally called cache, these two are
synonyms.  They are @strong{not} — these two options mean very different things.

@itemize 

@item
The @samp{--cached} option is used to ask a command that usually works on files
in the working tree to @strong{only} work with the index.  For example, @samp{git grep},
when used without a commit to specify from which commit to look for strings
in, usually works on files in the working tree, but with the @samp{--cached}
option, it looks for strings in the index.

@item
The @samp{--index} option is used to ask a command that usually works on files in
the working tree to @strong{also} affect the index.  For example, @samp{git stash apply}
usually merges changes recorded in a stash entry to the working tree, but
with the @samp{--index} option, it also merges changes to the index as well.
@end itemize

@samp{git apply} command can be used with @samp{--cached} and @samp{--index} (but not at
the same time).  Usually the command only affects the files in the working
tree, but with @samp{--index}, it patches both the files and their index entries,
and with @samp{--cached}, it modifies only the index entries.

See also
@uref{https://lore.kernel.org/git/7v64clg5u9.fsf@@assigned-by-dhcp.cox.net/,https://lore.kernel.org/git/7v64clg5u9.fsf@@assigned-by-dhcp.cox.net/} and
@uref{https://lore.kernel.org/git/7vy7ej9g38.fsf@@gitster.siamese.dyndns.org/,https://lore.kernel.org/git/7vy7ej9g38.fsf@@gitster.siamese.dyndns.org/} for
further information.

Some other commands that also work on files in the working tree and/or in
the index can take @samp{--staged} and/or @samp{--worktree}.

@itemize 

@item
@samp{--staged} is exactly like @samp{--cached}, which is used to ask a command to
only work on the index, not the working tree.

@item
@samp{--worktree} is the opposite, to ask a command to work on the working tree
only, not the index.

@item
The two options can be specified together to ask a command to work on both
the index and the working tree.
@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitcore-tutorial,,,Top
@chapheading Name

gitcore-tutorial — A Git core tutorial for developers

@noindent

@chapheading Synopsis

git *

@noindent

@chapheading DESCRIPTION

This tutorial explains how to use the "core" Git commands to set up and work
with a Git repository.

If you just need to use Git as a revision control system you may prefer to
start with "A Tutorial Introduction to Git" (gittutorial(7)) or
@uref{user-manual.html,the Git User Manual}.

However, an understanding of these low-level tools can be helpful if you
want to understand Git’s internals.

The core Git is often called "plumbing", with the prettier user interfaces
on top of it called "porcelain". You may not want to use the plumbing
directly very often, but it can be good to know what the plumbing does when
the porcelain isn’t flushing.

Back when this document was originally written, many porcelain commands were
shell scripts. For simplicity, it still uses them as examples to illustrate
how plumbing is fit together to form the porcelain commands. The source tree
includes some of these scripts in contrib/examples/ for reference. Although
these are not implemented as shell scripts anymore, the description of what
the plumbing layer commands do is still valid.

@quotation

@strong{Note}

Deeper technical details are often marked as Notes, which you can skip on
your first reading.
@end quotation

@noindent

@chapheading Creating a Git repository

Creating a new Git repository couldn’t be easier: all Git repositories start
out empty, and the only thing you need to do is find yourself a subdirectory
that you want to use as a working tree - either an empty one for a totally
new project, or an existing working tree that you want to import into Git.

For our first example, we’re going to start a totally new repository from
scratch, with no pre-existing files, and we’ll call it @emph{git-tutorial}.  To
start up, create a subdirectory for it, change into that subdirectory, and
initialize the Git infrastructure with @emph{git init}:

@example
$ mkdir git-tutorial
$ cd git-tutorial
$ git init
@end example


to which Git will reply

@example
Initialized empty Git repository in .git/
@end example


which is just Git’s way of saying that you haven’t been doing anything
strange, and that it will have created a local @samp{.git} directory setup for
your new project. You will now have a @samp{.git} directory, and you can inspect
that with @emph{ls}. For your new empty project, it should show you three
entries, among other things:

@itemize 

@item
a file called @samp{HEAD}, that has @samp{ref: refs/heads/master} in it.  This is
similar to a symbolic link and points at @samp{refs/heads/master} relative to the
@samp{HEAD} file.

Don’t worry about the fact that the file that the @samp{HEAD} link points to
doesn’t even exist yet — you haven’t created the commit that will start
your @samp{HEAD} development branch yet.

@item
a subdirectory called @samp{objects}, which will contain all the objects of your
project. You should never have any real reason to look at the objects
directly, but you might want to know that these objects are what contains
all the real @emph{data} in your repository.

@item
a subdirectory called @samp{refs}, which contains references to objects.
@end itemize

In particular, the @samp{refs} subdirectory will contain two other
subdirectories, named @samp{heads} and @samp{tags} respectively. They do exactly what
their names imply: they contain references to any number of different
@emph{heads} of development (aka @emph{branches}), and to any @emph{tags} that you have
created to name specific versions in your repository.

One note: the special @samp{master} head is the default branch, which is why the
@samp{.git/HEAD} file was created points to it even if it doesn’t yet
exist. Basically, the @samp{HEAD} link is supposed to always point to the branch
you are working on right now, and you always start out expecting to work on
the @samp{master} branch.

However, this is only a convention, and you can name your branches anything
you want, and don’t have to ever even @emph{have} a @samp{master} branch. A number of
the Git tools will assume that @samp{.git/HEAD} is valid, though.

@quotation

@strong{Note}

An @emph{object} is identified by its 160-bit SHA-1 hash, aka @emph{object name}, and
a reference to an object is always the 40-byte hex representation of that
SHA-1 name. The files in the @samp{refs} subdirectory are expected to contain
these hex references (usually with a final @samp{\n} at the end), and you should
thus expect to see a number of 41-byte files containing these references in
these @samp{refs} subdirectories when you actually start populating your tree.
@end quotation

@quotation

@strong{Note}

An advanced user may want to take a look at gitrepository-layout(5)
after finishing this tutorial.
@end quotation

You have now created your first Git repository. Of course, since it’s empty,
that’s not very useful, so let’s start populating it with data.

@noindent

@chapheading Populating a Git repository

We’ll keep this simple and stupid, so we’ll start off with populating a few
trivial files just to get a feel for it.

Start off with just creating any random files that you want to maintain in
your Git repository. We’ll start off with a few bad examples, just to get a
feel for how this works:

@example
$ echo "Hello World" >hello
$ echo "Silly example" >example
@end example


you have now created two files in your working tree (aka @emph{working
directory}), but to actually check in your hard work, you will have to go
through two steps:

@itemize 

@item
fill in the @emph{index} file (aka @emph{cache}) with the information about your
working tree state.

@item
commit that index file as an object.
@end itemize

The first step is trivial: when you want to tell Git about any changes to
your working tree, you use the @emph{git update-index} program. That program
normally just takes a list of filenames you want to update, but to avoid
trivial mistakes, it refuses to add new entries to the index (or remove
existing ones) unless you explicitly tell it that you’re adding a new entry
with the @samp{--add} flag (or removing an entry with the @samp{--remove}) flag.

So to populate the index with the two files you just created, you can do

@example
$ git update-index --add hello example
@end example


and you have now told Git to track those two files.

In fact, as you did that, if you now look into your object directory, you’ll
notice that Git will have added two new objects to the object database. If
you did exactly the steps above, you should now be able to do

@example
$ ls .git/objects/??/*
@end example


and see two files:

@example
.git/objects/55/7db03de997c86a4a028e1ebd3a1ceb225be238
.git/objects/f2/4c74a2e500f5ee1332c86b94199f52b1d1d962
@end example


which correspond with the objects with names of @samp{557db...} and @samp{f24c7...}
respectively.

If you want to, you can use @emph{git cat-file} to look at those objects, but
you’ll have to use the object name, not the filename of the object:

@example
$ git cat-file -t 557db03de997c86a4a028e1ebd3a1ceb225be238
@end example


where the @samp{-t} tells @emph{git cat-file} to tell you what the "type" of the
object is. Git will tell you that you have a "blob" object (i.e., just a
regular file), and you can see the contents with

@example
$ git cat-file blob 557db03
@end example


which will print out "Hello World". The object @samp{557db03} is nothing more
than the contents of your file @samp{hello}.

@quotation

@strong{Note}

Don’t confuse that object with the file @samp{hello} itself. The object is
literally just those specific @strong{contents} of the file, and however much you
later change the contents in file @samp{hello}, the object we just looked at will
never change. Objects are immutable.
@end quotation

@quotation

@strong{Note}

The second example demonstrates that you can abbreviate the object name to
only the first several hexadecimal digits in most places.
@end quotation

Anyway, as we mentioned previously, you normally never actually take a look
at the objects themselves, and typing long 40-character hex names is not
something you’d normally want to do. The above digression was just to show
that @emph{git update-index} did something magical, and actually saved away the
contents of your files into the Git object database.

Updating the index did something else too: it created a @samp{.git/index}
file. This is the index that describes your current working tree, and
something you should be very aware of. Again, you normally never worry about
the index file itself, but you should be aware of the fact that you have not
actually really "checked in" your files into Git so far, you’ve only @strong{told}
Git about them.

However, since Git knows about them, you can now start using some of the
most basic Git commands to manipulate the files or look at their status.

In particular, let’s not even check in the two files into Git yet, we’ll
start off by adding another line to @samp{hello} first:

@example
$ echo "It's a new day for git" >>hello
@end example


and you can now, since you told Git about the previous state of @samp{hello}, ask
Git what has changed in the tree compared to your old index, using the @emph{git
diff-files} command:

@example
$ git diff-files
@end example


Oops. That wasn’t very readable. It just spit out its own internal version
of a @emph{diff}, but that internal version really just tells you that it has
noticed that "hello" has been modified, and that the old object contents it
had have been replaced with something else.

To make it readable, we can tell @emph{git diff-files} to output the differences
as a patch, using the @samp{-p} flag:

@example
$ git diff-files -p
diff --git a/hello b/hello
index 557db03..263414f 100644
--- a/hello
+++ b/hello
@@@@ -1 +1,2 @@@@
 Hello World
+It's a new day for git
@end example


i.e. the diff of the change we caused by adding another line to @samp{hello}.

In other words, @emph{git diff-files} always shows us the difference between what
is recorded in the index, and what is currently in the working tree. That’s
very useful.

A common shorthand for @samp{git diff-files -p} is to just write @samp{git diff},
which will do the same thing.

@example
$ git diff
diff --git a/hello b/hello
index 557db03..263414f 100644
--- a/hello
+++ b/hello
@@@@ -1 +1,2 @@@@
 Hello World
+It's a new day for git
@end example


@noindent

@chapheading Committing Git state

Now, we want to go to the next stage in Git, which is to take the files that
Git knows about in the index, and commit them as a real tree. We do that in
two phases: creating a @emph{tree} object, and committing that @emph{tree} object as a
@emph{commit} object together with an explanation of what the tree was all about,
along with information of how we came to that state.

Creating a tree object is trivial, and is done with @emph{git write-tree}.  There
are no options or other input: @samp{git write-tree} will take the current index
state, and write an object that describes that whole index. In other words,
we’re now tying together all the different filenames with their contents
(and their permissions), and we’re creating the equivalent of a Git
"directory" object:

@example
$ git write-tree
@end example


and this will just output the name of the resulting tree, in this case (if
you have done exactly as I’ve described) it should be

@example
8988da15d077d4829fc51d8544c097def6644dbb
@end example


which is another incomprehensible object name. Again, if you want to, you
can use @samp{git cat-file -t 8988d...} to see that this time the object is not a
"blob" object, but a "tree" object (you can also use @samp{git cat-file} to
actually output the raw object contents, but you’ll see mainly a binary
mess, so that’s less interesting).

However — normally you’d never use @emph{git write-tree} on its own, because
normally you always commit a tree into a commit object using the @emph{git
commit-tree} command. In fact, it’s easier to not actually use @emph{git
write-tree} on its own at all, but to just pass its result in as an argument
to @emph{git commit-tree}.

@emph{git commit-tree} normally takes several arguments — it wants to know what
the @emph{parent} of a commit was, but since this is the first commit ever in
this new repository, and it has no parents, we only need to pass in the
object name of the tree. However, @emph{git commit-tree} also wants to get a
commit message on its standard input, and it will write out the resulting
object name for the commit to its standard output.

And this is where we create the @samp{.git/refs/heads/master} file which is
pointed at by @samp{HEAD}. This file is supposed to contain the reference to the
top-of-tree of the master branch, and since that’s exactly what @emph{git
commit-tree} spits out, we can do this all with a sequence of simple shell
commands:

@example
$ tree=$(git write-tree)
$ commit=$(echo 'Initial commit' | git commit-tree $tree)
$ git update-ref HEAD $commit
@end example


In this case this creates a totally new commit that is not related to
anything else. Normally you do this only @strong{once} for a project ever, and all
later commits will be parented on top of an earlier commit.

Again, normally you’d never actually do this by hand. There is a helpful
script called @samp{git commit} that will do all of this for you. So you could
have just written @samp{git commit} instead, and it would have done the above
magic scripting for you.

@noindent

@chapheading Making a change

Remember how we did the @emph{git update-index} on file @samp{hello} and then we
changed @samp{hello} afterward, and could compare the new state of @samp{hello} with
the state we saved in the index file?

Further, remember how I said that @emph{git write-tree} writes the contents of
the @strong{index} file to the tree, and thus what we just committed was in fact
the @strong{original} contents of the file @samp{hello}, not the new ones. We did that
on purpose, to show the difference between the index state, and the state in
the working tree, and how they don’t have to match, even when we commit
things.

As before, if we do @samp{git diff-files -p} in our git-tutorial project, we’ll
still see the same difference we saw last time: the index file hasn’t
changed by the act of committing anything. However, now that we have
committed something, we can also learn to use a new command: @emph{git
diff-index}.

Unlike @emph{git diff-files}, which showed the difference between the index file
and the working tree, @emph{git diff-index} shows the differences between a
committed @strong{tree} and either the index file or the working tree. In other
words, @emph{git diff-index} wants a tree to be diffed against, and before we did
the commit, we couldn’t do that, because we didn’t have anything to diff
against.

But now we can do

@example
$ git diff-index -p HEAD
@end example


(where @samp{-p} has the same meaning as it did in @emph{git diff-files}), and it will
show us the same difference, but for a totally different reason.  Now we’re
comparing the working tree not against the index file, but against the tree
we just wrote. It just so happens that those two are obviously the same, so
we get the same result.

Again, because this is a common operation, you can also just shorthand it
with

@example
$ git diff HEAD
@end example


which ends up doing the above for you.

In other words, @emph{git diff-index} normally compares a tree against the
working tree, but when given the @samp{--cached} flag, it is told to instead
compare against just the index cache contents, and ignore the current
working tree state entirely. Since we just wrote the index file to HEAD,
doing @samp{git diff-index --cached -p HEAD} should thus return an empty set of
differences, and that’s exactly what it does.

@quotation

@strong{Note}

@emph{git diff-index} really always uses the index for its comparisons, and
saying that it compares a tree against the working tree is thus not strictly
accurate. In particular, the list of files to compare (the "meta-data")
@strong{always} comes from the index file, regardless of whether the @samp{--cached}
flag is used or not. The @samp{--cached} flag really only determines whether the
file @strong{contents} to be compared come from the working tree or not.

This is not hard to understand, as soon as you realize that Git simply never
knows (or cares) about files that it is not told about explicitly. Git will
never go @strong{looking} for files to compare, it expects you to tell it what the
files are, and that’s what the index is there for.
@end quotation

However, our next step is to commit the @strong{change} we did, and again, to
understand what’s going on, keep in mind the difference between "working
tree contents", "index file" and "committed tree". We have changes in the
working tree that we want to commit, and we always have to work through the
index file, so the first thing we need to do is to update the index cache:

@example
$ git update-index hello
@end example


(note how we didn’t need the @samp{--add} flag this time, since Git knew about
the file already).

Note what happens to the different @emph{git diff-*} versions here.
After we’ve updated @samp{hello} in the index, @samp{git diff-files -p} now shows no
differences, but @samp{git diff-index -p HEAD} still @strong{does} show that the current
state is different from the state we committed. In fact, now @emph{git
diff-index} shows the same difference whether we use the @samp{--cached} flag or
not, since now the index is coherent with the working tree.

Now, since we’ve updated @samp{hello} in the index, we can commit the new
version. We could do it by writing the tree by hand again, and committing
the tree (this time we’d have to use the @samp{-p HEAD} flag to tell commit that
the HEAD was the @strong{parent} of the new commit, and that this wasn’t an initial
commit any more), but you’ve done that once already, so let’s just use the
helpful script this time:

@example
$ git commit
@end example


which starts an editor for you to write the commit message and tells you a
bit about what you have done.

Write whatever message you want, and all the lines that start with @emph{#} will
be pruned out, and the rest will be used as the commit message for the
change. If you decide you don’t want to commit anything after all at this
point (you can continue to edit things and update the index), you can just
leave an empty message. Otherwise @samp{git commit} will commit the change for
you.

You’ve now made your first real Git commit. And if you’re interested in
looking at what @samp{git commit} really does, feel free to investigate: it’s a
few very simple shell scripts to generate the helpful (?) commit message
headers, and a few one-liners that actually do the commit itself (@emph{git
commit}).

@noindent

@chapheading Inspecting Changes

While creating changes is useful, it’s even more useful if you can tell
later what changed. The most useful command for this is another of the
@emph{diff} family, namely @emph{git diff-tree}.

@emph{git diff-tree} can be given two arbitrary trees, and it will tell you the
differences between them. Perhaps even more commonly, though, you can give
it just a single commit object, and it will figure out the parent of that
commit itself, and show the difference directly. Thus, to get the same diff
that we’ve already seen several times, we can now do

@example
$ git diff-tree -p HEAD
@end example


(again, @samp{-p} means to show the difference as a human-readable patch), and it
will show what the last commit (in @samp{HEAD}) actually changed.

@quotation

@strong{Note}

Here is an ASCII art by Jon Loeliger that illustrates how various
@emph{diff-*} commands compare things.

@example
            diff-tree
             +----+
             |    |
             |    |
             V    V
          +-----------+
          | Object DB |
          |  Backing  |
          |   Store   |
          +-----------+
            ^    ^
            |    |
            |    |  diff-index --cached
            |    |
diff-index  |    V
            |  +-----------+
            |  |   Index   |
            |  |  "cache"  |
            |  +-----------+
            |    ^
            |    |
            |    |  diff-files
            |    |
            V    V
          +-----------+
          |  Working  |
          | Directory |
          +-----------+
@end example
@end quotation

More interestingly, you can also give @emph{git diff-tree} the @samp{--pretty} flag,
which tells it to also show the commit message and author and date of the
commit, and you can tell it to show a whole series of diffs.  Alternatively,
you can tell it to be "silent", and not show the diffs at all, but just show
the actual commit message.

In fact, together with the @emph{git rev-list} program (which generates a list of
revisions), @emph{git diff-tree} ends up being a veritable fount of changes.  You
can emulate @samp{git log}, @samp{git log -p}, etc. with a trivial script that pipes
the output of @samp{git rev-list} to @samp{git diff-tree --stdin}, which was exactly
how early versions of @samp{git log} were implemented.

@noindent

@chapheading Tagging a version

In Git, there are two kinds of tags, a "light" one, and an "annotated tag".

A "light" tag is technically nothing more than a branch, except we put it in
the @samp{.git/refs/tags/} subdirectory instead of calling it a @samp{head}.  So the
simplest form of tag involves nothing more than

@example
$ git tag my-first-tag
@end example


which just writes the current @samp{HEAD} into the @samp{.git/refs/tags/my-first-tag}
file, after which point you can then use this symbolic name for that
particular state. You can, for example, do

@example
$ git diff my-first-tag
@end example


to diff your current state against that tag which at this point will
obviously be an empty diff, but if you continue to develop and commit stuff,
you can use your tag as an "anchor-point" to see what has changed since you
tagged it.

An "annotated tag" is actually a real Git object, and contains not only a
pointer to the state you want to tag, but also a small tag name and message,
along with optionally a PGP signature that says that yes, you really did
that tag. You create these annotated tags with either the @samp{-a} or @samp{-s} flag
to @emph{git tag}:

@example
$ git tag -s <tagname>
@end example


which will sign the current @samp{HEAD} (but you can also give it another
argument that specifies the thing to tag, e.g., you could have tagged the
current @samp{mybranch} point by using @samp{git tag <tagname> mybranch}).

You normally only do signed tags for major releases or things like that,
while the light-weight tags are useful for any marking you want to do — any
time you decide that you want to remember a certain point, just create a
private tag for it, and you have a nice symbolic name for the state at that
point.

@noindent

@chapheading Copying repositories

Git repositories are normally totally self-sufficient and relocatable.
Unlike CVS, for example, there is no separate notion of "repository" and
"working tree". A Git repository normally @strong{is} the working tree, with the
local Git information hidden in the @samp{.git} subdirectory. There is nothing
else. What you see is what you got.

@quotation

@strong{Note}

You can tell Git to split the Git internal information from the directory
that it tracks, but we’ll ignore that for now: it’s not how normal projects
work, and it’s really only meant for special uses.  So the mental model of
"the Git information is always tied directly to the working tree that it
describes" may not be technically 100% accurate, but it’s a good model for
all normal use.
@end quotation

This has two implications:

@itemize 

@item
if you grow bored with the tutorial repository you created (or you’ve made a
mistake and want to start all over), you can just do simple

@example
$ rm -rf git-tutorial
@end example


and it will be gone. There’s no external repository, and there’s no history
outside the project you created.

@item
if you want to move or duplicate a Git repository, you can do so. There is
@emph{git clone} command, but if all you want to do is just to create a copy of
your repository (with all the full history that went along with it), you can
do so with a regular @samp{cp -a git-tutorial new-git-tutorial}.

Note that when you’ve moved or copied a Git repository, your Git index file
(which caches various information, notably some of the "stat" information
for the files involved) will likely need to be refreshed.  So after you do a
@samp{cp -a} to create a new copy, you’ll want to do

@example
$ git update-index --refresh
@end example


in the new repository to make sure that the index file is up to date.
@end itemize

Note that the second point is true even across machines. You can duplicate a
remote Git repository with @strong{any} regular copy mechanism, be it @emph{scp},
@emph{rsync} or @emph{wget}.

When copying a remote repository, you’ll want to at a minimum update the
index cache when you do this, and especially with other peoples'
repositories you often want to make sure that the index cache is in some
known state (you don’t know @strong{what} they’ve done and not yet checked in), so
usually you’ll precede the @emph{git update-index} with a

@example
$ git read-tree --reset HEAD
$ git update-index --refresh
@end example


which will force a total index re-build from the tree pointed to by @samp{HEAD}.
It resets the index contents to @samp{HEAD}, and then the @emph{git update-index}
makes sure to match up all index entries with the checked-out files.  If the
original repository had uncommitted changes in its working tree, @samp{git
update-index --refresh} notices them and tells you they need to be updated.

The above can also be written as simply

@example
$ git reset
@end example


and in fact a lot of the common Git command combinations can be scripted
with the @samp{git xyz} interfaces.  You can learn things by just looking at what
the various git scripts do.  For example, @samp{git reset} used to be the above
two lines implemented in @emph{git reset}, but some things like @emph{git status} and
@emph{git commit} are slightly more complex scripts around the basic Git
commands.

Many (most?) public remote repositories will not contain any of the checked
out files or even an index file, and will @strong{only} contain the actual core Git
files. Such a repository usually doesn’t even have the @samp{.git} subdirectory,
but has all the Git files directly in the repository.

To create your own local live copy of such a "raw" Git repository, you’d
first create your own subdirectory for the project, and then copy the raw
repository contents into the @samp{.git} directory. For example, to create your
own copy of the Git repository, you’d do the following

@example
$ mkdir my-git
$ cd my-git
$ rsync -rL rsync://rsync.kernel.org/pub/scm/git/git.git/ .git
@end example


followed by

@example
$ git read-tree HEAD
@end example


to populate the index. However, now you have populated the index, and you
have all the Git internal files, but you will notice that you don’t actually
have any of the working tree files to work on. To get those, you’d check
them out with

@example
$ git checkout-index -u -a
@end example


where the @samp{-u} flag means that you want the checkout to keep the index up to
date (so that you don’t have to refresh it afterward), and the @samp{-a} flag
means "check out all files" (if you have a stale copy or an older version of
a checked out tree you may also need to add the @samp{-f} flag first, to tell
@emph{git checkout-index} to @strong{force} overwriting of any old files).

Again, this can all be simplified with

@example
$ git clone git://git.kernel.org/pub/scm/git/git.git/ my-git
$ cd my-git
$ git checkout
@end example


which will end up doing all of the above for you.

You have now successfully copied somebody else’s (mine) remote repository,
and checked it out.

@noindent

@chapheading Creating a new branch

Branches in Git are really nothing more than pointers into the Git object
database from within the @samp{.git/refs/} subdirectory, and as we already
discussed, the @samp{HEAD} branch is nothing but a symlink to one of these object
pointers.

You can at any time create a new branch by just picking an arbitrary point
in the project history, and just writing the SHA-1 name of that object into
a file under @samp{.git/refs/heads/}. You can use any filename you want (and
indeed, subdirectories), but the convention is that the "normal" branch is
called @samp{master}. That’s just a convention, though, and nothing enforces it.

To show that as an example, let’s go back to the git-tutorial repository we
used earlier, and create a branch in it. You do that by simply just saying
that you want to check out a new branch:

@example
$ git switch -c mybranch
@end example


will create a new branch based at the current @samp{HEAD} position, and switch to
it.

@quotation

@strong{Note}

If you make the decision to start your new branch at some other point in the
history than the current @samp{HEAD}, you can do so by just telling @emph{git switch}
what the base of the checkout would be.  In other words, if you have an
earlier tag or branch, you’d just do

@example
$ git switch -c mybranch earlier-commit
@end example


and it would create the new branch @samp{mybranch} at the earlier commit, and
check out the state at that time.
@end quotation

You can always just jump back to your original @samp{master} branch by doing

@example
$ git switch master
@end example


(or any other branch-name, for that matter) and if you forget which branch
you happen to be on, a simple

@example
$ cat .git/HEAD
@end example


will tell you where it’s pointing.  To get the list of branches you have,
you can say

@example
$ git branch
@end example


which used to be nothing more than a simple script around @samp{ls
.git/refs/heads}.  There will be an asterisk in front of the branch you are
currently on.

Sometimes you may wish to create a new branch @emph{without} actually checking it
out and switching to it. If so, just use the command

@example
$ git branch <branchname> [startingpoint]
@end example


which will simply @emph{create} the branch, but will not do anything further.
You can then later — once you decide that you want to actually develop on
that branch — switch to that branch with a regular @emph{git switch} with the
branchname as the argument.

@noindent

@chapheading Merging two branches

One of the ideas of having a branch is that you do some (possibly
experimental) work in it, and eventually merge it back to the main
branch. So assuming you created the above @samp{mybranch} that started out being
the same as the original @samp{master} branch, let’s make sure we’re in that
branch, and do some work there.

@example
$ git switch mybranch
$ echo "Work, work, work" >>hello
$ git commit -m "Some work." -i hello
@end example


Here, we just added another line to @samp{hello}, and we used a shorthand for
doing both @samp{git update-index hello} and @samp{git commit} by just giving the
filename directly to @samp{git commit}, with an @samp{-i} flag (it tells Git to
@emph{include} that file in addition to what you have done to the index file so
far when making the commit).  The @samp{-m} flag is to give the commit log
message from the command line.

Now, to make it a bit more interesting, let’s assume that somebody else does
some work in the original branch, and simulate that by going back to the
master branch, and editing the same file differently there:

@example
$ git switch master
@end example


Here, take a moment to look at the contents of @samp{hello}, and notice how they
don’t contain the work we just did in @samp{mybranch} — because that work hasn’t
happened in the @samp{master} branch at all. Then do

@example
$ echo "Play, play, play" >>hello
$ echo "Lots of fun" >>example
$ git commit -m "Some fun." -i hello example
@end example


since the master branch is obviously in a much better mood.

Now, you’ve got two branches, and you decide that you want to merge the work
done. Before we do that, let’s introduce a cool graphical tool that helps
you view what’s going on:

@example
$ gitk --all
@end example


will show you graphically both of your branches (that’s what the @samp{--all}
means: normally it will just show you your current @samp{HEAD}) and their
histories. You can also see exactly how they came to be from a common
source.

Anyway, let’s exit @emph{gitk} (@samp{^Q} or the File menu), and decide that we want
to merge the work we did on the @samp{mybranch} branch into the @samp{master} branch
(which is currently our @samp{HEAD} too). To do that, there’s a nice script
called @emph{git merge}, which wants to know which branches you want to resolve
and what the merge is all about:

@example
$ git merge -m "Merge work in mybranch" mybranch
@end example


where the first argument is going to be used as the commit message if the
merge can be resolved automatically.

Now, in this case we’ve intentionally created a situation where the merge
will need to be fixed up by hand, though, so Git will do as much of it as it
can automatically (which in this case is just merge the @samp{example} file,
which had no differences in the @samp{mybranch} branch), and say:

@example
        Auto-merging hello
        CONFLICT (content): Merge conflict in hello
        Automatic merge failed; fix conflicts and then commit the result.
@end example


It tells you that it did an "Automatic merge", which failed due to conflicts
in @samp{hello}.

Not to worry. It left the (trivial) conflict in @samp{hello} in the same form you
should already be well used to if you’ve ever used CVS, so let’s just open
@samp{hello} in our editor (whatever that may be), and fix it up somehow.  I’d
suggest just making it so that @samp{hello} contains all four lines:

@example
Hello World
It's a new day for git
Play, play, play
Work, work, work
@end example


and once you’re happy with your manual merge, just do a

@example
$ git commit -i hello
@end example


which will very loudly warn you that you’re now committing a merge (which is
correct, so never mind), and you can write a small merge message about your
adventures in @emph{git merge}-land.

After you’re done, start up @samp{gitk --all} to see graphically what the history
looks like. Notice that @samp{mybranch} still exists, and you can switch to it,
and continue to work with it if you want to. The @samp{mybranch} branch will not
contain the merge, but next time you merge it from the @samp{master} branch, Git
will know how you merged it, so you’ll not have to do @emph{that} merge again.

Another useful tool, especially if you do not always work in X-Window
environment, is @samp{git show-branch}.

@example
$ git show-branch --topo-order --more=1 master mybranch
* [master] Merge work in mybranch
 ! [mybranch] Some work.
--
- [master] Merge work in mybranch *+ [mybranch] Some work.  * [master^] Some
fun.
@end example


The first two lines indicate that it is showing the two branches with the
titles of their top-of-the-tree commits, you are currently on @samp{master}
branch (notice the asterisk @samp{*} character), and the first column for the
later output lines is used to show commits contained in the @samp{master} branch,
and the second column for the @samp{mybranch} branch. Three commits are shown
along with their titles.  All of them have non blank characters in the first
column (@samp{*} shows an ordinary commit on the current branch, @samp{-} is a merge
commit), which means they are now part of the @samp{master} branch. Only the
"Some work" commit has the plus @samp{+} character in the second column, because
@samp{mybranch} has not been merged to incorporate these commits from the master
branch.  The string inside brackets before the commit log message is a short
name you can use to name the commit.  In the above example, @emph{master} and
@emph{mybranch} are branch heads.  @emph{master^} is the first parent of @emph{master}
branch head.  Please see gitrevisions(7) if you want to see more
complex cases.

@quotation

@strong{Note}

Without the @emph{--more=1} option, @emph{git show-branch} would not output the
@emph{[master^]} commit, as @emph{[mybranch]} commit is a common ancestor of both
@emph{master} and @emph{mybranch} tips.  Please see git-show-branch(1) for
details.
@end quotation

@quotation

@strong{Note}

If there were more commits on the @emph{master} branch after the merge, the merge
commit itself would not be shown by @emph{git show-branch} by default.  You would
need to provide @samp{--sparse} option to make the merge commit visible in this
case.
@end quotation

Now, let’s pretend you are the one who did all the work in @samp{mybranch}, and
the fruit of your hard work has finally been merged to the @samp{master}
branch. Let’s go back to @samp{mybranch}, and run @emph{git merge} to get the
"upstream changes" back to your branch.

@example
$ git switch mybranch
$ git merge -m "Merge upstream changes." master
@end example


This outputs something like this (the actual commit object names would be
different)

@example
Updating from ae3a2da... to a80b4aa....
Fast-forward (no commit created; -m option ignored)
 example | 1 +
 hello   | 1 +
 2 files changed, 2 insertions(+)
@end example


Because your branch did not contain anything more than what had already been
merged into the @samp{master} branch, the merge operation did not actually do a
merge. Instead, it just updated the top of the tree of your branch to that
of the @samp{master} branch. This is often called @emph{fast-forward} merge.

You can run @samp{gitk --all} again to see how the commit ancestry looks like, or
run @emph{show-branch}, which tells you this.

@example
$ git show-branch master mybranch
! [master] Merge work in mybranch
 * [mybranch] Merge work in mybranch
--
-- [master] Merge work in mybranch
@end example


@noindent

@chapheading Merging external work

It’s usually much more common that you merge with somebody else than merging
with your own branches, so it’s worth pointing out that Git makes that very
easy too, and in fact, it’s not that different from doing a @emph{git merge}. In
fact, a remote merge ends up being nothing more than "fetch the work from a
remote repository into a temporary tag" followed by a @emph{git merge}.

Fetching from a remote repository is done by, unsurprisingly, @emph{git fetch}:

@example
$ git fetch <remote-repository>
@end example


One of the following transports can be used to name the repository to
download from:

@table @asis

@item  SSH 
@samp{remote.machine:/path/to/repo.git/} or

@samp{ssh://remote.machine/path/to/repo.git/}

This transport can be used for both uploading and downloading, and requires
you to have a log-in privilege over @samp{ssh} to the remote machine.  It finds
out the set of objects the other side lacks by exchanging the head commits
both ends have and transfers (close to) minimum set of objects.  It is by
far the most efficient way to exchange Git objects between repositories.

@item  Local directory 
@samp{/path/to/repo.git/}

This transport is the same as SSH transport but uses @emph{sh} to run both ends
on the local machine instead of running other end on the remote machine via
@emph{ssh}.

@item  Git Native 
@samp{git://remote.machine/path/to/repo.git/}

This transport was designed for anonymous downloading.  Like SSH transport,
it finds out the set of objects the downstream side lacks and transfers
(close to) minimum set of objects.

@item  HTTP(S) 
@samp{http://remote.machine/path/to/repo.git/}

Downloader from http and https URL first obtains the topmost commit object
name from the remote site by looking at the specified refname under
@samp{repo.git/refs/} directory, and then tries to obtain the commit object by
downloading from @samp{repo.git/objects/xx/xxx...} using the object name of that
commit object.  Then it reads the commit object to find out its parent
commits and the associate tree object; it repeats this process until it gets
all the necessary objects.  Because of this behavior, they are sometimes
also called @emph{commit walkers}.

The @emph{commit walkers} are sometimes also called @emph{dumb transports}, because
they do not require any Git aware smart server like Git Native transport
does.  Any stock HTTP server that does not even support directory index
would suffice.  But you must prepare your repository with @emph{git
update-server-info} to help dumb transport downloaders.
@end table

Once you fetch from the remote repository, you @samp{merge} that with your
current branch.

However — it’s such a common thing to @samp{fetch} and then immediately @samp{merge},
that it’s called @samp{git pull}, and you can simply do

@example
$ git pull <remote-repository>
@end example


and optionally give a branch-name for the remote end as a second argument.

@quotation

@strong{Note}

You could do without using any branches at all, by keeping as many local
repositories as you would like to have branches, and merging between them
with @emph{git pull}, just like you merge between branches. The advantage of this
approach is that it lets you keep a set of files for each @samp{branch} checked
out and you may find it easier to switch back and forth if you juggle
multiple lines of development simultaneously. Of course, you will pay the
price of more disk usage to hold multiple working trees, but disk space is
cheap these days.
@end quotation

It is likely that you will be pulling from the same remote repository from
time to time. As a short hand, you can store the remote repository URL in
the local repository’s config file like this:

@example
$ git config remote.linus.url http://www.kernel.org/pub/scm/git/git.git/
@end example


and use the "linus" keyword with @emph{git pull} instead of the full URL.

Examples.

@enumerate 

@item
@samp{git pull linus}

@item
@samp{git pull linus tag v0.99.1}
@end enumerate

the above are equivalent to:

@enumerate 

@item
@samp{git pull http://www.kernel.org/pub/scm/git/git.git/ HEAD}

@item
@samp{git pull http://www.kernel.org/pub/scm/git/git.git/ tag v0.99.1}
@end enumerate

@noindent

@chapheading How does the merge work?

We said this tutorial shows what plumbing does to help you cope with the
porcelain that isn’t flushing, but we so far did not talk about how the
merge really works.  If you are following this tutorial the first time, I’d
suggest to skip to "Publishing your work" section and come back here later.

OK, still with me? To give us an example to look at, let’s go back to the
earlier repository with "hello" and "example" file, and bring ourselves back
to the pre-merge state:

@example
$ git show-branch --more=2 master mybranch
! [master] Merge work in mybranch
 * [mybranch] Merge work in mybranch
--
-- [master] Merge work in mybranch +* [master^2] Some work.  +* [master^]
Some fun.
@end example


Remember, before running @emph{git merge}, our @samp{master} head was at "Some fun."
commit, while our @samp{mybranch} head was at "Some work." commit.

@example
$ git switch -C mybranch master^2
$ git switch master
$ git reset --hard master^
@end example


After rewinding, the commit structure should look like this:

@example
$ git show-branch
* [master] Some fun.
 ! [mybranch] Some work.
--
*  [master] Some fun.
 + [mybranch] Some work.
*+ [master^] Initial commit
@end example


Now we are ready to experiment with the merge by hand.

@samp{git merge} command, when merging two branches, uses 3-way merge algorithm.
First, it finds the common ancestor between them.  The command it uses is
@emph{git merge-base}:

@example
$ mb=$(git merge-base HEAD mybranch)
@end example


The command writes the commit object name of the common ancestor to the
standard output, so we captured its output to a variable, because we will be
using it in the next step.  By the way, the common ancestor commit is the
"Initial commit" commit in this case.  You can tell it by:

@example
$ git name-rev --name-only --tags $mb
my-first-tag
@end example


After finding out a common ancestor commit, the second step is this:

@example
$ git read-tree -m -u $mb HEAD mybranch
@end example


This is the same @emph{git read-tree} command we have already seen, but it takes
three trees, unlike previous examples.  This reads the contents of each tree
into different @emph{stage} in the index file (the first tree goes to stage 1,
the second to stage 2, etc.).  After reading three trees into three stages,
the paths that are the same in all three stages are @emph{collapsed} into stage
0.  Also paths that are the same in two of three stages are collapsed into stage
0, taking the SHA-1 from either stage 2 or stage 3, whichever is different
from stage 1 (i.e. only one side changed from the common ancestor).

After @emph{collapsing} operation, paths that are different in three trees are
left in non-zero stages.  At this point, you can inspect the index file with
this command:

@example
$ git ls-files --stage
100644 7f8b141b65fdcee47321e399a2598a235a032422 0       example
100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1       hello
100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2       hello
100644 cc44c73eb783565da5831b4d820c962954019b69 3       hello
@end example


In our example of only two files, we did not have unchanged files so only
@emph{example} resulted in collapsing.  But in real-life large projects, when
only a small number of files change in one commit, this @emph{collapsing} tends
to trivially merge most of the paths fairly quickly, leaving only a handful
of real changes in non-zero stages.

To look at only non-zero stages, use @samp{--unmerged} flag:

@example
$ git ls-files --unmerged
100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1       hello
100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2       hello
100644 cc44c73eb783565da5831b4d820c962954019b69 3       hello
@end example


The next step of merging is to merge these three versions of the file, using
3-way merge.  This is done by giving @emph{git merge-one-file} command as one of
the arguments to @emph{git merge-index} command:

@example
$ git merge-index git-merge-one-file hello
Auto-merging hello
ERROR: Merge conflict in hello
fatal: merge program failed
@end example


@emph{git merge-one-file} script is called with parameters to describe those
three versions, and is responsible to leave the merge results in the working
tree.  It is a fairly straightforward shell script, and eventually calls
@emph{merge} program from RCS suite to perform a file-level 3-way merge.  In this
case, @emph{merge} detects conflicts, and the merge result with conflict marks is
left in the working tree..  This can be seen if you run @samp{ls-files --stage}
again at this point:

@example
$ git ls-files --stage
100644 7f8b141b65fdcee47321e399a2598a235a032422 0       example
100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1       hello
100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2       hello
100644 cc44c73eb783565da5831b4d820c962954019b69 3       hello
@end example


This is the state of the index file and the working file after @emph{git merge}
returns control back to you, leaving the conflicting merge for you to
resolve.  Notice that the path @samp{hello} is still unmerged, and what you see
with @emph{git diff} at this point is differences since stage 2 (i.e. your
version).

@noindent

@chapheading Publishing your work

So, we can use somebody else’s work from a remote repository, but how can
@strong{you} prepare a repository to let other people pull from it?

You do your real work in your working tree that has your primary repository
hanging under it as its @samp{.git} subdirectory.  You @strong{could} make that
repository accessible remotely and ask people to pull from it, but in
practice that is not the way things are usually done. A recommended way is
to have a public repository, make it reachable by other people, and when the
changes you made in your primary working tree are in good shape, update the
public repository from it. This is often called @emph{pushing}.

@quotation

@strong{Note}

This public repository could further be mirrored, and that is how Git
repositories at @samp{kernel.org} are managed.
@end quotation

Publishing the changes from your local (private) repository to your remote
(public) repository requires a write privilege on the remote machine. You
need to have an SSH account there to run a single command,
@emph{git-receive-pack}.

First, you need to create an empty repository on the remote machine that
will house your public repository. This empty repository will be populated
and be kept up to date by pushing into it later. Obviously, this repository
creation needs to be done only once.

@quotation

@strong{Note}

@emph{git push} uses a pair of commands, @emph{git send-pack} on your local machine,
and @emph{git-receive-pack} on the remote machine. The communication between the
two over the network internally uses an SSH connection.
@end quotation

Your private repository’s Git directory is usually @samp{.git}, but your public
repository is often named after the project name,
i.e. @samp{<project>.git}. Let’s create such a public repository for project
@samp{my-git}. After logging into the remote machine, create an empty directory:

@example
$ mkdir my-git.git
@end example


Then, make that directory into a Git repository by running @emph{git init}, but
this time, since its name is not the usual @samp{.git}, we do things slightly
differently:

@example
$ GIT_DIR=my-git.git git init
@end example


Make sure this directory is available for others you want your changes to be
pulled via the transport of your choice. Also you need to make sure that you
have the @emph{git-receive-pack} program on the @samp{$PATH}.

@quotation

@strong{Note}

Many installations of sshd do not invoke your shell as the login shell when
you directly run programs; what this means is that if your login shell is
@emph{bash}, only @samp{.bashrc} is read and not @samp{.bash_profile}. As a workaround,
make sure @samp{.bashrc} sets up @samp{$PATH} so that you can run @emph{git-receive-pack}
program.
@end quotation

@quotation

@strong{Note}

If you plan to publish this repository to be accessed over http, you should
do @samp{mv my-git.git/hooks/post-update.sample my-git.git/hooks/post-update} at
this point.  This makes sure that every time you push into this repository,
@samp{git update-server-info} is run.
@end quotation

Your "public repository" is now ready to accept your changes.  Come back to
the machine you have your private repository. From there, run this command:

@example
$ git push <public-host>:/path/to/my-git.git master
@end example


This synchronizes your public repository to match the named branch head
(i.e. @samp{master} in this case) and objects reachable from them in your current
repository.

As a real example, this is how I update my public Git repository. Kernel.org
mirror network takes care of the propagation to other publicly visible
machines:

@example
$ git push master.kernel.org:/pub/scm/git/git.git/
@end example


@noindent

@chapheading Packing your repository

Earlier, we saw that one file under @samp{.git/objects/??/} directory is stored
for each Git object you create. This representation is efficient to create
atomically and safely, but not so convenient to transport over the
network. Since Git objects are immutable once they are created, there is a
way to optimize the storage by "packing them together". The command

@example
$ git repack
@end example


will do it for you. If you followed the tutorial examples, you would have
accumulated about 17 objects in @samp{.git/objects/??/} directories by now. @emph{git
repack} tells you how many objects it packed, and stores the packed file in
the @samp{.git/objects/pack} directory.

@quotation

@strong{Note}

You will see two files, @samp{pack-*.pack} and @samp{pack-*.idx}, in
@samp{.git/objects/pack} directory. They are closely related to each other, and
if you ever copy them by hand to a different repository for whatever reason,
you should make sure you copy them together. The former holds all the data
from the objects in the pack, and the latter holds the index for random
access.
@end quotation

If you are paranoid, running @emph{git verify-pack} command would detect if you
have a corrupt pack, but do not worry too much.  Our programs are always
perfect ;-).

Once you have packed objects, you do not need to leave the unpacked objects
that are contained in the pack file anymore.

@example
$ git prune-packed
@end example


would remove them for you.

You can try running @samp{find .git/objects -type f} before and after you run
@samp{git prune-packed} if you are curious.  Also @samp{git count-objects} would tell
you how many unpacked objects are in your repository and how much space they
are consuming.

@quotation

@strong{Note}

@samp{git pull} is slightly cumbersome for HTTP transport, as a packed repository
may contain relatively few objects in a relatively large pack. If you expect
many HTTP pulls from your public repository you might want to repack & prune
often, or never.
@end quotation

If you run @samp{git repack} again at this point, it will say "Nothing new to
pack.". Once you continue your development and accumulate the changes,
running @samp{git repack} again will create a new pack, that contains objects
created since you packed your repository the last time. We recommend that
you pack your project soon after the initial import (unless you are starting
your project from scratch), and then run @samp{git repack} every once in a while,
depending on how active your project is.

When a repository is synchronized via @samp{git push} and @samp{git pull} objects
packed in the source repository are usually stored unpacked in the
destination.  While this allows you to use different packing strategies on
both ends, it also means you may need to repack both repositories every once
in a while.

@noindent

@chapheading Working with Others

Although Git is a truly distributed system, it is often convenient to
organize your project with an informal hierarchy of developers. Linux kernel
development is run this way. There is a nice illustration (page 17, "Merges
to Mainline") in
@uref{https://web.archive.org/web/20120915203609/http://www.xenotime.net/linux/mentor/linux-mentoring-2006.pdf,Randy Dunlap’s presentation}.

It should be stressed that this hierarchy is purely @strong{informal}.  There is
nothing fundamental in Git that enforces the "chain of patch flow" this
hierarchy implies. You do not have to pull from only one remote repository.

A recommended workflow for a "project lead" goes like this:

@enumerate 

@item
Prepare your primary repository on your local machine. Your work is done
there.

@item
Prepare a public repository accessible to others.

If other people are pulling from your repository over dumb transport
protocols (HTTP), you need to keep this repository @emph{dumb transport
friendly}.  After @samp{git init}, @samp{$GIT_DIR/hooks/post-update.sample} copied
from the standard templates would contain a call to @emph{git update-server-info}
but you need to manually enable the hook with @samp{mv post-update.sample
post-update}.  This makes sure @emph{git update-server-info} keeps the necessary
files up to date.

@item
Push into the public repository from your primary repository.

@item
@emph{git repack} the public repository. This establishes a big pack that
contains the initial set of objects as the baseline, and possibly @emph{git
prune} if the transport used for pulling from your repository supports
packed repositories.

@item
Keep working in your primary repository. Your changes include modifications
of your own, patches you receive via e-mails, and merges resulting from
pulling the "public" repositories of your "subsystem maintainers".

You can repack this private repository whenever you feel like.

@item
Push your changes to the public repository, and announce it to the public.

@item
Every once in a while, @emph{git repack} the public repository.  Go back to step

@item
and continue working.
@end enumerate

A recommended work cycle for a "subsystem maintainer" who works on that
project and has an own "public repository" goes like this:

@enumerate 

@item
Prepare your work repository, by running @emph{git clone} on the public
repository of the "project lead". The URL used for the initial cloning is
stored in the remote.origin.url configuration variable.

@item
Prepare a public repository accessible to others, just like the "project
lead" person does.

@item
Copy over the packed files from "project lead" public repository to your
public repository, unless the "project lead" repository lives on the same
machine as yours.  In the latter case, you can use @samp{objects/info/alternates}
file to point at the repository you are borrowing from.

@item
Push into the public repository from your primary repository. Run @emph{git
repack}, and possibly @emph{git prune} if the transport used for pulling from
your repository supports packed repositories.

@item
Keep working in your primary repository. Your changes include modifications
of your own, patches you receive via e-mails, and merges resulting from
pulling the "public" repositories of your "project lead" and possibly your
"sub-subsystem maintainers".

You can repack this private repository whenever you feel like.

@item
Push your changes to your public repository, and ask your "project lead" and
possibly your "sub-subsystem maintainers" to pull from it.

@item
Every once in a while, @emph{git repack} the public repository.  Go back to step

@item
and continue working.
@end enumerate

A recommended work cycle for an "individual developer" who does not have a
"public" repository is somewhat different. It goes like this:

@enumerate 

@item
Prepare your work repository, by @emph{git clone} the public repository of the
"project lead" (or a "subsystem maintainer", if you work on a
subsystem). The URL used for the initial cloning is stored in the
remote.origin.url configuration variable.

@item
Do your work in your repository on @emph{master} branch.

@item
Run @samp{git fetch origin} from the public repository of your upstream every
once in a while. This does only the first half of @samp{git pull} but does not
merge. The head of the public repository is stored in
@samp{.git/refs/remotes/origin/master}.

@item
Use @samp{git cherry origin} to see which ones of your patches were accepted,
and/or use @samp{git rebase origin} to port your unmerged changes forward to the
updated upstream.

@item
Use @samp{git format-patch origin} to prepare patches for e-mail submission to
your upstream and send it out. Go back to step 2. and continue.
@end enumerate

@noindent

@chapheading Working with Others, Shared Repository Style

If you are coming from a CVS background, the style of cooperation suggested
in the previous section may be new to you. You do not have to worry. Git
supports the "shared public repository" style of cooperation you are
probably more familiar with as well.

See gitcvs-migration(7) for the details.

@noindent

@chapheading Bundling your work together

It is likely that you will be working on more than one thing at a time.  It
is easy to manage those more-or-less independent tasks using branches with
Git.

We have already seen how branches work previously, with "fun and work"
example using two branches.  The idea is the same if there are more than two
branches.  Let’s say you started out from "master" head, and have some new
code in the "master" branch, and two independent fixes in the "commit-fix"
and "diff-fix" branches:

@example
$ git show-branch
! [commit-fix] Fix commit message normalization.
 ! [diff-fix] Fix rename detection.
  * [master] Release candidate #1
---
 +  [diff-fix] Fix rename detection.
 +  [diff-fix~1] Better common substring algorithm.
+   [commit-fix] Fix commit message normalization.
  * [master] Release candidate #1
++* [diff-fix~2] Pretty-print messages.
@end example


Both fixes are tested well, and at this point, you want to merge in both of
them.  You could merge in @emph{diff-fix} first and then @emph{commit-fix} next, like
this:

@example
$ git merge -m "Merge fix in diff-fix" diff-fix
$ git merge -m "Merge fix in commit-fix" commit-fix
@end example


Which would result in:

@example
$ git show-branch
! [commit-fix] Fix commit message normalization.
 ! [diff-fix] Fix rename detection.
  * [master] Merge fix in commit-fix
---
  - [master] Merge fix in commit-fix
+ * [commit-fix] Fix commit message normalization.
  - [master~1] Merge fix in diff-fix
 +* [diff-fix] Fix rename detection.
 +* [diff-fix~1] Better common substring algorithm.
  * [master~2] Release candidate #1
++* [master~3] Pretty-print messages.
@end example


However, there is no particular reason to merge in one branch first and the
other next, when what you have are a set of truly independent changes (if
the order mattered, then they are not independent by definition).  You could
instead merge those two branches into the current branch at once.  First
let’s undo what we just did and start over.  We would want to get the master
branch before these two merges by resetting it to @emph{master~2}:

@example
$ git reset --hard master~2
@end example


You can make sure @samp{git show-branch} matches the state before those two @emph{git
merge} you just did.  Then, instead of running two @emph{git merge} commands in a
row, you would merge these two branch heads (this is known as @emph{making an
Octopus}):

@example
$ git merge commit-fix diff-fix
$ git show-branch
! [commit-fix] Fix commit message normalization.
 ! [diff-fix] Fix rename detection.
  * [master] Octopus merge of branches 'diff-fix' and 'commit-fix'
---
  - [master] Octopus merge of branches 'diff-fix' and 'commit-fix'
+ * [commit-fix] Fix commit message normalization.
 +* [diff-fix] Fix rename detection.
 +* [diff-fix~1] Better common substring algorithm.
  * [master~1] Release candidate #1
++* [master~2] Pretty-print messages.
@end example


Note that you should not do Octopus just because you can.  An octopus is a
valid thing to do and often makes it easier to view the commit history if
you are merging more than two independent changes at the same time.
However, if you have merge conflicts with any of the branches you are
merging in and need to hand resolve, that is an indication that the
development happened in those branches were not independent after all, and
you should merge two at a time, documenting how you resolved the conflicts,
and the reason why you preferred changes made in one side over the other.
Otherwise it would make the project history harder to follow, not easier.

@noindent

@chapheading SEE ALSO

gittutorial(7), gittutorial-2(7),
gitcvs-migration(7), git-help(1), giteveryday(7),
@uref{user-manual.html,The Git User’s Manual}

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitcredentials,,,Top
@chapheading Name

gitcredentials — Gitにユーザー名とパスワードを提供する

@noindent

@chapheading Synopsis

@example
git config credential.https://example.com.username myusername
git config credential.helper "$helper $options"
@end example


@noindent

@chapheading DESCRIPTION

Gitは、操作を実行するためにユーザーからの資格情報を必要とする場合があります。たとえば、HTTP経由でリモートリポジトリにアクセスするために、ユーザー名とパスワードを要求する必要がある場合があります。このマニュアルでは、Gitがこれらの資格情報を要求するために使用するメカニズムと、これらの資格情報を繰り返し入力しないようにするためのいくつかの機能について説明します。

@noindent

@chapheading REQUESTING CREDENTIALS

資格情報ヘルパーが定義されていない場合、Gitは以下の戦略でユーザーにユーザー名とパスワードを要求します:

@enumerate 

@item
@samp{GIT_ASKPASS}
環境変数が設定されている場合、その環境変数で指定したプログラムが呼び出されます。コマンドラインでプログラムによって適切なプロンプトが表示され、ユーザーの入力が標準出力から読み取られます。

@item
それ以外の場合、 @samp{core.askPass} 構成変数が設定されていると、その値は上記と同様に使用されます。

@item
それ以外の場合、@samp{SSH_ASKPASS} 環境変数が設定されていると、その値は上記と同様に使用されます。

@item
それ以外の場合、端末でユーザーの入力が促されます。
@end enumerate

@noindent

@chapheading AVOIDING REPETITION

同じ資格情報を何度も入力するのは面倒な場合があります。 Gitには、この煩わしさを軽減する2つの方法があります:

@enumerate 

@item
指定の認証コンテキストのためのユーザー名の静的構成。

@item
パスワードをキャッシュまたは保存するため、またはシステムパスワードウォレットまたはキーチェーンと対話するための資格情報ヘルパー。
@end enumerate

1つ目は、パスワードに使用できる安全なストレージがない場合に簡単で適切です。これは通常、以下を構成に追加することによって設定します:

@example
[credential "https://example.com"]
        username = me
@end example


一方、資格情報ヘルパーは、Gitがユーザー名とパスワードの両方を要求できる外部プログラムです。これらは通常、OSまたは他のプログラムによって提供される安全なストレージとインターフェイスします。

ヘルパーを使用するには、最初に使用するヘルパーを選択する必要があります。Gitには現在、以下のヘルパーが含まれています:

@table @asis

@item  cache 
資格情報をメモリに短期間キャッシュします。 詳細については git-credential-cache(1) を参照してください。

@item  store 
資格情報をディスクに無期限に保存します。詳細については git-credential-store(1) を参照してください。
@end table

サードパーティのヘルパーがインストールされている場合もあります。 @samp{git help -a} の出力で @samp{credential-*}
を検索し、個々のヘルパーのドキュメントを参照してください。あなたが使いたいヘルパーを選んだら、その名前を credential.helper
変数に入力することで、Gitにそのヘルパーを使用するように指示できます。

@enumerate 

@item
ヘルパーを探す。

@example
$ git help -a | grep credential-
credential-foo
@end example


@item
その説明を読む。

@example
$ git help credential-foo
@end example


@item
Gitにそれを使用するように伝えます。

@example
$ git config --global credential.helper foo
@end example

@end enumerate

@noindent

@chapheading CREDENTIAL CONTEXTS

Gitは、各資格情報がURLによって定義されたコンテキストを持っていると見なします。このコンテキストは、コンテキスト固有の構成を検索するために使用され、すべてのヘルパーに渡されます。ヘルパーは、これを安全なストレージへのインデックスとして使用できます。

たとえば、 @samp{https://example.com/foo.git}
にアクセスしていると想像してください。Gitが構成ファイルを調べてセクションがこのコンテキストに一致するかどうかを確認するとき、コンテキストが構成ファイル内のパターンのより具体的なサブセットである場合、Gitは2つが一致すると見なします。たとえば、設定ファイルに以下がある場合:

@example
[credential "https://example.com"]
        username = foo
@end example


これはマッチします。両方のプロトコルが同じで、かつ、両方のホストが同じであり、かつ、パターンURLはパス部分を気にしないからです。ただし、以下のコンテキストは一致しません:

@example
[credential "https://kernel.org"]
        username = foo
@end example


なぜならホスト名が異なるためです。 また、 @samp{foo.example.com} とは一致しません。
Gitは、2つのホストが同じドメインの一部であるかどうかを考慮せずに、ホスト名を正確に比較します。 同様に、 @samp{http://example.com}
の設定エントリは一致しません。Gitはプロトコルを正確に比較します。 ただし、 @samp{http.<url>.*}
オプションと同様に、ドメイン名やその他のパターンマッチングにワイルドカードを使用できます。

パターンURLにパス部分が含まれている場合、これも完全に一致する必要があります。コンテキスト
@samp{https://example.com/bar/baz.git} は(@samp{https://example.com}
部分の照合に加えてパス部分も一致する) @samp{https://example.com/bar/baz.git} の設定エントリとは一致しますが、
@samp{https://example.com/bar} 構成エントリとは一致しません。

@noindent

@chapheading CONFIGURATION OPTIONS

コンテキストのオプションは、 @samp{credential.*} (すべての資格情報に適用) または @samp{credential.<url>.*}
のいずれかで構成できます。ここで、 <url> は上記のコンテキストと一致します。

以下のオプションは、どちらの場所でも使用できます:

@table @asis

@item  helper 
外部資格情報ヘルパーの名前、および関連するオプション。ヘルパー名が絶対パスでない場合は、文字列 @samp{git credential-}
が先頭に追加されます。結果の文字列はシェルによって実行されます(たとえば、これを @samp{foo --option=bar} に設定すると、シェルを介して
@samp{git credential-foo --option=bar} が実行されます。例については使用するヘルパーのマニュアルを参照してください。

@samp{credential.helper} 構成変数のインスタンスが複数ある場合、各ヘルパーが順番に試行され、ユーザー名 または パスワード または
何も提供しない 場合があります。Gitがユーザー名とパスワードの両方を取得すると、それ以上ヘルパーは試行されません。

@samp{credential.helper}
が空の文字列に設定されている場合、これによりヘルパーリストが空にリセットされます(したがって、空の文字列ヘルパーを構成し、その後に必要なヘルパーのセットを構成することで、優先度の低い構成ファイルによって設定されたヘルパーをオーバーライドできます)。

@item  username 
URLに指定されていない場合のデフォルトのユーザー名。

@item  useHttpPath 
デフォルトでは、Gitはhttp URLのパス部分を外部ヘルパーを介して照合する価値があるとは見なしません。 これは、
@samp{https://example.com/foo.git} に保存されている資格情報が @samp{https://example.com/bar.git}
にも使用されることを意味します。これらの場合を区別したい場合は、このオプションを「true」に設定してください。
@end table

@noindent

@chapheading CUSTOM HELPERS

あなた独自のカスタムヘルパーを作成して、資格情報を保持している任意のシステムとインターフェイスすることができます。

資格情報ヘルパーは、資格情報を長期ストレージとの間でフェッチまたは保存するためにGitによって実行されるプログラムです(「長期」とは単一のGitプロセスよりも単純に長いという意味です。たとえば、資格情報はメモリ内に数分間、またはディスク上で無期限に保存される場合があります)。

各ヘルパーは、構成変数 @samp{credential.helper} の単一の文字列で指定されます(その他 git-config(1)
を参照)。文字列はGitによって、以下のルールを使用して実行されるコマンドに変換されます:

@enumerate 

@item
ヘルパー文字列が "!" で始まる場合、それはシェルスニペットと見なされ、 "!" の後のすべてが コマンドになります。

@item
それ以外の場合、ヘルパー文字列が絶対パスで始まる場合は、文字列がそのままコマンドとして扱われます。

@item
それ以外の場合は、文字列 "git credential-" がヘルパー文字列の前に付加され、その結果がコマンドになります。
@end enumerate

結果のコマンドには「operation」引数が追加され(詳細は下記参照)、結果はシェルによって実行されます。

仕様の例を以下に示します:

@example
# run "git credential-foo"
[credential]
        helper = foo

# same as above, but pass an argument to the helper
[credential]
        helper = "foo --bar=baz"

# the arguments are parsed by the shell, so use shell
# quoting if necessary
[credential]
        helper = "foo --bar='whitespace arg'"

# you can also use an absolute path, which will not use the git wrapper
[credential]
        helper = "/path/to/my/helper --with-arguments"

# or you can specify your own shell snippet
[credential "https://example.com"]
        username = your_user
        helper = "!f() @{ test \"$1\" = get && echo \"password=$(cat $HOME/.secret)\"; @}; f"
@end example


一般的に、上記の ルール(3）は、ユーザーが指定するのが最も簡単です。資格情報ヘルパーの作成者は、プログラムに
"git-credential-$NAME" という名前を付け、インストール中に @samp{$PATH} または @samp{$GIT_EXEC_PATH}
に配置して、ユーザーが @samp{git config credential.helper $NAME}
を有効にできるようにすることで、ユーザーを支援するように努める必要があります。

ヘルパーが実行されると、コマンドラインに以下のいずれかの「操作」引数が追加されます:

@table @asis

@item  @samp{get} 
一致する資格情報が存在する場合は、それを返します。

@item  @samp{store} 
ヘルパーに該当する場合は、資格情報を保存します。

@item  @samp{erase} 
もしあれば、ヘルパーのストレージから一致する資格情報を削除します。
@end table

資格情報の詳細は、ヘルパーの標準入力ストリームで提供されます。正確な形式は、 @samp{git credential} 配管コマンドの 入力/出力形式
と同じです(詳細な仕様については、 git-credential(1) の「INPUT/OUTPUT
FORMAT」のセクションを参照してください)。

`get`操作の場合、ヘルパーは標準出力の属性のリストを同じ形式で作成する必要があります(一般的な属性については
git-credential(1)
を参照してください)。ヘルパーはサブセットを自由に作成できます。提供するのに役立つものがない場合は、値をまったく作成しません。提供された属性は、Gitの資格情報サブシステムによってすでに知られている属性を上書きします。

すべての属性を上書きすることが可能ですが、正常に動作するヘルパーは、ユーザー名とパスワード以外の属性については上書きしないようにする必要があります。

ヘルパーが @samp{true} または @samp{1} の値で @samp{quit}
属性を出力した場合、それ以上のヘルパーは参照されず、ユーザーにプロンプトも表示されません(資格情報が提供されていない場合、操作は失敗します)。

同様に、ユーザー名とパスワードの両方が提供されると、ヘルパーに相談することはありません。

@samp{store} または @samp{erase} 操作の場合、ヘルパーの出力は無視されます。

ヘルパーが要求された操作の実行に失敗した場合、または潜在的な問題をユーザーに通知する必要がある場合、ヘルパーは標準エラー出力に書き込むことがあります。

要求された操作(読み取り専用ストアなど)をサポートしていない場合は、要求を黙って無視する必要があります。

ヘルパーが他の操作を受け取った場合、ヘルパーはその要求を黙って無視する必要があります。これにより、将来の操作を追加する余地が残ります(古いヘルパーは新しい要求を無視するだけです)。

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitcvs-migration,,,Top
@chapheading Name

gitcvs-migration — Git for CVS users

@noindent

@chapheading Synopsis

@display
git cvsimport *
@end display


@noindent

@chapheading DESCRIPTION

Git differs from CVS in that every working tree contains a repository with a
full copy of the project history, and no repository is inherently more
important than any other.  However, you can emulate the CVS model by
designating a single shared repository which people can synchronize with;
this document explains how to do that.

Some basic familiarity with Git is required. Having gone through
gittutorial(7) and gitglossary(7) should be sufficient.

@noindent

@chapheading Developing against a shared repository

Suppose a shared repository is set up in /pub/repo.git on the host foo.com.
Then as an individual committer you can clone the shared repository over ssh
with:

@example
$ git clone foo.com:/pub/repo.git/ my-project
$ cd my-project
@end example


and hack away.  The equivalent of @emph{cvs update} is

@example
$ git pull origin
@end example


which merges in any work that others might have done since the clone
operation.  If there are uncommitted changes in your working tree, commit
them first before running git pull.

@quotation

@strong{Note}

The @emph{pull} command knows where to get updates from because of certain
configuration variables that were set by the first @emph{git clone} command; see
@samp{git config -l} and the git-config(1) man page for details.
@end quotation

You can update the shared repository with your changes by first committing
your changes, and then using the @emph{git push} command:

@example
$ git push origin master
@end example


to "push" those commits to the shared repository.  If someone else has
updated the repository more recently, @emph{git push}, like @emph{cvs commit}, will
complain, in which case you must pull any changes before attempting the push
again.

In the @emph{git push} command above we specify the name of the remote branch to
update (@samp{master}).  If we leave that out, @emph{git push} tries to update any
branches in the remote repository that have the same name as a branch in the
local repository.  So the last @emph{push} can be done with either of:

@example
$ git push origin
$ git push foo.com:/pub/project.git/
@end example


as long as the shared repository does not have any branches other than
@samp{master}.

@noindent

@chapheading Setting Up a Shared Repository

We assume you have already created a Git repository for your project,
possibly created from scratch or from a tarball (see
gittutorial(7)), or imported from an already existing CVS repository
(see the next section).

Assume your existing repo is at /home/alice/myproject.  Create a new "bare"
repository (a repository without a working tree) and fetch your project into
it:

@example
$ mkdir /pub/my-repo.git
$ cd /pub/my-repo.git
$ git --bare init --shared
$ git --bare fetch /home/alice/myproject master:master
@end example


Next, give every team member read/write access to this repository.  One easy
way to do this is to give all the team members ssh access to the machine
where the repository is hosted.  If you don’t want to give them a full shell
on the machine, there is a restricted shell which only allows users to do
Git pushes and pulls; see git-shell(1).

Put all the committers in the same group, and make the repository writable
by that group:

@example
$ chgrp -R $group /pub/my-repo.git
@end example


Make sure committers have a umask of at most 027, so that the directories
they create are writable and searchable by other group members.

@noindent

@chapheading Importing a CVS archive

@quotation

@strong{Note}

These instructions use the @samp{git-cvsimport} script which ships with git, but
other importers may provide better results. See the note in
git-cvsimport(1) for other options.
@end quotation

First, install version 2.1 or higher of cvsps from
@uref{https://github.com/andreyvit/cvsps,https://github.com/andreyvit/cvsps} and
make sure it is in your path.  Then cd to a checked out CVS working
directory of the project you are interested in and run
git-cvsimport(1):

@example
$ git cvsimport -C <destination> <module>
@end example


This puts a Git archive of the named CVS module in the directory
<destination>, which will be created if necessary.

The import checks out from CVS every revision of every file.  Reportedly
cvsimport can average some twenty revisions per second, so for a
medium-sized project this should not take more than a couple of minutes.
Larger projects or remote repositories may take longer.

The main trunk is stored in the Git branch named @samp{origin}, and additional
CVS branches are stored in Git branches with the same names.  The most
recent version of the main trunk is also left checked out on the @samp{master}
branch, so you can start adding your own changes right away.

The import is incremental, so if you call it again next month it will fetch
any CVS updates that have been made in the meantime.  For this to work, you
must not modify the imported branches; instead, create new branches for your
own changes, and merge in the imported branches as necessary.

If you want a shared repository, you will need to make a bare clone of the
imported directory, as described above. Then treat the imported directory as
another development clone for purposes of merging incremental imports.

@noindent

@chapheading Advanced Shared Repository Management

Git allows you to specify scripts called "hooks" to be run at certain
points.  You can use these, for example, to send all commits to the shared
repository to a mailing list.  See githooks(5).

You can enforce finer grained permissions using update hooks.  See
@uref{howto/update-hook-example.html,Controlling access to branches using update hooks}.

@noindent

@chapheading Providing CVS Access to a Git Repository

It is also possible to provide true CVS access to a Git repository, so that
developers can still use CVS; see git-cvsserver(1) for details.

@noindent

@chapheading Alternative Development Models

CVS users are accustomed to giving a group of developers commit access to a
common repository.  As we’ve seen, this is also possible with Git.  However,
the distributed nature of Git allows other development models, and you may
want to first consider whether one of them might be a better fit for your
project.

For example, you can choose a single person to maintain the project’s
primary public repository.  Other developers then clone this repository and
each work in their own clone.  When they have a series of changes that
they’re happy with, they ask the maintainer to pull from the branch
containing the changes.  The maintainer reviews their changes and pulls them
into the primary repository, which other developers pull from as necessary
to stay coordinated.  The Linux kernel and other projects use variants of
this model.

With a small group, developers may just pull changes from each other’s
repositories without the need for a central maintainer.

@noindent

@chapheading SEE ALSO

gittutorial(7), gittutorial-2(7),
gitcore-tutorial(7), gitglossary(7), giteveryday(7),
@uref{user-manual.html,The Git User’s Manual}

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitdiffcore,,,Top
@chapheading Name

gitdiffcore — Tweaking diff output

@noindent

@chapheading Synopsis

@display
git diff *
@end display


@noindent

@chapheading DESCRIPTION

The diff commands @emph{git diff-index}, @emph{git diff-files}, and @emph{git diff-tree}
can be told to manipulate differences they find in unconventional ways
before showing @emph{diff} output.  The manipulation is collectively called
"diffcore transformation".  This short note describes what they are and how
to use them to produce @emph{diff} output that is easier to understand than the
conventional kind.

@noindent

@chapheading The chain of operation

The @emph{git diff-*} family works by first comparing two sets of files:

@itemize 

@item
@emph{git diff-index} compares contents of a "tree" object and the working
directory (when @samp{--cached} flag is not used) or a "tree" object and the
index file (when @samp{--cached} flag is used);

@item
@emph{git diff-files} compares contents of the index file and the working
directory;

@item
@emph{git diff-tree} compares contents of two "tree" objects;
@end itemize

In all of these cases, the commands themselves first optionally limit the
two sets of files by any pathspecs given on their command-lines, and compare
corresponding paths in the two resulting sets of files.

The pathspecs are used to limit the world diff operates in.  They remove the
filepairs outside the specified sets of pathnames.  E.g. If the input set of
filepairs included:

@example
:100644 100644 bcd1234... 0123456... M junkfile
@end example


but the command invocation was @samp{git diff-files myfile}, then the junkfile
entry would be removed from the list because only "myfile" is under
consideration.

The result of comparison is passed from these commands to what is internally
called "diffcore", in a format similar to what is output when the -p option
is not used.  E.g.

@example
in-place edit  :100644 100644 bcd1234... 0123456... M file0
create         :000000 100644 0000000... 1234567... A file4
delete         :100644 000000 1234567... 0000000... D file5
unmerged       :000000 000000 0000000... 0000000... U file6
@end example


The diffcore mechanism is fed a list of such comparison results (each of
which is called "filepair", although at this point each of them talks about
a single file), and transforms such a list into another list.  There are
currently 5 such transformations:

@itemize 

@item
diffcore-break

@item
diffcore-rename

@item
diffcore-merge-broken

@item
diffcore-pickaxe

@item
diffcore-order

@item
diffcore-rotate
@end itemize

These are applied in sequence.  The set of filepairs @emph{git diff-*}
commands find are used as the input to diffcore-break, and the output from
diffcore-break is used as the input to the next transformation.  The final
result is then passed to the output routine and generates either diff-raw
format (see Output format sections of the manual for @emph{git diff-*}
commands) or diff-patch format.

@noindent

@chapheading diffcore-break: For Splitting Up Complete Rewrites

The second transformation in the chain is diffcore-break, and is controlled
by the -B option to the @emph{git diff-*} commands.  This is used to
detect a filepair that represents "complete rewrite" and break such filepair
into two filepairs that represent delete and create.  E.g.  If the input
contained this filepair:

@example
:100644 100644 bcd1234... 0123456... M file0
@end example


and if it detects that the file "file0" is completely rewritten, it changes
it to:

@example
:100644 000000 bcd1234... 0000000... D file0
:000000 100644 0000000... 0123456... A file0
@end example


For the purpose of breaking a filepair, diffcore-break examines the extent
of changes between the contents of the files before and after modification
(i.e. the contents that have "bcd1234…" and "0123456…" as their SHA-1
content ID, in the above example).  The amount of deletion of original
contents and insertion of new material are added together, and if it exceeds
the "break score", the filepair is broken into two.  The break score
defaults to 50% of the size of the smaller of the original and the result
(i.e. if the edit shrinks the file, the size of the result is used; if the
edit lengthens the file, the size of the original is used), and can be
customized by giving a number after "-B" option (e.g. "-B75" to tell it to
use 75%).

@noindent

@chapheading diffcore-rename: For Detecting Renames and Copies

This transformation is used to detect renames and copies, and is controlled
by the -M option (to detect renames) and the -C option (to detect copies as
well) to the @emph{git diff-*} commands.  If the input contained these
filepairs:

@example
:100644 000000 0123456... 0000000... D fileX
:000000 100644 0000000... 0123456... A file0
@end example


and the contents of the deleted file fileX is similar enough to the contents
of the created file file0, then rename detection merges these filepairs and
creates:

@example
:100644 100644 0123456... 0123456... R100 fileX file0
@end example


When the "-C" option is used, the original contents of modified files, and
deleted files (and also unmodified files, if the "--find-copies-harder"
option is used) are considered as candidates of the source files in
rename/copy operation.  If the input were like these filepairs, that talk
about a modified file fileY and a newly created file file0:

@example
:100644 100644 0123456... 1234567... M fileY
:000000 100644 0000000... bcd3456... A file0
@end example


the original contents of fileY and the resulting contents of file0 are
compared, and if they are similar enough, they are changed to:

@example
:100644 100644 0123456... 1234567... M fileY
:100644 100644 0123456... bcd3456... C100 fileY file0
@end example


In both rename and copy detection, the same "extent of changes" algorithm
used in diffcore-break is used to determine if two files are "similar
enough", and can be customized to use a similarity score different from the
default of 50% by giving a number after the "-M" or "-C" option (e.g. "-M8"
to tell it to use 8/10 = 80%).

Note that when rename detection is on but both copy and break detection are
off, rename detection adds a preliminary step that first checks if files are
moved across directories while keeping their filename the same.  If there is
a file added to a directory whose contents is sufficiently similar to a file
with the same name that got deleted from a different directory, it will mark
them as renames and exclude them from the later quadratic step (the one that
pairwise compares all unmatched files to find the "best" matches, determined
by the highest content similarity).  So, for example, if a deleted
docs/ext.txt and an added docs/config/ext.txt are similar enough, they will
be marked as a rename and prevent an added docs/ext.md that may be even more
similar to the deleted docs/ext.txt from being considered as the rename
destination in the later step.  For this reason, the preliminary "match same
filename" step uses a bit higher threshold to mark a file pair as a rename
and stop considering other candidates for better matches.  At most, one
comparison is done per file in this preliminary pass; so if there are
several remaining ext.txt files throughout the directory hierarchy after
exact rename detection, this preliminary step may be skipped for those
files.

Note.  When the "-C" option is used with @samp{--find-copies-harder} option, @emph{git
diff-*} commands feed unmodified filepairs to diffcore mechanism as
well as modified ones.  This lets the copy detector consider unmodified
files as copy source candidates at the expense of making it slower.  Without
@samp{--find-copies-harder}, @emph{git diff-*} commands can detect copies
only if the file that was copied happened to have been modified in the same
changeset.

@noindent

@chapheading diffcore-merge-broken: For Putting Complete Rewrites Back Together

This transformation is used to merge filepairs broken by diffcore-break, and
not transformed into rename/copy by diffcore-rename, back into a single
modification.  This always runs when diffcore-break is used.

For the purpose of merging broken filepairs back, it uses a different
"extent of changes" computation from the ones used by diffcore-break and
diffcore-rename.  It counts only the deletion from the original, and does
not count insertion.  If you removed only 10 lines from a 100-line document,
even if you added 910 new lines to make a new 1000-line document, you did
not do a complete rewrite.  diffcore-break breaks such a case in order to
help diffcore-rename to consider such filepairs as candidate of rename/copy
detection, but if filepairs broken that way were not matched with other
filepairs to create rename/copy, then this transformation merges them back
into the original "modification".

The "extent of changes" parameter can be tweaked from the default 80% (that
is, unless more than 80% of the original material is deleted, the broken
pairs are merged back into a single modification) by giving a second number
to -B option, like these:

@itemize 

@item
-B50/60 (give 50% "break score" to diffcore-break, use 60% for
diffcore-merge-broken).

@item
-B/60 (the same as above, since diffcore-break defaults to 50%).
@end itemize

Note that earlier implementation left a broken pair as a separate creation
and deletion patches.  This was an unnecessary hack and the latest
implementation always merges all the broken pairs back into modifications,
but the resulting patch output is formatted differently for easier review in
case of such a complete rewrite by showing the entire contents of old
version prefixed with @emph{-}, followed by the entire contents of new version
prefixed with @emph{+}.

@noindent

@chapheading diffcore-pickaxe: For Detecting Addition/Deletion of Specified String

This transformation limits the set of filepairs to those that change
specified strings between the preimage and the postimage in a certain way.
-S<block of text> and -G<regular expression> options are used to specify
different ways these strings are sought.

"-S<block of text>" detects filepairs whose preimage and postimage have
different number of occurrences of the specified block of text.  By
definition, it will not detect in-file moves.  Also, when a changeset moves
a file wholesale without affecting the interesting string, diffcore-rename
kicks in as usual, and @samp{-S} omits the filepair (since the number of
occurrences of that string didn’t change in that rename-detected filepair).
When used with @samp{--pickaxe-regex}, treat the <block of text> as an extended
POSIX regular expression to match, instead of a literal string.

"-G<regular expression>" (mnemonic: grep) detects filepairs whose textual
diff has an added or a deleted line that matches the given regular
expression.  This means that it will detect in-file (or what
rename-detection considers the same file) moves, which is noise.  The
implementation runs diff twice and greps, and this can be quite expensive.
To speed things up binary files without textconv filters will be ignored.

When @samp{-S} or @samp{-G} are used without @samp{--pickaxe-all}, only filepairs that
match their respective criterion are kept in the output.  When
@samp{--pickaxe-all} is used, if even one filepair matches their respective
criterion in a changeset, the entire changeset is kept.  This behavior is
designed to make reviewing changes in the context of the whole changeset
easier.

@noindent

@chapheading diffcore-order: For Sorting the Output Based on Filenames

This is used to reorder the filepairs according to the user’s (or project’s)
taste, and is controlled by the -O option to the @emph{git diff-*}
commands.

This takes a text file each of whose lines is a shell glob pattern.
Filepairs that match a glob pattern on an earlier line in the file are
output before ones that match a later line, and filepairs that do not match
any glob pattern are output last.

As an example, a typical orderfile for the core Git probably would look like
this:

@example
README
Makefile
Documentation
*.h
*.c
t
@end example


@noindent

@chapheading diffcore-rotate: For Changing At Which Path Output Starts

This transformation takes one pathname, and rotates the set of filepairs so
that the filepair for the given pathname comes first, optionally discarding
the paths that come before it.  This is used to implement the @samp{--skip-to}
and the @samp{--rotate-to} options.  It is an error when the specified pathname
is not in the set of filepairs, but it is not useful to error out when used
with "git log" family of commands, because it is unreasonable to expect that
a given path would be modified by each and every commit shown by the "git
log" command.  For this reason, when used with "git log", the filepair that
sorts the same as, or the first one that sorts after, the given pathname is
where the output starts.

Use of this transformation combined with diffcore-order will produce
unexpected results, as the input to this transformation is likely not sorted
when diffcore-order is in effect.

@noindent

@chapheading SEE ALSO

git-diff(1), git-diff-files(1), git-diff-index(1),
git-diff-tree(1), git-format-patch(1), git-log(1),
gitglossary(7), @uref{user-manual.html,The Git User’s Manual}

@noindent

@chapheading GIT

Part of the git(1) suite

@node giteveryday,,,Top
@chapheading Name

giteveryday — Git日常利用に役立つ最小限のコマンドセット

@noindent

@chapheading Synopsis

Git日常利用の為の20程度のコマンド

@noindent

@chapheading DESCRIPTION

日常のGit利用に役立つコマンドの小さなセットを説明するため、Gitユーザーを大きく4つのカテゴリに分類します。

@itemize 

@item
開発者個人(スタンドアローン) (@pxref{[STANDALONE]}) のコマンドは
一人で作業する人でも、コミットする人には不可欠です。

@item
他の人と一緒に作業する場合は、開発者個人(グループプロジェクト参加者) (@pxref{[PARTICIPANT]})
セクションにリストされているコマンドも必要になります。

@item
インテグレーター (@pxref{[INTEGRATOR]}) 役の人々は、
上記に加えて更に幾つかのコマンドを学ぶ必要があります。

@item
リポジトリ管理 (@pxref{[ADMINISTRATION]}) コマンドは、
Gitリポジトリの管理と提供を担当するシステム管理者向けです。
@end itemize

@noindent

@chapheading 開発者個人(スタンドアローン)

A standalone individual developer does not exchange patches with other
people, and works alone in a single repository, using the following
commands.

@itemize 

@item
git-init(1) 新しいリポジトリを作成します。

@item
git-log(1) 何が起こったのか確認します。

@item
git-switch(1) と git-branch(1) ブランチを切り替えます。

@item
git-add(1) インデックスファイルを管理します。

@item
git-diff(1) and git-status(1) to see what you are in the
middle of doing.

@item
git-commit(1) to advance the current branch.

@item
git-restore(1) to undo changes.

@item
git-merge(1) to merge between local branches.

@item
git-rebase(1) to maintain topic branches.

@item
git-tag(1) to mark a known point.
@end itemize

@noindent

@heading Examples

@table @asis

@item  新しいリポジトリの開始点としてtarballを使用します 
@example
$ tar zxf frotz.tar.gz
$ cd frotz
$ git init
$ git add . (1)
$ git commit -m "import of frotz source tree."
$ git tag v2.43 (2)
@end example


@table @asis

@item @pxref{CO1-1,,(1)}
add everything under the current directory.

@item @pxref{CO1-2,,(2)}
make a lightweight, unannotated tag.
@end table

@item  トピックブランチを作成して開発します 
@example
$ git switch -c alsa-audio (1)
$ edit/compile/test
$ git restore curses/ux_audio_oss.c (2)
$ git add curses/ux_audio_alsa.c (3)
$ edit/compile/test
$ git diff HEAD (4)
$ git commit -a -s (5)
$ edit/compile/test
$ git diff HEAD^ (6)
$ git commit -a --amend (7)
$ git switch master (8)
$ git merge alsa-audio (9)
$ git log --since='3 days ago' (10)
$ git log v2.43.. curses/ (11)
@end example


@table @asis

@item @pxref{CO2-1,,(1)}
create a new topic branch.

@item @pxref{CO2-2,,(2)}
revert your botched changes in @samp{curses/ux_audio_oss.c}.

@item @pxref{CO2-3,,(3)}
you need to tell Git if you added a new file; removal and modification will
be caught if you do @samp{git commit -a} later.

@item @pxref{CO2-4,,(4)}
to see what changes you are committing.

@item @pxref{CO2-5,,(5)}
commit everything, as you have tested, with your sign-off.

@item @pxref{CO2-6,,(6)}
look at all your changes including the previous commit.

@item @pxref{CO2-7,,(7)}
amend the previous commit, adding all your new changes, using your original
message.

@item @pxref{CO2-8,,(8)}
switch to the master branch.

@item @pxref{CO2-9,,(9)}
merge a topic branch into your master branch.

@item @pxref{CO2-10,,(10)}
review commit logs; other forms to limit output can be combined and include
@samp{-10} (to show up to 10 commits), @samp{--until=2005-12-10}, etc.

@item @pxref{CO2-11,,(11)}
view only the changes that touch what’s in @samp{curses/} directory, since
@samp{v2.43} tag.
@end table
@end table

@noindent

@chapheading 開発者個人(グループプロジェクト参加者)

グループプロジェクトの参加者として作業する開発者個人は、他の人と連絡する方法を学ぶ必要があり、スタンドアロンの開発者個人が必要とするコマンドに加えて、これらのコマンドを使用します。

@itemize 

@item
git-clone(1) from the upstream to prime your local repository.

@item
git-pull(1) and git-fetch(1) from "origin" to keep
up-to-date with the upstream.

@item
git-push(1) to shared repository, if you adopt CVS style shared
repository workflow.

@item
git-format-patch(1) to prepare e-mail submission, if you adopt Linux
kernel-style public forum workflow.

@item
git-send-email(1) to send your e-mail submission without corruption
by your MUA.

@item
git-request-pull(1) to create a summary of changes for your upstream
to pull.
@end itemize

@noindent

@heading Examples

@table @asis

@item  Clone the upstream and work on it. Feed changes to upstream. 
@example
$ git clone git://git.kernel.org/pub/scm/.../torvalds/linux-2.6 my2.6
$ cd my2.6
$ git switch -c mine master (1)
$ edit/compile/test; git commit -a -s (2)
$ git format-patch master (3)
$ git send-email --to="person <email@@example.com>" 00*.patch (4)
$ git switch master (5)
$ git pull (6)
$ git log -p ORIG_HEAD.. arch/i386 include/asm-i386 (7)
$ git ls-remote --heads http://git.kernel.org/.../jgarzik/libata-dev.git (8)
$ git pull git://git.kernel.org/pub/.../jgarzik/libata-dev.git ALL (9)
$ git reset --hard ORIG_HEAD (10)
$ git gc (11)
@end example


@table @asis

@item @pxref{CO3-1,,(1)}
checkout a new branch @samp{mine} from master.

@item @pxref{CO3-2,,(2)}
repeat as needed.

@item @pxref{CO3-3,,(3)}
extract patches from your branch, relative to master,

@item @pxref{CO3-4,,(4)}
and email them.

@item @pxref{CO3-5,,(5)}
return to @samp{master}, ready to see what’s new

@item @pxref{CO3-6,,(6)}
@samp{git pull} fetches from @samp{origin} by default and merges into the current
branch.

@item @pxref{CO3-7,,(7)}
immediately after pulling, look at the changes done upstream since last time
we checked, only in the area we are interested in.

@item @pxref{CO3-8,,(8)}
check the branch names in an external repository (if not known).

@item @pxref{CO3-9,,(9)}
fetch from a specific branch @samp{ALL} from a specific repository and merge it.

@item @pxref{CO3-10,,(10)}
revert the pull.

@item @pxref{CO3-11,,(11)}
garbage collect leftover objects from reverted pull.
@end table

@item  Push into another repository. 
@example
satellite$ git clone mothership:frotz frotz (1)
satellite$ cd frotz
satellite$ git config --get-regexp '^(remote|branch)\.' (2)
remote.origin.url mothership:frotz
remote.origin.fetch refs/heads/*:refs/remotes/origin/*
branch.master.remote origin
branch.master.merge refs/heads/master
satellite$ git config remote.origin.push \
           +refs/heads/*:refs/remotes/satellite/* (3)
satellite$ edit/compile/test/commit
satellite$ git push origin (4)

mothership$ cd frotz
mothership$ git switch master
mothership$ git merge satellite/master (5)
@end example


@table @asis

@item @pxref{CO4-1,,(1)}
mothership machine has a frotz repository under your home directory; clone
from it to start a repository on the satellite machine.

@item @pxref{CO4-2,,(2)}
clone sets these configuration variables by default.  It arranges @samp{git pull}
to fetch and store the branches of mothership machine to local
@samp{remotes/origin/*} remote-tracking branches.

@item @pxref{CO4-3,,(3)}
arrange @samp{git push} to push all local branches to their corresponding branch
of the mothership machine.

@item @pxref{CO4-4,,(4)}
push will stash all our work away on @samp{remotes/satellite/*} remote-tracking
branches on the mothership machine.  You could use this as a back-up
method. Likewise, you can pretend that mothership "fetched" from you (useful
when access is one sided).

@item @pxref{CO4-5,,(5)}
on mothership machine, merge the work done on the satellite machine into the
master branch.
@end table

@item  Branch off of a specific tag. 
@example
$ git switch -c private2.6.14 v2.6.14 (1)
$ edit/compile/test; git commit -a
$ git checkout master
$ git cherry-pick v2.6.14..private2.6.14 (2)
@end example


@table @asis

@item @pxref{CO5-1,,(1)}
create a private branch based on a well known (but somewhat behind)  tag.

@item @pxref{CO5-2,,(2)}
forward port all changes in @samp{private2.6.14} branch to @samp{master} branch
without a formal "merging". Or longhand + @samp{git format-patch -k -m --stdout
v2.6.14..private2.6.14 |
git am -3 -k}
@end table
@end table

An alternate participant submission mechanism is using the @samp{git
request-pull} or pull-request mechanisms (e.g as used on GitHub
(www.github.com) to notify your upstream of your contribution.

@noindent

@chapheading インテグレーター

A fairly central person acting as the integrator in a group project receives
changes made by others, reviews and integrates them and publishes the result
for others to use, using these commands in addition to the ones needed by
participants.

This section can also be used by those who respond to @samp{git request-pull} or
pull-request on GitHub (www.github.com) to integrate the work of others into
their history. A sub-area lieutenant for a repository will act both as a
participant and as an integrator.

@itemize 

@item
git-am(1) to apply patches e-mailed in from your contributors.

@item
git-pull(1) to merge from your trusted lieutenants.

@item
git-format-patch(1) to prepare and send suggested alternative to
contributors.

@item
git-revert(1) to undo botched commits.

@item
git-push(1) to publish the bleeding edge.
@end itemize

@noindent

@heading Examples

@table @asis

@item  A typical integrator’s Git day. 
@example
$ git status (1)
$ git branch --no-merged master (2)
$ mailx (3)
& s 2 3 4 5 ./+to-apply
& s 7 8 ./+hold-linus
& q
$ git switch -c topic/one master
$ git am -3 -i -s ./+to-apply (4)
$ compile/test
$ git switch -c hold/linus && git am -3 -i -s ./+hold-linus (5)
$ git switch topic/one && git rebase master (6)
$ git switch -C seen next (7)
$ git merge topic/one topic/two && git merge hold/linus (8)
$ git switch maint
$ git cherry-pick master~4 (9)
$ compile/test
$ git tag -s -m "GIT 0.99.9x" v0.99.9x (10)
$ git fetch ko && for branch in master maint next seen (11)
    do
        git show-branch ko/$branch $branch (12)
    done
$ git push --follow-tags ko (13)
@end example


@table @asis

@item @pxref{CO6-1,,(1)}
see what you were in the middle of doing, if anything.

@item @pxref{CO6-2,,(2)}
see which branches haven’t been merged into @samp{master} yet.  Likewise for any
other integration branches e.g. @samp{maint}, @samp{next} and @samp{seen}.

@item @pxref{CO6-3,,(3)}
read mails, save ones that are applicable, and save others that are not
quite ready (other mail readers are available).

@item @pxref{CO6-4,,(4)}
apply them, interactively, with your sign-offs.

@item @pxref{CO6-5,,(5)}
create topic branch as needed and apply, again with sign-offs.

@item @pxref{CO6-6,,(6)}
rebase internal topic branch that has not been merged to the master or
exposed as a part of a stable branch.

@item @pxref{CO6-7,,(7)}
restart @samp{seen} every time from the next.

@item @pxref{CO6-8,,(8)}
and bundle topic branches still cooking.

@item @pxref{CO6-9,,(9)}
backport a critical fix.

@item @pxref{CO6-10,,(10)}
create a signed tag.

@item @pxref{CO6-11,,(11)}
make sure master was not accidentally rewound beyond that already pushed
out.

@item @pxref{CO6-12,,(12)}
In the output from @samp{git show-branch}, @samp{master} should have everything
@samp{ko/master} has, and @samp{next} should have everything @samp{ko/next} has, etc.

@item @pxref{CO6-13,,(13)}
push out the bleeding edge, together with new tags that point into the
pushed history.
@end table
@end table

In this example, the @samp{ko} shorthand points at the Git maintainer’s
repository at kernel.org, and looks like this:

@example
(in .git/config)
[remote "ko"]
        url = kernel.org:/pub/scm/git/git.git
        fetch = refs/heads/*:refs/remotes/ko/*
        push = refs/heads/master
        push = refs/heads/next
        push = +refs/heads/seen
        push = refs/heads/maint
@end example


@noindent

@chapheading リポジトリ管理

A repository administrator uses the following tools to set up and maintain
access to the repository by developers.

@itemize 

@item
git-daemon(1) to allow anonymous download from repository.

@item
git-shell(1) can be used as a @emph{restricted login shell} for shared
central repository users.

@item
git-http-backend(1) provides a server side implementation of
Git-over-HTTP ("Smart http") allowing both fetch and push services.

@item
gitweb(1) provides a web front-end to Git repositories, which can be
set-up using the git-instaweb(1) script.
@end itemize

@uref{howto/update-hook-example.html,update hook howto} has a good example of
managing a shared central repository.

In addition there are a number of other widely deployed hosting, browsing
and reviewing solutions such as:

@itemize 

@item
gitolite, gerrit code review, cgit and others.
@end itemize

@noindent

@heading Examples

@table @asis

@item  @samp{/etc/services} では以下を前提としています 
@example
$ grep 9418 /etc/services
git             9418/tcp                # Git Version Control System
@end example


@item  Run git-daemon to serve /pub/scm from inetd. 
@example
$ grep git /etc/inetd.conf
git     stream  tcp     nowait  nobody \
  /usr/bin/git-daemon git-daemon --inetd --export-all /pub/scm
@end example


実際の行は1行で書く必要があります。

@item  Run git-daemon to serve /pub/scm from xinetd. 
@example
$ cat /etc/xinetd.d/git-daemon
# default: off
# description: The Git server offers access to Git repositories
service git
@{
        disable = no
        type            = UNLISTED
        port            = 9418
        socket_type     = stream
        wait            = no
        user            = nobody
        server          = /usr/bin/git-daemon
        server_args     = --inetd --export-all --base-path=/pub/scm
        log_on_failure  += USERID
@}
@end example


Check your xinetd(8) documentation and setup, this is from a Fedora system.
Others might be different.

@item  Give push/pull only access to developers using git-over-ssh. 
e.g. those using: @samp{$ git push/pull ssh://host.xz/pub/scm/project}

@example
$ grep git /etc/passwd (1)
alice:x:1000:1000::/home/alice:/usr/bin/git-shell
bob:x:1001:1001::/home/bob:/usr/bin/git-shell
cindy:x:1002:1002::/home/cindy:/usr/bin/git-shell
david:x:1003:1003::/home/david:/usr/bin/git-shell
$ grep git /etc/shells (2)
/usr/bin/git-shell
@end example


@table @asis

@item @pxref{CO7-1,,(1)}
log-in shell is set to /usr/bin/git-shell, which does not allow anything but
@samp{git push} and @samp{git pull}.  The users require ssh access to the machine.

@item @pxref{CO7-2,,(2)}
in many distributions /etc/shells needs to list what is used as the login
shell.
@end table

@item  CVS-style shared repository. 
@example
$ grep git /etc/group (1)
git:x:9418:alice,bob,cindy,david
$ cd /home/devo.git
$ ls -l (2)
  lrwxrwxrwx   1 david git    17 Dec  4 22:40 HEAD -> refs/heads/master
  drwxrwsr-x   2 david git  4096 Dec  4 22:40 branches
  -rw-rw-r--   1 david git    84 Dec  4 22:40 config
  -rw-rw-r--   1 david git    58 Dec  4 22:40 description
  drwxrwsr-x   2 david git  4096 Dec  4 22:40 hooks
  -rw-rw-r--   1 david git 37504 Dec  4 22:40 index
  drwxrwsr-x   2 david git  4096 Dec  4 22:40 info
  drwxrwsr-x   4 david git  4096 Dec  4 22:40 objects
  drwxrwsr-x   4 david git  4096 Nov  7 14:58 refs
  drwxrwsr-x   2 david git  4096 Dec  4 22:40 remotes
$ ls -l hooks/update (3)
  -r-xr-xr-x   1 david git  3536 Dec  4 22:40 update
$ cat info/allowed-users (4)
refs/heads/master       alice\|cindy
refs/heads/doc-update   bob
refs/tags/v[0-9]*       david
@end example


@table @asis

@item @pxref{CO8-1,,(1)}
place the developers into the same git group.

@item @pxref{CO8-2,,(2)}
and make the shared repository writable by the group.

@item @pxref{CO8-3,,(3)}
use update-hook example by Carl from Documentation/howto/ for branch policy
control.

@item @pxref{CO8-4,,(4)}
alice and cindy can push into master, only bob can push into doc-update.
david is the release manager and is the only person who can create and push
version tags.
@end table
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitfaq,,,Top
@chapheading Name

gitfaq — Gitの使用に関するよくある質問(FAQ)

@noindent

@chapheading Synopsis

gitfaq

@noindent

@chapheading DESCRIPTION

このFAQの例では、 @samp{bash} や @samp{dash} などの標準のPOSIXシェルと、ホスティングプロバイダー @samp{git.example.org}
にアカウント @samp{author} を持つユーザー A U Thor を想定しています。

@noindent

@chapheading Configuration

@table @asis


@item  @samp{user.name} には何を入れるべきですか？ 
個人名、通常は名前とファミリーネームを使用した形式を入力する必要があります。たとえば、Gitの現在のメンテナは "Junio C Hamano" (濱野
純)を使用しています。 これは、コミットするたびに保存される名前の部分になります。

この構成は、リモートサービスへの認証には影響しません。 そのためには、 git-config(1) の
@samp{credential.username} を参照してください。

@item  @samp{http.postBuffer} は実際には何をしますか？ 
このオプションは、HTTPまたはHTTPSを介してデータをリモートにプッシュするときにGitが使用するバッファーのサイズを変更します。データがこのサイズより大きい場合、GitのHTTPサポートを処理するlibcurlは、プッシュされたデータのサイズが事前にわからないため、チャンク転送エンコーディングを使用します。

リモートサーバーまたは中間のプロキシが、(チャンク転送エンコーディングを導入している) HTTP/1.1
をサポートしていないか、チャンクデータが壊れていることがわかっている場合を除いて、この値をデフォルトサイズのままにしておくことは問題ありません。これは一般的なプッシュ問題の解決策として、(誤って)提案されることがよくありますが、ほとんどすべてのサーバーとプロキシが少なくとも
HTTP/1.1 はサポートしているため、この値を上げてもほとんどのプッシュ問題は解決されません。 HTTP/1.1
とチャンク転送エンコーディングを正しくサポートしていなかったサーバーまたはプロキシは、大量のトラフィックを遮断するため、今日のインターネットでは無用の長物です。

注意:
この値を増やすと、GitがHTTPまたはHTTPSを介して行うすべての関連プッシュで使用されるメモリが増えることに注意してください。これは、すべてが使用されているかどうかに関係なく、バッファ全体が割り当てられるためです。したがって、別の値が必要であることが確実でない限り、デフォルトのままにしておくことをお勧めします。

@item  別のエディタを構成するにはどうすればよいですか？ 
Git専用のエディターを指定していない場合は、デフォルトで、「VISUAL」または「EDITOR」環境変数を使用して構成したエディターが使用されます。どちらも指定されていない場合は、システムのデフォルト(通常は「vi」)が使用されます。
@samp{vi} は使いにくい、または別のエディターを好む人もいるため、使用するエディターを変更することが望ましい場合があります。

エディタを必要とするプログラム用に、あなたがエディタを構成したい場合、シェル構成(つまり、 @samp{~/.bashrc} とか
@samp{~/.zshenv})を編集して、 @samp{EDITOR} または @samp{VISUAL}
環境変数に適切な値に設定する行を含めることができます。たとえば、エディタ @samp{nano} が必要な場合は、以下のように記述できます:

@example
export VISUAL=nano
@end example


あなたがGit専用のエディタを構成したい場合は、 @samp{core.editor} 構成 または @samp{GIT_EDITOR}
環境変数を設定できます。これらのオプションが参照される順序の詳細については git-var(1) を参照してください。

注意:
いずれの場合も、エディタの値はシェルに渡されるため、スペースを含む引数は適切に引用符で囲む必要があることに注意してください。さらに、エディタが呼び出されたとき、通常ターミナルからデタッチするタイプのエディタ場合は、それを行わないようにする引数を指定して指定する必要があります。そうしないと、Gitはエディタでの変更を認識しません。
Windowsでこれらの問題の両方に対処する構成の例は、構成 @samp{"C:\Program Files\Vim\gvim.exe" --nofork}
です。これは、空白を含んだファイル名をクォートし、プロセスのバックグラウンド実行を回避するため @samp{--nofork} オプションを指定します。
@end table

@noindent

@chapheading Credentials

@table @asis


@item  HTTPでプッシュするときに資格情報を指定するにはどうすればよいですか？ 
これを行う最も簡単な方法は、 @samp{credential.helper}
構成を介して資格情報ヘルパーを使用することです。ほとんどのシステムは、システム資格情報マネージャーと統合するための標準的な選択肢を提供します。たとえば、Git
for
Windowsは「wincred」資格情報マネージャーを提供し、macOSは「osxkeychain」資格情報マネージャーを提供し、標準デスクトップ環境を備えたUnixシステムは「libsecret」資格情報マネージャーを使用できます。
これらはすべて、パスワードまたはトークンを安全に保つために暗号化されたストアに資格情報を保存します。

さらに、ホームディレクトリのファイルに保存する @samp{store}
資格情報マネージャー、または資格情報を永続的に保存しないが、特定の時間、資格情報の入力を求められないようにする @samp{cache}
資格情報マネージャーを使用できます。

プロンプトが表示されたら、パスワードを入力することもできます。
URLにパスワード(パーセントエンコードする必要があります)を配置することは可能ですが、これは全然安全じゃ無く、誤って資格情報が公開される可能性があるため、お勧めしません。

@item  環境変数からパスワードまたはトークンを読み取るにはどうすればよいですか？ 
@samp{credential.helper}
構成オプションは、標準出力で資格情報プロトコルを生成する任意のシェルコマンドを受け取ることもできます。これは、たとえば、資格情報をコンテナに渡すときに役立ちます。

このようなシェルコマンドは、オプション値を感嘆符(@samp{!})で開始することで指定できます。パスワードまたはトークンが @samp{GIT_TOKEN}
に保存されている場合は、以下のコマンドを実行して資格情報ヘルパーを設定できます:

@example
$ git config credential.helper \
        '!f() @{ echo username=author; echo "password=$GIT_TOKEN"; @};f'
@end example


@item  資格情報マネージャーに保存したパスワードまたはトークンを変更するにはどうすればよいですか？ 
通常、パスワードまたはトークンが無効な場合、Gitはそれを消去し、新しいものを要求します。ただし、これが常に発生するとは限りません。パスワードまたはトークンを変更するには、既存の資格情報を消去してください。そうすればGitが新しい資格情報の入力を求めます。資格情報を消去するには、以下の構文を使用します(ユーザー名(「author」の部分)とホスト名(「git.example.org」の部分)をあなた自身のに置き換えてください):

@example
$ echo url=https://author@@git.example.org | git credential reject
@end example


@item  HTTPを使用して同じホスティングプロバイダーで複数のアカウントを使用するにはどうすればよいですか？ 
通常、これらのアカウントを区別する最も簡単な方法は、URLでユーザー名を使用することです。 たとえば、 @samp{git.example.org} にアカウント
@samp{author} と @samp{committer} がある場合、URLに
@uref{https://author@@git.example.org/org1/project1.git,https://author@@git.example.org/org1/project1.git} と
@uref{https://committer@@git.example.org/org2/project2.git,https://committer@@git.example.org/org2/project2.git}
を使用できます。このように、資格情報ヘルパーを使用すると、アカウントの正しい資格情報が自動的に検索されます。すでにリモートを設定している場合は @samp{git
remote set-url origin https://author@@git.example.org/org1/project1.git}
としてURLを変更できます(詳細は git-remote(1) を参照)。

@item  SSHを使用して同じホスティングプロバイダーで複数のアカウントを使用するにはどうすればよいですか？ 
SSHをサポートするほとんどのホスティングプロバイダーでは、単一のキーペアがユーザーを一意に識別します。したがって、複数のアカウントを使用するには、アカウントごとにキーペアを作成する必要があります。適度に最新のOpenSSHバージョンを使用している場合は
@samp{ssh-keygen -t ed25519 -f ~/.ssh/id_committer}
などとして新しいキーペアを作成できます。次に、公開鍵(この場合は @samp{~/.ssh/id_committer.pub} ※拡張子 @samp{.pub} に注意)
をホスティングプロバイダーに登録できます。

ほとんどのホスティングプロバイダーは、プッシュに単一のSSHアカウントを使用します。つまり、すべてのユーザーが @samp{git} アカウント(例:
@samp{git@@git.example.org})にプッシュします。プロバイダーの場合は、SSHで複数のエイリアスを設定して、使用するキーペアを明確にすることができます。たとえば、以下のようなのを
@samp{~/.ssh/config} に記述して、適切な秘密鍵ファイルに置き換えることができます:

@example
# This is the account for author on git.example.org.
Host example_author
        HostName git.example.org
        User git
        # This is the key pair registered for author with git.example.org.
        IdentityFile ~/.ssh/id_author
        IdentitiesOnly yes
# This is the account for committer on git.example.org.
Host example_committer
        HostName git.example.org
        User git
        # This is the key pair registered for committer with git.example.org.
        IdentityFile ~/.ssh/id_committer
        IdentitiesOnly yes
@end example


こうすれば、あなたはプッシュURLを調整して、 @samp{git@@example.org} の代わりに @samp{git@@example_author} または
@samp{git@@example_committer} を使用できます(例: @samp{git remote set-url
git@@example_author:org1/project1.git}) 。
@end table

@noindent

@chapheading Common Issues

@table @asis


@item  前回のコミットでミスをしました。どうすれば変更できますか？ 
作業ツリーに適切な変更を加え、必要に応じて @samp{git add <file>} または @samp{git rm <file>} を実行してステージングしてから、
@samp{git commit --amend}
を実行できます。変更はコミットに含まれ、コミットメッセージを再度編集するように求められます。元のメッセージをそのまま使用したい場合は、
@samp{--no-edit} オプションを伴ってて @samp{git commit}
を使用するか、または、エディタが開いたら何もせず保存して終了して済ませることもできます。

@item  バグで変更を加えましたが、それは既にメインブランチに含まれてしまっています。どうすれば元に戻すことができますか？ 
これに対処する通常の方法は、 @samp{git revert}
を使用することです。これにより、元の変更が行われて貴重な貢献であった、という履歴が保持されるとともに、元の変更に問題があったためにそれらの変更を元に戻す新しいコミットも導入されます。revertのコミットメッセージは、復帰(revert)されたコミットを示し、通常、復帰(revert)が行われた理由に関する説明を含むように編集されます。

@item  追跡されているファイルへの変更を無視するにはどうすればよいですか？ 
Gitはこれを行う方法を提供していません。
その理由は、チェックアウト中など、Gitがこのファイルを上書きする必要がある場合、ファイルへの変更が貴重で保持されるべきかどうか、または無関係で安全に破棄できるかどうかがわからないためです。したがって、安全なルートを取り、常にそれらを保存する必要があります。

@samp{git update-index}
の特定の機能、つまり、assume-unchangedビットとskip-worktreeビットを使おうとするのは魅力的ですが、これらはこの目的には適切に機能しないため、このように使用しないでください。

あなたの目的が構成ファイルを変更することの場合は、テンプレートまたはデフォルトのセットであるファイルをリポジトリにチェックインして、一緒にコピーして必要に応じて変更できると便利なことがよくあります。この場合の変更されたファイルは、誤ってコミットすることを防ぐために、通常は無視されます。

@item  さまざまなファイルを無視するようにGitに依頼したはずなのに、それらはまだ追跡されています 
@samp{gitignore} ファイルは、Gitによって追跡されていない特定のファイルが追跡されないままであることを保証します。ただし、特定のファイルが
@samp{.gitignore} に追加される前に追跡されている場合は追跡されたままになります。ファイル/パターン を追跡解除して無視するには、 @samp{git rm
--cached <file/pattern>} を使用し、 <file> に一致するパターンを @samp{.gitignore} に追加します。詳細については
gitignore(5) を参照してください。

@item  フェッチまたはプルのどちらを実行すればよいか知るにはどうすればよいですか？ 
フェッチは、作業ツリーや現在のブランチを変更せずに、リモートリポジトリからの最新の変更のコピーを保存します。その後、自由に、アップストリームの変更を検査、マージ、リベース、または無視することができます。プルは、フェッチとその直後のマージまたはリベースで構成されます。
git-pull(1) を参照してください。
@end table

@noindent

@chapheading Merging and Rebasing

@table @asis


@item  寿命の長いブランチをスカッシュマージとマージすると、どのような問題が発生する可能性がありますか？ 
一般に、スカッシュマージを使用して2つのブランチを複数回マージすると、さまざまな問題が発生する可能性があります。これには、GUIを使用した場合、または
@samp{...`表記を使用して範囲を表す場合に、 `git log}
出力で追加のコミットが表示されることや、競合を何度も再解決する必要がある可能性が含まれます。

Gitが2つのブランチ間で通常のマージを行う場合、正確に3者が考慮されます。2つのブランチと、通常は2つのコミットの共通の祖先である「マージベース」(merge
base)と呼ばれる3番目のコミットです。マージの結果は、マージベースと各headの間の変更の合計です。2つのブランチを通常のマージコミットでマージすると、新しい共通の祖先を持つ、新しいコミットが発生し、再度マージされるときはそれが最終的なマージベースになります。そうすると、Gitは、マージベースの前に発生した変更を考慮する必要がないため、以前に解決した競合を再解決する必要がありません。

スカッシュマージを実行する場合、マージコミットは作成されません。代わりに、一方の側からの変更は、もう一方の側への通常のコミットとして適用されます。つまり、これらのブランチのマージベースは変更されないため、Gitが次のマージを実行するときに、前回考慮したすべての変更と新しい変更が考慮されます。つまり、競合を再解決する必要があるかもしれません。
同様に、 @samp{git diff} または @samp{git log} またはGUIで @samp{...}
表記を使用すると、元のマージベース以降のすべての変更が表示されます。

結果として、2つの長期間有効なブランチを繰り返しマージする場合は、常に通常のマージコミットを使用するのが最善です。

@item  2つのブランチに変更を加えた後、それを1つに戻した場合、それら2つのブランチのマージに変更が含まれるのはなぜですか？ 
デフォルトでは、Gitがマージを行うとき、それは「ort」戦略と呼ばれる戦略を使用します。これは、派手な3者間マージ(fancy three-way
merge)を行います。
このような場合、Gitはマージを実行するときに、正確に3つのポイントを考慮します。2つのheadと、通常はこれらのコミットの共通の祖先である「マージベース」(merge
base)と呼ばれる3番目のポイントです。 Gitは、これらのブランチで発生した履歴や個々のコミットをまったく考慮しません。

その結果、両方の側に変更があり、一方の側がその変更を元に戻した場合、結果には変更が含まれます。
これは、コードが一方の側で変更され、もう一方の側では正味の変更がないためです。このシナリオでは、Gitが変更を採用します。

これが問題になる場合は、代わりにリベースを実行して、ブランチを他のブランチに戻すことでリベースすることができます。このシナリオでのリベースは変更を元に戻します。これは、リベースが元に戻すことを含め、個々のコミットを適用するためです。リベースは書き換え履歴(rewrite
history)をリベースするため、問題がない場合を除いて、公開されたブランチのリベースは避けてください。詳細については、
git-rebase(1)のNOTESセクションを参照してください。
@end table

@noindent

@chapheading Hooks

@table @asis


@item  フックを使用して、ユーザーが特定の変更を行うのを妨げるにはどうすればよいですか？ 
これらの変更を行うための唯一の安全な場所は、リモートリポジトリ(つまり、Gitサーバー)で、通常は @samp{pre-receive}
フックまたは継続的インテグレーション(CI)システムです。これらは、ポリシーを効果的に実施できる場所です。

@samp{pre-commit} フック(または、コミットメッセージの場合は @samp{commit-msg}
フック)を使用してこれらをチェックするのが一般的です。これは、単独の開発者として作業していて、ツールが役立つことを望んでいる場合に最適です。ただし、開発者のマシンでフックを使用することは、ユーザーが(他のさまざまな方法の中でも)気付かれることなく
@samp{--no-verify} でこれらのフックをバイパスできるため、ポリシーコントロールとしては効果的ではありません。
Gitは、ユーザーがローカルリポジトリを管理していることを前提としており、これを防止したり、ユーザーを攻撃したりすることはありません。

さらに、一部の上級ユーザーは、「pre-commit」フックが、一時的なコミットを使用して進行中の作業をステージングしたり、修正コミットを作成したりするワークフローの障害であると感じているため、とにかくこれらの種類のチェックはサーバーに押しやることをお勧めします。
@end table

@noindent

@chapheading Cross-Platform Issues

@table @asis


@item  Windowsを使用していますが、テキストファイルがバイナリとして検出されます。 
Gitは、テキストファイルをUTF-8として保存する場合に最適に機能します。Windows上の多くのプログラムはUTF-8をサポートしていますが、Gitがバイナリとして検出するリトルエンディアンのUTF-16形式を使用していないプログラムもあります。プログラムでUTF-8を使用できない場合は、これらのファイルをUTF-8としてリポジトリに保存しながら、ファイルをチェックアウトするエンコードを示す作業ツリーエンコーディング(working
tree encoding)を指定できます。これにより、 git-diff(1)
などのツールを期待どおりに機能させながら、ツールを機能させることができます。

これを行うには、 @samp{working-tree-encoding} 属性を使用して gitattributes(5)
パターンを指定できます。たとえば、以下のパターンは、Windowsで一般的なエンコーディングである UTF-16LE-BOM
を使用するようにすべてのC言語ファイルを設定します:

@example
*.c     working-tree-encoding=UTF-16LE-BOM
@end example


これを有効にするには、 @samp{git add --renormalize}
を実行する必要があります。プラットフォーム間で使用されるプロジェクトでこれらの変更を行う場合は、ユーザーごとの構成ファイルまたは
@samp{$GIT_DIR/info/attributes} の構成ファイルで行う必要があることに注意してください。リポジトリ内の
@samp{.gitattributes} ファイルは、リポジトリのすべてのユーザーに適用されます。

行末の正規化については以下のエントリを参照してください。属性ファイルの詳細については、gitattributes(5)
を参照してください。

@item  Windowsの git diff はファイルの最後に @samp{^M} があると表示します。 
デフォルトでは、GitはファイルがUnixの行末で保存されることを想定しています。そのため、Windowsの行末の一部であるキャリッジリターン(@samp{^M})は、末尾の空白と見なされるため、表示されます。Gitはデフォルトで、既存の行ではなく、新しい行にのみ末尾の空白を表示します。

ファイルをUnixの行末でリポジトリに保存し、プラットフォームの行末に自動的に変換できます。 これを行うには、構成オプション @samp{core.eol} を
@samp{native} に設定し、以下のエントリで、ファイルをテキストまたはバイナリとして構成する方法について確認してください。

行末からキャリッジリターン(CR;\x0d)を削除したくない場合は、 @samp{core.whitespace}
設定を使用してこの動作を制御することもできます。

@item  常に変更されるファイルがあるのはなぜですか？ 
内部的には、Gitは常にファイル名をバイトのシーケンスとして保存し、エンコードや大文字と小文字の区別は行いません。
ただし、WindowsとmacOSはどちらも、デフォルトでファイル名に対して大文字と小文字を区別します。その結果、大文字と小文字が区別される場合にのみ名前が異なる複数のファイルまたはディレクトリが作成される可能性があります。Gitはこれを問題なく処理できますが、ファイルシステムはこれらのファイルの1つしか保存できないため、Gitが他のファイルを読み取ってその内容を確認すると、変更されているように見えます。

ファイルが1つだけになるように、ファイルの1つを削除することをお勧めします。これは、以下のようなコマンド(2つのファイル @samp{AFile.txt}
と`afile.txt` を想定)を使用して、他の点ではクリーンな作業ツリーで実行できます:

@example
$ git rm --cached AFile.txt
$ git commit -m 'Remove files conflicting in case'
$ git checkout .
@end example


これにより、ディスクへの変更は回避され、追加のファイルは削除されます。プロジェクトでは、この問題が再発しないように、すべて小文字の名前などの命名規則を採用することをお勧めします。このような規則は、
@samp{pre-receive} フックを使用して、または継続的インテグレーション(CI)システムにてチェックできます。

システムでスマッジまたはクリーンフィルター(a smudge or clean
filter)が使用されているが、スマッジまたはクリーンフィルターを実行せずにファイルが以前にコミットされた場合、任意のプラットフォームで永続的に変更されたファイルが発生する可能性もあります。これを修正するには、他の点ではクリーンな作業ツリーで以下を実行します:

@example
$ git add --renormalize .
@end example


@item  Gitにファイルを保存するための推奨の方法は何ですか？ 
Gitはあらゆるタイプのあらゆるファイルを保存および処理できますが、他の設定よりもうまく機能する設定がいくつかあります。一般に、テキストファイルは、LF(Unixスタイル)で終わるバイト順マーク(BOM)なしでUTF-8に保存することをお勧めします。また、コミットメッセージでUTF-8(ここでもBOMなし)を使用することをお勧めします。これらは、プラットフォーム間や
@samp{git diff} や @samp{git merge} などのツールで最適に機能する設定です。

さらに、テキストベースまたは非テキストベースのストレージ形式を選択できる場合は、ファイルをテキスト形式で保存し、必要に応じて他の形式に変換することをお勧めします。たとえば、1行に1つのレコードを持つテキストベースのSQLダンプは、実際のデータベースファイルよりも差分とマージにはるかに適しています。同様に、MarkdownやAsciiDocなどのテキストベースの形式は、MicrosoftWordやPDFなどのバイナリ形式よりもうまく機能します。

同様に、バイナリ依存関係(共有ライブラリやJARファイルなど)を格納したり、リポジトリに製品をビルドしたりすることは、通常はお勧めしません。依存関係とビルド製品は、リポジトリに保存されている参照、URL、ハッシュのみを使用して、アーティファクトサーバーまたはパッケージサーバーに保存するのが最適です。

また、 gitattributes(5)
ファイルを設定して、どのファイルがテキストでどのファイルがバイナリであるかを明示的にマークすることをお勧めします。Gitに推測させたい場合は、属性
@samp{text=auto} を設定できます。 たとえば、一部のプロジェクトでは以下の設定が適切な場合があります:

@example
# By default, guess.
*       text=auto
# Mark all C files as text.
*.c     text
# Mark all JPEG files as binary.
*.jpg   binary
@end example


これらの設定は、ツールがパッチなどの出力に適切な形式を選択するのに役立ち、プラットフォームに適切な行末コードでファイルがチェックアウトされます。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitglossary,,,Top
@chapheading Name

gitglossary — Git用語集

@noindent

@chapheading Synopsis

*

@noindent

@chapheading DESCRIPTION

@table @asis

@item  alternate object database 
代役(alternate)メカニズムを介して、 リポジトリ (@pxref{[def_repository]}) は
オブジェクトデータベース (@pxref{[def_object_database]}) の一部を "alternate" (代役)
呼ばれる別のオブジェクトデータベースから継承できます。

@item  bare repository(ベアリポジトリ) 
A bare repository is normally an appropriately named
directory (@pxref{[def_directory]}) with a @samp{.git} suffix that does not have a
locally checked-out copy of any of the files under revision control. That
is, all of the Git administrative and control files that would normally be
present in the hidden @samp{.git} sub-directory are directly present in the
@samp{repository.git} directory instead, and no other files are present and
checked out. Usually publishers of public repositories make bare
repositories available.

@item  blob object(ブロブオブジェクト) 
型の無いオブジェクト (@pxref{[def_object]})。例:ファイルの中身。

@item  branch 
A "branch" is a line of development.  The most recent commit (@pxref{[def_commit]})
on a branch is referred to as the tip of that branch.  The tip of the branch
is referenced by a branch head (@pxref{[def_head]}), which moves forward as
additional development is done on the branch.  A single Git
repository (@pxref{[def_repository]}) can track an arbitrary number of branches, but
your working tree (@pxref{[def_working_tree]}) is associated with just one of them
(the "current" or "checked out" branch), and HEAD (@pxref{[def_HEAD]}) points to
that branch.

@item  cache 
Obsolete for: index (@pxref{[def_index]}).

@item  chain(チェーン,チェイン) 
オブジェクトのリスト。リスト内の各 オブジェクト (@pxref{[def_object]}) には、その後ろへの参照が含まれます(たとえば、
コミット (@pxref{[def_commit]}) の後ろはその 親 (@pxref{[def_parent]}) の1つである可能性があります)。

@item  changeset 
"コミット (@pxref{[def_commit]})" の BitKeeper/cvsps
での言い方です。Gitで変更を保存せず状態を保存するため、Gitでコミットを「changeset」と呼ぶのはナンセンスです。

@item  checkout 
The action of updating all or part of the working tree (@pxref{[def_working_tree]})
with a tree object (@pxref{[def_tree_object]}) or blob (@pxref{[def_blob_object]}) from the
object database (@pxref{[def_object_database]}), and updating the
index (@pxref{[def_index]}) and HEAD (@pxref{[def_HEAD]}) if the whole working tree has been
pointed at a new branch (@pxref{[def_branch]}).

@item  cherry-picking(チェリーピック,チェリーピッキング) 
SCM (@pxref{[def_SCM]}) の専門用語では、 "cherry pick"
(つまみ食い)とは、一連の変更(通常はコミット)から変更のサブセットを選択し、それらを別のコードベースの上に新しい一連の変更として記録することを意味します。Gitでは、これは
"git cherry-pick"
コマンドによって実行され、既存のコミット (@pxref{[def_commit]})によって導入された変更を抽出し、現在のブランチ (@pxref{[def_branch]})の先端に基づいてそれを新しいコミットとして記録します。

@item  clean 
A working tree (@pxref{[def_working_tree]}) is clean, if it corresponds to the
revision (@pxref{[def_revision]}) referenced by the current head (@pxref{[def_head]}). Also
see "dirty (@pxref{[def_dirty]})".

@item  commit 
As a noun: A single point in the Git history; the entire history of a
project is represented as a set of interrelated commits.  The word "commit"
is often used by Git in the same places other revision control systems use
the words "revision" or "version".  Also used as a short hand for
commit object (@pxref{[def_commit_object]}).

As a verb: The action of storing a new snapshot of the project’s state in
the Git history, by creating a new commit representing the current state of
the index (@pxref{[def_index]}) and advancing HEAD (@pxref{[def_HEAD]}) to point at the new
commit.

@item  commit object 
An object (@pxref{[def_object]}) which contains the information about a particular
revision (@pxref{[def_revision]}), such as parents (@pxref{[def_parent]}), committer,
author, date and the tree object (@pxref{[def_tree_object]}) which corresponds to
the top directory (@pxref{[def_directory]}) of the stored revision.

@item  commit-ish (also committish) 
A commit object (@pxref{[def_commit_object]}) or an object (@pxref{[def_object]}) that can
be recursively dereferenced to a commit object.  The following are all
commit-ishes: a commit object, a tag object (@pxref{[def_tag_object]}) that points
to a commit object, a tag object that points to a tag object that points to
a commit object, etc.

@item  core Git 
Gitの基本的なデータ構造とユーティリティ。これは、限定的なソースコード管理ツールのみです。

@item  DAG 
Directed acyclic graph. The commit objects (@pxref{[def_commit_object]}) form a
directed acyclic graph, because they have parents (directed), and the graph
of commit objects is acyclic (there is no chain (@pxref{[def_chain]}) which begins
and ends with the same object (@pxref{[def_object]})).

@item  dangling object 
An unreachable object (@pxref{[def_unreachable_object]}) which is not
reachable (@pxref{[def_reachable]}) even from other unreachable objects; a dangling
object has no references to it from any reference or object (@pxref{[def_object]})
in the repository (@pxref{[def_repository]}).

@item  detached HEAD 
Normally the HEAD (@pxref{[def_HEAD]}) stores the name of a branch (@pxref{[def_branch]}),
and commands that operate on the history HEAD represents operate on the
history leading to the tip of the branch the HEAD points at.  However, Git
also allows you to check out (@pxref{[def_checkout]}) an arbitrary
commit (@pxref{[def_commit]}) that isn’t necessarily the tip of any particular
branch.  The HEAD in such a state is called "detached".

Note that commands that operate on the history of the current branch
(e.g. @samp{git commit} to build a new history on top of it) still work while the
HEAD is detached. They update the HEAD to point at the tip of the updated
history without affecting any branch.  Commands that update or inquire
information @emph{about} the current branch (e.g. @samp{git branch --set-upstream-to}
that sets what remote-tracking branch the current branch integrates with)
obviously do not work, as there is no (real) current branch to ask about in
this state.

@item  directory 
あなたが "ls" で得られる一覧の事 :-)

@item  dirty 
A working tree (@pxref{[def_working_tree]}) is said to be "dirty" if it contains
modifications which have not been committed (@pxref{[def_commit]}) to the current
branch (@pxref{[def_branch]}).

@item  evil merge 
邪悪なマージとは、どの 親 (@pxref{[def_parent]}) にも表示されない変更を導入する マージ (@pxref{[def_merge]}) です。

@item  fast-forward 
A fast-forward is a special type of merge (@pxref{[def_merge]}) where you have a
revision (@pxref{[def_revision]}) and you are "merging" another
branch (@pxref{[def_branch]})'s changes that happen to be a descendant of what you
have. In such a case, you do not make a new merge (@pxref{[def_merge]})
commit (@pxref{[def_commit]}) but instead just update your branch to point at the
same revision as the branch you are merging. This will happen frequently on
a remote-tracking branch (@pxref{[def_remote_tracking_branch]}) of a remote
repository (@pxref{[def_repository]}).

@item  fetch 
Fetching a branch (@pxref{[def_branch]}) means to get the branch’s
head ref (@pxref{[def_head_ref]}) from a remote repository (@pxref{[def_repository]}), to
find out which objects are missing from the local
object database (@pxref{[def_object_database]}), and to get them, too.  See also
git-fetch(1).

@item  file system 
リーナス・トーバルズは当初、Gitをユーザー空間ファイルシステム、つまりファイルとディレクトリを保持するインフラストラクチャとして設計しました。これにより、Gitの効率と速度が保証されました。

@item  Git archive 
リポジトリ (@pxref{[def_repository]}) の同義語(arch people 向け)。

@item  gitfile 
実際のリポジトリであるディレクトリを指す、作業ツリーのルートにあるプレーンファイル @samp{.git}

@item  grafts 
Grafts enables two otherwise different lines of development to be joined
together by recording fake ancestry information for commits. This way you
can make Git pretend the set of parents (@pxref{[def_parent]}) a
commit (@pxref{[def_commit]}) has is different from what was recorded when the
commit was created. Configured via the @samp{.git/info/grafts} file.

Note that the grafts mechanism is outdated and can lead to problems
transferring objects between repositories; see git-replace(1) for a
more flexible and robust system to do the same thing.

@item  hash 
Gitの文脈では オブジェクト名 (@pxref{[def_object_name]}) と同義語。

@item  head 
ブランチ (@pxref{[def_branch]}) の先端にある コミット (@pxref{[def_commit]}) への、 名付けられた参照 (@pxref{[def_ref]})
です。パックされた参照を使用する場合を除いて、headは @samp{$GIT_DIR/refs/heads/} ディレクトリのファイルに保存されます。
(linkgit: git-pack-refs[1] を参照してください。)

@item  HEAD 
The current branch (@pxref{[def_branch]}).  In more detail: Your working tree (@pxref{[def_working_tree]}) is normally derived from the state of the tree referred to by
HEAD.  HEAD is a reference to one of the heads (@pxref{[def_head]}) in your
repository, except when using a detached HEAD (@pxref{[def_detached_HEAD]}), in
which case it directly references an arbitrary commit.

@item  head ref 
head (@pxref{[def_head]}) の同義語。

@item  hook 
During the normal execution of several Git commands, call-outs are made to
optional scripts that allow a developer to add functionality or
checking. Typically, the hooks allow for a command to be pre-verified and
potentially aborted, and allow for a post-notification after the operation
is done. The hook scripts are found in the @samp{$GIT_DIR/hooks/} directory, and
are enabled by simply removing the @samp{.sample} suffix from the filename. In
earlier versions of Git you had to make them executable.

@item  index 
A collection of files with stat information, whose contents are stored as
objects. The index is a stored version of your working         tree (@pxref{[def_working_tree]}). Truth be told, it can also contain a second, and even a third
version of a working tree, which are used when merging (@pxref{[def_merge]}).

@item  index entry 
The information regarding a particular file, stored in the
index (@pxref{[def_index]}). An index entry can be unmerged, if a
merge (@pxref{[def_merge]}) was started, but not yet finished (i.e. if the index
contains multiple versions of that file).

@item  master 
デフォルトの開発 ブランチ (@pxref{[def_branch]}) 。 Git リポジトリ (@pxref{[def_repository]})
を作成するたびに、「master」という名前のブランチが作成され、アクティブなブランチになります。
ほとんどのローカル開発に含まれていますが、これは純粋に慣例によるものであり、必須ではありません。

@item  merge 
As a verb: To bring the contents of another branch (@pxref{[def_branch]}) (possibly
from an external repository (@pxref{[def_repository]})) into the current branch.  In
the case where the merged-in branch is from a different repository, this is
done by first fetching (@pxref{[def_fetch]}) the remote branch and then merging the
result into the current branch.  This combination of fetch and merge
operations is called a pull (@pxref{[def_pull]}).  Merging is performed by an
automatic process that identifies changes made since the branches diverged,
and then applies all those changes together.  In cases where changes
conflict, manual intervention may be required to complete the merge.

As a noun: unless it is a fast-forward (@pxref{[def_fast_forward]}), a successful
merge results in the creation of a new commit (@pxref{[def_commit]}) representing
the result of the merge, and having as parents (@pxref{[def_parent]}) the tips of
the merged branches (@pxref{[def_branch]}).  This commit is referred to as a "merge
commit", or sometimes just a "merge".

@item  object(オブジェクト) 
Gitの保管ユニット(unit of storage)。その内容による SHA-1 (@pxref{[def_SHA1]})
によって一意に識別されます。したがって、オブジェクトを変更することはできません。

@item  object database 
Stores a set of "objects", and an individual object (@pxref{[def_object]}) is
identified by its object name (@pxref{[def_object_name]}). The objects usually live
in @samp{$GIT_DIR/objects/}.

@item  object identifier(オブジェクトID) 
object name (@pxref{[def_object_name]}) (オブジェクト名)の同義語

@item  object name(オブジェクト名) 
オブジェクト> の一意の識別子。オブジェクト名は通常、40文字の16進文字列で表されます。一般に         <<def_SHA1 (@pxref{[def_object]}) とも呼ばれます。

@item  object type(オブジェクトタイプ) 
「コミット (@pxref{[def_commit_object]}) 識別子」または「ツリー (@pxref{[def_tree_object]})
識別子」または「タグ (@pxref{[def_tag_object]}) 識別子」または「ブロブ (@pxref{[def_blob_object]}) 識別子」のいずれかで、
オブジェクト (@pxref{[def_object]}) のタイプを表します。

@item  octopus 
3つ以上(more than two)のブランチをマージします

@item  origin 
The default upstream repository (@pxref{[def_repository]}). Most projects have at
least one upstream project which they track. By default @emph{origin} is used for
that purpose. New upstream updates will be fetched into
remote-tracking branches (@pxref{[def_remote_tracking_branch]}) named
origin/name-of-upstream-branch, which you can see using @samp{git branch -r}.

@item  overlay 
Only update and add files to the working directory, but don’t delete them,
similar to how @emph{cp -R} would update the contents in the destination
directory.  This is the default mode in a checkout (@pxref{[def_checkout]}) when
checking out files from the index (@pxref{[def_index]}) or a
tree-ish (@pxref{[def_tree-ish]}).  In contrast, no-overlay mode also deletes
tracked files not present in the source, similar to @emph{rsync --delete}.

@item  pack 
A set of objects which have been compressed into one file (to save space or
to transmit them efficiently).

@item  pack index 
The list of identifiers, and other information, of the objects in a
pack (@pxref{[def_pack]}), to assist in efficiently accessing the contents of a
pack.

@item  pathspec 
Gitコマンドでパスを制限するために使用されるパターン。

pathspecsは、「git ls-files」、「git ls-tree」、「git add」、「git grep」、「git diff」、「git
checkout」、および、ツリーまたはワークツリーのサブセットへの操作の為にスコープを制限する他の多くのコマンドのコマンドラインで使用されます。パスが現在のディレクトリまたはトップレベルのどちらを基準にしているかについては、各コマンドのドキュメントを参照してください。
pathspecの構文は以下のとおりです:

@itemize 

@item
どのパスもそれ自体と一致します

@item
最後がスラッシュであるpathspecは、ディレクトリプレフィックスを表します。そのpathspecのスコープは、そのサブツリーに制限されています。

@item
pathspecの残りの部分は、pathnameの残りの部分のパターンです。 ディレクトリプレフィックスに関連するパスは、 fnmatch(3)
を使用してそのパターンと照合されます。特に、 @emph{*} と @emph{?} はディレクトリ区切り文字と一致させる事ができます。
@end itemize

たとえば、 @samp{Documentation/*.jpg} は、 @samp{Documentation/chapter_1/figure_1.jpg}
を含む、Documentationサブツリー内のすべての @samp{.jpg} ファイルと一致します。

コロン(@samp{:})で始まるpathspecには特別な意味があります。短い形式では、先頭のコロン(@samp{:})の後に0個以上の「魔法記号」(magic
signature)(オプションで別のコロン(@samp{:})で終了)が続き、残りはパスと照合するパターンです。「魔法記号」は、英数字、グロブ、正規表現の特殊文字でもコロンでもないASCII記号で構成されます。パターンが「魔法記号」シンボルセットに属さず、コロンではない文字で始まる場合、「魔法記号」を終了するオプションのコロンは省略できます。

長い形式では、先頭のコロン(@samp{:})の後に開き括弧(@samp{(}) 、0個以上の「魔法単語」(magic
words)のコンマ区切りリスト、および閉じ括弧(@samp{)}) が続き、残りは次のパターンです。パスと一致します。

コロンのみのpathspecは、「pathspecがない」ことを意味します。 この形式は、他のpathspecと組み合わせないでください。

@table @asis

@item  top 
魔法単語 @samp{top} (魔法記号: @samp{/})は、サブディレクトリ内からコマンドを実行している場合でも、作業ツリーのルートからパターンを一致させます。

@item  literal 
@samp{*} または @samp{?} などのパターンのワイルドカードはリテラル文字として扱われます。

@item  icase 
(英文字の)大文字小文字区別せずにマッチ

@item  glob 
Gitはパターンを、 FNM_PATHNAMEフラグを指定した fnmatch(3)
に消費されるのに適したシェルグロブとして扱います。パターン内のワイルドカードは、パス名内の / と一致しません。
たとえば、「Documentation/*.html」は「Documentation/git.html」と一致しますが、「Documentation/ppc/ppc.html」または「tools/perf/Documentation/perf.html」とは一致しません。

フルパス名と一致するパターンの2つの連続するアスタリスク @samp{**} は、特別な意味を持つ場合があります:

@itemize 

@item
先頭の @samp{**} の後にスラッシュが続く場合は、すべてのディレクトリで一致することを意味します。たとえば、 @samp{**/foo} は、パターン @samp{foo}
と同じように、ファイルまたはディレクトリ @samp{foo} のどこにでも一致します。 @samp{**/foo/bar} は、ディレクトリ @samp{foo}
の直下にあるファイルまたはディレクトリ @samp{bar} と一致します。

@item
末尾の @samp{/**} は、内部のすべてに一致します(matches everything inside)。たとえば、 @samp{abc/**} は、
@samp{.gitignore} ファイルの場所を基準にして、ディレクトリ "abc" 内のすべてのファイルと無限の深さで一致します。

@item
スラッシュの後に2つの連続するアスタリスクが続く場合、スラッシュは0個以上のディレクトリに一致します。 たとえば、 @samp{a/**/b} は @samp{a/b} 、
@samp{a/x/b} 、@samp{a/x/y/b} などと一致します。

@item
他の連続するアスタリスクは無効と見なされます。

グロブ魔法はリテラル魔法と互換性がありません。
@end itemize

@item  attr 
@samp{attr:} の後には、スペースで区切られた「属性要件」(attribute
requirements)のリストがあります。パスが一致すると見なされるには、これらすべてを満たす必要があります。これは、通常の非魔法pathspecパターンマッチングに追加されます。
gitattributes(5) 参照。

パスの各属性要件は、以下のいずれかの形式を取ります:

@itemize 

@item
@samp{ATTR} では、属性 @samp{ATTR} を設定する必要があります。

@item
@samp{-ATTR} では、属性 @samp{ATTR} が設定されていない必要があります。

@item
@samp{ATTR = VALUE} では、属性 @samp{ATTR} を文字列 @samp{VALUE} に設定する必要があります。

@item
@samp{!ATTR} では、属性 @samp{ATTR} が指定されていない必要があります。

注意: ツリーオブジェクトと照合する場合、属性は、指定されたツリーオブジェクトからではなく、作業ツリーから取得されることに注意してください。
@end itemize

@item  exclude 
パスが非除外パススペックと一致すると、すべての除外パススペック(魔法記号: @samp{!} またはその同義語
@samp{^})が実行されます。一致する場合、パスは無視されます。非除外パススペックがない場合、パススペックなしで呼び出されたかのように、除外が結果セットに適用されます。
@end table

@item  parent(親) 
A commit object (@pxref{[def_commit_object]}) contains a (possibly empty) list of
the logical predecessor(s) in the line of development, i.e. its parents.

@item  pickaxe 
The term pickaxe (@pxref{[def_pickaxe]}) refers to an option to the diffcore
routines that help select changes that add or delete a given text
string. With the @samp{--pickaxe-all} option, it can be used to view the full
changeset (@pxref{[def_changeset]}) that introduced or removed, say, a particular
line of text. See git-diff(1).

@item  plumbing(配管) 
core Git (@pxref{[def_core_git]}) のキュートな呼び方。

@item  porcelain(磁器) 
Cute name for programs and program suites depending on core         Git (@pxref{[def_core_git]}), presenting a high level access to core Git. Porcelains expose more of
a SCM (@pxref{[def_SCM]}) interface than the plumbing (@pxref{[def_plumbing]}).

@item  per-worktree ref 
Refs that are per-worktree (@pxref{[def_working_tree]}), rather than global.  This
is presently only HEAD (@pxref{[def_HEAD]}) and any refs that start with
@samp{refs/bisect/}, but might later include other unusual refs.

@item  pseudoref 
Pseudorefs are a class of files under @samp{$GIT_DIR} which behave like refs for
the purposes of rev-parse, but which are treated specially by git.
Pseudorefs both have names that are all-caps, and always start with a line
consisting of a SHA-1 (@pxref{[def_SHA1]}) followed by whitespace.  So, HEAD is not
a pseudoref, because it is sometimes a symbolic ref.  They might optionally
contain some additional data.  @samp{MERGE_HEAD} and @samp{CHERRY_PICK_HEAD} are
examples.  Unlike per-worktree refs (@pxref{[def_per_worktree_ref]}), these files
cannot be symbolic refs, and never have reflogs.  They also cannot be
updated through the normal ref update machinery.  Instead, they are updated
by directly writing to the files.  However, they can be read as if they were
refs, so @samp{git rev-parse MERGE_HEAD} will work.

@item  pull 
Pulling a branch (@pxref{[def_branch]}) means to fetch (@pxref{[def_fetch]}) it and
merge (@pxref{[def_merge]}) it.  See also git-pull(1).

@item  push 
Pushing a branch (@pxref{[def_branch]}) means to get the branch’s
head ref (@pxref{[def_head_ref]}) from a remote repository (@pxref{[def_repository]}), find
out if it is an ancestor to the branch’s local head ref, and in that case,
putting all objects, which are reachable (@pxref{[def_reachable]}) from the local
head ref, and which are missing from the remote repository, into the remote
object database (@pxref{[def_object_database]}), and updating the remote head
ref. If the remote head (@pxref{[def_head]}) is not an ancestor to the local head,
the push fails.

@item  reachable(到達可能) 
All of the ancestors of a given commit (@pxref{[def_commit]}) are said to be
"reachable" from that commit. More generally, one object (@pxref{[def_object]}) is
reachable from another if we can reach the one from the other by a
chain (@pxref{[def_chain]}) that follows tags (@pxref{[def_tag]}) to whatever they tag,
commits (@pxref{[def_commit_object]}) to their parents or trees, and
trees (@pxref{[def_tree_object]}) to the trees or blobs (@pxref{[def_blob_object]}) that
they contain.

@item  rebase 
To reapply a series of changes from a branch (@pxref{[def_branch]}) to a different
base, and reset the head (@pxref{[def_head]}) of that branch to the result.

@item  ref 
オブジェクト名または別のrefを指す @samp{refs/} で始まる名前(例: @samp{refs/heads/master};別のrefを指すrefは
シンボリックref (@pxref{[def_symref]}) と呼ぶ)。便宜上、Gitコマンドの引数として使用する場合は @samp{refs/}
を省略できる場合があります。詳細については gitrevisions(7) を参照してください。 refs は
repository (@pxref{[def_repository]}) に保存されます。

ref名前空間は階層的です。さまざまなサブ階層がさまざまな目的で使用されます(たとえば、 @samp{refs/heads/}
階層はローカルブランチを表すために使用されます)。

@samp{refs/} で始まらない特別な目的のrefがいくつかあります。最も注目すべき例は @samp{HEAD} です。

@item  reflog 
A reflog shows the local "history" of a ref.  In other words, it can tell
you what the 3rd last revision in @emph{this} repository was, and what was the
current state in @emph{this} repository, yesterday 9:14pm.  See
git-reflog(1) for details.

@item  refspec 
A "refspec" is used by fetch (@pxref{[def_fetch]}) and push (@pxref{[def_push]}) to describe
the mapping between remote ref (@pxref{[def_ref]}) and local ref.

@item  remote repository 
A repository (@pxref{[def_repository]}) which is used to track the same project but
resides somewhere else. To communicate with remotes, see fetch (@pxref{[def_fetch]})
or push (@pxref{[def_push]}).

@item  remote-tracking branch 
A ref (@pxref{[def_ref]}) that is used to follow changes from another
repository (@pxref{[def_repository]}). It typically looks like
@emph{refs/remotes/foo/bar} (indicating that it tracks a branch named @emph{bar} in a
remote named @emph{foo}), and matches the right-hand-side of a configured fetch
refspec (@pxref{[def_refspec]}). A remote-tracking branch should not contain direct
modifications or have local commits made to it.

@item  repository 
A collection of refs (@pxref{[def_ref]}) together with an
object database (@pxref{[def_object_database]}) containing all objects which are
reachable (@pxref{[def_reachable]}) from the refs, possibly accompanied by meta data
from one or more porcelains (@pxref{[def_porcelain]}). A repository can share an
object database with other repositories via
alternates mechanism (@pxref{[def_alternate_object_database]}).

@item  resolve 
The action of fixing up manually what a failed automatic merge (@pxref{[def_merge]})
left behind.

@item  revision 
Synonym for commit (@pxref{[def_commit]}) (the noun).

@item  rewind 
To throw away part of the development, i.e. to assign the head (@pxref{[def_head]})
to an earlier revision (@pxref{[def_revision]}).

@item  SCM 
Source code management (tool).

@item  SHA-1 
"Secure Hash Algorithm 1"; a cryptographic hash function.  In the context of
Git used as a synonym for object name (@pxref{[def_object_name]}).

@item  shallow clone 
Mostly a synonym to shallow repository (@pxref{[def_shallow_repository]}) but the
phrase makes it more explicit that it was created by running @samp{git clone
--depth=...} command.

@item  shallow repository 
A shallow repository (@pxref{[def_repository]}) has an incomplete history some of
whose commits (@pxref{[def_commit]}) have parents (@pxref{[def_parent]}) cauterized away (in
other words, Git is told to pretend that these commits do not have the
parents, even though they are recorded in the commit         object (@pxref{[def_commit_object]})). This is sometimes useful when you are interested only in the
recent history of a project even though the real history recorded in the
upstream is much larger. A shallow repository is created by giving the
@samp{--depth} option to git-clone(1), and its history can be later
deepened with git-fetch(1).

@item  stash entry 
An object (@pxref{[def_object]}) used to temporarily store the contents of a
dirty (@pxref{[def_dirty]}) working directory and the index for future reuse.

@item  submodule 
とあるリポジトリの内部で、それとは別個のプロジェクトの履歴を保持する リポジトリ (@pxref{[def_repository]})
(ここで、その、とあるリポジトリを スーパープロジェクト (@pxref{[def_superproject]}) と呼びます)。

@item  superproject 
作業ツリー内の他のプロジェクトのリポジトリを サブモジュール (@pxref{[def_submodule]}) として参照する
リポジトリ (@pxref{[def_repository]}) 。
スーパープロジェクトは、含まれているサブモジュールのコミットオブジェクトの名前を知っています(ただし、そのコピーは保持していません)。

@item  symref 
シンボリックref(シンボリック参照): SHA-1 (@pxref{[def_SHA1]}) ID自体を含む代わりに「ref:
refs/some/thing」の形式であり、参照されると、この参照を再帰的に逆参照します。 @emph{HEAD (@pxref{[def_HEAD]})}
はsymrefの代表的な例です。シンボリックrefは git-symbolic-ref(1) コマンドで操作されます。

@item  tag 
A ref (@pxref{[def_ref]}) under @samp{refs/tags/} namespace that points to an object of
an arbitrary type (typically a tag points to either a tag (@pxref{[def_tag_object]})
or a commit object (@pxref{[def_commit_object]})).  In contrast to a
head (@pxref{[def_head]}), a tag is not updated by the @samp{commit} command. A Git tag
has nothing to do with a Lisp tag (which would be called an
object type (@pxref{[def_object_type]}) in Git’s context). A tag is most typically
used to mark a particular point in the commit ancestry chain (@pxref{[def_chain]}).

@item  tag object 
An object (@pxref{[def_object]}) containing a ref (@pxref{[def_ref]}) pointing to another
object, which can contain a message just like a commit         object (@pxref{[def_commit_object]}). It can also contain a (PGP)  signature, in which case it is called
a "signed tag object".

@item  topic branch 
A regular Git branch (@pxref{[def_branch]}) that is used by a developer to identify
a conceptual line of development. Since branches are very easy and
inexpensive, it is often desirable to have several small branches that each
contain very well defined concepts or small incremental yet related changes.

@item  tree 
Either a working tree (@pxref{[def_working_tree]}), or a tree         object (@pxref{[def_tree_object]}) together with the dependent blob (@pxref{[def_blob_object]}) and tree
objects (i.e. a stored representation of a working tree).

@item  tree object 
An object (@pxref{[def_object]}) containing a list of file names and modes along
with refs to the associated blob and/or tree objects. A tree (@pxref{[def_tree]}) is
equivalent to a directory (@pxref{[def_directory]}).

@item  tree-ish (also treeish) 
ツリーっぽい何か。ツリーオブジェクトに再帰的に逆参照できる ツリーオブジェクト (@pxref{[def_tree_object]}) または
オブジェクト (@pxref{[def_object]}) です。 コミットオブジェクト (@pxref{[def_commit_object]}) を逆参照すると、その
リビジョン (@pxref{[def_revision]}) の最上位 ディレクトリ>         に対応するツリーオブジェクトが生成されます。※右記は全てツリーっぽい(tree-ish)モノです:         <<def_commit-ish (@pxref{[def_directory]}) 、ツリーオブジェクト、ツリーオブジェクトを指す
タグオブジェクト (@pxref{[def_tag_object]}) 、タグオブジェクトを指すタグオブジェクト

@item  unmerged index 
An index (@pxref{[def_index]}) which contains unmerged index         entries (@pxref{[def_index_entry]}).

@item  unreachable object 
An object (@pxref{[def_object]}) which is not reachable (@pxref{[def_reachable]}) from a
branch (@pxref{[def_branch]}), tag (@pxref{[def_tag]}), or any other reference.

@item  upstream branch 
The default branch (@pxref{[def_branch]}) that is merged into the branch in question
(or the branch in question is rebased onto). It is configured via
branch.<name>.remote and branch.<name>.merge. If the upstream branch of @emph{A}
is @emph{origin/B} sometimes we say "@emph{A} is tracking @emph{origin/B}".

@item  working tree 
The tree of actual checked out files.  The working tree normally contains
the contents of the HEAD (@pxref{[def_HEAD]}) commit’s tree, plus any local changes
that you have made but not yet committed.
@end table

@noindent

@chapheading SEE ALSO

gittutorial(7), gittutorial-2(7),
gitcvs-migration(7), giteveryday(7),
@uref{user-manual.html,The Git User’s Manual}

@noindent

@chapheading GIT

Part of the git(1) suite

@node githooks,,,Top
@chapheading Name

githooks — Hooks used by Git

@noindent

@chapheading Synopsis

$GIT_DIR/hooks/* (or `git config core.hooksPath`/*)

@noindent

@chapheading DESCRIPTION

Hooks are programs you can place in a hooks directory to trigger actions at
certain points in git’s execution. Hooks that don’t have the executable bit
set are ignored.

By default the hooks directory is @samp{$GIT_DIR/hooks}, but that can be changed
via the @samp{core.hooksPath} configuration variable (see git-config(1)).

Before Git invokes a hook, it changes its working directory to either
$GIT_DIR in a bare repository or the root of the working tree in a non-bare
repository. An exception are hooks triggered during a push (@emph{pre-receive},
@emph{update}, @emph{post-receive}, @emph{post-update}, @emph{push-to-checkout}) which are
always executed in $GIT_DIR.

Hooks can get their arguments via the environment, command-line arguments,
and stdin. See the documentation for each hook below for details.

@samp{git init} may copy hooks to the new repository, depending on its
configuration. See the "TEMPLATE DIRECTORY" section in git-init(1)
for details. When the rest of this document refers to "default hooks" it’s
talking about the default template shipped with Git.

The currently supported hooks are described below.

@noindent

@chapheading HOOKS

@noindent

@heading applypatch-msg

This hook is invoked by git-am(1).  It takes a single parameter, the
name of the file that holds the proposed commit log message.  Exiting with a
non-zero status causes @samp{git am} to abort before applying the patch.

The hook is allowed to edit the message file in place, and can be used to
normalize the message into some project standard format. It can also be used
to refuse the commit after inspecting the message file.

The default @emph{applypatch-msg} hook, when enabled, runs the @emph{commit-msg} hook,
if the latter is enabled.

@noindent

@heading pre-applypatch

This hook is invoked by git-am(1).  It takes no parameter, and is
invoked after the patch is applied, but before a commit is made.

If it exits with non-zero status, then the working tree will not be
committed after applying the patch.

It can be used to inspect the current working tree and refuse to make a
commit if it does not pass certain test.

The default @emph{pre-applypatch} hook, when enabled, runs the @emph{pre-commit} hook,
if the latter is enabled.

@noindent

@heading post-applypatch

This hook is invoked by git-am(1).  It takes no parameter, and is
invoked after the patch is applied and a commit is made.

This hook is meant primarily for notification, and cannot affect the outcome
of @samp{git am}.

@noindent

@heading pre-commit

This hook is invoked by git-commit(1), and can be bypassed with the
@samp{--no-verify} option.  It takes no parameters, and is invoked before
obtaining the proposed commit log message and making a commit.  Exiting with
a non-zero status from this script causes the @samp{git commit} command to abort
before creating a commit.

The default @emph{pre-commit} hook, when enabled, catches introduction of lines
with trailing whitespaces and aborts the commit when such a line is found.

All the @samp{git commit} hooks are invoked with the environment variable
@samp{GIT_EDITOR=:} if the command will not bring up an editor to modify the
commit message.

The default @emph{pre-commit} hook, when enabled—and with the
@samp{hooks.allownonascii} config option unset or set to false—prevents the use
of non-ASCII filenames.

@noindent

@heading pre-merge-commit

This hook is invoked by git-merge(1), and can be bypassed with the
@samp{--no-verify} option.  It takes no parameters, and is invoked after the
merge has been carried out successfully and before obtaining the proposed
commit log message to make a commit.  Exiting with a non-zero status from
this script causes the @samp{git merge} command to abort before creating a
commit.

The default @emph{pre-merge-commit} hook, when enabled, runs the @emph{pre-commit}
hook, if the latter is enabled.

This hook is invoked with the environment variable @samp{GIT_EDITOR=:} if the
command will not bring up an editor to modify the commit message.

If the merge cannot be carried out automatically, the conflicts need to be
resolved and the result committed separately (see git-merge(1)). At
that point, this hook will not be executed, but the @emph{pre-commit} hook will,
if it is enabled.

@noindent

@heading prepare-commit-msg

This hook is invoked by git-commit(1) right after preparing the
default log message, and before the editor is started.

It takes one to three parameters.  The first is the name of the file that
contains the commit log message.  The second is the source of the commit
message, and can be: @samp{message} (if a @samp{-m} or @samp{-F} option was given);
@samp{template} (if a @samp{-t} option was given or the configuration option
@samp{commit.template} is set); @samp{merge} (if the commit is a merge or a
@samp{.git/MERGE_MSG} file exists); @samp{squash} (if a @samp{.git/SQUASH_MSG} file
exists); or @samp{commit}, followed by a commit object name (if a @samp{-c}, @samp{-C} or
@samp{--amend} option was given).

If the exit status is non-zero, @samp{git commit} will abort.

The purpose of the hook is to edit the message file in place, and it is not
suppressed by the @samp{--no-verify} option.  A non-zero exit means a failure of
the hook and aborts the commit.  It should not be used as replacement for
pre-commit hook.

The sample @samp{prepare-commit-msg} hook that comes with Git removes the help
message found in the commented portion of the commit template.

@noindent

@heading commit-msg

This hook is invoked by git-commit(1) and git-merge(1), and
can be bypassed with the @samp{--no-verify} option.  It takes a single parameter,
the name of the file that holds the proposed commit log message.  Exiting
with a non-zero status causes the command to abort.

The hook is allowed to edit the message file in place, and can be used to
normalize the message into some project standard format. It can also be used
to refuse the commit after inspecting the message file.

The default @emph{commit-msg} hook, when enabled, detects duplicate
@samp{Signed-off-by} trailers, and aborts the commit if one is found.

@noindent

@heading post-commit

This hook is invoked by git-commit(1). It takes no parameters, and
is invoked after a commit is made.

This hook is meant primarily for notification, and cannot affect the outcome
of @samp{git commit}.

@noindent

@heading pre-rebase

This hook is called by git-rebase(1) and can be used to prevent a
branch from getting rebased.  The hook may be called with one or two
parameters.  The first parameter is the upstream from which the series was
forked.  The second parameter is the branch being rebased, and is not set
when rebasing the current branch.

@noindent

@heading post-checkout

This hook is invoked when a git-checkout(1) or git-switch(1)
is run after having updated the worktree.  The hook is given three
parameters: the ref of the previous HEAD, the ref of the new HEAD (which may
or may not have changed), and a flag indicating whether the checkout was a
branch checkout (changing branches, flag=1) or a file checkout (retrieving a
file from the index, flag=0).  This hook cannot affect the outcome of @samp{git
switch} or @samp{git checkout}, other than that the hook’s exit status becomes
the exit status of these two commands.

It is also run after git-clone(1), unless the @samp{--no-checkout} (@samp{-n})
option is used. The first parameter given to the hook is the null-ref, the
second the ref of the new HEAD and the flag is always 1. Likewise for @samp{git
worktree add} unless @samp{--no-checkout} is used.

This hook can be used to perform repository validity checks, auto-display
differences from the previous HEAD if different, or set working dir metadata
properties.

@noindent

@heading post-merge

This hook is invoked by git-merge(1), which happens when a @samp{git
pull} is done on a local repository.  The hook takes a single parameter, a
status flag specifying whether or not the merge being done was a squash
merge.  This hook cannot affect the outcome of @samp{git merge} and is not
executed, if the merge failed due to conflicts.

This hook can be used in conjunction with a corresponding pre-commit hook to
save and restore any form of metadata associated with the working tree
(e.g.: permissions/ownership, ACLS, etc).  See
contrib/hooks/setgitperms.perl for an example of how to do this.

@noindent

@heading pre-push

This hook is called by git-push(1) and can be used to prevent a push
from taking place.  The hook is called with two parameters which provide the
name and location of the destination remote, if a named remote is not being
used both values will be the same.

Information about what is to be pushed is provided on the hook’s standard
input with lines of the form:

@example
<local ref> SP <local object name> SP <remote ref> SP <remote object name> LF
@end example

For instance, if the command @samp{git push origin master:foreign} were run the
hook would receive a line like the following:

@example
refs/heads/master 67890 refs/heads/foreign 12345
@end example

although the full object name would be supplied.  If the foreign ref does
not yet exist the @samp{<remote object name>} will be the all-zeroes object
name.  If a ref is to be deleted, the @samp{<local ref>} will be supplied as
@samp{(delete)} and the @samp{<local object name>} will be the all-zeroes object
name.  If the local commit was specified by something other than a name
which could be expanded (such as @samp{HEAD~}, or an object name) it will be
supplied as it was originally given.

If this hook exits with a non-zero status, @samp{git push} will abort without
pushing anything.  Information about why the push is rejected may be sent to
the user by writing to standard error.

@noindent

@heading pre-receive

This hook is invoked by git-receive-pack(1) when it reacts to @samp{git
push} and updates reference(s) in its repository.  Just before starting to
update refs on the remote repository, the pre-receive hook is invoked.  Its
exit status determines the success or failure of the update.

This hook executes once for the receive operation. It takes no arguments,
but for each ref to be updated it receives on standard input a line of the
format:

@example
<old-value> SP <new-value> SP <ref-name> LF
@end example

where @samp{<old-value>} is the old object name stored in the ref, @samp{<new-value>}
is the new object name to be stored in the ref and @samp{<ref-name>} is the full
name of the ref.  When creating a new ref, @samp{<old-value>} is the all-zeroes
object name.

If the hook exits with non-zero status, none of the refs will be updated. If
the hook exits with zero, updating of individual refs can still be prevented
by the @emph{update} (@pxref{update}) hook.

Both standard output and standard error output are forwarded to @samp{git
send-pack} on the other end, so you can simply @samp{echo} messages for the user.

The number of push options given on the command line of @samp{git push
--push-option=...} can be read from the environment variable
@samp{GIT_PUSH_OPTION_COUNT}, and the options themselves are found in
@samp{GIT_PUSH_OPTION_0}, @samp{GIT_PUSH_OPTION_1},…  If it is negotiated to not use
the push options phase, the environment variables will not be set. If the
client selects to use push options, but doesn’t transmit any, the count
variable will be set to zero, @samp{GIT_PUSH_OPTION_COUNT=0}.

See the section on "Quarantine Environment" in git-receive-pack(1)
for some caveats.

@noindent

@heading update

This hook is invoked by git-receive-pack(1) when it reacts to @samp{git
push} and updates reference(s) in its repository.  Just before updating the
ref on the remote repository, the update hook is invoked.  Its exit status
determines the success or failure of the ref update.

The hook executes once for each ref to be updated, and takes three
parameters:

@itemize 

@item
the name of the ref being updated,

@item
the old object name stored in the ref,

@item
and the new object name to be stored in the ref.
@end itemize

A zero exit from the update hook allows the ref to be updated.  Exiting with
a non-zero status prevents @samp{git receive-pack} from updating that ref.

This hook can be used to prevent @emph{forced} update on certain refs by making
sure that the object name is a commit object that is a descendant of the
commit object named by the old object name.  That is, to enforce a
"fast-forward only" policy.

It could also be used to log the old..new status.  However, it does not know
the entire set of branches, so it would end up firing one e-mail per ref
when used naively, though.  The @emph{post-receive} (@pxref{post-receive}) hook is more
suited to that.

In an environment that restricts the users' access only to git commands over
the wire, this hook can be used to implement access control without relying
on filesystem ownership and group membership. See git-shell(1) for
how you might use the login shell to restrict the user’s access to only git
commands.

Both standard output and standard error output are forwarded to @samp{git
send-pack} on the other end, so you can simply @samp{echo} messages for the user.

The default @emph{update} hook, when enabled—and with @samp{hooks.allowunannotated}
config option unset or set to false—prevents unannotated tags to be pushed.

@noindent

@heading proc-receive

This hook is invoked by git-receive-pack(1).  If the server has set
the multi-valued config variable @samp{receive.procReceiveRefs}, and the commands
sent to @emph{receive-pack} have matching reference names, these commands will be
executed by this hook, instead of by the internal @samp{execute_commands()}
function.  This hook is responsible for updating the relevant references and
reporting the results back to @emph{receive-pack}.

This hook executes once for the receive operation.  It takes no arguments,
but uses a pkt-line format protocol to communicate with @emph{receive-pack} to
read commands, push-options and send results.  In the following example for
the protocol, the letter @emph{S} stands for @emph{receive-pack} and the letter @emph{H}
stands for this hook.

@example
# Version and features negotiation.
S: PKT-LINE(version=1\0push-options atomic...)
S: flush-pkt
H: PKT-LINE(version=1\0push-options...)
H: flush-pkt
@end example

@example
# Send commands from server to the hook.
S: PKT-LINE(<old-oid> <new-oid> <ref>)
S: ... ...
S: flush-pkt
# Send push-options only if the 'push-options' feature is enabled.
S: PKT-LINE(push-option)
S: ... ...
S: flush-pkt
@end example

@example
# Receive result from the hook.
# OK, run this command successfully.
H: PKT-LINE(ok <ref>)
# NO, I reject it.
H: PKT-LINE(ng <ref> <reason>)
# Fall through, let 'receive-pack' to execute it.
H: PKT-LINE(ok <ref>)
H: PKT-LINE(option fall-through)
# OK, but has an alternate reference.  The alternate reference name
# and other status can be given in option directives.
H: PKT-LINE(ok <ref>)
H: PKT-LINE(option refname <refname>)
H: PKT-LINE(option old-oid <old-oid>)
H: PKT-LINE(option new-oid <new-oid>)
H: PKT-LINE(option forced-update)
H: ... ...
H: flush-pkt
@end example

Each command for the @emph{proc-receive} hook may point to a pseudo-reference and
always has a zero-old as its old-oid, while the @emph{proc-receive} hook may
update an alternate reference and the alternate reference may exist already
with a non-zero old-oid.  For this case, this hook will use "option"
directives to report extended attributes for the reference given by the
leading "ok" directive.

The report of the commands of this hook should have the same order as the
input.  The exit status of the @emph{proc-receive} hook only determines the
success or failure of the group of commands sent to it, unless atomic push
is in use.

@noindent

@heading post-receive

This hook is invoked by git-receive-pack(1) when it reacts to @samp{git
push} and updates reference(s) in its repository.  It executes on the remote
repository once after all the refs have been updated.

This hook executes once for the receive operation.  It takes no arguments,
but gets the same information as the @emph{pre-receive} (@pxref{pre-receive}) hook does
on its standard input.

This hook does not affect the outcome of @samp{git receive-pack}, as it is called
after the real work is done.

This supersedes the @emph{post-update} (@pxref{post-update}) hook in that it gets both
old and new values of all the refs in addition to their names.

Both standard output and standard error output are forwarded to @samp{git
send-pack} on the other end, so you can simply @samp{echo} messages for the user.

The default @emph{post-receive} hook is empty, but there is a sample script
@samp{post-receive-email} provided in the @samp{contrib/hooks} directory in Git
distribution, which implements sending commit emails.

The number of push options given on the command line of @samp{git push
--push-option=...} can be read from the environment variable
@samp{GIT_PUSH_OPTION_COUNT}, and the options themselves are found in
@samp{GIT_PUSH_OPTION_0}, @samp{GIT_PUSH_OPTION_1},…  If it is negotiated to not use
the push options phase, the environment variables will not be set. If the
client selects to use push options, but doesn’t transmit any, the count
variable will be set to zero, @samp{GIT_PUSH_OPTION_COUNT=0}.

@noindent

@heading post-update

This hook is invoked by git-receive-pack(1) when it reacts to @samp{git
push} and updates reference(s) in its repository.  It executes on the remote
repository once after all the refs have been updated.

It takes a variable number of parameters, each of which is the name of ref
that was actually updated.

This hook is meant primarily for notification, and cannot affect the outcome
of @samp{git receive-pack}.

The @emph{post-update} hook can tell what are the heads that were pushed, but it
does not know what their original and updated values are, so it is a poor
place to do log old..new. The @emph{post-receive} (@pxref{post-receive}) hook does get
both original and updated values of the refs. You might consider it instead
if you need them.

When enabled, the default @emph{post-update} hook runs @samp{git update-server-info}
to keep the information used by dumb transports (e.g., HTTP) up to date.  If
you are publishing a Git repository that is accessible via HTTP, you should
probably enable this hook.

Both standard output and standard error output are forwarded to @samp{git
send-pack} on the other end, so you can simply @samp{echo} messages for the user.

@noindent

@heading reference-transaction

This hook is invoked by any Git command that performs reference updates. It
executes whenever a reference transaction is prepared, committed or aborted
and may thus get called multiple times. The hook does not cover symbolic
references (but that may change in the future).

The hook takes exactly one argument, which is the current state the given
reference transaction is in:

@itemize 

@item
"prepared": All reference updates have been queued to the transaction and
references were locked on disk.

@item
"committed": The reference transaction was committed and all references now
have their respective new value.

@item
"aborted": The reference transaction was aborted, no changes were performed
and the locks have been released.
@end itemize

For each reference update that was added to the transaction, the hook
receives on standard input a line of the format:

@example
<old-value> SP <new-value> SP <ref-name> LF
@end example

where @samp{<old-value>} is the old object name passed into the reference
transaction, @samp{<new-value>} is the new object name to be stored in the ref
and @samp{<ref-name>} is the full name of the ref. When force updating the
reference regardless of its current value or when the reference is to be
created anew, @samp{<old-value>} is the all-zeroes object name. To distinguish
these cases, you can inspect the current value of @samp{<ref-name>} via @samp{git
rev-parse}.

The exit status of the hook is ignored for any state except for the
"prepared" state. In the "prepared" state, a non-zero exit status will cause
the transaction to be aborted. The hook will not be called with "aborted"
state in that case.

@noindent

@heading push-to-checkout

This hook is invoked by git-receive-pack(1) when it reacts to @samp{git
push} and updates reference(s) in its repository, and when the push tries to
update the branch that is currently checked out and the
@samp{receive.denyCurrentBranch} configuration variable is set to
@samp{updateInstead}.  Such a push by default is refused if the working tree and
the index of the remote repository has any difference from the currently
checked out commit; when both the working tree and the index match the
current commit, they are updated to match the newly pushed tip of the
branch.  This hook is to be used to override the default behaviour.

The hook receives the commit with which the tip of the current branch is
going to be updated.  It can exit with a non-zero status to refuse the push
(when it does so, it must not modify the index or the working tree).  Or it
can make any necessary changes to the working tree and to the index to bring
them to the desired state when the tip of the current branch is updated to
the new commit, and exit with a zero status.

For example, the hook can simply run @samp{git read-tree -u -m HEAD "$1"} in
order to emulate @samp{git fetch} that is run in the reverse direction with @samp{git
push}, as the two-tree form of @samp{git read-tree -u -m} is essentially the same
as @samp{git switch} or @samp{git checkout} that switches branches while keeping the
local changes in the working tree that do not interfere with the difference
between the branches.

@noindent

@heading pre-auto-gc

This hook is invoked by @samp{git gc --auto} (see git-gc(1)). It takes no
parameter, and exiting with non-zero status from this script causes the @samp{git
gc --auto} to abort.

@noindent

@heading post-rewrite

This hook is invoked by commands that rewrite commits (git-commit(1)
when called with @samp{--amend} and git-rebase(1); however, full-history
(re)writing tools like git-fast-import(1) or
@uref{https://github.com/newren/git-filter-repo,git-filter-repo} typically do not
call it!).  Its first argument denotes the command it was invoked by:
currently one of @samp{amend} or @samp{rebase}.  Further command-dependent arguments
may be passed in the future.

The hook receives a list of the rewritten commits on stdin, in the format

@example
<old-object-name> SP <new-object-name> [ SP <extra-info> ] LF
@end example

The @emph{extra-info} is again command-dependent.  If it is empty, the preceding
SP is also omitted.  Currently, no commands pass any @emph{extra-info}.

The hook always runs after the automatic note copying (see
"notes.rewrite.<command>" in git-config(1)) has happened, and thus
has access to these notes.

The following command-specific comments apply:

@table @asis

@item  rebase 
For the @emph{squash} and @emph{fixup} operation, all commits that were squashed are
listed as being rewritten to the squashed commit.  This means that there
will be several lines sharing the same @emph{new-object-name}.

The commits are guaranteed to be listed in the order that they were
processed by rebase.
@end table

@noindent

@heading sendemail-validate

This hook is invoked by git-send-email(1).  It takes a single
parameter, the name of the file that holds the e-mail to be sent.  Exiting
with a non-zero status causes @samp{git send-email} to abort before sending any
e-mails.

@noindent

@heading fsmonitor-watchman

This hook is invoked when the configuration option @samp{core.fsmonitor} is set
to @samp{.git/hooks/fsmonitor-watchman} or @samp{.git/hooks/fsmonitor-watchmanv2}
depending on the version of the hook to use.

Version 1 takes two arguments, a version (1) and the time in elapsed
nanoseconds since midnight, January 1, 1970.

Version 2 takes two arguments, a version (2) and a token that is used for
identifying changes since the token. For watchman this would be a clock
id. This version must output to stdout the new token followed by a NUL
before the list of files.

The hook should output to stdout the list of all files in the working
directory that may have changed since the requested time.  The logic should
be inclusive so that it does not miss any potential changes.  The paths
should be relative to the root of the working directory and be separated by
a single NUL.

It is OK to include files which have not actually changed.  All changes
including newly-created and deleted files should be included. When files are
renamed, both the old and the new name should be included.

Git will limit what files it checks for changes as well as which directories
are checked for untracked files based on the path names given.

An optimized way to tell git "all files have changed" is to return the
filename @samp{/}.

The exit status determines whether git will use the data from the hook to
limit its search.  On error, it will fall back to verifying all files and
folders.

@noindent

@heading p4-changelist

This hook is invoked by @samp{git-p4 submit}.

The @samp{p4-changelist} hook is executed after the changelist message has been
edited by the user. It can be bypassed with the @samp{--no-verify} option. It
takes a single parameter, the name of the file that holds the proposed
changelist text. Exiting with a non-zero status causes the command to abort.

The hook is allowed to edit the changelist file and can be used to normalize
the text into some project standard format. It can also be used to refuse
the Submit after inspect the message file.

Run @samp{git-p4 submit --help} for details.

@noindent

@heading p4-prepare-changelist

This hook is invoked by @samp{git-p4 submit}.

The @samp{p4-prepare-changelist} hook is executed right after preparing the
default changelist message and before the editor is started.  It takes one
parameter, the name of the file that contains the changelist text. Exiting
with a non-zero status from the script will abort the process.

The purpose of the hook is to edit the message file in place, and it is not
suppressed by the @samp{--no-verify} option. This hook is called even if
@samp{--prepare-p4-only} is set.

Run @samp{git-p4 submit --help} for details.

@noindent

@heading p4-post-changelist

This hook is invoked by @samp{git-p4 submit}.

The @samp{p4-post-changelist} hook is invoked after the submit has successfully
occurred in P4. It takes no parameters and is meant primarily for
notification and cannot affect the outcome of the git p4 submit action.

Run @samp{git-p4 submit --help} for details.

@noindent

@heading p4-pre-submit

This hook is invoked by @samp{git-p4 submit}. It takes no parameters and nothing
from standard input. Exiting with non-zero status from this script prevent
@samp{git-p4 submit} from launching. It can be bypassed with the @samp{--no-verify}
command line option. Run @samp{git-p4 submit --help} for details.

@noindent

@heading post-index-change

This hook is invoked when the index is written in read-cache.c
do_write_locked_index.

The first parameter passed to the hook is the indicator for the working
directory being updated.  "1" meaning working directory was updated or "0"
when the working directory was not updated.

The second parameter passed to the hook is the indicator for whether or not
the index was updated and the skip-worktree bit could have changed.  "1"
meaning skip-worktree bits could have been updated and "0" meaning they were
not.

Only one parameter should be set to "1" when the hook runs.  The hook
running passing "1", "1" should not be possible.

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitignore,,,Top
@chapheading Name

gitignore — Specifies intentionally untracked files to ignore

@noindent

@chapheading Synopsis

$XDG_CONFIG_HOME/git/ignore, $GIT_DIR/info/exclude, .gitignore

@noindent

@chapheading DESCRIPTION

A @samp{gitignore} file specifies intentionally untracked files that Git should
ignore.  Files already tracked by Git are not affected; see the NOTES below
for details.

Each line in a @samp{gitignore} file specifies a pattern.  When deciding whether
to ignore a path, Git normally checks @samp{gitignore} patterns from multiple
sources, with the following order of precedence, from highest to lowest
(within one level of precedence, the last matching pattern decides the
outcome):

@itemize 

@item
Patterns read from the command line for those commands that support them.

@item
Patterns read from a @samp{.gitignore} file in the same directory as the path, or
in any parent directory (up to the top-level of the working tree), with
patterns in the higher level files being overridden by those in lower level
files down to the directory containing the file. These patterns match
relative to the location of the @samp{.gitignore} file.  A project normally
includes such @samp{.gitignore} files in its repository, containing patterns for
files generated as part of the project build.

@item
Patterns read from @samp{$GIT_DIR/info/exclude}.

@item
Patterns read from the file specified by the configuration variable
@samp{core.excludesFile}.
@end itemize

Which file to place a pattern in depends on how the pattern is meant to be
used.

@itemize 

@item
Patterns which should be version-controlled and distributed to other
repositories via clone (i.e., files that all developers will want to ignore)
should go into a @samp{.gitignore} file.

@item
Patterns which are specific to a particular repository but which do not need
to be shared with other related repositories (e.g., auxiliary files that
live inside the repository but are specific to one user’s workflow) should
go into the @samp{$GIT_DIR/info/exclude} file.

@item
Patterns which a user wants Git to ignore in all situations (e.g., backup or
temporary files generated by the user’s editor of choice) generally go into
a file specified by @samp{core.excludesFile} in the user’s @samp{~/.gitconfig}. Its
default value is $XDG_CONFIG_HOME/git/ignore. If $XDG_CONFIG_HOME is either
not set or empty, $HOME/.config/git/ignore is used instead.
@end itemize

The underlying Git plumbing tools, such as @emph{git ls-files} and @emph{git
read-tree}, read @samp{gitignore} patterns specified by command-line options, or
from files specified by command-line options.  Higher-level Git tools, such
as @emph{git status} and @emph{git add}, use patterns from the sources specified
above.

@noindent

@chapheading PATTERN FORMAT

@itemize 

@item
A blank line matches no files, so it can serve as a separator for
readability.

@item
A line starting with # serves as a comment.  Put a backslash ("@samp{\}") in
front of the first hash for patterns that begin with a hash.

@item
Trailing spaces are ignored unless they are quoted with backslash ("@samp{\}").

@item
An optional prefix "@samp{!}" which negates the pattern; any matching file
excluded by a previous pattern will become included again. It is not
possible to re-include a file if a parent directory of that file is
excluded. Git doesn’t list excluded directories for performance reasons, so
any patterns on contained files have no effect, no matter where they are
defined.  Put a backslash ("@samp{\}") in front of the first "@samp{!}" for patterns
that begin with a literal "@samp{!}", for example, "@samp{\!important!.txt}".

@item
The slash @emph{/} is used as the directory separator. Separators may occur at
the beginning, middle or end of the @samp{.gitignore} search pattern.

@item
If there is a separator at the beginning or middle (or both) of the pattern,
then the pattern is relative to the directory level of the particular
@samp{.gitignore} file itself. Otherwise the pattern may also match at any level
below the @samp{.gitignore} level.

@item
If there is a separator at the end of the pattern then the pattern will only
match directories, otherwise the pattern can match both files and
directories.

@item
For example, a pattern @samp{doc/frotz/} matches @samp{doc/frotz} directory, but not
@samp{a/doc/frotz} directory; however @samp{frotz/} matches @samp{frotz} and @samp{a/frotz} that
is a directory (all paths are relative from the @samp{.gitignore} file).

@item
An asterisk "@samp{*}" matches anything except a slash.  The character "@samp{?}"
matches any one character except "@samp{/}".  The range notation,
e.g. @samp{[a-zA-Z]}, can be used to match one of the characters in a range. See
fnmatch(3) and the FNM_PATHNAME flag for a more detailed description.
@end itemize

Two consecutive asterisks ("@samp{**}") in patterns matched against full pathname
may have special meaning:

@itemize 

@item
A leading "@samp{**}" followed by a slash means match in all directories. For
example, "@samp{**/foo}" matches file or directory "@samp{foo}" anywhere, the same as
pattern "@samp{foo}". "@samp{**/foo/bar}" matches file or directory "@samp{bar}" anywhere
that is directly under directory "@samp{foo}".

@item
A trailing "@samp{/**}" matches everything inside. For example, "@samp{abc/**}"
matches all files inside directory "@samp{abc}", relative to the location of the
@samp{.gitignore} file, with infinite depth.

@item
A slash followed by two consecutive asterisks then a slash matches zero or
more directories. For example, "@samp{a/**/b}" matches "@samp{a/b}", "@samp{a/x/b}",
"@samp{a/x/y/b}" and so on.

@item
Other consecutive asterisks are considered regular asterisks and will match
according to the previous rules.
@end itemize

@noindent

@chapheading CONFIGURATION

The optional configuration variable @samp{core.excludesFile} indicates a path to
a file containing patterns of file names to exclude, similar to
@samp{$GIT_DIR/info/exclude}.  Patterns in the exclude file are used in addition
to those in @samp{$GIT_DIR/info/exclude}.

@noindent

@chapheading NOTES

The purpose of gitignore files is to ensure that certain files not tracked
by Git remain untracked.

To stop tracking a file that is currently tracked, use @emph{git rm --cached}.

Git does not follow symbolic links when accessing a @samp{.gitignore} file in the
working tree. This keeps behavior consistent when the file is accessed from
the index or a tree versus from the filesystem.

@noindent

@chapheading EXAMPLES

@itemize 

@item
The pattern @samp{hello.*} matches any file or folder whose name begins with
@samp{hello.}. If one wants to restrict this only to the directory and not in its
subdirectories, one can prepend the pattern with a slash, i.e. @samp{/hello.*};
the pattern now matches @samp{hello.txt}, @samp{hello.c} but not @samp{a/hello.java}.

@item
The pattern @samp{foo/} will match a directory @samp{foo} and paths underneath it, but
will not match a regular file or a symbolic link @samp{foo} (this is consistent
with the way how pathspec works in general in Git)

@item
The pattern @samp{doc/frotz} and @samp{/doc/frotz} have the same effect in any
@samp{.gitignore} file. In other words, a leading slash is not relevant if there
is already a middle slash in the pattern.

@item
The pattern "foo/*", matches "foo/test.json" (a regular file), "foo/bar" (a
directory), but it does not match "foo/bar/hello.c" (a regular file), as the
asterisk in the pattern does not match "bar/hello.c" which has a slash in
it.
@end itemize

@example
    $ git status
    [...]
    # Untracked files:
    [...]
    #       Documentation/foo.html
    #       Documentation/gitignore.html
    #       file.o
    #       lib.a
    #       src/internal.o
    [...]
    $ cat .git/info/exclude
    # ignore objects and archives, anywhere in the tree.
    *.[oa]
    $ cat Documentation/.gitignore
    # ignore generated html files,
    *.html
    # except foo.html which is maintained by hand
    !foo.html
    $ git status
    [...]
    # Untracked files:
    [...]
    #       Documentation/foo.html
    [...]
@end example


Another example:

@example
    $ cat .gitignore
    vmlinux*
    $ ls arch/foo/kernel/vm*
    arch/foo/kernel/vmlinux.lds.S
    $ echo '!/vmlinux*' >arch/foo/kernel/.gitignore
@end example


The second .gitignore prevents Git from ignoring
@samp{arch/foo/kernel/vmlinux.lds.S}.

Example to exclude everything except a specific directory @samp{foo/bar} (note
the @samp{/*} - without the slash, the wildcard would also exclude everything
within @samp{foo/bar}):

@example
    $ cat .gitignore
    # exclude everything except directory foo/bar
    /*
    !/foo
    /foo/*
    !/foo/bar
@end example


@noindent

@chapheading SEE ALSO

git-rm(1), gitrepository-layout(5),
git-check-ignore(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitk,,,Top
@chapheading Name

gitk — The Git repository browser

@noindent

@chapheading Synopsis

@display
gitk [<options>] [<revision range>] [--] [<path>…]
@end display


@noindent

@chapheading DESCRIPTION

Displays changes in a repository or a selected set of commits. This includes
visualizing the commit graph, showing information related to each commit,
and the files in the trees of each revision.

@noindent

@chapheading OPTIONS

To control which revisions to show, gitk supports most options applicable to
the @emph{git rev-list} command.  It also supports a few options applicable to
the @emph{git diff-*} commands to control how the changes each commit introduces
are shown.  Finally, it supports some gitk-specific options.

gitk generally only understands options with arguments in the @emph{sticked} form
(see gitcli(7)) due to limitations in the command-line parser.

@noindent

@heading rev-list options and arguments

This manual page describes only the most frequently used options.  See
git-rev-list(1) for a complete list.

@table @asis

@item  @samp{--all} 
Show all refs (branches, tags, etc.).

@item  @samp{--branches[=<pattern>]} 
@itemx  @samp{--tags[=<pattern>]} 
@itemx  @samp{--remotes[=<pattern>]} 
Pretend as if all the branches (tags, remote branches, resp.)  are listed on
the command line as @emph{<commit>}. If @emph{<pattern>} is given, limit refs to ones
matching given shell glob. If pattern lacks @emph{?}, @emph{*}, or @emph{[},
@emph{/*} at the end is implied.

@item  @samp{--since=<date>} 
Show commits more recent than a specific date.

@item  @samp{--until=<date>} 
Show commits older than a specific date.

@item  @samp{--date-order} 
Sort commits by date when possible.

@item  @samp{--merge} 
After an attempt to merge stops with conflicts, show the commits on the
history between two branches (i.e. the HEAD and the MERGE_HEAD)  that modify
the conflicted files and do not exist on all the heads being merged.

@item  @samp{--left-right} 
Mark which side of a symmetric difference a commit is reachable from.
Commits from the left side are prefixed with a @samp{<} symbol and those from the
right with a @samp{>} symbol.

@item  @samp{--full-history} 
When filtering history with @emph{<path>…}, does not prune some history.  (See
"History simplification" in git-log(1) for a more detailed
explanation.)

@item  @samp{--simplify-merges} 
Additional option to @samp{--full-history} to remove some needless merges from
the resulting history, as there are no selected commits contributing to this
merge.  (See "History simplification" in git-log(1) for a more
detailed explanation.)

@item  @samp{--ancestry-path} 
When given a range of commits to display (e.g. @emph{commit1..commit2} or
@emph{commit2 ^commit1}), only display commits that exist directly on the
ancestry chain between the @emph{commit1} and @emph{commit2}, i.e. commits that are
both descendants of @emph{commit1}, and ancestors of @emph{commit2}.  (See "History
simplification" in git-log(1) for a more detailed explanation.)

@item  @samp{-L<start>,<end>:<file>} 
@itemx  @samp{-L:<funcname>:<file>} 
@emph{<file>} 内で、 @emph{<start>,<end>} 、または関数名 regex @emph{<funcname>}
で指定された行範囲をトレースします。pathspec
リミッターを指定することはできません。これは現在、単一のリビジョンから開始するウォークに制限されています。つまり、0個または1個の正のリビジョン引数のみを指定でき、
@emph{<start>} と @emph{<end>} (または @emph{<funcname>})
が開始リビジョンに存在する必要があります。このオプションは複数回指定できます。これは @samp{--patch} オプションの機能を内包しています。パッチ出力は
@samp{--no-patch} を使用して抑制できますが、他の差分形式(つまり、 @samp{--raw}、 @samp{--numstat}、 @samp{--shortstat}、
@samp{--dirstat}、 @samp{--summary}、 @samp{--name-only}、 @samp{--name-status}、
@samp{--check})は現在実装されていません。

@emph{<start>} と @emph{<end>} は、以下のいずれかの形式です:

@itemize 

@item
number

@emph{<start>} または @emph{<end>} が数値の場合、絶対行番号を指定します(行は1から数えます)。

@item
@samp{/regex/}

この形式は、指定されたPOSIX正規表現に一致する最初の行を使用します。 @emph{<start>} が正規表現の場合、前の @samp{-L}
範囲の末尾から検索します。それ以外の場合は、ファイルの先頭から検索します。 @emph{<start>} が @samp{^/regex/}
の場合、ファイルの先頭から検索します。 @emph{<end>} が正規表現の場合、 @emph{<start>} で指定された行から検索開始します。

@item
+offset or -offset

これは <end> に対してのみ有効であり、 <start> で指定された行の前後の行数を指定します。
@end itemize

@emph{<start>} および @emph{<end>} の代わりに @samp{:<funcname>} が指定されている場合、これは @emph{<funcname>}
に一致する最初の関数名行から次の関数名行までの範囲を示す正規表現です。 @samp{:<funcname>} は、前の @samp{-L}
範囲の末尾から検索します。それ以外の場合は、ファイルの先頭から検索します。 @samp{^:<funcname>} はファイルの先頭から検索します。関数名は、
@samp{git diff} がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の
@emph{Defining a custom hunk-header} 参照)。

@item  <revision range> 
Limit the revisions to show. This can be either a single revision meaning
show from the given revision and back, or it can be a range in the form
"@emph{<from>}..@emph{<to>}" to show all revisions between @emph{<from>} and back to
@emph{<to>}. Note, more advanced revision selection can be applied.  For a more
complete list of ways to spell object names, see gitrevisions(7).

@item  <path>… 
Limit commits to the ones touching files in the given paths. Note, to avoid
ambiguity with respect to revision names use "--" to separate the paths from
any preceding options.
@end table

@noindent

@heading gitk-specific options

@table @asis

@item  @samp{--argscmd=<command>} 
Command to be run each time gitk has to determine the revision range to
show.  The command is expected to print on its standard output a list of
additional revisions to be shown, one per line.  Use this instead of
explicitly specifying a @emph{<revision range>} if the set of commits to show may
vary between refreshes.

@item  @samp{--select-commit=<ref>} 
Select the specified commit after loading the graph.  Default behavior is
equivalent to specifying @emph{--select-commit=HEAD}.
@end table

@noindent

@chapheading Examples

@table @asis

@item  gitk v2.6.12.. include/scsi drivers/scsi 
Show the changes since version @emph{v2.6.12} that changed any file in the
include/scsi or drivers/scsi subdirectories

@item  gitk --since="2 weeks ago" -- gitk 
Show the changes during the last two weeks to the file @emph{gitk}.  The "--" is
necessary to avoid confusion with the @strong{branch} named @emph{gitk}

@item  gitk --max-count=100 --all -- Makefile 
Show at most 100 changes made to the file @emph{Makefile}. Instead of only
looking for changes in the current branch look in all branches.
@end table

@noindent

@chapheading Files

User configuration and preferences are stored at:

@itemize 

@item
@samp{$XDG_CONFIG_HOME/git/gitk} if it exists, otherwise

@item
@samp{$HOME/.gitk} if it exists
@end itemize

If neither of the above exist then @samp{$XDG_CONFIG_HOME/git/gitk} is created
and used by default. If @emph{$XDG_CONFIG_HOME} is not set it defaults to
@samp{$HOME/.config} in all cases.

@noindent

@chapheading History

Gitk was the first graphical repository browser. It’s written in tcl/tk.

@emph{gitk} is actually maintained as an independent project, but stable versions
are distributed as part of the Git suite for the convenience of end users.

gitk-git/ comes from Paul Mackerras’s gitk project:

@example
git://ozlabs.org/~paulus/gitk
@end example

@noindent

@chapheading SEE ALSO

@table @asis

@item  @emph{qgit(1)} 
A repository browser written in C++ using Qt.

@item  @emph{tig(1)} 
A minimal repository browser and Git tool output highlighter written in C
using Ncurses.
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitmailmap,,,Top
@chapheading Name

gitmailmap — 作者(author)/コミッター(committer) および/または 電子メールアドレス(E-Mail addresses)をマップします

@noindent

@chapheading Synopsis

$GIT_WORK_TREE/.mailmap

@noindent

@chapheading DESCRIPTION

ファイル @samp{.mailmap} がリポジトリのトップレベルに存在する場合、または @samp{mailmap.file} とか @samp{mailmap.blob}
構成オプション(git-config(1) 参照)が指す場所(ファイルパスとかブロブ)に存在する場合は、
作者とコミッターの名前と電子メールアドレスを、正規の本名と電子メールアドレスにマッピングするために使用されます。

@noindent

@chapheading SYNTAX

@emph{#} 文字から行末まではコメントで、空白行は無視されます。

単純な形式では、ファイルの各行は、作成の正規の本名、空白、および名前にマップするためにコミットで使用される電子メールアドレス(@emph{<} と @emph{>}
で囲まれている)で構成されます。 例えば:

@example
Proper Name <commit@@email.xx>
@end example

より複雑な形式では:

@example
<proper@@email.xx> <commit@@email.xx>
@end example

で、これにより、メールマップはコミット用の電子メールアドレスのみを置き換えることができます。そして:

@example
Proper Name <proper@@email.xx> <commit@@email.xx>
@end example

では、mailmapは、指定されたコミット用電子メールアドレスに一致するコミッターの名前と電子メールのアドレス両方を置き換えることができます。そして:

@example
Proper Name <proper@@email.xx> Commit Name <commit@@email.xx>
@end example

では、mailmapは、指定されたコミッターの名前と電子メールアドレスの両方に一致するコミッターの名前と電子メールの両方を置き換えることができます。

電子メールアドレスと名前の両方が大文字と小文字を区別せずに照合されます。たとえば、以下は上記の @emph{Commit Name
<commit@@email.xx>} とも一致します:

@example
Proper Name <proper@@email.xx> CoMmIt NaMe <CoMmIt@@EmAiL.xX>
@end example

@noindent

@chapheading NOTES

作業ツリーの @samp{.mailmap} ファイルにアクセスするとき、Gitはシンボリックリンクをたどりません。
これにより、ファイルがインデックスまたはツリーからアクセスされたときとファイルシステムからアクセスされたときの動作の一貫性が保たれます。

@noindent

@chapheading EXAMPLES

あなたの履歴には、JaneとJoeの2人の作者(authors)によるコミットが含まれています。これらの作成の名前は、リポジトリにいくつかの形式で表示されます:

@example
Joe Developer <joe@@example.com>
Joe R. Developer <joe@@example.com>
Jane Doe <jane@@example.com>
Jane Doe <jane@@laptop.(none)>
Jane D. <jane@@desktop.(none)>
@end example


ここで、Joeが当初は、ミドルネームを使用することを望み、Janeが彼女の家族名を完全に綴ることを好むとします。名前を修正するための
@samp{.mailmap} ファイルは以下のようになります:

@example
Joe R. Developer <joe@@example.com>
Jane Doe <jane@@example.com>
Jane Doe <jane@@desktop.(none)>
@end example


注意: 名前を修正するためだけに、 @emph{<jane@@laptop.(none)>}
のnamesをマップする必要はないことに注意してください。ただし、明らかに壊れた @emph{<jane@@laptop.(none)>} と
@emph{<jane@@desktop.(none)>}
というの電子メールアドレスをそのままにしておくことは、通常、希望するものではありません。したがって、これらも修正する @samp{.mailmap}
ファイルは以下のとおりです:

@example
Joe R. Developer <joe@@example.com>
Jane Doe <jane@@example.com> <jane@@laptop.(none)>
Jane Doe <jane@@example.com> <jane@@desktop.(none)>
@end example


最後に、JoeとJaneが電子メールアドレスを共有しているが、名前は共有していないとしましょう。バグ報告システムによって生成された履歴にそれぞれのコミットを含めるとします。つまり、履歴には以下のように名前があらわれます:

@example
Joe <bugs@@example.com>
Jane <bugs@@example.com>
@end example


これらのケースも処理する完全な @samp{.mailmap} ファイル(上記の例に2行追加)は以下のようになります:

@example
Joe R. Developer <joe@@example.com>
Jane Doe <jane@@example.com> <jane@@laptop.(none)>
Jane Doe <jane@@example.com> <jane@@desktop.(none)>
Joe R. Developer <joe@@example.com> Joe <bugs@@example.com>
Jane Doe <jane@@example.com> Jane <bugs@@example.com>
@end example


@noindent

@chapheading SEE ALSO

git-check-mailmap(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitmodules,,,Top
@chapheading Name

gitmodules — Defining submodule properties

@noindent

@chapheading Synopsis

$GIT_WORK_TREE/.gitmodules

@noindent

@chapheading DESCRIPTION

The @samp{.gitmodules} file, located in the top-level directory of a Git working
tree, is a text file with a syntax matching the requirements of
git-config(1).

The file contains one subsection per submodule, and the subsection value is
the name of the submodule. The name is set to the path where the submodule
has been added unless it was customized with the @samp{--name} option of @emph{git
submodule add}. Each submodule section also contains the following required
keys:

@table @asis

@item  submodule.<name>.path 
Defines the path, relative to the top-level directory of the Git working
tree, where the submodule is expected to be checked out.  The path name must
not end with a @samp{/}. All submodule paths must be unique within the
@samp{.gitmodules} file.

@item  submodule.<name>.url 
Defines a URL from which the submodule repository can be cloned.  This may
be either an absolute URL ready to be passed to git-clone(1) or (if
it begins with @samp{./} or @samp{../}) a location relative to the superproject’s
origin repository.
@end table

In addition, there are a number of optional keys:

@table @asis

@item  submodule.<name>.update 
Defines the default update procedure for the named submodule, i.e. how the
submodule is updated by the @samp{git submodule update} command in the
superproject. This is only used by @samp{git submodule init} to initialize the
configuration variable of the same name. Allowed values here are @emph{checkout},
@emph{rebase}, @emph{merge} or @emph{none}. See description of @emph{update} command in
git-submodule(1) for their meaning. For security reasons, the
@emph{!command} form is not accepted here.

@item  submodule.<name>.branch 
A remote branch name for tracking updates in the upstream submodule.  If the
option is not specified, it defaults to the remote @samp{HEAD}.  A special value
of @samp{.} is used to indicate that the name of the branch in the submodule
should be the same name as the current branch in the current repository.
See the @samp{--remote} documentation in git-submodule(1) for details.

@item  submodule.<name>.fetchRecurseSubmodules 
This option can be used to control recursive fetching of this submodule. If
this option is also present in the submodule’s entry in @samp{.git/config} of the
superproject, the setting there will override the one found in
@samp{.gitmodules}.  Both settings can be overridden on the command line by using
the @samp{--[no-]recurse-submodules} option to @samp{git fetch} and @samp{git pull}.

@item  submodule.<name>.ignore 
Defines under what circumstances @samp{git status} and the diff family show a
submodule as modified. The following values are supported:

@table @asis

@item  all 
The submodule will never be considered modified (but will
nonetheless show up in the output of status and commit when it has
been staged).

@item  dirty 
All changes to the submodule’s work tree will be ignored, only
committed differences between the @samp{HEAD} of the submodule and its
recorded state in the superproject are taken into account.

@item  untracked 
Only untracked files in submodules will be ignored.
Committed differences and modifications to tracked files will show
up.

@item  none 
No modifications to submodules are ignored, all of committed
differences, and modifications to tracked and untracked files are
shown. This is the default option.
@end table

If this option is also present in the submodule’s entry in @samp{.git/config} of
the superproject, the setting there will override the one found in
@samp{.gitmodules}.

Both settings can be overridden on the command line by using the
@samp{--ignore-submodules} option. The @samp{git submodule} commands are not affected
by this setting.

@item  submodule.<name>.shallow 
When set to true, a clone of this submodule will be performed as a shallow
clone (with a history depth of 1) unless the user explicitly asks for a
non-shallow clone.
@end table

@noindent

@chapheading NOTES

Git does not allow the @samp{.gitmodules} file within a working tree to be a
symbolic link, and will refuse to check out such a tree entry. This keeps
behavior consistent when the file is accessed from the index or a tree
versus from the filesystem, and helps Git reliably enforce security checks
of the file contents.

@noindent

@chapheading EXAMPLES

Consider the following @samp{.gitmodules} file:

@example
[submodule "libfoo"]
        path = include/foo
        url = git://foo.com/git/lib.git

[submodule "libbar"]
        path = include/bar
        url = git://bar.com/git/lib.git
@end example


This defines two submodules, @samp{libfoo} and @samp{libbar}. These are expected to be
checked out in the paths @samp{include/foo} and @samp{include/bar}, and for both
submodules a URL is specified which can be used for cloning the submodules.

@noindent

@chapheading SEE ALSO

git-submodule(1), gitsubmodules(7), git-config(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitnamespaces,,,Top
@chapheading Name

gitnamespaces — Git名前空間

@noindent

@chapheading Synopsis

@display
GIT_NAMESPACE=<namespace> git upload-pack
GIT_NAMESPACE=<namespace> git receive-pack
@end display


@noindent

@chapheading DESCRIPTION

Gitは、単一のリポジトリのrefを複数の名前空間に分割することをサポートしています。各名前空間には、独自のブランチ、タグ、およびHEADがあります。Gitは、オブジェクトストアを共有し、すべてのrefを
git-gc(1) などの操作に公開しながら、プル元とプッシュ先の独立したリポジトリとして各名前空間を公開できます。

複数のリポジトリを単一のリポジトリの名前空間として保存すると、同じソースの複数のブランチを保存する場合など、同じオブジェクトの重複コピーを保存することを回避できます。代替メカニズムは、重複を回避するための同様のサポートを提供しますが、名前空間が行うのに対し、代替は、継続的なメンテナンスなしでリポジトリに追加された新しいオブジェクト間の重複を防止しません。

名前空間を指定するには、 @samp{GIT_NAMESPACE} 環境変数に名前空間を設定します。 ref名前空間ごとに、Gitは対応するrefを
@samp{refs/namespaces/} の下のディレクトリに保存します。 たとえば、 @samp{GIT_NAMESPACE=foo} はrefを
@samp{refs/namespaces/foo/} の下に保存します。 git(1) の @samp{--namespace}
オプションを使用して名前空間を指定することもできます。

注意: @samp{/} を含む名前空間は、名前空間の階層に拡張されることに注意してください。たとえば、 @samp{GIT_NAMESPACE=foo/bar}
はrefを @samp{refs/namespaces/foo/refs/namespaces/bar/} の下に保存します。 これにより、
@samp{GIT_NAMESPACE} のパスが階層的に動作するため、 @samp{GIT_NAMESPACE=foo/bar} でクローンを作成すると、
@samp{GIT_NAMESPACE=foo} でクローンを作成してそのリポジトリから @samp{GIT_NAMESPACE=bar}
でクローンを作成するのと同じ結果が得られます。また、 @samp{foo/refs/heads/}
などの奇妙な名前空間パスとのあいまいさを回避します。そうしないと、 @samp{refs} ディレクトリ内で ディレクトリ/ファイル
の競合が発生する可能性があります。

git-upload-pack(1) と git-receive-pack(1) は、 @samp{GIT_NAMESPACE}
で指定されているようにrefの名前を書き換えます。 git-upload-pack と git-receive-pack
は、指定された名前空間外のすべてのrefを無視します。

スマートHTTPサーバー git-http-backend(1) は、 GIT_NAMESPACE
をバックエンドプログラムに渡します。リポジトリの名前空間をリポジトリとして公開するための設定例については、
git-http-backend(1) を参照してください。

簡単なローカルテストには、あなたは git-remote-ext(1) を使用できます:

@example
git clone ext::'git --namespace=foo %s /tmp/prefixed.git'
@end example


@noindent

@chapheading SECURITY

フェッチおよびプッシュプロトコルは、共有することを意図していない一方の側が他方のリポジトリからデータを盗むのを防ぐようには設計されていません。悪意のある者から保護する必要のあるプライベートデータがある場合、最善のオプションはそれを別のリポジトリに保存することです。これは、クライアントとサーバーの両方に適用されます。特に、サーバー上の名前空間は、読み取りアクセス制御には効果的ではありません。リポジトリ全体への読み取りアクセスで信頼できるクライアントにのみ、名前空間への読み取りアクセスを許可する必要があります。

既知の攻撃ベクトル(attack vectors)は以下のとおりです:

@enumerate 

@item
被害者は、明示的に共有することを意図していないオブジェクトのIDをアドバタイズする "have"
行を送信しますが、他にもIDを持っている者が居る場合は、転送を最適化するために使用できます。攻撃者はオブジェクトID
Xを選択して盗み、refをXに送信しますが、被害者はすでにXのコンテンツを持っているため、Xのコンテンツを送信する必要はありません。
これで、被害者は攻撃者がXを持っていると信じ、Xのコンテンツを後で攻撃者に送り返します。
(この攻撃は、クライアントがアクセスできる名前空間にXへのrefを作成してフェッチすることにより、クライアントがサーバー上で実行するのが最も簡単です。サーバーがクライアント上で実行する最も可能性の高い方法は、Xをパブリックブランチにマージし、ユーザーがこのブランチで追加の作業を行い、マージに気付かずにサーバーにプッシュバックすることを期待します。)

@item
#1 と同様に、攻撃者は盗むオブジェクトID
Xを選択します。被害者は、攻撃者がすでに持っているオブジェクトYを送信し、攻撃者はYではなくXを持っていると誤って主張するため、被害者はYをXに対するデルタとして送信します。デルタは、攻撃者にYに類似したXの領域を明らかにします。
@end enumerate

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitremote-helpers,,,Top
@chapheading Name

gitremote-helpers — Helper programs to interact with remote repositories

@noindent

@chapheading Synopsis

@display
git remote-<transport> <repository> [<URL>]
@end display


@noindent

@chapheading DESCRIPTION

Remote helper programs are normally not used directly by end users, but they
are invoked by Git when it needs to interact with remote repositories Git
does not support natively.  A given helper will implement a subset of the
capabilities documented here. When Git needs to interact with a repository
using a remote helper, it spawns the helper as an independent process, sends
commands to the helper’s standard input, and expects results from the
helper’s standard output. Because a remote helper runs as an independent
process from Git, there is no need to re-link Git to add a new helper, nor
any need to link the helper with the implementation of Git.

Every helper must support the "capabilities" command, which Git uses to
determine what other commands the helper will accept.  Those other commands
can be used to discover and update remote refs, transport objects between
the object database and the remote repository, and update the local object
store.

Git comes with a "curl" family of remote helpers, that handle various
transport protocols, such as @emph{git-remote-http}, @emph{git-remote-https},
@emph{git-remote-ftp} and @emph{git-remote-ftps}. They implement the capabilities
@emph{fetch}, @emph{option}, and @emph{push}.

@noindent

@chapheading INVOCATION

Remote helper programs are invoked with one or (optionally) two
arguments. The first argument specifies a remote repository as in Git; it is
either the name of a configured remote or a URL. The second argument
specifies a URL; it is usually of the form @emph{<transport>://<address>}, but
any arbitrary string is possible.  The @samp{GIT_DIR} environment variable is set
up for the remote helper and can be used to determine where to store
additional data or from which directory to invoke auxiliary Git commands.

When Git encounters a URL of the form @emph{<transport>://<address>}, where
@emph{<transport>} is a protocol that it cannot handle natively, it automatically
invokes @emph{git remote-<transport>} with the full URL as the second
argument. If such a URL is encountered directly on the command line, the
first argument is the same as the second, and if it is encountered in a
configured remote, the first argument is the name of that remote.

A URL of the form @emph{<transport>::<address>} explicitly instructs Git to
invoke @emph{git remote-<transport>} with @emph{<address>} as the second argument. If
such a URL is encountered directly on the command line, the first argument
is @emph{<address>}, and if it is encountered in a configured remote, the first
argument is the name of that remote.

Additionally, when a configured remote has @samp{remote.<name>.vcs} set to
@emph{<transport>}, Git explicitly invokes @emph{git remote-<transport>} with @emph{<name>}
as the first argument. If set, the second argument is @samp{remote.<name>.url};
otherwise, the second argument is omitted.

@noindent

@chapheading INPUT FORMAT

Git sends the remote helper a list of commands on standard input, one per
line.  The first command is always the @emph{capabilities} command, in response
to which the remote helper must print a list of the capabilities it supports
(see below) followed by a blank line.  The response to the capabilities
command determines what commands Git uses in the remainder of the command
stream.

The command stream is terminated by a blank line.  In some cases (indicated
in the documentation of the relevant commands), this blank line is followed
by a payload in some other protocol (e.g., the pack protocol), while in
others it indicates the end of input.

@noindent

@heading Capabilities

Each remote helper is expected to support only a subset of commands.  The
operations a helper supports are declared to Git in the response to the
@samp{capabilities} command (see COMMANDS, below).

In the following, we list all defined capabilities and for each we list
which commands a helper with that capability must provide.

@noindent

@subheading Capabilities for Pushing

@table @asis

@item  @emph{connect} 
Can attempt to connect to @emph{git receive-pack} (for pushing), @emph{git
upload-pack}, etc for communication using git’s native packfile
protocol. This requires a bidirectional, full-duplex connection.

Supported commands: @emph{connect}.

@item  @emph{stateless-connect} 
Experimental; for internal use only.  Can attempt to connect to a remote
server for communication using git’s wire-protocol version 2.  See the
documentation for the stateless-connect command for more information.

Supported commands: @emph{stateless-connect}.

@item  @emph{push} 
Can discover remote refs and push local commits and the history leading up
to them to new or existing remote refs.

Supported commands: @emph{list for-push}, @emph{push}.

@item  @emph{export} 
Can discover remote refs and push specified objects from a fast-import
stream to remote refs.

Supported commands: @emph{list for-push}, @emph{export}.
@end table

If a helper advertises @emph{connect}, Git will use it if possible and fall back
to another capability if the helper requests so when connecting (see the
@emph{connect} command under COMMANDS).  When choosing between @emph{push} and
@emph{export}, Git prefers @emph{push}.  Other frontends may have some other order of
preference.

@table @asis

@item  @emph{no-private-update} 
When using the @emph{refspec} capability, git normally updates the private ref on
successful push. This update is disabled when the remote-helper declares the
capability @emph{no-private-update}.
@end table

@noindent

@subheading Capabilities for Fetching

@table @asis

@item  @emph{connect} 
Can try to connect to @emph{git upload-pack} (for fetching), @emph{git receive-pack},
etc for communication using the Git’s native packfile protocol. This
requires a bidirectional, full-duplex connection.

Supported commands: @emph{connect}.

@item  @emph{stateless-connect} 
Experimental; for internal use only.  Can attempt to connect to a remote
server for communication using git’s wire-protocol version 2.  See the
documentation for the stateless-connect command for more information.

Supported commands: @emph{stateless-connect}.

@item  @emph{fetch} 
Can discover remote refs and transfer objects reachable from them to the
local object store.

Supported commands: @emph{list}, @emph{fetch}.

@item  @emph{import} 
Can discover remote refs and output objects reachable from them as a stream
in fast-import format.

Supported commands: @emph{list}, @emph{import}.

@item  @emph{check-connectivity} 
Can guarantee that when a clone is requested, the received pack is self
contained and is connected.
@end table

If a helper advertises @emph{connect}, Git will use it if possible and fall back
to another capability if the helper requests so when connecting (see the
@emph{connect} command under COMMANDS).  When choosing between @emph{fetch} and
@emph{import}, Git prefers @emph{fetch}.  Other frontends may have some other order of
preference.

@noindent

@subheading Miscellaneous capabilities

@table @asis

@item  @emph{option} 
For specifying settings like @samp{verbosity} (how much output to write to
stderr) and @samp{depth} (how much history is wanted in the case of a shallow
clone) that affect how other commands are carried out.

@item  @emph{refspec} <refspec> 
For remote helpers that implement @emph{import} or @emph{export}, this capability
allows the refs to be constrained to a private namespace, instead of writing
to refs/heads or refs/remotes directly.  It is recommended that all
importers providing the @emph{import} capability use this. It’s mandatory for
@emph{export}.

A helper advertising the capability @samp{refspec
refs/heads/*:refs/svn/origin/branches/*} is saying that, when it is asked to
@samp{import refs/heads/topic}, the stream it outputs will update the
@samp{refs/svn/origin/branches/topic} ref.

This capability can be advertised multiple times.  The first applicable
refspec takes precedence.  The left-hand of refspecs advertised with this
capability must cover all refs reported by the list command.  If no
@emph{refspec} capability is advertised, there is an implied @samp{refspec *:*}.

When writing remote-helpers for decentralized version control systems, it is
advised to keep a local copy of the repository to interact with, and to let
the private namespace refs point to this local repository, while the
refs/remotes namespace is used to track the remote repository.

@item  @emph{bidi-import} 
This modifies the @emph{import} capability.  The fast-import commands @emph{cat-blob}
and @emph{ls} can be used by remote-helpers to retrieve information about blobs
and trees that already exist in fast-import’s memory. This requires a
channel from fast-import to the remote-helper.  If it is advertised in
addition to "import", Git establishes a pipe from fast-import to the
remote-helper’s stdin.  It follows that Git and fast-import are both
connected to the remote-helper’s stdin. Because Git can send multiple
commands to the remote-helper it is required that helpers that use
@emph{bidi-import} buffer all @emph{import} commands of a batch before sending data to
fast-import.  This is to prevent mixing commands and fast-import responses
on the helper’s stdin.

@item  @emph{export-marks} <file> 
This modifies the @emph{export} capability, instructing Git to dump the internal
marks table to <file> when complete. For details, read up on
@samp{--export-marks=<file>} in git-fast-export(1).

@item  @emph{import-marks} <file> 
This modifies the @emph{export} capability, instructing Git to load the marks
specified in <file> before processing any input. For details, read up on
@samp{--import-marks=<file>} in git-fast-export(1).

@item  @emph{signed-tags} 
This modifies the @emph{export} capability, instructing Git to pass
@samp{--signed-tags=verbatim} to git-fast-export(1).  In the absence of
this capability, Git will use @samp{--signed-tags=warn-strip}.

@item  @emph{object-format} 
This indicates that the helper is able to interact with the remote side
using an explicit hash algorithm extension.
@end table

@noindent

@chapheading COMMANDS

Commands are given by the caller on the helper’s standard input, one per
line.

@table @asis

@item  @emph{capabilities} 
Lists the capabilities of the helper, one per line, ending with a blank
line. Each capability may be preceded with @emph{*}, which marks them mandatory
for Git versions using the remote helper to understand. Any unknown
mandatory capability is a fatal error.

Support for this command is mandatory.

@item  @emph{list} 
Lists the refs, one per line, in the format "<value> <name> [<attr>
…]". The value may be a hex sha1 hash, "@@<dest>" for a symref, ":<keyword>
<value>" for a key-value pair, or "?" to indicate that the helper could not
get the value of the ref. A space-separated list of attributes follows the
name; unrecognized attributes are ignored. The list ends with a blank line.

See REF LIST ATTRIBUTES for a list of currently defined attributes.  See REF
LIST KEYWORDS for a list of currently defined keywords.

Supported if the helper has the "fetch" or "import" capability.

@item  @emph{list for-push} 
Similar to @emph{list}, except that it is used if and only if the caller wants to
the resulting ref list to prepare push commands.  A helper supporting both
push and fetch can use this to distinguish for which operation the output of
@emph{list} is going to be used, possibly reducing the amount of work that needs
to be performed.

Supported if the helper has the "push" or "export" capability.

@item  @emph{option} <name> <value> 
Sets the transport helper option <name> to <value>.  Outputs a single line
containing one of @emph{ok} (option successfully set), @emph{unsupported} (option not
recognized) or @emph{error <msg>} (option <name> is supported but <value> is not
valid for it).  Options should be set before other commands, and may
influence the behavior of those commands.

See OPTIONS for a list of currently defined options.

Supported if the helper has the "option" capability.

@item  @emph{fetch} <sha1> <name> 
Fetches the given object, writing the necessary objects to the database.
Fetch commands are sent in a batch, one per line, terminated with a blank
line.  Outputs a single blank line when all fetch commands in the same batch
are complete. Only objects which were reported in the output of @emph{list} with
a sha1 may be fetched this way.

Optionally may output a @emph{lock <file>} line indicating the full path of a
file under @samp{$GIT_DIR/objects/pack} which is keeping a pack until refs can be
suitably updated.  The path must end with @samp{.keep}. This is a mechanism to
name a <pack,idx,keep> tuple by giving only the keep component.  The kept
pack will not be deleted by a concurrent repack, even though its objects may
not be referenced until the fetch completes.  The @samp{.keep} file will be
deleted at the conclusion of the fetch.

If option @emph{check-connectivity} is requested, the helper must output
@emph{connectivity-ok} if the clone is self-contained and connected.

Supported if the helper has the "fetch" capability.

@item  @emph{push} +<src>:<dst> 
Pushes the given local <src> commit or branch to the remote branch described
by <dst>.  A batch sequence of one or more @emph{push} commands is terminated
with a blank line (if there is only one reference to push, a single @emph{push}
command is followed by a blank line). For example, the following would be
two batches of @emph{push}, the first asking the remote-helper to push the local
ref @emph{master} to the remote ref @emph{master} and the local @samp{HEAD} to the remote
@emph{branch}, and the second asking to push ref @emph{foo} to ref @emph{bar} (forced
update requested by the @emph{+}).

@example
push refs/heads/master:refs/heads/master
push HEAD:refs/heads/branch
\n
push +refs/heads/foo:refs/heads/bar
\n
@end example


Zero or more protocol options may be entered after the last @emph{push} command,
before the batch’s terminating blank line.

When the push is complete, outputs one or more @emph{ok <dst>} or @emph{error <dst>
<why>?} lines to indicate success or failure of each pushed ref.  The status
report output is terminated by a blank line.  The option field <why> may be
quoted in a C style string if it contains an LF.

Supported if the helper has the "push" capability.

@item  @emph{import} <name> 
Produces a fast-import stream which imports the current value of the named
ref. It may additionally import other refs as needed to construct the
history efficiently. The script writes to a helper-specific private
namespace. The value of the named ref should be written to a location in
this namespace derived by applying the refspecs from the "refspec"
capability to the name of the ref.

Especially useful for interoperability with a foreign versioning system.

Just like @emph{push}, a batch sequence of one or more @emph{import} is terminated
with a blank line. For each batch of @emph{import}, the remote helper should
produce a fast-import stream terminated by a @emph{done} command.

Note that if the @emph{bidi-import} capability is used the complete batch
sequence has to be buffered before starting to send data to fast-import to
prevent mixing of commands and fast-import responses on the helper’s stdin.

Supported if the helper has the "import" capability.

@item  @emph{export} 
Instructs the remote helper that any subsequent input is part of a
fast-import stream (generated by @emph{git fast-export})  containing objects
which should be pushed to the remote.

Especially useful for interoperability with a foreign versioning system.

The @emph{export-marks} and @emph{import-marks} capabilities, if specified, affect
this command in so far as they are passed on to @emph{git fast-export}, which
then will load/store a table of marks for local objects. This can be used to
implement for incremental operations.

Supported if the helper has the "export" capability.

@item  @emph{connect} <service> 
Connects to given service. Standard input and standard output of helper are
connected to specified service (git prefix is included in service name so
e.g. fetching uses @emph{git-upload-pack} as service) on remote side. Valid
replies to this command are empty line (connection established), @emph{fallback}
(no smart transport support, fall back to dumb transports) and just exiting
with error message printed (can’t connect, don’t bother trying to fall
back). After line feed terminating the positive (empty) response, the output
of service starts. After the connection ends, the remote helper exits.

Supported if the helper has the "connect" capability.

@item  @emph{stateless-connect} <service> 
Experimental; for internal use only.  Connects to the given remote service
for communication using git’s wire-protocol version 2.  Valid replies to
this command are empty line (connection established), @emph{fallback} (no smart
transport support, fall back to dumb transports) and just exiting with error
message printed (can’t connect, don’t bother trying to fall back).  After
line feed terminating the positive (empty) response, the output of the
service starts.  Messages (both request and response) must consist of zero
or more PKT-LINEs, terminating in a flush packet. Response messages will
then have a response end packet after the flush packet to indicate the end
of a response.  The client must not expect the server to store any state in
between request-response pairs.  After the connection ends, the remote
helper exits.

Supported if the helper has the "stateless-connect" capability.
@end table

If a fatal error occurs, the program writes the error message to stderr and
exits. The caller should expect that a suitable error message has been
printed if the child closes the connection without completing a valid
response for the current command.

Additional commands may be supported, as may be determined from capabilities
reported by the helper.

@noindent

@chapheading REF LIST ATTRIBUTES

The @emph{list} command produces a list of refs in which each ref may be followed
by a list of attributes. The following ref list attributes are defined.

@table @asis

@item  @emph{unchanged} 
This ref is unchanged since the last import or fetch, although the helper
cannot necessarily determine what value that produced.
@end table

@noindent

@chapheading REF LIST KEYWORDS

The @emph{list} command may produce a list of key-value pairs.  The following
keys are defined.

@table @asis

@item  @emph{object-format} 
The refs are using the given hash algorithm.  This keyword is only used if
the server and client both support the object-format extension.
@end table

@noindent

@chapheading OPTIONS

The following options are defined and (under suitable circumstances)  set by
Git if the remote helper has the @emph{option} capability.

@table @asis

@item  @emph{option verbosity} <n> 
Changes the verbosity of messages displayed by the helper.  A value of 0 for
<n> means that processes operate quietly, and the helper produces only error
output.  1 is the default level of verbosity, and higher values of <n>
correspond to the number of -v flags passed on the command line.

@item  @emph{option progress} @{@emph{true}|@emph{false}@} 
Enables (or disables) progress messages displayed by the transport helper
during a command.

@item  @emph{option depth} <depth> 
Deepens the history of a shallow repository.

@item  'option deepen-since <timestamp> 
Deepens the history of a shallow repository based on time.

@item  'option deepen-not <ref> 
Deepens the history of a shallow repository excluding ref.  Multiple options
add up.

@item  @emph{option deepen-relative @{'true}|@emph{false}@} 
Deepens the history of a shallow repository relative to current
boundary. Only valid when used with "option depth".

@item  @emph{option followtags} @{@emph{true}|@emph{false}@} 
If enabled the helper should automatically fetch annotated tag objects if
the object the tag points at was transferred during the fetch command.  If
the tag is not fetched by the helper a second fetch command will usually be
sent to ask for the tag specifically.  Some helpers may be able to use this
option to avoid a second network connection.
@end table

@emph{option dry-run} @{@emph{true}|@emph{false}@}:
If true, pretend the operation completed successfully,
but don’t actually change any repository data.  For most
helpers this only applies to the @emph{push}, if supported.

@table @asis

@item  @emph{option servpath <c-style-quoted-path>} 
Sets service path (--upload-pack, --receive-pack etc.) for next
connect. Remote helper may support this option, but must not rely on this
option being set before connect request occurs.

@item  @emph{option check-connectivity} @{@emph{true}|@emph{false}@} 
Request the helper to check connectivity of a clone.

@item  @emph{option force} @{@emph{true}|@emph{false}@} 
Request the helper to perform a force update.  Defaults to @emph{false}.

@item  @emph{option cloning} @{@emph{true}|@emph{false}@} 
Notify the helper this is a clone request (i.e. the current repository is
guaranteed empty).

@item  @emph{option update-shallow} @{@emph{true}|@emph{false}@} 
Allow to extend .git/shallow if the new refs require it.

@item  @emph{option pushcert} @{@emph{true}|@emph{false}@} 
GPG sign pushes.

@item  'option push-option <string> 
Transmit <string> as a push option. As the push option must not contain LF
or NUL characters, the string is not encoded.

@item  @emph{option from-promisor} @{@emph{true}|@emph{false}@} 
Indicate that these objects are being fetched from a promisor.

@item  @emph{option no-dependents} @{@emph{true}|@emph{false}@} 
Indicate that only the objects wanted need to be fetched, not their
dependents.

@item  @emph{option atomic} @{@emph{true}|@emph{false}@} 
When pushing, request the remote server to update refs in a single atomic
transaction.  If successful, all refs will be updated, or none will.  If the
remote side does not support this capability, the push will fail.

@item  @emph{option object-format} @{@emph{true}|algorithm@} 
If @emph{true}, indicate that the caller wants hash algorithm information to be
passed back from the remote.  This mode is used when fetching refs.

If set to an algorithm, indicate that the caller wants to interact with the
remote side using that algorithm.
@end table

@noindent

@chapheading SEE ALSO

git-remote(1)

git-remote-ext(1)

git-remote-fd(1)

git-fast-import(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitrepository-layout,,,Top
@chapheading Name

gitrepository-layout — Gitリポジトリの間取り

@noindent

@chapheading Synopsis

$GIT_DIR/*

@noindent

@chapheading DESCRIPTION

Gitリポジトリには2つの風味があります:

@itemize 

@item
作業ツリーのルートにある @samp{.git} ディレクトリ

@item
bare(裸の)リポジトリである(つまり、独自の作業ツリーがない)「<project>.git」ディレクトリ。通常、このディレクトリにプッシュしてフェッチすることにより、他のユーザーと履歴を交換するために使用されます。
@end itemize

@strong{注}: また、作業ツリーのルートにプレーンテキストファイル @samp{.git} を作成できます。
このファイルには、リポジトリがある実際のディレクトリを指す @samp{gitdir: <path>} が含まれています。
このメカニズムは、サブモジュールチェックアウトの作業ツリーによく使用され、
サブモジュールを含むスーパープロジェクトで、
サブモジュールを持たないブランチを「git checkout」できるようにします。
@samp{checkout} は、サブモジュールリポジトリを失うことなく、
サブモジュール作業ツリー全体を削除する必要があります。

以下のものがGitリポジトリに存在する可能性があります。

@table @asis

@item  objects 
このリポジトリに関連付けられているオブジェクトストア。通常、オブジェクトストアは自給自足です(つまり、そこにあるオブジェクトによって参照されるすべてのオブジェクトもそこにあります)が、それに違反する方法はいくつかあります。

@enumerate 

@item
浅いクローン(shallow clone)を作成することにより、不完全であるがローカルで使用可能なリポジトリを作成できます。
git-clone(1) を参照してください。

@item
@samp{objects/info/alternates} または @samp{$GIT_ALTERNATE_OBJECT_DIRECTORIES}
メカニズムを使用して、他のオブジェクトストアからオブジェクトを「借用」(borrow)することができます。この種の不完全なオブジェクトストアを持つリポジトリは、馬鹿プロトコル(dumb
transport)で使用するために公開するのには適していませんが、それ以外の場合は「objects/info/alternates」が借用するオブジェクトストアを指している限り問題ありません。

$GIT_COMMON_DIR
が設定されている場合、このディレクトリは無視され、代わりに「$GIT_COMMON_DIR/objects」が使用されます。
@end enumerate

@item  objects/[0-9a-f][0-9a-f] 
新しく作成されたオブジェクトは、独自のファイルに保存されます。オブジェクトは、sha1オブジェクト名の最初の2文字を使用して、256個のサブディレクトリに分散され、
@samp{objects} 自体のディレクトリエントリの数を管理可能な数に保ちます。ここにあるオブジェクトは、「アンパックオブジェクト」(unpacked
obuject)(または「ルーズオブジェクト」(loose object))と呼ばれることがよくあります。

@item  objects/pack 
パック(多くのオブジェクトを圧縮形式で格納するファイルと、ランダムにアクセスできるようにするためのインデックスファイル)は、このディレクトリにあります。

@item  objects/info 
オブジェクトストアに関する追加情報は、このディレクトリに記録されます。

@item  objects/info/packs 
このファイルは、馬鹿プロトコルがこのオブジェクトストアで使用可能なパックを検出するのに役立ちます。リポジトリが馬鹿プロトコル用に公開されている場合は、パックを追加または削除するたびに、
@samp{git update-server-info} を実行して、このファイルを最新の状態に保つ必要があります。 @emph{git repack}
はデフォルトでこれを行います。

@item  objects/info/alternates 
このファイルは、このオブジェクトストアがオブジェクトを借用(borrow)する代替オブジェクトストアへのパスを、1行に1つのパス名で記録します。ネイティブGitツールがローカルで使用するだけでなく、HTTP
fetcher
もリモートで使用しようとすることに注意してください。これは通常、代替ファイルに相対パス(リポジトリではなくオブジェクトデータベースに対して！)がある場合は機能しますが、ファイルシステムとWeb
URLの絶対パスが同じでない限り、絶対パスを使用する場合は機能しません。 @samp{objects/info/http-alternates}
も参照してください。

@item  objects/info/http-alternates 
このファイルは、このオブジェクトストアがオブジェクトを借用(borrow)する代替オブジェクトストアへのURLを記録し、リポジトリがHTTP経由でフェッチされるときに使用されます。

@item  refs 
参照(reference)は、このディレクトリのサブディレクトリに保存されます。 @emph{git prune}
コマンドは、このディレクトリとそのサブディレクトリに見つかったrefsから到達可能なオブジェクトを認識し保持します。$GIT_COMMON_DIRが設定されていて、代わりに「$GIT_COMMON_DIR/refs」が使用される場合、このディレクトリは無視されます(refs/bisectとrefs/rewrittenとrefs/worktreeを除く)。

@item  refs/heads/@samp{name} 
ブランチ @samp{name} のツリーの先端(tip-of-the-tree)のコミットオブジェクトを記録します

@item  refs/tags/@samp{name} 
オブジェクト名を記録します(必ずしもコミットオブジェクト、またはコミットオブジェクトを指すタグオブジェクトである必要はありません)。

@item  refs/remotes/@samp{name} 
リモートリポジトリからコピーされたブランチのツリーの先端(tip-of-the-tree)のコミットオブジェクトを記録します。

@item  refs/replace/@samp{<obj-sha1>} 
@samp{<obj-sha1>} を置き換えるオブジェクトのSHA-1を記録します。これはinfo/graftsに似ており、
git-replace(1) によって内部的に使用および保守されます。
このようなrefsはリポジトリ間で交換できますが、graftsは交換できません。

@item  packed-refs 
refs/heads/ や refs/tags/ と同じ情報を記録し、そして friends がより効率的な方法で記録します。
git-pack-refs(1) を参照してください。 $GIT_COMMON_DIR
が設定されている場合、このファイルは無視され、代わりに「$GIT_COMMON_DIR/packed-refs」が使用されます。

@item  HEAD 
現在アクティブなブランチを説明する @samp{refs/heads/}
名前空間へのシンボリックref(symref;glossaryを参照)。リポジトリが作業ツリーに関連付けられていない場合(つまり、ベアリポジトリの場合)はあまり意味がありませんが、有効なGitリポジトリにはHEADファイルが「必要」です。一部の磁器コマンドは、これを使用して、リポジトリの指定された「デフォルト」ブランチ(通常は「master」)を推測する場合があります。名前付きブランチ
@emph{name}
が(まだ)存在しない場合も合法です。一部のレガシー設定では、現在のブランチを指すシンボリックref(symref)ではなくシンボリックリンクです。

HEADは、現在のブランチを指すシンボリックref(symref)である代わりに、特定のコミットを直接記録することもできます。このような状態は「detached
HEAD」と呼ばれることがよくあります。詳細については git-checkout(1)を参照してください。

@item  config 
リポジトリ固有の構成ファイル。 $GIT_COMMON_DIR
が設定されている場合、このファイルは無視され、代わりに「$GIT_COMMON_DIR/config」が使用されます。

@item  config.worktree 
複数の作業ディレクトリ設定の、メイン作業ディレクトリための、作業ディレクトリ固有の構成ファイル(git-worktree(1)
を参照)。

@item  branches 
@emph{git fetch} や @emph{git pull} や @emph{git push}
へのURLを指定するために使用される短縮形を格納するための、少々非推奨の方法。ファイルは @samp{branches/<name>} として保存でき、
@emph{repository} 引数の代わりに @emph{name} をこれらのコマンドに指定できます。詳細については、 git-fetch(1) の
REMOTES セクションを参照してください。この機構はレガシーであり、最新のリポジトリには見られない可能性があります。 $GIT_COMMON_DIR
が設定されている場合、このディレクトリは無視され、代わりに「$GIT_COMMON_DIR/branches」が使用されます。

@item  hooks 
フックは、さまざまなGitコマンドで使用されるカスタマイズスクリプトです。 @emph{git init}
を実行すると、いくつかのサンプルフックがインストールされますが、デフォルトではすべて無効になっています。有効にするには、ファイル名から
@samp{.sample} サフィックスを削除して名前を変更する必要があります。各フックの詳細については、 githooks(5)
をお読みください。 $GIT_COMMON_DIR
が設定されている場合、このディレクトリは無視され、代わりに「$GIT_COMMON_DIR/hooks」が使用されます。

@item  common 
複数の作業ツリーが使用されている場合、 $GIT_DIR
内のほとんどのファイルは、いくつかの既知の例外を除いて、各作業ツリー毎とにありますです。ただし、「common」の下にあるすべてのファイルは、すべての作業ツリー間で共有されます。

@item  index 
リポジトリの現在のインデックスファイル。通常、ベアリポジトリには見つかりません。

@item  sharedindex.<SHA-1> 
$GIT_DIR/indexおよびその他の一時(temporary)インデックスファイルによって参照される共有インデックス部分。スプリットインデックスモード(split
index mode)でのみ有効です。

@item  info 
リポジトリに関する追加情報は、このディレクトリに記録されます。 $GIT_COMMON_DIR
が設定されている場合、このディレクトリは無視され、代わりに「$GIT_COMMON_DIR/info」が使用されます。

@item  info/refs 
このファイルは、馬鹿プロトコル(dumb
transports)がこのリポジトリで使用可能なrefsを検出するのに役立ちます。リポジトリが馬鹿プロトコル(dumb
transports)用に公開されている場合、このファイルは、タグまたはブランチが作成または変更されるたびに、「git
update-server-info」によって再生成される必要があります。これは通常、リポジトリに「git
push」したときに「git-receive-pack」コマンドによって実行される「hooks/update」フックから実行されます。

@item  info/grafts 
このファイルは、コミットが実際に作成された方法とは異なる親のセットを装うために、偽のコミットの祖先情報を記録します。1行に1つのレコードは、スペースで区切られ、改行で終了する40バイトの16進オブジェクト名をリストすることにより、コミットとその偽の親を記述します。

graftsメカニズムは古臭く、リポジトリ間でオブジェクトを転送する際に問題が発生する可能性があることに注意してください。
同じことを行うためのより柔軟で堅牢なシステムについては、 git-replace(1) を参照してください。

@item  info/exclude 
このファイルは、磁器コマンドの慣例により、除外パターンリストを格納します。 @samp{.gitignore} は、ディレクトリごとの無視ファイルです。「git
status」、「git add」、「git rm」、「git
clean」はこの除外パターンリストを調べますが、コアGitコマンドはこの除外パターンリストを調べません。 gitignore(5)
も参照してください。

@item  info/attributes 
ディレクトリごとの @samp{.gitattributes} ファイルと同様に、パスに割り当てる属性を定義します。
gitattributes(5) も参照してください。

@item  info/sparse-checkout 
このファイルには、スパースチェックアウトパターン(sparse checkout patterns)が格納されています。
git-read-tree(1) も参照してください。

@item  remotes 
@emph{git fetch} と @emph{git pull} と @emph{git push}
コマンドを介してリモートリポジトリと対話するときに使用するURLの省略形とデフォルトのref名を格納します。詳細については、
git-fetch(1)のREMOTESセクションを参照してください。このメカニズムはレガシーであり、最新のリポジトリには見られない可能性があります。
$GIT_COMMON_DIR
が設定されている場合、このディレクトリは無視され、代わりに「$GIT_COMMON_DIR/remotes」が使用されます。

@item  logs 
refに加えられた変更の記録は、このディレクトリに保存されます。詳細については、 git-update-ref(1)
を参照してください。
$GIT_COMMON_DIRが設定されていて、代わりに「$GIT_COMMON_DIR/logs」が使用される場合、このディレクトリは無視されます(但し、logs/HEADを除く)。

@item  logs/refs/heads/@samp{name} 
@samp{name} という名前のブランチ先端(branch tip)に加えられたすべての変更を記録します。

@item  logs/refs/tags/@samp{name} 
@samp{name} という名前のタグに加えられたすべての変更を記録します。

@item  shallow 
これは @samp{info/grafts} に似ていますが、内部的に使用され、浅いクローンメカニズム(shallow clone
mechanism)によって維持されます。 git-clone(1) と git-fetch(1) の
@samp{--depth} オプションを参照してください。
$GIT_COMMON_DIRが設定されている場合、このファイルは無視され、代わりに「$GIT_COMMON_DIR/shallow」が使用されます。

@item  commondir 
このファイルが存在する場合、明示的に設定されていなければ、 $GIT_COMMON_DIR (git(1)
を参照)はこのファイルで指定されたパスに設定されます。指定されたパスが相対パスの場合、それは$GIT_DIRからの相対パスです。commondirのあるリポジトリは、「commondir」が指すリポジトリがないと不完全です。

@item  modules 
サブモジュールのgitリポジトリが含まれています。

@item  worktrees 
リンクされた作業ツリー(linked working
trees)の管理データが含まれています。各サブディレクトリには、リンクされた作業ツリーの作業ツリー関連部分が含まれています。
$GIT_COMMON_DIRが設定されている場合、このディレクトリは無視され、代わりに「$GIT_COMMON_DIR/worktrees」が使用されます。

@item  worktrees/<id>/gitdir 
ここを指す .git
ファイルに戻る絶対パスを含むテキストファイル。これは、リンクされたリポジトリが手動で削除されているかどうかを確認するために使用され、このディレクトリをこれ以上保持する必要はありません。
このファイルのmtimeは、リンクされたリポジトリにアクセスするたびに更新する必要があります。

@item  worktrees/<id>/locked 
このファイルが存在する場合、リンクされた作業ツリーがポータブルデバイス上にあり、使用できない可能性があります。このファイルが存在すると、 @samp{git
worktree prune} によって @samp{worktrees/<id>}
が自動または手動で剪定(prune)されるのを防ぎます。ファイルには、リポジトリがロックされている理由を説明する文字列が含まれている場合があります。

@item  worktrees/<id>/config.worktree 
作業ディレクトリ固有の構成ファイル。
@end table

@noindent

@chapheading Git Repository Format Versions

すべてのgitリポジトリは、その @samp{config} ファイルの` core.repositoryformatversion`
数値のバージョンが印されています。この数値のバージョンは、ディスク上のリポジトリデータを操作するためのルールを指定します。
ディスク上のリポジトリから告知された特定のバージョンを理解しないgitの実装は、そのリポジトリで動作してはなりません。それを動作させと、間違った結果を生み出すだけでなく、実際にデータを失うリスクがあります。

このルールのため、バージョンアップは最小限に抑える必要があります。代わりに、我々は一般的に以下の戦略を好みます:

@itemize 

@item
個々のデータファイル(インデックス、パックファイルなど)のフォーマットバージョン番号をバージョンアップします。これにより、非互換性がそれらのファイルのみに制限されます。

@item
古いクライアントで使用すると正常に機能制限される(gracefully
degrade)新しいデータを導入します(たとえば、パックビットマップファイルは古いクライアントでは無視され、提供される最適化を利用しません)。
@end itemize

リポジトリ全体の形式のバージョンアップは、個別にバージョン管理できない部分だけにするべきです。たとえば、オブジェクトの到達可能性ルール、またはrefをロックするためのルールを変更する場合、リポジトリ形式バージョンのバージョンアップが必要になります。

注意: これは、リポジトリのディスクコンテンツに直接アクセスする場合にのみ適用されることに注意してください。 フォーマット @samp{0}
のみを理解する古いクライアントは、サーバープロセスがフォーマット @samp{1} を理解している限り、フォーマット @samp{1} を使用して @samp{git://}
を介してリポジトリに接続できます。

バージョンアップをお披露目するための推奨される戦略(リポジトリ全体または単一ファイル)は、gitに新しい形式を読み取るように教え、(実験用または古いgitとの下位互換性については気にしないでいいように)構成スイッチまたはコマンドラインオプションを使用して新しい形式を記述できるようにすることです。その後、読み取り機能が一般的になるまでの長い期間の後、デフォルトを新しい形式の書き込みに切り替える場合があります。

現在定義されているフォーマットバージョンは以下のとおりです:

@noindent

@heading Version 0

これは、gitの初期バージョンで定義されている形式であり、リポジトリディレクトリ、リポジトリ構成ファイル、オブジェクトおよびrefストレージの形式が含まれま
すが、これらに限定されません。gitの完全な動作を記述することは、このドキュメントの役割ではありません。

@noindent

@heading Version 1

この形式は、以下の例外を除いて、バージョン `0`と同じです:

@enumerate 

@item
@samp{core.repositoryformatversion} 変数を読み取る場合、バージョン1をサポートするgit実装は、構成ファイルの
@samp{extensions} セクションにある構成キーも読み取る必要があります。

@item
バージョン1リポジトリが、実行中のgitが実装していない @samp{extensions.*}
キーを指定している場合、操作の続行は禁止です。同様に、既知のキーの値が実装によって理解されない場合、操作の続行は禁止です。
@end enumerate

注意: 設定ファイルに拡張機能(extension)の指定が無い場合は、 @samp{core.repositoryformatversion} を @samp{0}
に設定する必要があります(`1`に設定してもメリットはなく、リポジトリはgitの古い実装と互換性がなくなります)。

このドキュメントは、拡張機能のマスターリストとして機能します。新しい拡張機能を定義したい実装は、名前を主張するために、ここにそれを書き留めておく必要があります。

定義されている拡張機能は以下のとおりです:

@noindent

@subheading noop

この拡張機能は、gitの動作をまったく変更しません。 これは、フォーマット1の互換性をテストする場合にのみ役立ちます。

@noindent

@subheading preciousObjects

設定キー @samp{extensions.preciousObjects} が @samp{true}
に設定されている場合、リポジトリ内のオブジェクトを削除してはなりません(たとえば、 @samp{git-prune} または @samp{git repack -d}
など)。

@noindent

@subheading partialclone

設定キー @samp{extensions.partialclone}
が設定されている場合、リポジトリが部分クローンで作成された(または後で部分フェッチを実行した)こと、およびリモートが特定の不要なオブジェクトの送信を省略した可能性があることを示します。
このようなリモートはpromisor remoteと呼ばれ、将来、このような省略されたオブジェクトをすべてフェッチできることを約束します。

このキーの値は、promisor remoteの名前です。

@noindent

@subheading worktreeConfig

設定されている場合、デフォルトでは、「git
config」はGIT_DIRの「config」ファイルと「config.worktree」ファイルの両方からこの順序で読み取ります。複数の作業ディレクトリモードでは、「config.worktree」が作業ディレクトリごとにある間（つまり、
GIT_COMMON_DIR/worktrees/<id>/config.worktree にあります)、「config」ファイルは共有されます。

@noindent

@chapheading SEE ALSO

git-init(1), git-clone(1), git-fetch(1),
git-pack-refs(1), git-gc(1), git-checkout(1),
gitglossary(7), @uref{user-manual.html,The Git User’s Manual}

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitrevisions,,,Top
@chapheading Name

gitrevisions — Gitのリビジョンと範囲を指定する

@noindent

@chapheading Synopsis

gitrevisions

@noindent

@chapheading DESCRIPTION

多くのGitコマンドは、リビジョンパラメーターを引数として取ります。コマンドに応じて、特定のコミットを示します。リビジョングラフをたどるコマンド(git-log(1)
など)の場合は、そのコミットから到達可能なすべてのコミットを示します。リビジョングラフをたどるコマンドの場合、リビジョンの範囲を明示的に指定することもできます。

さらに、一部のGitコマンド(git-show(1) や git-push(1)
など)は、コミット以外のオブジェクトを示すリビジョンパラメーターを受け取ることもできます。例えば、ブロブ(ファイル)またはツリー(ファイルのディレクトリ)です。

@noindent

@chapheading SPECIFYING REVISIONS

リビジョンパラメータ @emph{<rev>}
は必ずしもそうとは限りませんが、通常はコミットオブジェクトに名前を付けます。これは、いわゆる「拡張SHA-1」構文を使用します。
オブジェクト名を綴るにはさまざまな方法があります。このリストの終わり近くにリストされているものは、コミットに含まれているツリーとブロブに名前を付けています。

@quotation

@strong{Note}

この文書は、gitで見られる「生の」構文を示しています。シェルおよびその他のUIでは、特殊文字を保護し、単語の分割を回避するために、追加の引用符が必要になる場合があります。
@end quotation

@table @asis

@item  @emph{<sha1>} 例: @emph{dae86e1950b1277e545cee180551750029cfe735}, @emph{dae86e} 
完全なSHA-1オブジェクト名(40バイトの16進文字列)、またはリポジトリ内で一意の先頭のsubstring。例えば
dae86e1950b1277e545cee180551750029cfe735 と dae86e はどちらも、リポジトリ内にオブジェクト名が
dae86e で始まる他のオブジェクトがない場合、全く同じコミットオブジェクトに名前を付けます。

@item  @emph{<describeOutput>} 例: @emph{v1.7.4.2-679-g3bee7fb} 
@samp{git describe}
からの出力。つまり、現在のコミットから最も近いタグ。オプションで、ダッシュ(-)とそのタグ以降現在のコミットが何番目になるかの数が続き、その後にダッシュ(-)、「g」、および省略されたオブジェクト名が続きます。

@item  @emph{<refname>} 例: @emph{master}, @emph{heads/master}, @emph{refs/heads/master} 
シンボリックref名。例えば @emph{master} は通常、 @emph{refs/heads/master} によって参照されるコミットオブジェクトを意味します。
@emph{heads/master} と @emph{tags/master} の両方がある場合は、あなたは @emph{heads/master}
と明示的に言って、どちらを意味するかをGitに伝えることができます。 あいまいな場合、 @emph{<refname>}
は、以下のルールから最初の一致を採ることで明確にします:

@enumerate 

@item
もし @emph{$GIT_DIR/<refname>} が存在するならば、それはあなたが指定した通りのものです(これは通常、@samp{HEAD} と
@samp{FETCH_HEAD} と @samp{ORIG_HEAD} と @samp{MERGE_HEAD} と @samp{CHERRY_PICK_HEAD} のみで役に立ちます)

@item
でなければ @emph{refs/<refname>} が存在すればそれを採用します。

@item
でなければ @emph{refs/tags/<refname>} が存在すればそれを採用します。

@item
でなければ @emph{refs/heads/<refname>} が存在すればそれを採用します。

@item
でなければ @emph{refs/remotes/<refname>} が存在すればそれを採用します。

@item
でなければ @emph{refs/remotes/<refname>/HEAD} が存在すればそれを採用します。

@samp{HEAD} は、作業ツリーの変更に基づいたコミットに名前を付けます。 @samp{FETCH_HEAD} は、最後の @samp{git fetch}
呼び出しでリモートリポジトリからフェッチしたブランチを記録します。 @samp{ORIG_HEAD} は、 @samp{HEAD}
を大幅に移動するコマンドによって作成され、操作前の @samp{HEAD}
の位置を記録します。これにより、ブランチの先端を実行前の状態に簡単に戻すことができます。 @samp{MERGE_HEAD} は、 @samp{git
merge`を実行するときにブランチにマージするコミットを記録します。 `CHERRY_PICK_HEAD} は、 @samp{git cherry-pick}
を実行したときにチェリーピックしているコミットを記録します。

注意: 上記の @emph{refs/*} の場合、 @samp{$GIT_DIR/refs} ディレクトリまたは @samp{$GIT_DIR/packed-refs}
ファイルのいずれかから発生する可能性があることに注意してください。ref名のエンコードは指定されていませんが、一部の出力処理ではUTF-8でref名を想定する場合があるため、UTF-8が推奨されます。
@end enumerate

@item  @emph{@@} 
@emph{@@} 単独では @samp{HEAD} のショートカットを意味します。

@item  @emph{[<refname>]@@@{<date>@}} 例: @emph{master@@@{yesterday@}}, @emph{HEAD@@@{5 minutes ago@}} 
refの後に接尾辞 @emph{@@} が続き、日付指定が中括弧のペアで囲まれています(例: @emph{@{yesterday@}} 、 @emph{@{1 month 2 weeks
3 days 1 hour 1 second ago@}} 、@emph{@{1979-02-26
18:30:00@}})。これは以前の時点でのrefの値を指定します。この接尾辞は、ref名の直後にのみ使用でき、refには既存のログ(@emph{$GIT_DIR/logs/<ref>})が必要です。これは、特定の時点での
@strong{ローカル} refの状態を検索することに注意してください。たとえば、先週ローカルの @emph{master}
ブランチに何があったか、です。特定の時間に行われたコミットを確認する場合は、 @samp{--since} と @samp{--until} を参照してください。

@item  @emph{<refname>@@@{<n>@}} 例: @emph{master@@@{1@}} 
refの後に接尾辞 @emph{@@} が続き、数の指定が中括弧のペアで囲まれている場合(たとえば @emph{@{1@}},
@emph{@{15@}})、そのrefのn個前の値を指定します。たとえば @emph{master@@@{1@}} は @emph{master} の直前の値であり、
@emph{master@@@{5@}} は @emph{master}
の5個前の値です。この接頭辞は、ref名の直後にのみ使用でき、refには既存のログ(@emph{$GIT_DIR/logs/<refname>})が必要です。

@item  @emph{@@@{<n>@}} 例: @emph{@@@{1@}} 
空のref部分で @emph{@@} コンストラクトを使用して、現在のブランチのreflogエントリを取得できます。たとえば、あなたがブランチ @emph{blabla}
を使用している場合、 @emph{@@@{1@}} は @emph{blabla@@@{1@}} と同じ意味になります。

@item  @emph{@@@{-<n>@}} 例: @emph{@@@{-1@}} 
構成 @emph{@@@{-<n>@}} は、現在のブランチ/コミットの前にチェックアウトされた<n>番目のブランチ/コミットを意味します。

@item  @emph{[<branchname>]@@@{upstream@}} 例: @emph{master@@@{upstream@}}, @emph{@@@{u@}} 
ブランチ名の接尾辞 @emph{@@@{upstream@}} (短縮形
@emph{<branchname>@@@{u@}})は、branchnameで指定されたブランチの上部に構築するように設定されているブランチを指します(@samp{branch.<name>.remote}
と @samp{branch.<name>.merge}
によって設定されます)。ブランチ名が欠落してい場合は、デフォルトで現在のブランチ名になります。これらの接尾辞は、大文字で綴る場合にも受け入れられ、大文字と小文字を問わず同じ意味になります。

@item  @emph{[<branchname>]@@@{push@}} 例: @emph{master@@@{push@}}, @emph{@@@{push@}} 
接尾辞 @emph{@@@{push@}} は、 @samp{branchname} がチェックアウトされているときに @samp{git push}
が実行された場合(またはブランチ名が指定されていない場合は現在の @samp{HEAD}
)、「プッシュ先」のブランチを報告します。もちろん、プッシュ先はリモートリポジトリにあるため、そのブランチに対応するローカルトラッキングブランチ(つまり、
@samp{refs/remotes/} 内の何か)を報告します。

ここで、よりはっきり分かる例を以下に示します:

@example
$ git config push.default current
$ git config remote.pushdefault myfork
$ git switch -c mybranch origin/master

$ git rev-parse --symbolic-full-name @@@{upstream@}
refs/remotes/origin/master

$ git rev-parse --symbolic-full-name @@@{push@}
refs/remotes/myfork/mybranch
@end example


注意: この例では、ある場所からプルして別の場所にプッシュする三角形のワークフローを設定していることに注意してください。非三角形のワークフローでは、
@emph{@@@{push@}} は @emph{@@@{upstream@}} と同じであり、このようなことをする必要はありません。

この接尾辞は大文字で綴る場合にも受け入れられ、大文字と小文字を問わず同じことを意味します。

@item  @emph{<rev>^[<n>]} 例: @emph{HEAD^, v1.5.1^0} 
リビジョンパラメータの接尾辞 @emph{^} は、そのコミットオブジェクトの最初の親を意味します。 @emph{^<n>} は <n>
番目の親を意味します(つまり、 @emph{<rev>^} は @emph{<rev>^1} と同じです)。特別ルールとして、
@emph{<rev>^0} はコミット自体を意味し、 @emph{<rev>}
がコミットオブジェクトを参照するタグオブジェクトのオブジェクト名である場合に使用されます。

@item  @emph{<rev>~[<n>]} 例: @emph{HEAD~, master~3} 
リビジョンパラメータの接尾辞 @emph{~} は、そのコミットオブジェクトの最初の親を意味します。リビジョンパラメータの接尾辞
@emph{~<n>} は、最初の親のみに続く、指定されたコミットオブジェクトの <n> 世代の祖先であるコミットオブジェクトを意味します。つまり、
@emph{<rev>~3} は @emph{<rev>^^^} と同じで、するってぇと
@emph{<rev>^1^1^1} と同じということです。この形式については以下の図を参照してください。

@item  @emph{<rev>^@{<type>@}} 例: @emph{v0.99.8^@{commit@}} 
接尾辞 @emph{^} の後に中括弧のペアで囲まれたオブジェクトタイプ名が続くということは、タイプ @emph{<type>}
のオブジェクトが見つかるか、オブジェクトを逆参照できなくなるまで、 @emph{<rev>}
でオブジェクトを再帰的に逆参照する(この場合は、いろいろ一旦飲み込んでしまったのを吐きもどすような感じだぬ)ことを意味します。 たとえば、
@emph{<rev>} がコミットっぽい場合、 @emph{<rev>^@{commit@}} は対応するコミットオブジェクトを記述します。同様に、
@emph{<rev>} がツリーっぽい場合、 @emph{<rev>^@{tree@}} は対応するツリーオブジェクトを記述します。
@emph{<rev>^0} は @emph{<rev>^@{commit@}} の省略形です。

@emph{<rev>^@{object@}} を使用すると、 @emph{<rev>} がタグである必要がなく、 @emph{<rev>} を逆参照することなく、
@emph{<rev>}
が存在するオブジェクトに名前を付けることができます。なお、タグはすでにオブジェクトであるため、オブジェクトに到達するために一度も逆参照する必要はありません。

@emph{<rev>^@{tag@}} を使用して、 @emph{<rev>} が既存のタグオブジェクトを確実に識別することができます。

@item  @emph{<rev>^@{@}} 例: @emph{v0.99.8^@{@}} 
接尾辞 @emph{^}
の後に空のブレースペアが続くということは、オブジェクトがタグである可能性があることを意味し、タグ以外のオブジェクトが見つかるまでタグを再帰的に逆参照します。

@item  @emph{<rev>^@{/<text>@}} 例: @emph{HEAD^@{/fix nasty bug@}} 
リビジョンパラメータの接尾辞 @emph{^} と、それに続くスラッシュで始まるテキストを含む中括弧のペアは、以下の @emph{:/fix nasty
bug} 構文と同じですが、 @emph{^} の前の @emph{<rev>} から到達可能な一致する最も若いコミットを返す点が異なります。

@item  @emph{:/<text>} 例: @emph{:/fix nasty bug} 
コロンに続いてスラッシュそしてそれに続くテキストは、コミットメッセージが指定された正規表現と一致するコミットを示します。この名前は、HEADを含む任意のrefから到達可能な最も若い一致するコミットを返します。正規表現は、コミットメッセージの任意の部分に一致できます。文字列で始まるメッセージを照合するには、たとえば、
@emph{:/^foo} とします。特別なシーケンス @emph{:/!} はマッチングの修飾子用に予約されています。ます。 @emph{:/!-foo} は一致の否定を実行し、
@emph{:/!!foo} はリテラル @emph{!} 後に @emph{foo} が続く文字列とマッチします。 @emph{:/!}
で始まるその他のシーケンスは今のところ予約されています。指定されたテキストによっては、シェルにより追加の引用符が必要になる場合があります。

@item  @emph{<rev>:<path>} 例: @emph{HEAD:README}, @emph{master:./README} 
接尾辞 @emph{:}
の後にパス(path)を続けると、コロンの前の部分によって名前が付けられたツリー風のオブジェクト内の、指定されたパスにあるブロブまたはツリーに名前が付けられます。
@emph{./} または @emph{../}
で始まるパスは、現在の作業ディレクトリからの相対パスです。指定のパスは、作業ツリーのルートディレクトリからの相対パスに変換されます。これは、作業ツリーと同じツリー構造を持つコミットまたはツリーからブロブまたはツリーをアドレス指定するのに最も役立ちます。

@item  @emph{:[<n>:]<path>} 例: @emph{:0:README}, @emph{:README} 
コロンに、オプションでステージ番号(0〜3)とコロンが続き、それにパスが続くと、指定されたパスのインデックス内のブロブオブジェクトに名前を付けます。ステージ番号省略(およびそれに続くコロン)は、ステージ0エントリーを示します。マージ作業中、ステージ1は共通の祖先、ステージ2はターゲットブランチのバージョン(通常は現在のブランチ)、ステージ3はマージされるブランチのバージョンです。
@end table

以下はJon Loeligerによる図解です。コミットノードBとCはどちらもコミットノードAの親です。親コミットは左から右に順序付けられます。

@example
G   H   I   J
 \ /     \ /
  D   E   F
   \  |  / \
    \ | /   |
     \|/    |
      B     C
       \   /
        \ /
         A
@end example

@example
A =      = A^0
B = A^   = A^1     = A~1
C =      = A^2
D = A^^  = A^1^1   = A~2
E = B^2  = A^^2
F = B^3  = A^^3
G = A^^^ = A^1^1^1 = A~3
H = D^2  = B^^2    = A^^^2  = A~2^2
I = F^   = B^3^    = A^^3^
J = F^2  = B^3^2   = A^^3^2
@end example

@noindent

@chapheading SPECIFYING RANGES

@samp{git log} などの履歴トラバースコマンドは、単一のコミットだけでなく、一連のコミットで動作します。

これらのコマンドの場合、前のセクションで説明した表記法を使用して単一のリビジョンを指定することは、指定のコミットから「到達可能」なコミットの組を意味します。

複数のリビジョンを指定するということは、指定のコミットのいずれかから到達可能なコミットの組を意味します。

コミットの到達可能な組は、コミット自体とその祖先チェーン内のコミットです。

以下に示すように、接続されたコミット(connected commits)の組(「リビジョン範囲」(revision
range)と呼ばれる)を指定するためのいくつかの表記法があります。

@noindent

@heading Commit Exclusions

@table @asis

@item  @emph{^<rev>} (カレット)記法 
とある到達可能なコミットをコミット達から除外するには、接頭辞 @emph{^} 表記を使用します。 例えば @emph{^r1 r2} は @emph{r2}
から到達可能なコミットだけども、 @emph{r1} から到達可能なコミット(つまり @emph{r1} とその祖先)は除外する事を意味します。
@end table

@noindent

@heading Dotted Range Notations

@table @asis

@item  @emph{..} (2ドット)範囲記法 
@emph{^r1 r2} 操作は頻繁に表示されるため、省略形があります。(上記の SPECIFYING REVISIONS
で説明されている構文に従って名前が付けられている)2つのコミット @emph{r1} と @emph{r2} がある場合、あなたは @emph{^r1 r2}
によってr1から到達可能なコミットを取り除き、r2から到達可能なコミットを要求できます。そしてこれは @emph{r1..r2} と書くことができます。

@item  @emph{...} (3ドット)対称差記法 
似た表記 @emph{r1...r2} は @emph{r1} と @emph{r2} の対称差と呼ばれ、 @emph{r1 r2 --not $(git merge-base --all
r1 r2)} として定義されます。 これは、 @emph{r1} (左側)または @emph{r2}
(右側)のいずれかから到達可能であるが、両方からは到達できないコミットの組です。
@end table

これらの2つの省略表記では、一方の端を省略して、デフォルトでHEADにすることができます。たとえば、 @emph{origin..} は
@emph{origin..HEAD} の省略形であり、「originブランチから分岐(fork)してから何をしましたか？」と尋ねます。 同様に、
@emph{..origin} は @emph{HEAD..origin} の省略形であり、「私がそれらから分岐してから、originは何をしましたか？」と尋ねます。
@emph{..} は @emph{HEAD..HEAD} を意味することに注意してください。これは、HEADから到達可能および到達不能の両方の空の範囲です。

2つの異なる範囲を取るように特別に設計されたコマンド(たとえば、2つの範囲を比較するための "git range-diff R1 R2" )
は存在しますが、それらは例外です。特に明記されていない限り、一連のコミットを操作するすべての "git"
コマンドは、単一のリビジョン範囲で機能します。言い換えると、2つの「2ドット範囲表記」を隣り合わせに記述します。

@example
$ git log A..B C..D
@end example

ほとんどのコマンドでは2つのリビジョン範囲を指定しません。代わりに、接続された単一のコミットの組、つまりBまたはDのいずれかから到達可能であるが、AまたはCのどちらからも到達可能でないコミットの組に名前を付けます。線形履歴では、以下のようになります:

@example
---A---B---o---o---C---D
@end example

AとBはCから到達可能であるため、これら2つの2ドット範囲記法で指定されたリビジョン範囲は単一のコミットDです。

@noindent

@heading Other <rev>^ Parent Shorthand Notations

コミットとその親コミットによって形成される組に名前を付けるために、マージコミットに特に役立つ他の3つの省略形が存在します。

@emph{r1^@@} 表記は、 @emph{r1} のすべての親を意味します。

@emph{r1^!} 表記には コミット @emph{r1} が含まれますが、そのすべての親は除外されます。この表記自体は、単一のコミット @emph{r1}
を示します。

@emph{<rev>^-[<n>]} 表記には @emph{<rev>} が含まれますが、 <n> 番目の親(つまり、
@emph{<rev>^<n>..<rev>} の省略形)は除外されます。 <n> が指定されていない場合は @emph{<n>}= 1
とみなします。これは通常、 @emph{<commit>^-} を渡すだけで、マージコミット @emph{<commit>}(@emph{<commit>}
自体を含む)でマージされたブランチ内のすべてのコミットを取得できるマージコミットに役立ちます。

@emph{<rev>^<n>} は単一のコミット親を指定することに関するものでしたが、これらの3つの表記はその親も考慮します。たとえば、
@emph{HEAD^2^@@} と言うことはできますが、 @emph{HEAD^@@^2} と言うことはできません。

@noindent

@chapheading Revision Range Summary

@table @asis

@item  @emph{<rev>} 
<rev> から到達可能なコミット(つまり <rev> とその祖先)を含めます。

@item  @emph{^<rev>} 
<rev> から到達可能なコミット(つまり <rev> とその祖先)を除外します。

@item  @emph{<rev1>..<rev2>} 
<rev2> から到達可能なコミットを含めますが、 <rev1> から到達可能なコミットは除外します。 <rev1> または <rev2>
のいずれかを省略すると、それらはそれぞれデフォルトで @samp{HEAD} になります。

@item  @emph{<rev1>...<rev2>} 
<rev1> または <rev2> のいずれかから到達可能なコミットを含めますが、両方から到達可能なコミットは除外します。 <rev1> または
<rev2> のいずれかを省略すると、それらはそれぞれデフォルトで @samp{HEAD} になります。

@item  @emph{<rev>^@@} 例: @emph{HEAD^@@} 
接尾辞 @emph{^} の後にアットマーク(@emph{@@})を付けることは、 @emph{<rev>}
のすべての親をリストすることと同じです(つまり、親から到達可能なものはすべて含まれますが、コミット自体は含まれません)。

@item  @emph{<rev>^!} 例: @emph{HEAD^!} 
接尾辞 @emph{^} の後に感嘆符(@emph{!})を付けることは、コミット @emph{<rev>} を指定し、そのすべての親の前に @emph{^}
を付けてそれら(およびその祖先)を除外することと同じです。

@item  @emph{<rev>^-<n>} 例: @emph{HEAD^-, HEAD^-2} 
@emph{<rev>^<n>..<rev>} と同等であり、@emph{<n>} が指定されていない場合は @emph{<n>} = 1 です。
@end table

上記のLoeliger図解を使用したいくつかの例を以下に示します。表記の拡張と選択は、それぞれ段階が分かるようステップを踏んで説明してあります:

@example
   Args   Expanded arguments    Selected commits
   D                            G H D
   D F                          G H I J D F
   ^G D                         H D
   ^D B                         E I J F B
   ^D B C                       E I J F B C
   C                            I J F C
   B..C   = ^B C                C
   B...C  = B ^F C              G H D E B C
   B^-    = B^..B
          = ^B^1 B              E I J F B
   C^@@    = C^1
          = F                   I J F
   B^@@    = B^1 B^2 B^3
          = D E F               D G H E F I J
   C^!    = C ^C^@@
          = C ^C^1
          = C ^F                C
   B^!    = B ^B^@@
          = B ^B^1 ^B^2 ^B^3
          = B ^D ^E ^F          B
   F^! D  = F ^I ^J D           G H D F
@end example

@noindent

@chapheading SEE ALSO

git-rev-parse(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitsubmodules,,,Top
@chapheading Name

gitsubmodules — Mounting one repository inside another

@noindent

@chapheading Synopsis

@example
.gitmodules, $GIT_DIR/config
@end example

@example
git submodule
git <command> --recurse-submodules
@end example


@noindent

@chapheading DESCRIPTION

A submodule is a repository embedded inside another repository.  The
submodule has its own history; the repository it is embedded in is called a
superproject.

On the filesystem, a submodule usually (but not always - see FORMS below)
consists of (i) a Git directory located under the @samp{$GIT_DIR/modules/}
directory of its superproject, (ii) a working directory inside the
superproject’s working directory, and a @samp{.git} file at the root of the
submodule’s working directory pointing to (i).

Assuming the submodule has a Git directory at @samp{$GIT_DIR/modules/foo/} and a
working directory at @samp{path/to/bar/}, the superproject tracks the submodule
via a @samp{gitlink} entry in the tree at @samp{path/to/bar} and an entry in its
@samp{.gitmodules} file (see gitmodules(5)) of the form
@samp{submodule.foo.path = path/to/bar}.

The @samp{gitlink} entry contains the object name of the commit that the
superproject expects the submodule’s working directory to be at.

The section @samp{submodule.foo.*} in the @samp{.gitmodules} file gives additional
hints to Git’s porcelain layer. For example, the @samp{submodule.foo.url} setting
specifies where to obtain the submodule.

Submodules can be used for at least two different use cases:

@enumerate 

@item
Using another project while maintaining independent history.
Submodules allow you to contain the working tree of another project within
your own working tree while keeping the history of both projects
separate. Also, since submodules are fixed to an arbitrary version, the
other project can be independently developed without affecting the
superproject, allowing the superproject project to fix itself to new
versions only when desired.

@item
Splitting a (logically single) project into multiple repositories and tying
them back together. This can be used to overcome current limitations of
Git’s implementation to have finer grained access:

@itemize 

@item
Size of the Git repository: In its current form Git scales up poorly for
large repositories containing content that is not compressed by delta
computation between trees.  For example, you can use submodules to hold
large binary assets and these repositories can be shallowly cloned such that
you do not have a large history locally.

@item
Transfer size: In its current form Git requires the whole working tree
present. It does not allow partial trees to be transferred in fetch or
clone.  If the project you work on consists of multiple repositories tied
together as submodules in a superproject, you can avoid fetching the working
trees of the repositories you are not interested in.

@item
Access control: By restricting user access to submodules, this can be used
to implement read/write policies for different users.
@end itemize
@end enumerate

@noindent

@chapheading The configuration of submodules

Submodule operations can be configured using the following mechanisms (from
highest to lowest precedence):

@itemize 

@item
The command line for those commands that support taking submodules as part
of their pathspecs. Most commands have a boolean flag @samp{--recurse-submodules}
which specify whether to recurse into submodules.  Examples are @samp{grep} and
@samp{checkout}.  Some commands take enums, such as @samp{fetch} and @samp{push}, where you
can specify how submodules are affected.

@item
The configuration inside the submodule. This includes @samp{$GIT_DIR/config} in
the submodule, but also settings in the tree such as a @samp{.gitattributes} or
@samp{.gitignore} files that specify behavior of commands inside the submodule.

For example an effect from the submodule’s @samp{.gitignore} file would be
observed when you run @samp{git status --ignore-submodules=none} in the
superproject. This collects information from the submodule’s working
directory by running @samp{status} in the submodule while paying attention to the
@samp{.gitignore} file of the submodule.

The submodule’s @samp{$GIT_DIR/config} file would come into play when running
@samp{git push --recurse-submodules=check} in the superproject, as this would
check if the submodule has any changes not published to any remote. The
remotes are configured in the submodule as usual in the @samp{$GIT_DIR/config}
file.

@item
The configuration file @samp{$GIT_DIR/config} in the superproject.  Git only
recurses into active submodules (see "ACTIVE SUBMODULES" section below).

If the submodule is not yet initialized, then the configuration inside the
submodule does not exist yet, so where to obtain the submodule from is
configured here for example.

@item
The @samp{.gitmodules} file inside the superproject. A project usually uses this
file to suggest defaults for the upstream collection of repositories for the
mapping that is required between a submodule’s name and its path.

This file mainly serves as the mapping between the name and path of
submodules in the superproject, such that the submodule’s Git directory can
be located.

If the submodule has never been initialized, this is the only place where
submodule configuration is found. It serves as the last fallback to specify
where to obtain the submodule from.
@end itemize

@noindent

@chapheading FORMS

Submodules can take the following forms:

The basic form described in DESCRIPTION with a Git directory, a working
directory, a @samp{gitlink}, and a @samp{.gitmodules} entry.

"Old-form" submodule: A working directory with an embedded @samp{.git} directory,
and the tracking @samp{gitlink} and @samp{.gitmodules} entry in the superproject. This
is typically found in repositories generated using older versions of Git.

+
It is possible to construct these old form repositories manually.

+
When deinitialized or deleted (see below), the submodule’s Git directory is
automatically moved to @samp{$GIT_DIR/modules/<name>/} of the superproject.

Deinitialized submodule: A @samp{gitlink}, and a @samp{.gitmodules} entry, but no
submodule working directory. The submodule’s Git directory may be there as
after deinitializing the Git directory is kept around.  The directory which
is supposed to be the working directory is empty instead.

+
A submodule can be deinitialized by running @samp{git submodule deinit}.  Besides
emptying the working directory, this command only modifies the
superproject’s @samp{$GIT_DIR/config} file, so the superproject’s history is not
affected. This can be undone using @samp{git submodule init}.

Deleted submodule: A submodule can be deleted by running @samp{git rm <submodule
path> && git commit}. This can be undone using @samp{git revert}.

+
The deletion removes the superproject’s tracking data, which are both the
@samp{gitlink} entry and the section in the @samp{.gitmodules} file.  The submodule’s
working directory is removed from the file system, but the Git directory is
kept around as it to make it possible to checkout past commits without
requiring fetching from another repository.

+
To completely remove a submodule, manually delete
@samp{$GIT_DIR/modules/<name>/}.

@noindent

@chapheading ACTIVE SUBMODULES

A submodule is considered active,

@enumerate 

@item
if @samp{submodule.<name>.active} is set to @samp{true}

or

@item
if the submodule’s path matches the pathspec in @samp{submodule.active}

or

@item
if @samp{submodule.<name>.url} is set.
@end enumerate

and these are evaluated in this order.

For example:

@example
[submodule "foo"]
  active = false
  url = https://example.org/foo
[submodule "bar"]
  active = true
  url = https://example.org/bar
[submodule "baz"]
  url = https://example.org/baz
@end example

In the above config only the submodule @emph{bar} and @emph{baz} are active, @emph{bar} due
to (1) and @emph{baz} due to (3). @emph{foo} is inactive because
(1) takes precedence over (3)

Note that (3) is a historical artefact and will be ignored if the
(1) and (2) specify that the submodule is not active. In other words, if we have
a @samp{submodule.<name>.active} set to @samp{false} or if the submodule’s path is
excluded in the pathspec in @samp{submodule.active}, the url doesn’t matter
whether it is present or not. This is illustrated in the example that
follows.

@example
[submodule "foo"]
  active = true
  url = https://example.org/foo
[submodule "bar"]
  url = https://example.org/bar
[submodule "baz"]
  url = https://example.org/baz
[submodule "bob"]
  ignore = true
[submodule]
  active = b*
  active = :(exclude) baz
@end example

In here all submodules except @emph{baz} (foo, bar, bob) are active.  @emph{foo} due
to its own active flag and all the others due to the submodule active
pathspec, which specifies that any submodule starting with @emph{b} except @emph{baz}
are also active, regardless of the presence of the .url field.

@noindent

@chapheading Workflow for a third party library

@example
# Add a submodule
git submodule add <url> <path>
@end example

@example
# Occasionally update the submodule to a new version:
git -C <path> checkout <new version>
git add <path>
git commit -m "update submodule to new version"
@end example

@example
# See the list of submodules in a superproject
git submodule status
@end example

@example
# See FORMS on removing submodules
@end example

@noindent

@chapheading Workflow for an artificially split repo

@example
# Enable recursion for relevant commands, such that
# regular commands recurse into submodules by default
git config --global submodule.recurse true
@end example

@example
# Unlike most other commands below, clone still needs
# its own recurse flag:
git clone --recurse <URL> <directory>
cd <directory>
@end example

@example
# Get to know the code:
git grep foo
git ls-files --recurse-submodules
@end example

@quotation

@strong{Note}

@samp{git ls-files} also requires its own @samp{--recurse-submodules} flag.
@end quotation

@example
# Get new code
git fetch
git pull --rebase
@end example

@example
# Change worktree
git checkout
git reset
@end example

@noindent

@chapheading Implementation details

When cloning or pulling a repository containing submodules the submodules
will not be checked out by default; you can instruct @samp{clone} to recurse into
submodules. The @samp{init} and @samp{update} subcommands of @samp{git submodule} will
maintain submodules checked out and at an appropriate revision in your
working tree. Alternatively you can set @samp{submodule.recurse} to have
@samp{checkout} recursing into submodules (note that @samp{submodule.recurse} also
affects other Git commands, see git-config(1) for a complete list).

@noindent

@chapheading SEE ALSO

git-submodule(1), gitmodules(5).

@noindent

@chapheading GIT

Part of the git(1) suite

@node gittutorial-2,,,Top
@chapheading Name

gittutorial-2 — A tutorial introduction to Git: part two

@noindent

@chapheading Synopsis

@display
git *
@end display


@noindent

@chapheading DESCRIPTION

You should work through gittutorial(7) before reading this tutorial.

The goal of this tutorial is to introduce two fundamental pieces of Git’s
architecture—the object database and the index file—and to provide the
reader with everything necessary to understand the rest of the Git
documentation.

@noindent

@chapheading The Git object database

Let’s start a new project and create a small amount of history:

@example
$ mkdir test-project
$ cd test-project
$ git init
Initialized empty Git repository in .git/
$ echo 'hello world' > file.txt
$ git add .
$ git commit -a -m "initial commit"
[master (root-commit) 54196cc] initial commit
 1 file changed, 1 insertion(+)
 create mode 100644 file.txt
$ echo 'hello world!' >file.txt
$ git commit -a -m "add emphasis"
[master c4d59f3] add emphasis
 1 file changed, 1 insertion(+), 1 deletion(-)
@end example


What are the 7 digits of hex that Git responded to the commit with?

We saw in part one of the tutorial that commits have names like this.  It
turns out that every object in the Git history is stored under a 40-digit
hex name.  That name is the SHA-1 hash of the object’s contents; among other
things, this ensures that Git will never store the same data twice (since
identical data is given an identical SHA-1 name), and that the contents of a
Git object will never change (since that would change the object’s name as
well). The 7 char hex strings here are simply the abbreviation of such 40
character long strings.  Abbreviations can be used everywhere where the 40
character strings can be used, so long as they are unambiguous.

It is expected that the content of the commit object you created while
following the example above generates a different SHA-1 hash than the one
shown above because the commit object records the time when it was created
and the name of the person performing the commit.

We can ask Git about this particular object with the @samp{cat-file}
command. Don’t copy the 40 hex digits from this example but use those from
your own version. Note that you can shorten it to only a few characters to
save yourself typing all 40 hex digits:

@example
$ git cat-file -t 54196cc2
commit
$ git cat-file commit 54196cc2
tree 92b8b694ffb1675e5975148e1121810081dbdffe
author J. Bruce Fields <bfields@@puzzle.fieldses.org> 1143414668 -0500
committer J. Bruce Fields <bfields@@puzzle.fieldses.org> 1143414668 -0500

initial commit
@end example


A tree can refer to one or more "blob" objects, each corresponding to a
file.  In addition, a tree can also refer to other tree objects, thus
creating a directory hierarchy.  You can examine the contents of any tree
using ls-tree (remember that a long enough initial portion of the SHA-1 will
also work):

@example
$ git ls-tree 92b8b694
100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad    file.txt
@end example


Thus we see that this tree has one file in it.  The SHA-1 hash is a
reference to that file’s data:

@example
$ git cat-file -t 3b18e512
blob
@end example


A "blob" is just file data, which we can also examine with cat-file:

@example
$ git cat-file blob 3b18e512
hello world
@end example


Note that this is the old file data; so the object that Git named in its
response to the initial tree was a tree with a snapshot of the directory
state that was recorded by the first commit.

All of these objects are stored under their SHA-1 names inside the Git
directory:

@example
$ find .git/objects/
.git/objects/
.git/objects/pack
.git/objects/info
.git/objects/3b
.git/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad
.git/objects/92
.git/objects/92/b8b694ffb1675e5975148e1121810081dbdffe
.git/objects/54
.git/objects/54/196cc2703dc165cbd373a65a4dcf22d50ae7f7
.git/objects/a0
.git/objects/a0/423896973644771497bdc03eb99d5281615b51
.git/objects/d0
.git/objects/d0/492b368b66bdabf2ac1fd8c92b39d3db916e59
.git/objects/c4
.git/objects/c4/d59f390b9cfd4318117afde11d601c1085f241
@end example


and the contents of these files is just the compressed data plus a header
identifying their length and their type.  The type is either a blob, a tree,
a commit, or a tag.

The simplest commit to find is the HEAD commit, which we can find from
.git/HEAD:

@example
$ cat .git/HEAD
ref: refs/heads/master
@end example


As you can see, this tells us which branch we’re currently on, and it tells
us this by naming a file under the .git directory, which itself contains a
SHA-1 name referring to a commit object, which we can examine with cat-file:

@example
$ cat .git/refs/heads/master
c4d59f390b9cfd4318117afde11d601c1085f241
$ git cat-file -t c4d59f39
commit
$ git cat-file commit c4d59f39
tree d0492b368b66bdabf2ac1fd8c92b39d3db916e59
parent 54196cc2703dc165cbd373a65a4dcf22d50ae7f7
author J. Bruce Fields <bfields@@puzzle.fieldses.org> 1143418702 -0500
committer J. Bruce Fields <bfields@@puzzle.fieldses.org> 1143418702 -0500

add emphasis
@end example


The "tree" object here refers to the new state of the tree:

@example
$ git ls-tree d0492b36
100644 blob a0423896973644771497bdc03eb99d5281615b51    file.txt
$ git cat-file blob a0423896
hello world!
@end example


and the "parent" object refers to the previous commit:

@example
$ git cat-file commit 54196cc2
tree 92b8b694ffb1675e5975148e1121810081dbdffe
author J. Bruce Fields <bfields@@puzzle.fieldses.org> 1143414668 -0500
committer J. Bruce Fields <bfields@@puzzle.fieldses.org> 1143414668 -0500

initial commit
@end example


The tree object is the tree we examined first, and this commit is unusual in
that it lacks any parent.

Most commits have only one parent, but it is also common for a commit
to have multiple parents.   In that case the commit represents a
merge, with the parent references pointing to the heads of the merged
branches.

Besides blobs, trees, and commits, the only remaining type of object is a
"tag", which we won’t discuss here; refer to git-tag(1) for details.

So now we know how Git uses the object database to represent a project’s
history:

@itemize 

@item
"commit" objects refer to "tree" objects representing the snapshot of a
directory tree at a particular point in the history, and refer to "parent"
commits to show how they’re connected into the project history.

@item
"tree" objects represent the state of a single directory, associating
directory names to "blob" objects containing file data and "tree" objects
containing subdirectory information.

@item
"blob" objects contain file data without any other structure.

@item
References to commit objects at the head of each branch are stored in files
under .git/refs/heads/.

@item
The name of the current branch is stored in .git/HEAD.
@end itemize

Note, by the way, that lots of commands take a tree as an argument.  But as
we can see above, a tree can be referred to in many different ways—by the
SHA-1 name for that tree, by the name of a commit that refers to the tree,
by the name of a branch whose head refers to that tree, etc.--and most such
commands can accept any of these names.

In command synopses, the word "tree-ish" is sometimes used to designate such
an argument.

@noindent

@chapheading The index file

The primary tool we’ve been using to create commits is @samp{git-commit -a},
which creates a commit including every change you’ve made to your working
tree.  But what if you want to commit changes only to certain files? Or only
certain changes to certain files?

If we look at the way commits are created under the cover, we’ll see that
there are more flexible ways creating commits.

Continuing with our test-project, let’s modify file.txt again:

@example
$ echo "hello world, again" >>file.txt
@end example


but this time instead of immediately making the commit, let’s take an
intermediate step, and ask for diffs along the way to keep track of what’s
happening:

@example
$ git diff
--- a/file.txt
+++ b/file.txt
@@@@ -1 +1,2 @@@@
 hello world!
+hello world, again
$ git add file.txt
$ git diff
@end example


The last diff is empty, but no new commits have been made, and the head
still doesn’t contain the new line:

@example
$ git diff HEAD
diff --git a/file.txt b/file.txt
index a042389..513feba 100644
--- a/file.txt
+++ b/file.txt
@@@@ -1 +1,2 @@@@
 hello world!
+hello world, again
@end example


So @emph{git diff} is comparing against something other than the head.  The thing
that it’s comparing against is actually the index file, which is stored in
.git/index in a binary format, but whose contents we can examine with
ls-files:

@example
$ git ls-files --stage
100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file.txt
$ git cat-file -t 513feba2
blob
$ git cat-file blob 513feba2
hello world!
hello world, again
@end example


So what our @emph{git add} did was store a new blob and then put a reference to
it in the index file.  If we modify the file again, we’ll see that the new
modifications are reflected in the @emph{git diff} output:

@example
$ echo 'again?' >>file.txt
$ git diff
index 513feba..ba3da7b 100644
--- a/file.txt
+++ b/file.txt
@@@@ -1,2 +1,3 @@@@
 hello world!
 hello world, again
+again?
@end example


With the right arguments, @emph{git diff} can also show us the difference between
the working directory and the last commit, or between the index and the last
commit:

@example
$ git diff HEAD
diff --git a/file.txt b/file.txt
index a042389..ba3da7b 100644
--- a/file.txt
+++ b/file.txt
@@@@ -1 +1,3 @@@@
 hello world!
+hello world, again
+again?
$ git diff --cached
diff --git a/file.txt b/file.txt
index a042389..513feba 100644
--- a/file.txt
+++ b/file.txt
@@@@ -1 +1,2 @@@@
 hello world!
+hello world, again
@end example


At any time, we can create a new commit using @emph{git commit} (without the "-a"
option), and verify that the state committed only includes the changes
stored in the index file, not the additional change that is still only in
our working tree:

@example
$ git commit -m "repeat"
$ git diff HEAD
diff --git a/file.txt b/file.txt
index 513feba..ba3da7b 100644
--- a/file.txt
+++ b/file.txt
@@@@ -1,2 +1,3 @@@@
 hello world!
 hello world, again
+again?
@end example


So by default @emph{git commit} uses the index to create the commit, not the
working tree; the "-a" option to commit tells it to first update the index
with all changes in the working tree.

Finally, it’s worth looking at the effect of @emph{git add} on the index file:

@example
$ echo "goodbye, world" >closing.txt
$ git add closing.txt
@end example


The effect of the @emph{git add} was to add one entry to the index file:

@example
$ git ls-files --stage
100644 8b9743b20d4b15be3955fc8d5cd2b09cd2336138 0       closing.txt
100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file.txt
@end example


And, as you can see with cat-file, this new entry refers to the current
contents of the file:

@example
$ git cat-file blob 8b9743b2
goodbye, world
@end example


The "status" command is a useful way to get a quick summary of the
situation:

@example
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)

        new file:   closing.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)

        modified:   file.txt
@end example


Since the current state of closing.txt is cached in the index file, it is
listed as "Changes to be committed".  Since file.txt has changes in the
working directory that aren’t reflected in the index, it is marked "changed
but not updated".  At this point, running "git commit" would create a commit
that added closing.txt (with its new contents), but that didn’t modify
file.txt.

Also, note that a bare @samp{git diff} shows the changes to file.txt, but not the
addition of closing.txt, because the version of closing.txt in the index
file is identical to the one in the working directory.

In addition to being the staging area for new commits, the index file is
also populated from the object database when checking out a branch, and is
used to hold the trees involved in a merge operation.  See
gitcore-tutorial(7) and the relevant man pages for details.

@noindent

@chapheading What next?

At this point you should know everything necessary to read the man pages for
any of the git commands; one good place to start would be with the commands
mentioned in giteveryday(7).  You should be able to find any unknown
jargon in gitglossary(7).

The @uref{user-manual.html,Git User’s Manual} provides a more comprehensive
introduction to Git.

gitcvs-migration(7) explains how to import a CVS repository into
Git, and shows how to use Git in a CVS-like way.

For some interesting examples of Git use, see the
@uref{howto-index.html,howtos}.

For Git developers, gitcore-tutorial(7) goes into detail on the
lower-level Git mechanisms involved in, for example, creating a new commit.

@noindent

@chapheading SEE ALSO

gittutorial(7), gitcvs-migration(7),
gitcore-tutorial(7), gitglossary(7), git-help(1),
giteveryday(7), @uref{user-manual.html,The Git User’s Manual}

@noindent

@chapheading GIT

Part of the git(1) suite

@node gittutorial,,,Top
@chapheading Name

gittutorial — Git入門

@noindent

@chapheading Synopsis

@display
git *
@end display


@noindent

@chapheading DESCRIPTION

このチュートリアルでは、新しいプロジェクトをGitにインポートし、変更を加え、他の開発者と変更を共有する方法について説明します。

Gitを使用してプロジェクトをフェッチする方に主な関心がある場合、たとえば、最新バージョンをテストする場合は、
@uref{user-manual.html,The Git User’s Manual} の最初の2つの章から始めることをお勧めします。

注意: まず最初に、 あなたは @samp{git log --graph} などのコマンドの文書を以下のようにして入手する事ができます:

@example
$ man git-log
@end example


または:

@example
$ git help log
@end example


後者では。あなたが選択したマニュアルビューアを使用できます。詳細については git-help(1) を参照してください。

操作を行う前に、名前と公開メールアドレスを使用してあなた自身をGitに紹介する(introduce
yourself)ことをお勧めします。これを行う最も簡単な方法は以下のとおりです:

@example
$ git config --global user.name "Your Name Comes Here"
$ git config --global user.email you@@yourdomain.example.com
@end example


@noindent

@chapheading Importing a new project

既にtarball project.tar.gz があると仮定します。あなたは以下にしてそれをGitリビジョン管理下に置くことができます。

@example
$ tar xzf project.tar.gz
$ cd project
$ git init
@end example


Gitは以下のメッセージを返すでしょう

@example
Initialized empty Git repository in .git/
@end example


これで作業ディレクトリが初期化されました。あなたは ".git" という名前の新しいディレクトリが作成されていることに気付くかもしれません。

次に、Gitに、現在のディレクトリ(@emph{.} に注意)の下にあるすべてのファイルの内容のスナップショットを「git add」で取得するように指示します:

@example
$ git add .
@end example


このスナップショットは、Gitが「インデックス」と呼ぶ一時的な足場領域(temporary staging area)に保存されました。 @emph{git
commit} を使用して、インデックスの内容をリポジトリに永続的に保存できます:

@example
$ git commit
@end example


これにより、コミットメッセージの入力を求められます。 これで、プロジェクトの最初のバージョンがGitに保存されました。

@noindent

@chapheading Making changes

いくつかのファイルを変更してから、更新された内容をインデックスに追加します:

@example
$ git add file1 file2 file3
@end example


これで、コミットする準備ができました。 @samp{--cached} オプションを指定した「git
diff」を使用して、何がコミットされようとしているのかを確認できます:

@example
$ git diff --cached
@end example


(@samp{--cached} を指定しない場合、「git diff」は、編集を行ったがまだインデックスに追加されていない変更を表示します。）あなたは「git
status」を使用して状況の簡単な要約を取得することもできます:

@example
$ git status
On branch master
Changes to be committed:
Your branch is up to date with 'origin/master'.
  (use "git restore --staged <file>..." to unstage)

        modified:   file1
        modified:   file2
        modified:   file3
@end example


If you need to make any further adjustments, do so now, and then add any
newly modified content to the index.  Finally, commit your changes with:

@example
$ git commit
@end example


This will again prompt you for a message describing the change, and then
record a new version of the project.

Alternatively, instead of running @emph{git add} beforehand, you can use

@example
$ git commit -a
@end example


which will automatically notice any modified (but not new) files, add them
to the index, and commit, all in one step.

A note on commit messages: Though not required, it’s a good idea to begin
the commit message with a single short (less than 50 character)  line
summarizing the change, followed by a blank line and then a more thorough
description. The text up to the first blank line in a commit message is
treated as the commit title, and that title is used throughout Git.  For
example, git-format-patch(1) turns a commit into email, and it uses
the title on the Subject line and the rest of the commit in the body.

@noindent

@chapheading Git tracks content not files

Many revision control systems provide an @samp{add} command that tells the system
to start tracking changes to a new file.  Git’s @samp{add} command does something
simpler and more powerful: @emph{git add} is used both for new and newly modified
files, and in both cases it takes a snapshot of the given files and stages
that content in the index, ready for inclusion in the next commit.

@noindent

@chapheading Viewing project history

At any point you can view the history of your changes using

@example
$ git log
@end example


If you also want to see complete diffs at each step, use

@example
$ git log -p
@end example


Often the overview of the change is useful to get a feel of each step

@example
$ git log --stat --summary
@end example


@noindent

@chapheading Managing branches

A single Git repository can maintain multiple branches of development.  To
create a new branch named "experimental", use

@example
$ git branch experimental
@end example


If you now run

@example
$ git branch
@end example


you’ll get a list of all existing branches:

@example
  experimental
* master
@end example


The "experimental" branch is the one you just created, and the "master"
branch is a default branch that was created for you automatically.  The
asterisk marks the branch you are currently on; type

@example
$ git switch experimental
@end example


to switch to the experimental branch.  Now edit a file, commit the change,
and switch back to the master branch:

@example
(edit file)
$ git commit -a
$ git switch master
@end example


Check that the change you made is no longer visible, since it was made on
the experimental branch and you’re back on the master branch.

You can make a different change on the master branch:

@example
(edit file)
$ git commit -a
@end example


at this point the two branches have diverged, with different changes made in
each.  To merge the changes made in experimental into master, run

@example
$ git merge experimental
@end example


If the changes don’t conflict, you’re done.  If there are conflicts, markers
will be left in the problematic files showing the conflict;

@example
$ git diff
@end example


will show this.  Once you’ve edited the files to resolve the conflicts,

@example
$ git commit -a
@end example


will commit the result of the merge. Finally,

@example
$ gitk
@end example


will show a nice graphical representation of the resulting history.

At this point you could delete the experimental branch with

@example
$ git branch -d experimental
@end example


This command ensures that the changes in the experimental branch are already
in the current branch.

If you develop on a branch crazy-idea, then regret it, you can always delete
the branch with

@example
$ git branch -D crazy-idea
@end example


Branches are cheap and easy, so this is a good way to try something out.

@noindent

@chapheading Using Git for collaboration

Suppose that Alice has started a new project with a Git repository in
/home/alice/project, and that Bob, who has a home directory on the same
machine, wants to contribute.

Bob begins with:

@example
bob$ git clone /home/alice/project myrepo
@end example


This creates a new directory "myrepo" containing a clone of Alice’s
repository.  The clone is on an equal footing with the original project,
possessing its own copy of the original project’s history.

Bob then makes some changes and commits them:

@example
(edit files)
bob$ git commit -a
(repeat as necessary)
@end example


When he’s ready, he tells Alice to pull changes from the repository at
/home/bob/myrepo.  She does this with:

@example
alice$ cd /home/alice/project
alice$ git pull /home/bob/myrepo master
@end example


This merges the changes from Bob’s "master" branch into Alice’s current
branch.  If Alice has made her own changes in the meantime, then she may
need to manually fix any conflicts.

The "pull" command thus performs two operations: it fetches changes from a
remote branch, then merges them into the current branch.

Note that in general, Alice would want her local changes committed before
initiating this "pull".  If Bob’s work conflicts with what Alice did since
their histories forked, Alice will use her working tree and the index to
resolve conflicts, and existing local changes will interfere with the
conflict resolution process (Git will still perform the fetch but will
refuse to merge — Alice will have to get rid of her local changes in some
way and pull again when this happens).

Alice can peek at what Bob did without merging first, using the "fetch"
command; this allows Alice to inspect what Bob did, using a special symbol
"FETCH_HEAD", in order to determine if he has anything worth pulling, like
this:

@example
alice$ git fetch /home/bob/myrepo master
alice$ git log -p HEAD..FETCH_HEAD
@end example


This operation is safe even if Alice has uncommitted local changes.  The
range notation "HEAD..FETCH_HEAD" means "show everything that is reachable
from the FETCH_HEAD but exclude anything that is reachable from HEAD".
Alice already knows everything that leads to her current state (HEAD), and
reviews what Bob has in his state (FETCH_HEAD) that she has not seen with
this command.

If Alice wants to visualize what Bob did since their histories forked she
can issue the following command:

@example
$ gitk HEAD..FETCH_HEAD
@end example


This uses the same two-dot range notation we saw earlier with @emph{git log}.

Alice may want to view what both of them did since they forked.  She can use
three-dot form instead of the two-dot form:

@example
$ gitk HEAD...FETCH_HEAD
@end example


This means "show everything that is reachable from either one, but exclude
anything that is reachable from both of them".

Please note that these range notation can be used with both gitk and "git
log".

After inspecting what Bob did, if there is nothing urgent, Alice may decide
to continue working without pulling from Bob.  If Bob’s history does have
something Alice would immediately need, Alice may choose to stash her
work-in-progress first, do a "pull", and then finally unstash her
work-in-progress on top of the resulting history.

When you are working in a small closely knit group, it is not unusual to
interact with the same repository over and over again.  By defining @emph{remote}
repository shorthand, you can make it easier:

@example
alice$ git remote add bob /home/bob/myrepo
@end example


With this, Alice can perform the first part of the "pull" operation alone
using the @emph{git fetch} command without merging them with her own branch,
using:

@example
alice$ git fetch bob
@end example


Unlike the longhand form, when Alice fetches from Bob using a remote
repository shorthand set up with @emph{git remote}, what was fetched is stored in
a remote-tracking branch, in this case @samp{bob/master}.  So after this:

@example
alice$ git log -p master..bob/master
@end example


shows a list of all the changes that Bob made since he branched from Alice’s
master branch.

After examining those changes, Alice could merge the changes into her master
branch:

@example
alice$ git merge bob/master
@end example


This @samp{merge} can also be done by @emph{pulling from her own remote-tracking
branch}, like this:

@example
alice$ git pull . remotes/bob/master
@end example


Note that git pull always merges into the current branch, regardless of what
else is given on the command line.

Later, Bob can update his repo with Alice’s latest changes using

@example
bob$ git pull
@end example


Note that he doesn’t need to give the path to Alice’s repository; when Bob
cloned Alice’s repository, Git stored the location of her repository in the
repository configuration, and that location is used for pulls:

@example
bob$ git config --get remote.origin.url
/home/alice/project
@end example


(The complete configuration created by @emph{git clone} is visible using @samp{git
config -l}, and the git-config(1) man page explains the meaning of
each option.)

Git also keeps a pristine copy of Alice’s master branch under the name
"origin/master":

@example
bob$ git branch -r
  origin/master
@end example


If Bob later decides to work from a different host, he can still perform
clones and pulls using the ssh protocol:

@example
bob$ git clone alice.org:/home/alice/project myrepo
@end example


Alternatively, Git has a native protocol, or can use http; see
git-pull(1) for details.

Git can also be used in a CVS-like mode, with a central repository that
various users push changes to; see git-push(1) and
gitcvs-migration(7).

@noindent

@chapheading Exploring history

Git history is represented as a series of interrelated commits.  We have
already seen that the @emph{git log} command can list those commits.  Note that
first line of each git log entry also gives a name for the commit:

@example
$ git log
commit c82a22c39cbc32576f64f5c6b3f24b99ea8149c7
Author: Junio C Hamano <junkio@@cox.net>
Date:   Tue May 16 17:18:22 2006 -0700

    merge-base: Clarify the comments on post processing.
@end example


We can give this name to @emph{git show} to see the details about this commit.

@example
$ git show c82a22c39cbc32576f64f5c6b3f24b99ea8149c7
@end example


But there are other ways to refer to commits.  You can use any initial part
of the name that is long enough to uniquely identify the commit:

@example
$ git show c82a22c39c   # the first few characters of the name are
                        # usually enough
$ git show HEAD         # the tip of the current branch
$ git show experimental # the tip of the "experimental" branch
@end example


Every commit usually has one "parent" commit which points to the previous
state of the project:

@example
$ git show HEAD^  # to see the parent of HEAD
$ git show HEAD^^ # to see the grandparent of HEAD
$ git show HEAD~4 # to see the great-great grandparent of HEAD
@end example


Note that merge commits may have more than one parent:

@example
$ git show HEAD^1 # show the first parent of HEAD (same as HEAD^)
$ git show HEAD^2 # show the second parent of HEAD
@end example


You can also give commits names of your own; after running

@example
$ git tag v2.5 1b2e1d63ff
@end example


you can refer to 1b2e1d63ff by the name "v2.5".  If you intend to share this
name with other people (for example, to identify a release version), you
should create a "tag" object, and perhaps sign it; see git-tag(1)
for details.

Any Git command that needs to know a commit can take any of these names.
For example:

@example
$ git diff v2.5 HEAD     # compare the current HEAD to v2.5
$ git branch stable v2.5 # start a new branch named "stable" based
                         # at v2.5
$ git reset --hard HEAD^ # reset your current branch and working
                         # directory to its state at HEAD^
@end example


Be careful with that last command: in addition to losing any changes in the
working directory, it will also remove all later commits from this branch.
If this branch is the only branch containing those commits, they will be
lost.  Also, don’t use @emph{git reset} on a publicly-visible branch that other
developers pull from, as it will force needless merges on other developers
to clean up the history.  If you need to undo changes that you have pushed,
use @emph{git revert} instead.

The @emph{git grep} command can search for strings in any version of your
project, so

@example
$ git grep "hello" v2.5
@end example


searches for all occurrences of "hello" in v2.5.

If you leave out the commit name, @emph{git grep} will search any of the files it
manages in your current directory.  So

@example
$ git grep "hello"
@end example


is a quick way to search just the files that are tracked by Git.

Many Git commands also take sets of commits, which can be specified in a
number of ways.  Here are some examples with @emph{git log}:

@example
$ git log v2.5..v2.6            # commits between v2.5 and v2.6
$ git log v2.5..                # commits since v2.5
$ git log --since="2 weeks ago" # commits from the last 2 weeks
$ git log v2.5.. Makefile       # commits since v2.5 which modify
                                # Makefile
@end example


You can also give @emph{git log} a "range" of commits where the first is not
necessarily an ancestor of the second; for example, if the tips of the
branches "stable" and "master" diverged from a common commit some time ago,
then

@example
$ git log stable..master
@end example


will list commits made in the master branch but not in the stable branch,
while

@example
$ git log master..stable
@end example


will show the list of commits made on the stable branch but not the master
branch.

The @emph{git log} command has a weakness: it must present commits in a list.
When the history has lines of development that diverged and then merged back
together, the order in which @emph{git log} presents those commits is
meaningless.

Most projects with multiple contributors (such as the Linux kernel, or Git
itself) have frequent merges, and @emph{gitk} does a better job of visualizing
their history.  For example,

@example
$ gitk --since="2 weeks ago" drivers/
@end example


allows you to browse any commits from the last 2 weeks of commits that
modified files under the "drivers" directory.  (Note: you can adjust gitk’s
fonts by holding down the control key while pressing "-" or "+".)

Finally, most commands that take filenames will optionally allow you to
precede any filename by a commit, to specify a particular version of the
file:

@example
$ git diff v2.5:Makefile HEAD:Makefile.in
@end example


You can also use @emph{git show} to see any such file:

@example
$ git show v2.5:Makefile
@end example


@noindent

@chapheading Next Steps

This tutorial should be enough to perform basic distributed revision control
for your projects.  However, to fully understand the depth and power of Git
you need to understand two simple ideas on which it is based:

@itemize 

@item
The object database is the rather elegant system used to store the history
of your project—files, directories, and commits.

@item
The index file is a cache of the state of a directory tree, used to create
commits, check out working directories, and hold the various trees involved
in a merge.
@end itemize

Part two of this tutorial explains the object database, the index file, and
a few other odds and ends that you’ll need to make the most of Git. You can
find it at gittutorial-2(7).

If you don’t want to continue with that right away, a few other digressions
that may be interesting at this point are:

@itemize 

@item
git-format-patch(1), git-am(1): These convert series of git
commits into emailed patches, and vice versa, useful for projects such as
the Linux kernel which rely heavily on emailed patches.

@item
git-bisect(1): When there is a regression in your project, one way
to track down the bug is by searching through the history to find the exact
commit that’s to blame.  Git bisect can help you perform a binary search for
that commit.  It is smart enough to perform a close-to-optimal search even
in the case of complex non-linear history with lots of merged branches.

@item
gitworkflows(7): Gives an overview of recommended workflows.

@item
giteveryday(7): Everyday Git with 20 Commands Or So.

@item
gitcvs-migration(7): Git for CVS users.
@end itemize

@noindent

@chapheading SEE ALSO

gittutorial-2(7), gitcvs-migration(7),
gitcore-tutorial(7), gitglossary(7), git-help(1),
gitworkflows(7), giteveryday(7), @uref{user-manual.html,The Git User’s Manual}

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitweb.conf,,,Top
@chapheading Name

gitweb.conf — Gitweb (Git web interface) configuration file

@noindent

@chapheading Synopsis

/etc/gitweb.conf, /etc/gitweb-common.conf, $GITWEBDIR/gitweb_config.perl

@noindent

@chapheading DESCRIPTION

The gitweb CGI script for viewing Git repositories over the web uses a perl
script fragment as its configuration file.  You can set variables using
"@samp{our $variable = value}"; text from a "#" character until the end of a line
is ignored.  See @strong{perlsyn}(1) for details.

An example:

@example
# gitweb configuration file for http://git.example.org
#
our $projectroot = "/srv/git"; # FHS recommendation
our $site_name = 'Example.org >> Repos';
@end example


The configuration file is used to override the default settings that were
built into gitweb at the time the @emph{gitweb.cgi} script was generated.

While one could just alter the configuration settings in the gitweb CGI
itself, those changes would be lost upon upgrade.  Configuration settings
might also be placed into a file in the same directory as the CGI script
with the default name @emph{gitweb_config.perl} — allowing one to have multiple
gitweb instances with different configurations by the use of symlinks.

Note that some configuration can be controlled on per-repository rather than
gitweb-wide basis: see "Per-repository gitweb configuration" subsection on
gitweb(1) manpage.

@noindent

@chapheading DISCUSSION

Gitweb reads configuration data from the following sources in the following
order:

@itemize 

@item
built-in values (some set during build stage),

@item
common system-wide configuration file (defaults to
@samp{/etc/gitweb-common.conf}),

@item
either per-instance configuration file (defaults to @emph{gitweb_config.perl} in
the same directory as the installed gitweb), or if it does not exists then
fallback system-wide configuration file (defaults to @samp{/etc/gitweb.conf}).
@end itemize

Values obtained in later configuration files override values obtained
earlier in the above sequence.

Locations of the common system-wide configuration file, the fallback
system-wide configuration file and the per-instance configuration file are
defined at compile time using build-time Makefile configuration variables,
respectively @samp{GITWEB_CONFIG_COMMON}, @samp{GITWEB_CONFIG_SYSTEM} and
@samp{GITWEB_CONFIG}.

You can also override locations of gitweb configuration files during runtime
by setting the following environment variables: @samp{GITWEB_CONFIG_COMMON},
@samp{GITWEB_CONFIG_SYSTEM} and @samp{GITWEB_CONFIG} to a non-empty value.

The syntax of the configuration files is that of Perl, since these files are
handled by sourcing them as fragments of Perl code (the language that gitweb
itself is written in). Variables are typically set using the @samp{our} qualifier
(as in "@samp{our $variable = <value>;}") to avoid syntax errors if a new version
of gitweb no longer uses a variable and therefore stops declaring it.

You can include other configuration file using read_config_file()
subroutine.  For example, one might want to put gitweb configuration related
to access control for viewing repositories via Gitolite (one of Git
repository management tools) in a separate file, e.g. in
@samp{/etc/gitweb-gitolite.conf}.  To include it, put

@example
read_config_file("/etc/gitweb-gitolite.conf");
@end example


somewhere in gitweb configuration file used, e.g. in per-installation gitweb
configuration file.  Note that read_config_file() checks itself that the
file it reads exists, and does nothing if it is not found.  It also handles
errors in included file.

The default configuration with no configuration file at all may work
perfectly well for some installations.  Still, a configuration file is
useful for customizing or tweaking the behavior of gitweb in many ways, and
some optional features will not be present unless explicitly enabled using
the configurable @samp{%features} variable (see also "Configuring gitweb
features" section below).

@noindent

@chapheading CONFIGURATION VARIABLES

Some configuration variables have their default values (embedded in the CGI
script) set during building gitweb — if that is the case, this fact is put
in their description.  See gitweb’s @emph{INSTALL} file for instructions on
building and installing gitweb.

@noindent

@heading Location of repositories

The configuration variables described below control how gitweb finds Git
repositories, and how repositories are displayed and accessed.

See also "Repositories" and later subsections in gitweb(1) manpage.

@table @asis

@item  $projectroot 
Absolute filesystem path which will be prepended to project path; the path
to repository is @samp{$projectroot/$project}.  Set to @samp{$GITWEB_PROJECTROOT}
during installation.  This variable has to be set correctly for gitweb to
find repositories.

For example, if @samp{$projectroot} is set to "/srv/git" by putting the following
in gitweb config file:

@example
our $projectroot = "/srv/git";
@end example


then

@example
http://git.example.com/gitweb.cgi?p=foo/bar.git
@end example


and its path_info based equivalent

@example
http://git.example.com/gitweb.cgi/foo/bar.git
@end example


will map to the path @samp{/srv/git/foo/bar.git} on the filesystem.

@item  $projects_list 
Name of a plain text file listing projects, or a name of directory to be
scanned for projects.

Project list files should list one project per line, with each line having
the following format

@example
<URI-encoded filesystem path to repository> SP <URI-encoded repository owner>
@end example


The default value of this variable is determined by the @samp{GITWEB_LIST}
makefile variable at installation time.  If this variable is empty, gitweb
will fall back to scanning the @samp{$projectroot} directory for repositories.

@item  $project_maxdepth 
If @samp{$projects_list} variable is unset, gitweb will recursively scan
filesystem for Git repositories.  The @samp{$project_maxdepth} is used to limit
traversing depth, relative to @samp{$projectroot} (starting point); it means that
directories which are further from @samp{$projectroot} than @samp{$project_maxdepth}
will be skipped.

It is purely performance optimization, originally intended for MacOS X,
where recursive directory traversal is slow.  Gitweb follows symbolic links,
but it detects cycles, ignoring any duplicate files and directories.

The default value of this variable is determined by the build-time
configuration variable @samp{GITWEB_PROJECT_MAXDEPTH}, which defaults to 2007.

@item  $export_ok 
Show repository only if this file exists (in repository).  Only effective if
this variable evaluates to true.  Can be set when building gitweb by setting
@samp{GITWEB_EXPORT_OK}.  This path is relative to @samp{GIT_DIR}.  git-daemon[1] uses
@emph{git-daemon-export-ok}, unless started with @samp{--export-all}.  By default this
variable is not set, which means that this feature is turned off.

@item  $export_auth_hook 
Function used to determine which repositories should be shown.  This
subroutine should take one parameter, the full path to a project, and if it
returns true, that project will be included in the projects list and can be
accessed through gitweb as long as it fulfills the other requirements
described by $export_ok, $projects_list, and $projects_maxdepth.  Example:

@example
our $export_auth_hook = sub @{ return -e "$_[0]/git-daemon-export-ok"; @};
@end example


though the above might be done by using @samp{$export_ok} instead

@example
our $export_ok = "git-daemon-export-ok";
@end example


If not set (default), it means that this feature is disabled.

See also more involved example in "Controlling access to Git repositories"
subsection on gitweb(1) manpage.

@item  $strict_export 
Only allow viewing of repositories also shown on the overview page.  This
for example makes @samp{$export_ok} file decide if repository is available and
not only if it is shown.  If @samp{$projects_list} points to file with list of
project, only those repositories listed would be available for gitweb.  Can
be set during building gitweb via @samp{GITWEB_STRICT_EXPORT}.  By default this
variable is not set, which means that you can directly access those
repositories that are hidden from projects list page (e.g. the are not
listed in the $projects_list file).
@end table

@noindent

@heading Finding files

The following configuration variables tell gitweb where to find files.  The
values of these variables are paths on the filesystem.

@table @asis

@item  $GIT 
Core git executable to use.  By default set to @samp{$GIT_BINDIR/git}, which in
turn is by default set to @samp{$(bindir)/git}.  If you use Git installed from a
binary package, you should usually set this to "/usr/bin/git".  This can
just be "git" if your web server has a sensible PATH; from security point of
view it is better to use absolute path to git binary.  If you have multiple
Git versions installed it can be used to choose which one to use.  Must be
(correctly) set for gitweb to be able to work.

@item  $mimetypes_file 
File to use for (filename extension based) guessing of MIME types before
trying @samp{/etc/mime.types}.  @strong{NOTE} that this path, if relative, is taken as
relative to the current Git repository, not to CGI script.  If unset, only
@samp{/etc/mime.types} is used (if present on filesystem).  If no mimetypes file
is found, mimetype guessing based on extension of file is disabled.  Unset
by default.

@item  $highlight_bin 
Path to the highlight executable to use (it must be the one from
@uref{http://www.andre-simon.de,http://www.andre-simon.de} due to assumptions about parameters and
output).  By default set to @emph{highlight}; set it to full path to highlight
executable if it is not installed on your web server’s PATH.  Note that
@emph{highlight} feature must be set for gitweb to actually use syntax
highlighting.

@strong{NOTE}: for a file to be highlighted, its syntax type must be detected
and that syntax must be supported by "highlight".  The default syntax
detection is minimal, and there are many supported syntax types with no
detection by default.  There are three options for adding syntax
detection.  The first and second priority are @samp{%highlight_basename} and
@samp{%highlight_ext}, which detect based on basename (the full filename, for
example "Makefile") and extension (for example "sh").  The keys of these
hashes are the basename and extension, respectively, and the value for a
given key is the name of the syntax to be passed via @samp{--syntax <syntax>}
to "highlight".  The last priority is the "highlight" configuration of
@samp{Shebang} regular expressions to detect the language based on the first
line in the file, (for example, matching the line "#!/bin/bash").  See
the highlight documentation and the default config at
/etc/highlight/filetypes.conf for more details.

For example if repositories you are hosting use "phtml" extension for PHP
files, and you want to have correct syntax-highlighting for those files, you
can add the following to gitweb configuration:

@example
our %highlight_ext;
$highlight_ext@{'phtml'@} = 'php';
@end example

@end table

@noindent

@heading Links and their targets

The configuration variables described below configure some of gitweb links:
their target and their look (text or image), and where to find page
prerequisites (stylesheet, favicon, images, scripts).  Usually they are left
at their default values, with the possible exception of @samp{@@stylesheets}
variable.

@table @asis

@item  @@stylesheets 
List of URIs of stylesheets (relative to the base URI of a page). You
might specify more than one stylesheet, for example to use "gitweb.css"
as base with site specific modifications in a separate stylesheet
to make it easier to upgrade gitweb.  For example, you can add
a @samp{site} stylesheet by putting

@example
push @@stylesheets, "gitweb-site.css";
@end example


in the gitweb config file.  Those values that are relative paths are
relative to base URI of gitweb.

This list should contain the URI of gitweb’s standard stylesheet.  The
default URI of gitweb stylesheet can be set at build time using the
@samp{GITWEB_CSS} makefile variable.  Its default value is @samp{static/gitweb.css}
(or @samp{static/gitweb.min.css} if the @samp{CSSMIN} variable is defined, i.e. if CSS
minifier is used during build).

@strong{Note}: there is also a legacy @samp{$stylesheet} configuration variable, which was
used by older gitweb.  If @samp{$stylesheet} variable is defined, only CSS stylesheet
given by this variable is used by gitweb.

@item  $logo 
Points to the location where you put @emph{git-logo.png} on your web server, or
to be more the generic URI of logo, 72x27 size).  This image is displayed in
the top right corner of each gitweb page and used as a logo for the Atom
feed.  Relative to the base URI of gitweb (as a path).  Can be adjusted when
building gitweb using @samp{GITWEB_LOGO} variable By default set to
@samp{static/git-logo.png}.

@item  $favicon 
Points to the location where you put @emph{git-favicon.png} on your web server,
or to be more the generic URI of favicon, which will be served as
"image/png" type.  Web browsers that support favicons (website icons)  may
display them in the browser’s URL bar and next to the site name in
bookmarks.  Relative to the base URI of gitweb.  Can be adjusted at build
time using @samp{GITWEB_FAVICON} variable.  By default set to
@samp{static/git-favicon.png}.

@item  $javascript 
Points to the location where you put @emph{gitweb.js} on your web server, or to
be more generic the URI of JavaScript code used by gitweb.  Relative to the
base URI of gitweb.  Can be set at build time using the @samp{GITWEB_JS}
build-time configuration variable.

The default value is either @samp{static/gitweb.js}, or @samp{static/gitweb.min.js} if
the @samp{JSMIN} build variable was defined, i.e. if JavaScript minifier was used
at build time.  @strong{Note} that this single file is generated from multiple
individual JavaScript "modules".

@item  $home_link 
Target of the home link on the top of all pages (the first part of view
"breadcrumbs").  By default it is set to the absolute URI of a current page
(to the value of @samp{$my_uri} variable, or to "/" if @samp{$my_uri} is undefined or
is an empty string).

@item  $home_link_str 
Label for the "home link" at the top of all pages, leading to @samp{$home_link}
(usually the main gitweb page, which contains the projects list).  It is
used as the first component of gitweb’s "breadcrumb trail": @samp{<home link> /
<project> / <action>}.  Can be set at build time using the
@samp{GITWEB_HOME_LINK_STR} variable.  By default it is set to "projects", as
this link leads to the list of projects.  Another popular choice is to set
it to the name of site.  Note that it is treated as raw HTML so it should
not be set from untrusted sources.

@item  @@extra_breadcrumbs 
Additional links to be added to the start of the breadcrumb trail before
the home link, to pages that are logically "above" the gitweb projects
list, such as the organization and department which host the gitweb
server. Each element of the list is a reference to an array, in which
element 0 is the link text (equivalent to @samp{$home_link_str}) and element
1 is the target URL (equivalent to @samp{$home_link}).

For example, the following setting produces a breadcrumb trail like "home /
dev / projects / …" where "projects" is the home link.

@example
    our @@extra_breadcrumbs = (
      [ 'home' => 'https://www.example.org/' ],
      [ 'dev'  => 'https://dev.example.org/' ],
    );
@end example


@item  $logo_url 
@itemx  $logo_label 
URI and label (title) for the Git logo link (or your site logo, if you chose
to use different logo image). By default, these both refer to Git homepage,
@uref{https://git-scm.com,https://git-scm.com}; in the past, they pointed to Git documentation at
@uref{https://www.kernel.org,https://www.kernel.org}.
@end table

@noindent

@heading Changing gitweb’s look

You can adjust how pages generated by gitweb look using the variables
described below.  You can change the site name, add common headers and
footers for all pages, and add a description of this gitweb installation on
its main page (which is the projects list page), etc.

@table @asis

@item  $site_name 
Name of your site or organization, to appear in page titles.  Set it to
something descriptive for clearer bookmarks etc.  If this variable is not
set or is, then gitweb uses the value of the @samp{SERVER_NAME} @samp{CGI} environment
variable, setting site name to "$SERVER_NAME Git", or "Untitled Git" if this
variable is not set (e.g. if running gitweb as standalone script).

Can be set using the @samp{GITWEB_SITENAME} at build time.  Unset by default.

@item  $site_html_head_string 
HTML snippet to be included in the <head> section of each page.  Can be set
using @samp{GITWEB_SITE_HTML_HEAD_STRING} at build time.  No default value.

@item  $site_header 
Name of a file with HTML to be included at the top of each page.  Relative
to the directory containing the @emph{gitweb.cgi} script.  Can be set using
@samp{GITWEB_SITE_HEADER} at build time.  No default value.

@item  $site_footer 
Name of a file with HTML to be included at the bottom of each page.
Relative to the directory containing the @emph{gitweb.cgi} script.  Can be set
using @samp{GITWEB_SITE_FOOTER} at build time.  No default value.

@item  $home_text 
Name of a HTML file which, if it exists, is included on the gitweb projects
overview page ("projects_list" view).  Relative to the directory containing
the gitweb.cgi script.  Default value can be adjusted during build time
using @samp{GITWEB_HOMETEXT} variable.  By default set to @emph{indextext.html}.

@item  $projects_list_description_width 
The width (in characters) of the "Description" column of the projects list.
Longer descriptions will be truncated (trying to cut at word boundary); the
full description is available in the @emph{title} attribute (usually shown on
mouseover).  The default is 25, which might be too small if you use long
project descriptions.

@item  $default_projects_order 
Default value of ordering of projects on projects list page, which means the
ordering used if you don’t explicitly sort projects list (if there is no "o"
CGI query parameter in the URL).  Valid values are "none" (unsorted),
"project" (projects are by project name, i.e. path to repository relative to
@samp{$projectroot}), "descr" (project description), "owner", and "age" (by date
of most current commit).

Default value is "project".  Unknown value means unsorted.
@end table

@noindent

@heading Changing gitweb’s behavior

These configuration variables control @emph{internal} gitweb behavior.

@table @asis

@item  $default_blob_plain_mimetype 
Default mimetype for the blob_plain (raw) view, if mimetype checking doesn’t
result in some other type; by default "text/plain".  Gitweb guesses mimetype
of a file to display based on extension of its filename, using
@samp{$mimetypes_file} (if set and file exists)  and @samp{/etc/mime.types} files (see
@strong{mime.types}(5) manpage; only filename extension rules are supported by
gitweb).

@item  $default_text_plain_charset 
Default charset for text files. If this is not set, the web server
configuration will be used.  Unset by default.

@item  $fallback_encoding 
Gitweb assumes this charset when a line contains non-UTF-8 characters.  The
fallback decoding is used without error checking, so it can be even
"utf-8". The value must be a valid encoding; see the
@strong{Encoding::Supported}(3pm)  man page for a list. The default is "latin1",
aka. "iso-8859-1".

@item  @@diff_opts 
Rename detection options for git-diff and git-diff-tree. The default is
('-M'); set it to ('-C') or ('-C', '-C') to also detect copies,
or set it to () i.e. empty list if you don’t want to have renames
detection.

@strong{Note} that rename and especially copy detection can be quite
CPU-intensive.  Note also that non Git tools can have problems with
patches generated with options mentioned above, especially when they
involve file copies ('-C') or criss-cross renames ('-B').
@end table

@noindent

@heading Some optional features and policies

Most of features are configured via @samp{%feature} hash; however some of extra
gitweb features can be turned on and configured using variables described
below.  This list beside configuration variables that control how gitweb
looks does contain variables configuring administrative side of gitweb
(e.g. cross-site scripting prevention; admittedly this as side effect
affects how "summary" pages look like, or load limiting).

@table @asis

@item  @@git_base_url_list 
List of Git base URLs.  These URLs are used to generate URLs
describing from where to fetch a project, which are shown on
project summary page.  The full fetch URL is "@samp{$git_base_url/$project}",
for each element of this list. You can set up multiple base URLs
(for example one for @samp{git://} protocol, and one for @samp{http://}
protocol).

Note that per repository configuration can be set in @samp{$GIT_DIR/cloneurl}
file, or as values of multi-value @samp{gitweb.url} configuration variable in
project config.  Per-repository configuration takes precedence over value
composed from @samp{@@git_base_url_list} elements and project name.

You can setup one single value (single entry/item in this list) at build
time by setting the @samp{GITWEB_BASE_URL} build-time configuration variable.  By
default it is set to (), i.e. an empty list.  This means that gitweb would
not try to create project URL (to fetch) from project name.

@item  $projects_list_group_categories 
Whether to enable the grouping of projects by category on the project list
page. The category of a project is determined by the @samp{$GIT_DIR/category}
file or the @samp{gitweb.category} variable in each repository’s configuration.
Disabled by default (set to 0).

@item  $project_list_default_category 
Default category for projects for which none is specified.  If this is set
to the empty string, such projects will remain uncategorized and listed at
the top, above categorized projects.  Used only if project categories are
enabled, which means if @samp{$projects_list_group_categories} is true.  By
default set to "" (empty string).

@item  $prevent_xss 
If true, some gitweb features are disabled to prevent content in
repositories from launching cross-site scripting (XSS) attacks.  Set this to
true if you don’t trust the content of your repositories.  False by default
(set to 0).

@item  $maxload 
Used to set the maximum load that we will still respond to gitweb queries.
If the server load exceeds this value then gitweb will return "503 Service
Unavailable" error.  The server load is taken to be 0 if gitweb cannot
determine its value.  Currently it works only on Linux, where it uses
@samp{/proc/loadavg}; the load there is the number of active tasks on the system
 — processes that are actually running — averaged over the last minute.

Set @samp{$maxload} to undefined value (@samp{undef}) to turn this feature off.  The
default value is 300.

@item  $omit_age_column 
If true, omit the column with date of the most current commit on the
projects list page. It can save a bit of I/O and a fork per repository.

@item  $omit_owner 
If true prevents displaying information about repository owner.

@item  $per_request_config 
If this is set to code reference, it will be run once for each request.  You
can set parts of configuration that change per session this way.  For
example, one might use the following code in a gitweb configuration file

@example
our $per_request_config = sub @{
        $ENV@{GL_USER@} = $cgi->remote_user || "gitweb";
@};
@end example


If @samp{$per_request_config} is not a code reference, it is interpreted as
boolean value.  If it is true gitweb will process config files once per
request, and if it is false gitweb will process config files only once, each
time it is executed.  True by default (set to 1).

@strong{NOTE}: @samp{$my_url}, @samp{$my_uri}, and @samp{$base_url} are overwritten with their default
values before every request, so if you want to change them, be sure to set
this variable to true or a code reference effecting the desired changes.

This variable matters only when using persistent web environments that serve
multiple requests using single gitweb instance, like mod_perl, FastCGI or
Plackup.
@end table

@noindent

@heading Other variables

Usually you should not need to change (adjust) any of configuration
variables described below; they should be automatically set by gitweb to
correct value.

@table @asis

@item  $version 
Gitweb version, set automatically when creating gitweb.cgi from
gitweb.perl. You might want to modify it if you are running modified gitweb,
for example

@example
our $version .= " with caching";
@end example


if you run modified version of gitweb with caching support.  This variable
is purely informational, used e.g. in the "generator" meta header in HTML
header.

@item  $my_url 
@itemx  $my_uri 
Full URL and absolute URL of the gitweb script; in earlier versions of
gitweb you might have need to set those variables, but now there should be
no need to do it.  See @samp{$per_request_config} if you need to set them still.

@item  $base_url 
Base URL for relative URLs in pages generated by gitweb, (e.g. @samp{$logo},
@samp{$favicon}, @samp{@@stylesheets} if they are relative URLs), needed and used
@emph{<base href="$base_url">} only for URLs with nonempty PATH_INFO.  Usually
gitweb sets its value correctly, and there is no need to set this variable,
e.g. to $my_uri or "/".  See @samp{$per_request_config} if you need to override
it anyway.
@end table

@noindent

@chapheading CONFIGURING GITWEB FEATURES

Many gitweb features can be enabled (or disabled) and configured using the
@samp{%feature} hash.  Names of gitweb features are keys of this hash.

Each @samp{%feature} hash element is a hash reference and has the following
structure:

@example
"<feature_name>" => @{
        "sub" => <feature-sub (subroutine)>,
        "override" => <allow-override (boolean)>,
        "default" => [ <options>... ]
@},
@end example


Some features cannot be overridden per project.  For those features the
structure of appropriate @samp{%feature} hash element has a simpler form:

@example
"<feature_name>" => @{
        "override" => 0,
        "default" => [ <options>... ]
@},
@end example


As one can see it lacks the 'sub' element.

The meaning of each part of feature configuration is described below:

@table @asis

@item  default 
List (array reference) of feature parameters (if there are any), used also
to toggle (enable or disable) given feature.

Note that it is currently @strong{always} an array reference, even if feature
doesn’t accept any configuration parameters, and 'default' is used only to
turn it on or off.  In such case you turn feature on by setting this element
to @samp{[1]}, and torn it off by setting it to @samp{[0]}.  See also the passage
about the "blame" feature in the "Examples" section.

To disable features that accept parameters (are configurable), you need to
set this element to empty list i.e. @samp{[]}.

@item  override 
If this field has a true value then the given feature is overridable, which
means that it can be configured (or enabled/disabled) on a per-repository
basis.

Usually given "<feature>" is configurable via the @samp{gitweb.<feature>} config
variable in the per-repository Git configuration file.

@strong{Note} that no feature is overridable by default.

@item  sub 
Internal detail of implementation.  What is important is that if this field
is not present then per-repository override for given feature is not
supported.

You wouldn’t need to ever change it in gitweb config file.
@end table

@noindent

@heading Features in %feature

The gitweb features that are configurable via @samp{%feature} hash are listed
below.  This should be a complete list, but ultimately the authoritative and
complete list is in gitweb.cgi source code, with features described in the
comments.

@table @asis

@item  blame 
Enable the "blame" and "blame_incremental" blob views, showing for each line
the last commit that modified it; see git-blame(1).  This can be
very CPU-intensive and is therefore disabled by default.

This feature can be configured on a per-repository basis via repository’s
@samp{gitweb.blame} configuration variable (boolean).

@item  snapshot 
Enable and configure the "snapshot" action, which allows user to download a
compressed archive of any tree or commit, as produced by
git-archive(1) and possibly additionally compressed.  This can
potentially generate high traffic if you have large project.

The value of 'default' is a list of names of snapshot formats, defined in
@samp{%known_snapshot_formats} hash, that you wish to offer.  Supported formats
include "tgz", "tbz2", "txz" (gzip/bzip2/xz compressed tar archive) and
"zip"; please consult gitweb sources for a definitive list.  By default only
"tgz" is offered.

This feature can be configured on a per-repository basis via repository’s
@samp{gitweb.snapshot} configuration variable, which contains a comma separated
list of formats or "none" to disable snapshots.  Unknown values are ignored.

@item  grep 
Enable grep search, which lists the files in currently selected tree
(directory) containing the given string; see git-grep(1).  This can
be potentially CPU-intensive, of course.  Enabled by default.

This feature can be configured on a per-repository basis via repository’s
@samp{gitweb.grep} configuration variable (boolean).

@item  pickaxe 
Enable the so called pickaxe search, which will list the commits that
introduced or removed a given string in a file.  This can be practical and
quite faster alternative to "blame" action, but it is still potentially
CPU-intensive.  Enabled by default.

The pickaxe search is described in git-log(1) (the description of
@samp{-S<string>} option, which refers to pickaxe entry in gitdiffcore(7)
for more details).

This feature can be configured on a per-repository basis by setting
repository’s @samp{gitweb.pickaxe} configuration variable (boolean).

@item  show-sizes 
Enable showing size of blobs (ordinary files) in a "tree" view, in a
separate column, similar to what @samp{ls -l} does; see description of @samp{-l}
option in git-ls-tree(1) manpage.  This costs a bit of I/O.  Enabled
by default.

This feature can be configured on a per-repository basis via repository’s
@samp{gitweb.showSizes} configuration variable (boolean).

@item  patches 
Enable and configure "patches" view, which displays list of commits in email
(plain text) output format; see also git-format-patch(1).  The value
is the maximum number of patches in a patchset generated in "patches" view.
Set the @emph{default} field to a list containing single item of or to an empty
list to disable patch view, or to a list containing a single negative number
to remove any limit.  Default value is 16.

This feature can be configured on a per-repository basis via repository’s
@samp{gitweb.patches} configuration variable (integer).

@item  avatar 
Avatar support.  When this feature is enabled, views such as "shortlog" or
"commit" will display an avatar associated with the email of each committer
and author.

Currently available providers are @strong{"gravatar"} and @strong{"picon"}.  Only one
provider at a time can be selected (@emph{default} is one element list).  If an
unknown provider is specified, the feature is disabled.  @strong{Note} that some
providers might require extra Perl packages to be installed; see
@samp{gitweb/INSTALL} for more details.

This feature can be configured on a per-repository basis via repository’s
@samp{gitweb.avatar} configuration variable.

See also @samp{%avatar_size} with pixel sizes for icons and avatars ("default" is
used for one-line like "log" and "shortlog", "double" is used for two-line
like "commit", "commitdiff" or "tag").  If the default font sizes or
lineheights are changed (e.g. via adding extra CSS stylesheet in
@samp{@@stylesheets}), it may be appropriate to change these values.

@item  email-privacy 
Redact e-mail addresses from the generated HTML, etc. content.  This
obscures e-mail addresses retrieved from the author/committer and comment
sections of the Git log.  It is meant to hinder web crawlers that harvest
and abuse addresses.  Such crawlers may not respect robots.txt.  Note that
users and user tools also see the addresses as redacted.  If Gitweb is not
the final step in a workflow then subsequent steps may misbehave because of
the redacted information they receive.  Disabled by default.

@item  highlight 
Server-side syntax highlight support in "blob" view.  It requires
@samp{$highlight_bin} program to be available (see the description of this
variable in the "Configuration variables" section above), and therefore is
disabled by default.

This feature can be configured on a per-repository basis via repository’s
@samp{gitweb.highlight} configuration variable (boolean).

@item  remote_heads 
Enable displaying remote heads (remote-tracking branches) in the "heads"
list.  In most cases the list of remote-tracking branches is an unnecessary
internal private detail, and this feature is therefore disabled by default.
git-instaweb(1), which is usually used to browse local repositories,
enables and uses this feature.

This feature can be configured on a per-repository basis via repository’s
@samp{gitweb.remote_heads} configuration variable (boolean).
@end table

The remaining features cannot be overridden on a per project basis.

@table @asis

@item  search 
Enable text search, which will list the commits which match author,
committer or commit text to a given string; see the description of
@samp{--author}, @samp{--committer} and @samp{--grep} options in git-log(1)
manpage.  Enabled by default.

Project specific override is not supported.

@item  forks 
If this feature is enabled, gitweb considers projects in subdirectories of
project root (basename) to be forks of existing projects.  For each project
@samp{$projname.git}, projects in the @samp{$projname/} directory and its
subdirectories will not be shown in the main projects list.  Instead, a '+'
mark is shown next to @samp{$projname}, which links to a "forks" view that lists
all the forks (all projects in @samp{$projname/} subdirectory).  Additionally a
"forks" view for a project is linked from project summary page.

If the project list is taken from a file (@samp{$projects_list} points to a
file), forks are only recognized if they are listed after the main project
in that file.

Project specific override is not supported.

@item  actions 
Insert custom links to the action bar of all project pages.  This allows you
to link to third-party scripts integrating into gitweb.

The "default" value consists of a list of triplets in the form ‘("<label>",
"<link>", "<position>")` where "position" is the label after which to insert
the link, "link" is a format string where @samp{%n} expands to the project name,
@samp{%f} to the project path within the filesystem
(i.e. "$projectroot/$project"), @samp{%h} to the current hash ('h’ gitweb
parameter) and ‘%b` to the current hash base ('hb’ gitweb parameter); ‘%%`
expands to '%’.

For example, at the time this page was written, the @uref{http://repo.or.cz,http://repo.or.cz} Git
hosting site set it to the following to enable graphical log (using the
third party tool @strong{git-browser}):

@example
$feature@{'actions'@}@{'default'@} =
        [ ('graphiclog', '/git-browser/by-commit.html?r=%n', 'summary')];
@end example


This adds a link titled "graphiclog" after the "summary" link, leading to
@samp{git-browser} script, passing @samp{r=<project>} as a query parameter.

Project specific override is not supported.

@item  timed 
Enable displaying how much time and how many Git commands it took to
generate and display each page in the page footer (at the bottom of page).
For example the footer might contain: "This page took 6.53325 seconds and 13
Git commands to generate." Disabled by default.

Project specific override is not supported.

@item  javascript-timezone 
Enable and configure the ability to change a common time zone for dates in
gitweb output via JavaScript.  Dates in gitweb output include authordate and
committerdate in "commit", "commitdiff" and "log" views, and taggerdate in
"tag" view.  Enabled by default.

The value is a list of three values: a default time zone (for if the client
hasn’t selected some other time zone and saved it in a cookie), a name of
cookie where to store selected time zone, and a CSS class used to mark up
dates for manipulation.  If you want to turn this feature off, set "default"
to empty list: @samp{[]}.

Typical gitweb config files will only change starting (default) time zone,
and leave other elements at their default values:

@example
$feature@{'javascript-timezone'@}@{'default'@}[0] = "utc";
@end example


The example configuration presented here is guaranteed to be backwards and
forward compatible.

Time zone values can be "local" (for local time zone that browser uses),
"utc" (what gitweb uses when JavaScript or this feature is disabled), or
numerical time zones in the form of "+/-HHMM", such as "+0200".

Project specific override is not supported.

@item  extra-branch-refs 
List of additional directories under "refs" which are going to be used as
branch refs. For example if you have a gerrit setup where all branches under
refs/heads/ are official, push-after-review ones and branches under
refs/sandbox/, refs/wip and refs/other are user ones where permissions are
much wider, then you might want to set this variable as follows:

@example
$feature@{'extra-branch-refs'@}@{'default'@} =
        ['sandbox', 'wip', 'other'];
@end example


This feature can be configured on per-repository basis after setting
$feature@{@emph{extra-branch-refs}@}@{@emph{override}@} to true, via repository’s
@samp{gitweb.extraBranchRefs} configuration variable, which contains a space
separated list of refs. An example:

@example
[gitweb]
        extraBranchRefs = sandbox wip other
@end example


The gitweb.extraBranchRefs is actually a multi-valued configuration
variable, so following example is also correct and the result is the same as
of the snippet above:

@example
[gitweb]
        extraBranchRefs = sandbox
        extraBranchRefs = wip other
@end example


It is an error to specify a ref that does not pass "git check-ref-format"
scrutiny. Duplicated values are filtered.
@end table

@noindent

@chapheading EXAMPLES

To enable blame, pickaxe search, and snapshot support (allowing "tar.gz" and
"zip" snapshots), while allowing individual projects to turn them off, put
the following in your GITWEB_CONFIG file:

@example
$feature@{'blame'@}@{'default'@} = [1];
$feature@{'blame'@}@{'override'@} = 1;

$feature@{'pickaxe'@}@{'default'@} = [1];
$feature@{'pickaxe'@}@{'override'@} = 1;

$feature@{'snapshot'@}@{'default'@} = ['zip', 'tgz'];
$feature@{'snapshot'@}@{'override'@} = 1;
@end example


If you allow overriding for the snapshot feature, you can specify which
snapshot formats are globally disabled. You can also add any command-line
options you want (such as setting the compression level). For instance, you
can disable Zip compressed snapshots and set @strong{gzip}(1) to run at level 6 by
adding the following lines to your gitweb configuration file:

@example
$known_snapshot_formats@{'zip'@}@{'disabled'@} = 1;
$known_snapshot_formats@{'tgz'@}@{'compressor'@} = ['gzip','-6'];
@end example

@noindent

@chapheading BUGS

Debugging would be easier if the fallback configuration file
(@samp{/etc/gitweb.conf}) and environment variable to override its location
(@emph{GITWEB_CONFIG_SYSTEM}) had names reflecting their "fallback" role.  The
current names are kept to avoid breaking working setups.

@noindent

@chapheading ENVIRONMENT

The location of per-instance and system-wide configuration files can be
overridden using the following environment variables:

@table @asis

@item  GITWEB_CONFIG 
Sets location of per-instance configuration file.

@item  GITWEB_CONFIG_SYSTEM 
Sets location of fallback system-wide configuration file.  This file is read
only if per-instance one does not exist.

@item  GITWEB_CONFIG_COMMON 
Sets location of common system-wide configuration file.
@end table

@noindent

@chapheading FILES

@table @asis

@item  gitweb_config.perl 
This is default name of per-instance configuration file.  The
format of this file is described above.

@item  /etc/gitweb.conf 
This is default name of fallback system-wide configuration
file.  This file is used only if per-instance configuration
variable is not found.

@item  /etc/gitweb-common.conf 
This is default name of common system-wide configuration
file.
@end table

@noindent

@chapheading SEE ALSO

gitweb(1), git-instaweb(1)

@emph{gitweb/README}, @emph{gitweb/INSTALL}

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitweb,,,Top
@chapheading Name

gitweb — Git web interface (web frontend to Git repositories)

@noindent

@chapheading Synopsis

To get started with gitweb, run git-instaweb(1) from a Git
repository.  This would configure and start your web server, and run web
browser pointing to gitweb.

@noindent

@chapheading DESCRIPTION

Gitweb provides a web interface to Git repositories.  Its features include:

@itemize 

@item
Viewing multiple Git repositories with common root.

@item
Browsing every revision of the repository.

@item
Viewing the contents of files in the repository at any revision.

@item
Viewing the revision log of branches, history of files and directories, see
what was changed when, by who.

@item
Viewing the blame/annotation details of any file (if enabled).

@item
Generating RSS and Atom feeds of commits, for any branch.  The feeds are
auto-discoverable in modern web browsers.

@item
Viewing everything that was changed in a revision, and step through
revisions one at a time, viewing the history of the repository.

@item
Finding commits which commit messages matches given search term.
@end itemize

See @uref{http://repo.or.cz/w/git.git/tree/HEAD:/gitweb/,http://repo.or.cz/w/git.git/tree/HEAD:/gitweb/} for gitweb source code,
browsed using gitweb itself.

@noindent

@chapheading CONFIGURATION

Various aspects of gitweb’s behavior can be controlled through the
configuration file @samp{gitweb_config.perl} or @samp{/etc/gitweb.conf}.  See the
gitweb.conf(5) for details.

@noindent

@heading Repositories

Gitweb can show information from one or more Git repositories.  These
repositories have to be all on local filesystem, and have to share common
repository root, i.e. be all under a single parent repository (but see also
"Advanced web server setup" section, "Webserver configuration with multiple
projects' root" subsection).

@example
our $projectroot = '/path/to/parent/directory';
@end example


The default value for @samp{$projectroot} is @samp{/pub/git}.  You can change it
during building gitweb via @samp{GITWEB_PROJECTROOT} build configuration
variable.

By default all Git repositories under @samp{$projectroot} are visible and
available to gitweb.  The list of projects is generated by default by
scanning the @samp{$projectroot} directory for Git repositories (for object
databases to be more exact; gitweb is not interested in a working area, and
is best suited to showing "bare" repositories).

The name of the repository in gitweb is the path to its @samp{$GIT_DIR} (its
object database) relative to @samp{$projectroot}.  Therefore the repository $repo
can be found at "$projectroot/$repo".

@noindent

@heading Projects list file format

Instead of having gitweb find repositories by scanning filesystem starting
from $projectroot, you can provide a pre-generated list of visible projects
by setting @samp{$projects_list} to point to a plain text file with a list of
projects (with some additional info).

This file uses the following format:

@itemize 

@item
One record (for project / repository) per line; does not support line
continuation (newline escaping).

@item
Leading and trailing whitespace are ignored.

@item
Whitespace separated fields; any run of whitespace can be used as field
separator (rules for Perl’s "@samp{split(" ", $line)}").

@item
Fields use modified URI encoding, defined in RFC 3986, section 2.1
(Percent-Encoding), or rather "Query string encoding" (see
@uref{https://en.wikipedia.org/wiki/Query_string#URL_encoding,https://en.wikipedia.org/wiki/Query_string#URL_encoding}), the difference
being that SP (" ") can be encoded as "+" (and therefore "+" has
to be also percent-encoded).

Reserved characters are: "%" (used for encoding), "+" (can be used to
encode SPACE), all whitespace characters as defined in Perl, including SP,
TAB and LF, (used to separate fields in a record).

@item
Currently recognized fields are:

@table @asis

@item  <repository path> 
path to repository GIT_DIR, relative to @samp{$projectroot}

@item  <repository owner> 
displayed as repository owner, preferably full name, or email, or both
@end table
@end itemize

You can generate the projects list index file using the project_index action
(the @emph{TXT} link on projects list page) directly from gitweb; see also
"Generating projects list using gitweb" section below.

Example contents:

@example
foo.git       Joe+R+Hacker+<joe@@example.com>
foo/bar.git   O+W+Ner+<owner@@example.org>
@end example


By default this file controls only which projects are @strong{visible} on projects
list page (note that entries that do not point to correctly recognized Git
repositories won’t be displayed by gitweb).  Even if a project is not
visible on projects list page, you can view it nevertheless by hand-crafting
a gitweb URL.  By setting @samp{$strict_export} configuration variable (see
gitweb.conf(5)) to true value you can allow viewing only of
repositories also shown on the overview page (i.e. only projects explicitly
listed in projects list file will be accessible).

@noindent

@heading Generating projects list using gitweb

We assume that GITWEB_CONFIG has its default Makefile value, namely
@emph{gitweb_config.perl}. Put the following in @emph{gitweb_make_index.perl} file:

@example
read_config_file("gitweb_config.perl");
$projects_list = $projectroot;
@end example


Then create the following script to get list of project in the format
suitable for GITWEB_LIST build configuration variable (or @samp{$projects_list}
variable in gitweb config):

@example
#!/bin/sh

export GITWEB_CONFIG="gitweb_make_index.perl"
export GATEWAY_INTERFACE="CGI/1.1"
export HTTP_ACCEPT="*/*"
export REQUEST_METHOD="GET"
export QUERY_STRING="a=project_index"

perl -- /var/www/cgi-bin/gitweb.cgi
@end example


Run this script and save its output to a file.  This file could then be used
as projects list file, which means that you can set @samp{$projects_list} to its
filename.

@noindent

@heading Controlling access to Git repositories

By default all Git repositories under @samp{$projectroot} are visible and
available to gitweb.  You can however configure how gitweb controls access
to repositories.

@itemize 

@item
As described in "Projects list file format" section, you can control which
projects are @strong{visible} by selectively including repositories in projects
list file, and setting @samp{$projects_list} gitweb configuration variable to
point to it.  With @samp{$strict_export} set, projects list file can be used to
control which repositories are @strong{available} as well.

@item
You can configure gitweb to only list and allow viewing of the explicitly
exported repositories, via @samp{$export_ok} variable in gitweb config file; see
gitweb.conf(5) manpage.  If it evaluates to true, gitweb shows
repositories only if this file named by @samp{$export_ok} exists in its object
database (if directory has the magic file named @samp{$export_ok}).

For example git-daemon(1) by default (unless @samp{--export-all} option
is used) allows pulling only for those repositories that have
@emph{git-daemon-export-ok} file.  Adding

@example
our $export_ok = "git-daemon-export-ok";
@end example


makes gitweb show and allow access only to those repositories that can be
fetched from via @samp{git://} protocol.

@item
Finally, it is possible to specify an arbitrary perl subroutine that will be
called for each repository to determine if it can be exported.  The
subroutine receives an absolute path to the project (repository) as its only
parameter (i.e. "$projectroot/$project").

For example, if you use mod_perl to run the script, and have dumb HTTP
protocol authentication configured for your repositories, you can use the
following hook to allow access only if the user is authorized to read the
files:

@example
$export_auth_hook = sub @{
        use Apache2::SubRequest ();
        use Apache2::Const -compile => qw(HTTP_OK);
        my $path = "$_[0]/HEAD";
        my $r    = Apache2::RequestUtil->request;
        my $sub  = $r->lookup_file($path);
        return $sub->filename eq $path
            && $sub->status == Apache2::Const::HTTP_OK;
@};
@end example

@end itemize

@noindent

@heading Per-repository gitweb configuration

You can configure individual repositories shown in gitweb by creating file
in the @samp{GIT_DIR} of Git repository, or by setting some repo configuration
variable (in @samp{GIT_DIR/config}, see git-config(1)).

You can use the following files in repository:

@table @asis

@item  README.html 
A html file (HTML fragment) which is included on the gitweb project
"summary" page inside @samp{<div>} block element. You can use it for longer
description of a project, to provide links (for example to project’s
homepage), etc. This is recognized only if XSS prevention is off
(@samp{$prevent_xss} is false, see gitweb.conf(5)); a way to include a
README safely when XSS prevention is on may be worked out in the future.

@item  description (or @samp{gitweb.description}) 
Short (shortened to @samp{$projects_list_description_width} in the projects list
page, which is 25 characters by default; see gitweb.conf(5)) single
line description of a project (of a repository).  Plain text file; HTML will
be escaped.  By default set to

@example
Unnamed repository; edit this file to name it for gitweb.
@end example


from the template during repository creation, usually installed in
@samp{/usr/share/git-core/templates/}.  You can use the @samp{gitweb.description} repo
configuration variable, but the file takes precedence.

@item  category (or @samp{gitweb.category}) 
Singe line category of a project, used to group projects if
@samp{$projects_list_group_categories} is enabled.  By default (file and
configuration variable absent), uncategorized projects are put in the
@samp{$project_list_default_category} category.  You can use the
@samp{gitweb.category} repo configuration variable, but the file takes
precedence.

The configuration variables @samp{$projects_list_group_categories} and
@samp{$project_list_default_category} are described in gitweb.conf(5)

@item  cloneurl (or multiple-valued @samp{gitweb.url}) 
File with repository URL (used for clone and fetch), one per line.
Displayed in the project summary page. You can use multiple-valued
@samp{gitweb.url} repository configuration variable for that, but the file takes
precedence.

This is per-repository enhancement / version of global prefix-based
@samp{@@git_base_url_list} gitweb configuration variable (see
gitweb.conf(5)).

@item  gitweb.owner 
You can use the @samp{gitweb.owner} repository configuration variable to set
repository’s owner.  It is displayed in the project list and summary page.

If it’s not set, filesystem directory’s owner is used (via GECOS field,
i.e. real name field from @strong{getpwuid}(3)) if @samp{$projects_list} is unset
(gitweb scans @samp{$projectroot} for repositories); if @samp{$projects_list} points
to file with list of repositories, then project owner defaults to value from
this file for given repository.

@item  various @samp{gitweb.*} config variables (in config) 
Read description of @samp{%feature} hash for detailed list, and descriptions.
See also "Configuring gitweb features" section in gitweb.conf(5)
@end table

@noindent

@chapheading ACTIONS, AND URLS

Gitweb can use path_info (component) based URLs, or it can pass all
necessary information via query parameters.  The typical gitweb URLs are
broken down in to five components:

@example
.../gitweb.cgi/<repo>/<action>/<revision>:/<path>?<arguments>
@end example


@table @asis

@item  repo 
The repository the action will be performed on.

All actions except for those that list all available projects, in whatever
form, require this parameter.

@item  action 
The action that will be run.  Defaults to @emph{projects_list} if repo is not
set, and to @emph{summary} otherwise.

@item  revision 
Revision shown.  Defaults to HEAD.

@item  path 
The path within the <repository> that the action is performed on, for those
actions that require it.

@item  arguments 
Any arguments that control the behaviour of the action.
@end table

Some actions require or allow to specify two revisions, and sometimes even
two pathnames.  In most general form such path_info (component) based gitweb
URL looks like this:

@example
.../gitweb.cgi/<repo>/<action>/<revision_from>:/<path_from>..<revision_to>:/<path_to>?<arguments>
@end example


Each action is implemented as a subroutine, and must be present in %actions
hash.  Some actions are disabled by default, and must be turned on via
feature mechanism.  For example to enable @emph{blame} view add the following to
gitweb configuration file:

@example
$feature@{'blame'@}@{'default'@} = [1];
@end example


@noindent

@heading Actions:

The standard actions are:

@table @asis

@item  project_list 
Lists the available Git repositories.  This is the default command if no
repository is specified in the URL.

@item  summary 
Displays summary about given repository.  This is the default command if no
action is specified in URL, and only repository is specified.

@item  heads 
@itemx  remotes 
Lists all local or all remote-tracking branches in given repository.

The latter is not available by default, unless configured.

@item  tags 
List all tags (lightweight and annotated) in given repository.

@item  blob 
@itemx  tree 
Shows the files and directories in a given repository path, at given
revision.  This is default command if no action is specified in the URL, and
path is given.

@item  blob_plain 
Returns the raw data for the file in given repository, at given path and
revision.  Links to this action are marked @emph{raw}.

@item  blobdiff 
Shows the difference between two revisions of the same file.

@item  blame 
@itemx  blame_incremental 
Shows the blame (also called annotation) information for a file. On a per
line basis it shows the revision in which that line was last changed and the
user that committed the change.  The incremental version (which if
configured is used automatically when JavaScript is enabled) uses Ajax to
incrementally add blame info to the contents of given file.

This action is disabled by default for performance reasons.

@item  commit 
@itemx  commitdiff 
Shows information about a specific commit in a repository.  The @emph{commit}
view shows information about commit in more detail, the @emph{commitdiff} action
shows changeset for given commit.

@item  patch 
Returns the commit in plain text mail format, suitable for applying with
git-am(1).

@item  tag 
Display specific annotated tag (tag object).

@item  log 
@itemx  shortlog 
Shows log information (commit message or just commit subject) for a given
branch (starting from given revision).

The @emph{shortlog} view is more compact; it shows one commit per line.

@item  history 
Shows history of the file or directory in a given repository path, starting
from given revision (defaults to HEAD, i.e. default branch).

This view is similar to @emph{shortlog} view.

@item  rss 
@itemx  atom 
Generates an RSS (or Atom) feed of changes to repository.
@end table

@noindent

@chapheading WEBSERVER CONFIGURATION

This section explains how to configure some common webservers to run
gitweb. In all cases, @samp{/path/to/gitweb} in the examples is the directory you
ran installed gitweb in, and contains @samp{gitweb_config.perl}.

If you’ve configured a web server that isn’t listed here for gitweb, please
send in the instructions so they can be included in a future release.

@noindent

@heading Apache as CGI

Apache must be configured to support CGI scripts in the directory in which
gitweb is installed.  Let’s assume that it is @samp{/var/www/cgi-bin} directory.

@example
ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"

<Directory "/var/www/cgi-bin">
    Options Indexes FollowSymlinks ExecCGI
    AllowOverride None
    Order allow,deny
    Allow from all
</Directory>
@end example


With that configuration the full path to browse repositories would be:

@example
http://server/cgi-bin/gitweb.cgi
@end example

@noindent

@heading Apache with mod_perl, via ModPerl::Registry

You can use mod_perl with gitweb.  You must install Apache::Registry (for
mod_perl 1.x) or ModPerl::Registry (for mod_perl 2.x) to enable this
support.

Assuming that gitweb is installed to @samp{/var/www/perl}, the following Apache
configuration (for mod_perl 2.x) is suitable.

@example
Alias /perl "/var/www/perl"

<Directory "/var/www/perl">
    SetHandler perl-script
    PerlResponseHandler ModPerl::Registry
    PerlOptions +ParseHeaders
    Options Indexes FollowSymlinks +ExecCGI
    AllowOverride None
    Order allow,deny
    Allow from all
</Directory>
@end example


With that configuration the full path to browse repositories would be:

@example
http://server/perl/gitweb.cgi
@end example

@noindent

@heading Apache with FastCGI

Gitweb works with Apache and FastCGI.  First you need to rename, copy or
symlink gitweb.cgi to gitweb.fcgi.  Let’s assume that gitweb is installed in
@samp{/usr/share/gitweb} directory.  The following Apache configuration is
suitable (UNTESTED!)

@example
FastCgiServer /usr/share/gitweb/gitweb.cgi
ScriptAlias /gitweb /usr/share/gitweb/gitweb.cgi

Alias /gitweb/static /usr/share/gitweb/static
<Directory /usr/share/gitweb/static>
    SetHandler default-handler
</Directory>
@end example


With that configuration the full path to browse repositories would be:

@example
http://server/gitweb
@end example

@noindent

@chapheading ADVANCED WEB SERVER SETUP

All of those examples use request rewriting, and need @samp{mod_rewrite} (or
equivalent; examples below are written for Apache).

@noindent

@heading Single URL for gitweb and for fetching

If you want to have one URL for both gitweb and your @samp{http://} repositories,
you can configure Apache like this:

@example
<VirtualHost *:80>
    ServerName    git.example.org
    DocumentRoot  /pub/git
    SetEnv        GITWEB_CONFIG   /etc/gitweb.conf

    # turning on mod rewrite
    RewriteEngine on

    # make the front page an internal rewrite to the gitweb script
    RewriteRule ^/$  /cgi-bin/gitweb.cgi

    # make access for "dumb clients" work
    RewriteRule ^/(.*\.git/(?!/?(HEAD|info|objects|refs)).*)?$ \
                /cgi-bin/gitweb.cgi%@{REQUEST_URI@}  [L,PT]
</VirtualHost>
@end example


The above configuration expects your public repositories to live under
@samp{/pub/git} and will serve them as @samp{http://git.domain.org/dir-under-pub-git},
both as clonable Git URL and as browseable gitweb interface.  If you then
start your git-daemon(1) with @samp{--base-path=/pub/git --export-all}
then you can even use the @samp{git://} URL with exactly the same path.

Setting the environment variable @samp{GITWEB_CONFIG} will tell gitweb to use the
named file (i.e. in this example @samp{/etc/gitweb.conf}) as a configuration for
gitweb.  You don’t really need it in above example; it is required only if
your configuration file is in different place than built-in (during
compiling gitweb) @emph{gitweb_config.perl} or @samp{/etc/gitweb.conf}.  See
gitweb.conf(5) for details, especially information about precedence
rules.

If you use the rewrite rules from the example you @strong{might} also need
something like the following in your gitweb configuration file
(@samp{/etc/gitweb.conf} following example):

@example
@@stylesheets = ("/some/absolute/path/gitweb.css");
$my_uri    = "/";
$home_link = "/";
$per_request_config = 1;
@end example


Nowadays though gitweb should create HTML base tag when needed (to set base
URI for relative links), so it should work automatically.

@noindent

@heading Webserver configuration with multiple projects' root

If you want to use gitweb with several project roots you can edit your
Apache virtual host and gitweb configuration files in the following way.

The virtual host configuration (in Apache configuration file) should look
like this:

@example
<VirtualHost *:80>
    ServerName    git.example.org
    DocumentRoot  /pub/git
    SetEnv        GITWEB_CONFIG  /etc/gitweb.conf

    # turning on mod rewrite
    RewriteEngine on

    # make the front page an internal rewrite to the gitweb script
    RewriteRule ^/$  /cgi-bin/gitweb.cgi  [QSA,L,PT]

    # look for a public_git folder in unix users' home
    # http://git.example.org/~<user>/
    RewriteRule ^/\~([^\/]+)(/|/gitweb.cgi)?$   /cgi-bin/gitweb.cgi \
                [QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]

    # http://git.example.org/+<user>/
    #RewriteRule ^/\+([^\/]+)(/|/gitweb.cgi)?$  /cgi-bin/gitweb.cgi \
                 [QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]

    # http://git.example.org/user/<user>/
    #RewriteRule ^/user/([^\/]+)/(gitweb.cgi)?$ /cgi-bin/gitweb.cgi \
                 [QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]

    # defined list of project roots
    RewriteRule ^/scm(/|/gitweb.cgi)?$ /cgi-bin/gitweb.cgi \
                [QSA,E=GITWEB_PROJECTROOT:/pub/scm/,L,PT]
    RewriteRule ^/var(/|/gitweb.cgi)?$ /cgi-bin/gitweb.cgi \
                [QSA,E=GITWEB_PROJECTROOT:/var/git/,L,PT]

    # make access for "dumb clients" work
    RewriteRule ^/(.*\.git/(?!/?(HEAD|info|objects|refs)).*)?$ \
                /cgi-bin/gitweb.cgi%@{REQUEST_URI@}  [L,PT]
</VirtualHost>
@end example


Here actual project root is passed to gitweb via @samp{GITWEB_PROJECT_ROOT}
environment variable from a web server, so you need to put the following
line in gitweb configuration file (@samp{/etc/gitweb.conf} in above example):

@example
$projectroot = $ENV@{'GITWEB_PROJECTROOT'@} || "/pub/git";
@end example


@strong{Note} that this requires to be set for each request, so either
@samp{$per_request_config} must be false, or the above must be put in code
referenced by @samp{$per_request_config};

These configurations enable two things. First, each unix user (@samp{<user>}) of
the server will be able to browse through gitweb Git repositories found in
@samp{~/public_git/} with the following url:

@example
http://git.example.org/~<user>/
@end example

If you do not want this feature on your server just remove the second
rewrite rule.

If you already use ‘mod_userdir` in your virtual host or you don’t want to
use the '~’ as first character, just comment or remove the second rewrite
rule, and uncomment one of the following according to what you want.

Second, repositories found in @samp{/pub/scm/} and @samp{/var/git/} will be accessible
through @samp{http://git.example.org/scm/} and @samp{http://git.example.org/var/}.
You can add as many project roots as you want by adding rewrite rules like
the third and the fourth.

@noindent

@heading PATH_INFO usage

If you enable PATH_INFO usage in gitweb by putting

@example
$feature@{'pathinfo'@}@{'default'@} = [1];
@end example


in your gitweb configuration file, it is possible to set up your server so
that it consumes and produces URLs in the form

@example
http://git.example.com/project.git/shortlog/sometag
@end example

i.e. without @emph{gitweb.cgi} part, by using a configuration such as the
following.  This configuration assumes that @samp{/var/www/gitweb} is the
DocumentRoot of your webserver, contains the gitweb.cgi script and
complementary static files (stylesheet, favicon, JavaScript):

@example
<VirtualHost *:80>
        ServerAlias git.example.com

        DocumentRoot /var/www/gitweb

        <Directory /var/www/gitweb>
                Options ExecCGI
                AddHandler cgi-script cgi

                DirectoryIndex gitweb.cgi

                RewriteEngine On
                RewriteCond %@{REQUEST_FILENAME@} !-f
                RewriteCond %@{REQUEST_FILENAME@} !-d
                RewriteRule ^.* /gitweb.cgi/$0 [L,PT]
        </Directory>
</VirtualHost>
@end example


The rewrite rule guarantees that existing static files will be properly
served, whereas any other URL will be passed to gitweb as PATH_INFO
parameter.

@strong{Notice} that in this case you don’t need special settings for
@samp{@@stylesheets}, @samp{$my_uri} and @samp{$home_link}, but you lose "dumb client"
access to your project .git dirs (described in "Single URL for gitweb and
for fetching" section).  A possible workaround for the latter is the
following: in your project root dir (e.g. @samp{/pub/git}) have the projects
named @strong{without} a .git extension (e.g. @samp{/pub/git/project} instead of
@samp{/pub/git/project.git}) and configure Apache as follows:

@example
<VirtualHost *:80>
        ServerAlias git.example.com

        DocumentRoot /var/www/gitweb

        AliasMatch ^(/.*?)(\.git)(/.*)?$ /pub/git$1$3
        <Directory /var/www/gitweb>
                Options ExecCGI
                AddHandler cgi-script cgi

                DirectoryIndex gitweb.cgi

                RewriteEngine On
                RewriteCond %@{REQUEST_FILENAME@} !-f
                RewriteCond %@{REQUEST_FILENAME@} !-d
                RewriteRule ^.* /gitweb.cgi/$0 [L,PT]
        </Directory>
</VirtualHost>
@end example


The additional AliasMatch makes it so that

@example
http://git.example.com/project.git
@end example

will give raw access to the project’s Git dir (so that the project can be
cloned), while

@example
http://git.example.com/project
@end example

will provide human-friendly gitweb access.

This solution is not 100% bulletproof, in the sense that if some project has
a named ref (branch, tag) starting with @samp{git/}, then paths such as

@example
http://git.example.com/project/command/abranch..git/abranch
@end example

will fail with a 404 error.

@noindent

@chapheading BUGS

Please report any bugs or feature requests to @uref{mailto:git@@vger.kernel.org,git@@vger.kernel.org}, putting
"gitweb" in the subject of email.

@noindent

@chapheading SEE ALSO

gitweb.conf(5), git-instaweb(1)

@samp{gitweb/README}, @samp{gitweb/INSTALL}

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitworkflows,,,Top
@chapheading Name

gitworkflows — Gitで推奨の作業手順の概要

@noindent

@chapheading Synopsis

@display
git *
@end display


@noindent

@chapheading DESCRIPTION

この文書は、 @samp{git.git}
自体に使用されるワークフロー要素のいくつかを書き留めて動機付けしようとしています。一般に多くのアイデアが当てはまりますが、関係者が少ない小規模なプロジェクトではこのような完全なワークフローが必要になることはめったにありません。

We formulate a set of @emph{rules} for quick reference, while the prose tries to
motivate each of them.  Do not always take them literally; you should value
good reasons for your actions higher than manpages such as this one.

@noindent

@chapheading SEPARATE CHANGES

原則として、変更を小さな論理ステップに分割し、それぞれでコミットするようにしてください。それらは一貫性があり、その後のコミットとは独立して機能し、テストスイートに合格する必要があります。これにより、レビュープロセスがはるかに簡単になり、その履歴は、たとえば
git-blame(1) や git-bisect(1)を使用して後で検査や分析する時にはるかに役立ちます。

これを実現するには、最初から作業を小さなステップに分割してみてください。1つの大きなコミットを複数に分割するよりも、いくつかのコミットをまとめる方が常に簡単です。途中で小さすぎる、または不完全なステップを作成することを恐れないでください。いつでも後で戻って、公開する前に
@samp{git rebase --interactive} を使用してコミットを編集できます。 @samp{git stash push --keep-index}
を使用して、他のコミットされていない変更とは無関係にテストスイートを実行できます。 git-stash(1)
の「EXAMPLES」セクションを参照してください。

@noindent

@chapheading MANAGING BRANCHES

あるブランチから別のブランチへの変更を含めるために使用できる2つの主要なツールがあります。 git-merge(1) と
git-cherry-pick(1) です。

Merges have many advantages, so we try to solve as many problems as possible
with merges alone.  Cherry-picking is still occasionally useful; see
"Merging upwards" below for an example.

Most importantly, merging works at the branch level, while cherry-picking
works at the commit level.  This means that a merge can carry over the
changes from 1, 10, or 1000 commits with equal ease, which in turn means the
workflow scales much better to a large number of contributors (and
contributions).  Merges are also easier to understand because a merge commit
is a "promise" that all changes from all its parents are now included.

There is a tradeoff of course: merges require a more careful branch
management.  The following subsections discuss the important points.

@noindent

@heading Graduation

As a given feature goes from experimental to stable, it also "graduates"
between the corresponding branches of the software.  @samp{git.git} uses the
following @emph{integration branches}:

@itemize 

@item
@emph{maint} tracks the commits that should go into the next "maintenance
release", i.e., update of the last released stable version;

@item
@emph{master} tracks the commits that should go into the next release;

@item
@emph{next} is intended as a testing branch for topics being tested for stability
for master.
@end itemize

There is a fourth official branch that is used slightly differently:

@itemize 

@item
@emph{seen} (patches seen by the maintainer) is an integration branch for things
that are not quite ready for inclusion yet (see "Integration Branches"
below).
@end itemize

Each of the four branches is usually a direct descendant of the one above
it.

Conceptually, the feature enters at an unstable branch (usually @emph{next} or
@emph{seen}), and "graduates" to @emph{master} for the next release once it is
considered stable enough.

@noindent

@heading Merging upwards

The "downwards graduation" discussed above cannot be done by actually
merging downwards, however, since that would merge @emph{all} changes on the
unstable branch into the stable one.  Hence the following:

@strong{Merge upwards}

Always commit your fixes to the oldest supported branch that requires them.
Then (periodically) merge the integration branches upwards into each other.

This gives a very controlled flow of fixes.  If you notice that you have
applied a fix to e.g. @emph{master} that is also required in @emph{maint}, you will
need to cherry-pick it (using git-cherry-pick(1))  downwards.  This
will happen a few times and is nothing to worry about unless you do it very
frequently.

@noindent

@heading Topic branches

Any nontrivial feature will require several patches to implement, and may
get extra bugfixes or improvements during its lifetime.

Committing everything directly on the integration branches leads to many
problems: Bad commits cannot be undone, so they must be reverted one by one,
which creates confusing histories and further error potential when you
forget to revert part of a group of changes.  Working in parallel mixes up
the changes, creating further confusion.

Use of "topic branches" solves these problems.  The name is pretty self
explanatory, with a caveat that comes from the "merge upwards" rule above:

@strong{Topic branches}

Make a side branch for every topic (feature, bugfix, …). Fork it off at
the oldest integration branch that you will eventually want to merge it
into.

Many things can then be done very naturally:

@itemize 

@item
To get the feature/bugfix into an integration branch, simply merge it.  If
the topic has evolved further in the meantime, merge again.  (Note that you
do not necessarily have to merge it to the oldest integration branch first.
For example, you can first merge a bugfix to @emph{next}, give it some testing
time, and merge to @emph{maint} when you know it is stable.)

@item
If you find you need new features from the branch @emph{other} to continue
working on your topic, merge @emph{other} to @emph{topic}.  (However, do not do this
"just habitually", see below.)

@item
If you find you forked off the wrong branch and want to move it "back in
time", use git-rebase(1).
@end itemize

Note that the last point clashes with the other two: a topic that has been
merged elsewhere should not be rebased.  See the section on RECOVERING FROM
UPSTREAM REBASE in git-rebase(1).

We should point out that "habitually" (regularly for no real reason)
merging an integration branch into your topics — and by extension, merging
anything upstream into anything downstream on a regular basis — is frowned upon:

@strong{Merge to downstream only at well-defined points}

Do not merge to downstream except with a good reason: upstream API changes
affect your branch; your branch no longer merges to upstream cleanly; etc.

Otherwise, the topic that was merged to suddenly contains more than a single
(well-separated) change.  The many resulting small merges will greatly
clutter up history.  Anyone who later investigates the history of a file
will have to find out whether that merge affected the topic in development.
An upstream might even inadvertently be merged into a "more stable" branch.
And so on.

@noindent

@heading Throw-away integration

If you followed the last paragraph, you will now have many small topic
branches, and occasionally wonder how they interact.  Perhaps the result of
merging them does not even work? But on the other hand, we want to avoid
merging them anywhere "stable" because such merges cannot easily be undone.

The solution, of course, is to make a merge that we can undo: merge into a
throw-away branch.

@strong{Throw-away integration branches}

To test the interaction of several topics, merge them into a throw-away
branch.  You must never base any work on such a branch!

If you make it (very) clear that this branch is going to be deleted right
after the testing, you can even publish this branch, for example to give the
testers a chance to work with it, or other developers a chance to see if
their in-progress work will be compatible.  @samp{git.git} has such an official
throw-away integration branch called @emph{seen}.

@noindent

@heading Branch management for a release

Assuming you are using the merge approach discussed above, when you are
releasing your project you will need to do some additional branch management
work.

A feature release is created from the @emph{master} branch, since @emph{master} tracks
the commits that should go into the next feature release.

The @emph{master} branch is supposed to be a superset of @emph{maint}. If this
condition does not hold, then @emph{maint} contains some commits that are not
included on @emph{master}. The fixes represented by those commits will therefore
not be included in your feature release.

To verify that @emph{master} is indeed a superset of @emph{maint}, use git log:

@strong{Verify master is a superset of maint}

@samp{git log master..maint}

This command should not list any commits.  Otherwise, check out @emph{master} and
merge @emph{maint} into it.

Now you can proceed with the creation of the feature release. Apply a tag to
the tip of @emph{master} indicating the release version:

@strong{Release tagging}

@samp{git tag -s -m "Git X.Y.Z" vX.Y.Z master}

You need to push the new tag to a public Git server (see "DISTRIBUTED
WORKFLOWS" below). This makes the tag available to others tracking your
project. The push could also trigger a post-update hook to perform
release-related items such as building release tarballs and preformatted
documentation pages.

Similarly, for a maintenance release, @emph{maint} is tracking the commits to be
released. Therefore, in the steps above simply tag and push @emph{maint} rather
than @emph{master}.

@noindent

@heading Maintenance branch management after a feature release

After a feature release, you need to manage your maintenance branches.

First, if you wish to continue to release maintenance fixes for the feature
release made before the recent one, then you must create another branch to
track commits for that previous release.

To do this, the current maintenance branch is copied to another branch named
with the previous release version number (e.g. maint-X.Y.(Z-1)  where X.Y.Z
is the current release).

@strong{Copy maint}

@samp{git branch maint-X.Y.(Z-1) maint}

The @emph{maint} branch should now be fast-forwarded to the newly released code
so that maintenance fixes can be tracked for the current release:

@strong{Update maint to new release}

@itemize 

@item
@samp{git checkout maint}

@item
@samp{git merge --ff-only master}
@end itemize

If the merge fails because it is not a fast-forward, then it is possible
some fixes on @emph{maint} were missed in the feature release.  This will not
happen if the content of the branches was verified as described in the
previous section.

@noindent

@heading Branch management for next and seen after a feature release

After a feature release, the integration branch @emph{next} may optionally be
rewound and rebuilt from the tip of @emph{master} using the surviving topics on
@emph{next}:

@strong{Rewind and rebuild next}

@itemize 

@item
@samp{git switch -C next master}

@item
@samp{git merge ai/topic_in_next1}

@item
@samp{git merge ai/topic_in_next2}

@item
…
@end itemize

The advantage of doing this is that the history of @emph{next} will be clean. For
example, some topics merged into @emph{next} may have initially looked promising,
but were later found to be undesirable or premature.  In such a case, the
topic is reverted out of @emph{next} but the fact remains in the history that it
was once merged and reverted. By recreating @emph{next}, you give another
incarnation of such topics a clean slate to retry, and a feature release is
a good point in history to do so.

If you do this, then you should make a public announcement indicating that
@emph{next} was rewound and rebuilt.

The same rewind and rebuild process may be followed for @emph{seen}. A public
announcement is not necessary since @emph{seen} is a throw-away branch, as
described above.

@noindent

@chapheading DISTRIBUTED WORKFLOWS

After the last section, you should know how to manage topics.  In general,
you will not be the only person working on the project, so you will have to
share your work.

Roughly speaking, there are two important workflows: merge and patch.  The
important difference is that the merge workflow can propagate full history,
including merges, while patches cannot.  Both workflows can be used in
parallel: in @samp{git.git}, only subsystem maintainers use the merge workflow,
while everyone else sends patches.

Note that the maintainer(s) may impose restrictions, such as "Signed-off-by"
requirements, that all commits/patches submitted for inclusion must adhere
to.  Consult your project’s documentation for more information.

@noindent

@heading Merge workflow

The merge workflow works by copying branches between upstream and
downstream.  Upstream can merge contributions into the official history;
downstream base their work on the official history.

There are three main tools that can be used for this:

@itemize 

@item
git-push(1) copies your branches to a remote repository, usually to
one that can be read by all involved parties;

@item
git-fetch(1) that copies remote branches to your repository; and

@item
git-pull(1) that does fetch and merge in one go.
@end itemize

Note the last point.  Do @emph{not} use @emph{git pull} unless you actually want to
merge the remote branch.

Getting changes out is easy:

@strong{Push/pull: Publishing branches/topics}

@samp{git push <remote> <branch>} and tell everyone where they can fetch from.

You will still have to tell people by other means, such as mail.  (Git
provides the git-request-pull(1) to send preformatted pull requests
to upstream maintainers to simplify this task.)

If you just want to get the newest copies of the integration branches,
staying up to date is easy too:

@strong{Push/pull: Staying up to date}

Use @samp{git fetch <remote>} or @samp{git remote update} to stay up to date.

Then simply fork your topic branches from the stable remotes as explained
earlier.

If you are a maintainer and would like to merge other people’s topic
branches to the integration branches, they will typically send a request to
do so by mail.  Such a request looks like

@example
Please pull from
    <url> <branch>
@end example


In that case, @emph{git pull} can do the fetch and merge in one go, as follows.

@strong{Push/pull: Merging remote topics}

@samp{git pull <url> <branch>}

Occasionally, the maintainer may get merge conflicts when they try to pull
changes from downstream.  In this case, they can ask downstream to do the
merge and resolve the conflicts themselves (perhaps they will know better
how to resolve them).  It is one of the rare cases where downstream @emph{should}
merge from upstream.

@noindent

@heading Patch workflow

If you are a contributor that sends changes upstream in the form of emails,
you should use topic branches as usual (see above).  Then use
git-format-patch(1) to generate the corresponding emails (highly
recommended over manually formatting them because it makes the maintainer’s
life easier).

@strong{format-patch/am: Publishing branches/topics}

@itemize 

@item
@samp{git format-patch -M upstream..topic} to turn them into preformatted patch
files

@item
@samp{git send-email --to=<recipient> <patches>}
@end itemize

See the git-format-patch(1) and git-send-email(1) manpages
for further usage notes.

If the maintainer tells you that your patch no longer applies to the current
upstream, you will have to rebase your topic (you cannot use a merge because
you cannot format-patch merges):

@strong{format-patch/am: Keeping topics up to date}

@samp{git pull --rebase <url> <branch>}

You can then fix the conflicts during the rebase.  Presumably you have not
published your topic other than by mail, so rebasing it is not a problem.

If you receive such a patch series (as maintainer, or perhaps as a reader of
the mailing list it was sent to), save the mails to files, create a new
topic branch and use @emph{git am} to import the commits:

@strong{format-patch/am: Importing patches}

@samp{git am < patch}

One feature worth pointing out is the three-way merge, which can help if you
get conflicts: @samp{git am -3} will use index information contained in patches
to figure out the merge base.  See git-am(1) for other options.

@noindent

@chapheading SEE ALSO

gittutorial(7), git-push(1), git-pull(1),
git-merge(1), git-rebase(1), git-format-patch(1),
git-send-email(1), git-am(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@bye
