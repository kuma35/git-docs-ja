'\" t
.\"     Title: gitfaq
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 12/10/2022
.\"    Manual: Git Manual
.\"    Source: Git 2.38.0.rc1.238.g4f4d434dc6.dirty
.\"  Language: English
.\"
.TH "GITFAQ" "7" "12/10/2022" "Git 2\&.38\&.0\&.rc1\&.238\&.g" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gitfaq \- Gitの使用に関するよくある質問(FAQ)
.SH "SYNOPSIS"
.sp
gitfaq
.SH "DESCRIPTION"
.sp
このFAQの例では、 \fBbash\fR や \fBdash\fR などの標準のPOSIXシェルと、ホスティングプロバイダー \fBgit\&.example\&.org\fR にアカウント \fBauthor\fR を持つユーザー A U Thor を想定しています。
.SH "CONFIGURATION"
.PP
\fBuser\&.name\fR には何を入れるべきですか？
.RS 4
個人名、通常は名前とファミリーネームを使用した形式を入力する必要があります。たとえば、Gitの現在のメンテナは "Junio C Hamano" (濱野 純)を使用しています。 これは、コミットするたびに保存される名前の部分になります。
.sp
この構成は、リモートサービスへの認証には影響しません。 そのためには、
\fBgit-config\fR(1)
の
\fBcredential\&.username\fR
を参照してください。
.RE
.PP
\fBhttp\&.postBuffer\fR は実際には何をしますか？
.RS 4
このオプションは、HTTPまたはHTTPSを介してデータをリモートにプッシュするときにGitが使用するバッファーのサイズを変更します。データがこのサイズより大きい場合、GitのHTTPサポートを処理するlibcurlは、プッシュされたデータのサイズが事前にわからないため、チャンク転送エンコーディングを使用します。
.sp
リモートサーバーまたは中間のプロキシが、(チャンク転送エンコーディングを導入している) HTTP/1\&.1 をサポートしていないか、チャンクデータが壊れていることがわかっている場合を除いて、この値をデフォルトサイズのままにしておくことは問題ありません。これは一般的なプッシュ問題の解決策として、(誤って)提案されることがよくありますが、ほとんどすべてのサーバーとプロキシが少なくとも HTTP/1\&.1 はサポートしているため、この値を上げてもほとんどのプッシュ問題は解決されません。 HTTP/1\&.1 とチャンク転送エンコーディングを正しくサポートしていなかったサーバーまたはプロキシは、大量のトラフィックを遮断するため、今日のインターネットでは無用の長物です。
.sp
注意: この値を増やすと、GitがHTTPまたはHTTPSを介して行うすべての関連プッシュで使用されるメモリが増えることに注意してください。これは、すべてが使用されているかどうかに関係なく、バッファ全体が割り当てられるためです。したがって、別の値が必要であることが確実でない限り、デフォルトのままにしておくことをお勧めします。
.RE
.PP
別のエディタを構成するにはどうすればよいですか？
.RS 4
Git専用のエディターを指定していない場合は、デフォルトで、「VISUAL」または「EDITOR」環境変数を使用して構成したエディターが使用されます。どちらも指定されていない場合は、システムのデフォルト(通常は「vi」)が使用されます。
\fBvi\fR
は使いにくい、または別のエディターを好む人もいるため、使用するエディターを変更することが望ましい場合があります。
.sp
エディタを必要とするプログラム用に、あなたがエディタを構成したい場合、シェル構成(つまり、
\fB~/\&.bashrc\fR
とか
\fB~/\&.zshenv\fR)を編集して、
\fBEDITOR\fR
または
\fBVISUAL\fR
環境変数に適切な値に設定する行を含めることができます。たとえば、エディタ
\fBnano\fR
が必要な場合は、以下のように記述できます:
.sp
.if n \{\
.RS 4
.\}
.nf
export VISUAL=nano
.fi
.if n \{\
.RE
.\}
.sp
あなたがGit専用のエディタを構成したい場合は、
\fBcore\&.editor\fR
構成 または
\fBGIT_EDITOR\fR
環境変数を設定できます。これらのオプションが参照される順序の詳細については
\fBgit-var\fR(1)
を参照してください。
.sp
注意: いずれの場合も、エディタの値はシェルに渡されるため、スペースを含む引数は適切に引用符で囲む必要があることに注意してください。さらに、エディタが呼び出されたとき、通常ターミナルからデタッチするタイプのエディタ場合は、それを行わないようにする引数を指定して指定する必要があります。そうしないと、Gitはエディタでの変更を認識しません。 Windowsでこれらの問題の両方に対処する構成の例は、構成
\fB"C:\eProgram Files\eVim\egvim\&.exe" \-\-nofork\fR
です。これは、空白を含んだファイル名をクォートし、プロセスのバックグラウンド実行を回避するため
\fB\-\-nofork\fR
オプションを指定します。
.RE
.SH "CREDENTIALS"
.PP
HTTPでプッシュするときに資格情報を指定するにはどうすればよいですか？
.RS 4
これを行う最も簡単な方法は、
\fBcredential\&.helper\fR
構成を介して資格情報ヘルパーを使用することです。ほとんどのシステムは、システム資格情報マネージャーと統合するための標準的な選択肢を提供します。たとえば、Git for Windowsは「wincred」資格情報マネージャーを提供し、macOSは「osxkeychain」資格情報マネージャーを提供し、標準デスクトップ環境を備えたUnixシステムは「libsecret」資格情報マネージャーを使用できます。 これらはすべて、パスワードまたはトークンを安全に保つために暗号化されたストアに資格情報を保存します。
.sp
さらに、ホームディレクトリのファイルに保存する
\fBstore\fR
資格情報マネージャー、または資格情報を永続的に保存しないが、特定の時間、資格情報の入力を求められないようにする
\fBcache\fR
資格情報マネージャーを使用できます。
.sp
プロンプトが表示されたら、パスワードを入力することもできます。 URLにパスワード(パーセントエンコードする必要があります)を配置することは可能ですが、これは全然安全じゃ無く、誤って資格情報が公開される可能性があるため、お勧めしません。
.RE
.PP
環境変数からパスワードまたはトークンを読み取るにはどうすればよいですか？
.RS 4
\fBcredential\&.helper\fR
構成オプションは、標準出力で資格情報プロトコルを生成する任意のシェルコマンドを受け取ることもできます。これは、たとえば、資格情報をコンテナに渡すときに役立ちます。
.sp
このようなシェルコマンドは、オプション値を感嘆符(\fB!\fR)で開始することで指定できます。パスワードまたはトークンが
\fBGIT_TOKEN\fR
に保存されている場合は、以下のコマンドを実行して資格情報ヘルパーを設定できます:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git config credential\&.helper \e
        \*(Aq!f() { echo username=author; echo "password=$GIT_TOKEN"; };f\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
資格情報マネージャーに保存したパスワードまたはトークンを変更するにはどうすればよいですか？
.RS 4
通常、パスワードまたはトークンが無効な場合、Gitはそれを消去し、新しいものを要求します。ただし、これが常に発生するとは限りません。パスワードまたはトークンを変更するには、既存の資格情報を消去してください。そうすればGitが新しい資格情報の入力を求めます。資格情報を消去するには、以下の構文を使用します(ユーザー名(「author」の部分)とホスト名(「git\&.example\&.org」の部分)をあなた自身のに置き換えてください):
.sp
.if n \{\
.RS 4
.\}
.nf
$ echo url=https://author@git\&.example\&.org | git credential reject
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
HTTPを使用して同じホスティングプロバイダーで複数のアカウントを使用するにはどうすればよいですか？
.RS 4
通常、これらのアカウントを区別する最も簡単な方法は、URLでユーザー名を使用することです。 たとえば、
\fBgit\&.example\&.org\fR
にアカウント
\fBauthor\fR
と
\fBcommitter\fR
がある場合、URLに
\m[blue]\fBhttps://author@git\&.example\&.org/org1/project1\&.git\fR\m[]
と
\m[blue]\fBhttps://committer@git\&.example\&.org/org2/project2\&.git\fR\m[]
を使用できます。このように、資格情報ヘルパーを使用すると、アカウントの正しい資格情報が自動的に検索されます。すでにリモートを設定している場合は
\fBgit remote set\-url origin https://author@git\&.example\&.org/org1/project1\&.git\fR
としてURLを変更できます(詳細は
\fBgit-remote\fR(1)
を参照)。
.RE
.PP
SSHを使用して同じホスティングプロバイダーで複数のアカウントを使用するにはどうすればよいですか？
.RS 4
SSHをサポートするほとんどのホスティングプロバイダーでは、単一のキーペアがユーザーを一意に識別します。したがって、複数のアカウントを使用するには、アカウントごとにキーペアを作成する必要があります。適度に最新のOpenSSHバージョンを使用している場合は
\fBssh\-keygen \-t ed25519 \-f ~/\&.ssh/id_committer\fR
などとして新しいキーペアを作成できます。次に、公開鍵(この場合は
\fB~/\&.ssh/id_committer\&.pub\fR
*拡張子
\fB\&.pub\fR
に注意) をホスティングプロバイダーに登録できます。
.sp
ほとんどのホスティングプロバイダーは、プッシュに単一のSSHアカウントを使用します。つまり、すべてのユーザーが
\fBgit\fR
アカウント(例:
\fBgit@git\&.example\&.org\fR)にプッシュします。プロバイダーの場合は、SSHで複数のエイリアスを設定して、使用するキーペアを明確にすることができます。たとえば、以下のようなのを
\fB~/\&.ssh/config\fR
に記述して、適切な秘密鍵ファイルに置き換えることができます:
.sp
.if n \{\
.RS 4
.\}
.nf
# This is the account for author on git\&.example\&.org\&.
Host example_author
        HostName git\&.example\&.org
        User git
        # This is the key pair registered for author with git\&.example\&.org\&.
        IdentityFile ~/\&.ssh/id_author
        IdentitiesOnly yes
# This is the account for committer on git\&.example\&.org\&.
Host example_committer
        HostName git\&.example\&.org
        User git
        # This is the key pair registered for committer with git\&.example\&.org\&.
        IdentityFile ~/\&.ssh/id_committer
        IdentitiesOnly yes
.fi
.if n \{\
.RE
.\}
.sp
こうすれば、あなたはプッシュURLを調整して、
\fBgit@example\&.org\fR
の代わりに
\fBgit@example_author\fR
または
\fBgit@example_committer\fR
を使用できます(例:
\fBgit remote set\-url git@example_author:org1/project1\&.git\fR) 。
.RE
.SH "COMMON ISSUES"
.PP
前回のコミットでミスをしました。どうすれば変更できますか？
.RS 4
作業ツリーに適切な変更を加え、必要に応じて
\fBgit add <file>\fR
または
\fBgit rm <file>\fR
を実行してステージングしてから、
\fBgit commit \-\-amend\fR
を実行できます。変更はコミットに含まれ、コミットメッセージを再度編集するように求められます。元のメッセージをそのまま使用したい場合は、
\fB\-\-no\-edit\fR
オプションを伴ってて
\fBgit commit\fR
を使用するか、または、エディタが開いたら何もせず保存して終了して済ませることもできます。
.RE
.PP
バグで変更を加えましたが、それは既にメインブランチに含まれてしまっています。どうすれば元に戻すことができますか？
.RS 4
これに対処する通常の方法は、
\fBgit revert\fR
を使用することです。これにより、元の変更が行われて貴重な貢献であった、という履歴が保持されるとともに、元の変更に問題があったためにそれらの変更を元に戻す新しいコミットも導入されます。revertのコミットメッセージは、復帰(revert)されたコミットを示し、通常、復帰(revert)が行われた理由に関する説明を含むように編集されます。
.RE
.PP
追跡されているファイルへの変更を無視するにはどうすればよいですか？
.RS 4
Gitはこれを行う方法を提供していません。 その理由は、チェックアウト中など、Gitがこのファイルを上書きする必要がある場合、ファイルへの変更が貴重で保持されるべきかどうか、または無関係で安全に破棄できるかどうかがわからないためです。したがって、安全なルートを取り、常にそれらを保存する必要があります。
.sp
\fBgit update\-index\fR
の特定の機能、つまり、assume\-unchangedビットとskip\-worktreeビットを使おうとするのは魅力的ですが、これらはこの目的には適切に機能しないため、このように使用しないでください。
.sp
あなたの目的が構成ファイルを変更することの場合は、テンプレートまたはデフォルトのセットであるファイルをリポジトリにチェックインして、一緒にコピーして必要に応じて変更できると便利なことがよくあります。この場合の変更されたファイルは、誤ってコミットすることを防ぐために、通常は無視されます。
.RE
.PP
さまざまなファイルを無視するようにGitに依頼したはずなのに、それらはまだ追跡されています
.RS 4
\fBgitignore\fR
ファイルは、Gitによって追跡されていない特定のファイルが追跡されないままであることを保証します。ただし、特定のファイルが
\fB\&.gitignore\fR
に追加される前に追跡されている場合は追跡されたままになります。ファイル/パターン を追跡解除して無視するには、
\fBgit rm \-\-cached <file/pattern>\fR
を使用し、 <file> に一致するパターンを
\fB\&.gitignore\fR
に追加します。詳細については
\fBgitignore\fR(5)
を参照してください。
.RE
.PP
フェッチまたはプルのどちらを実行すればよいか知るにはどうすればよいですか？
.RS 4
フェッチは、作業ツリーや現在のブランチを変更せずに、リモートリポジトリからの最新の変更のコピーを保存します。その後、自由に、アップストリームの変更を検査、マージ、リベース、または無視することができます。プルは、フェッチとその直後のマージまたはリベースで構成されます。
\fBgit-pull\fR(1)
を参照してください。
.RE
.SH "MERGING AND REBASING"
.PP
寿命の長いブランチをスカッシュマージとマージすると、どのような問題が発生する可能性がありますか？
.RS 4
一般に、スカッシュマージを使用して2つのブランチを複数回マージすると、さまざまな問題が発生する可能性があります。これには、GUIを使用した場合、または
\fB\&.\&.\&.`表記を使用して範囲を表す場合に、 `git log\fR
出力で追加のコミットが表示されることや、競合を何度も再解決する必要がある可能性が含まれます。
.sp
Gitが2つのブランチ間で通常のマージを行う場合、正確に3者が考慮されます。2つのブランチと、通常は2つのコミットの共通の祖先である「マージベース」(merge base)と呼ばれる3番目のコミットです。マージの結果は、マージベースと各headの間の変更の合計です。2つのブランチを通常のマージコミットでマージすると、新しい共通の祖先を持つ、新しいコミットが発生し、再度マージされるときはそれが最終的なマージベースになります。そうすると、Gitは、マージベースの前に発生した変更を考慮する必要がないため、以前に解決した競合を再解決する必要がありません。
.sp
スカッシュマージを実行する場合、マージコミットは作成されません。代わりに、一方の側からの変更は、もう一方の側への通常のコミットとして適用されます。つまり、これらのブランチのマージベースは変更されないため、Gitが次のマージを実行するときに、前回考慮したすべての変更と新しい変更が考慮されます。つまり、競合を再解決する必要があるかもしれません。 同様に、
\fBgit diff\fR
または
\fBgit log\fR
またはGUIで
\fB\&.\&.\&.\fR
表記を使用すると、元のマージベース以降のすべての変更が表示されます。
.sp
結果として、2つの長期間有効なブランチを繰り返しマージする場合は、常に通常のマージコミットを使用するのが最善です。
.RE
.PP
2つのブランチに変更を加えた後、それを1つに戻した場合、それら2つのブランチのマージに変更が含まれるのはなぜですか？
.RS 4
デフォルトでは、Gitがマージを行うとき、それは「ort」戦略と呼ばれる戦略を使用します。これは、派手な3者間マージ(fancy three\-way merge)を行います。 このような場合、Gitはマージを実行するときに、正確に3つのポイントを考慮します。2つのheadと、通常はこれらのコミットの共通の祖先である「マージベース」(merge base)と呼ばれる3番目のポイントです。 Gitは、これらのブランチで発生した履歴や個々のコミットをまったく考慮しません。
.sp
その結果、両方の側に変更があり、一方の側がその変更を元に戻した場合、結果には変更が含まれます。 これは、コードが一方の側で変更され、もう一方の側では正味の変更がないためです。このシナリオでは、Gitが変更を採用します。
.sp
これが問題になる場合は、代わりにリベースを実行して、ブランチを他のブランチに戻すことでリベースすることができます。このシナリオでのリベースは変更を元に戻します。これは、リベースが元に戻すことを含め、個々のコミットを適用するためです。リベースは書き換え履歴(rewrite history)をリベースするため、問題がない場合を除いて、公開されたブランチのリベースは避けてください。詳細については、
\fBgit-rebase\fR(1)のNOTESセクションを参照してください。
.RE
.SH "HOOKS"
.PP
フックを使用して、ユーザーが特定の変更を行うのを妨げるにはどうすればよいですか？
.RS 4
これらの変更を行うための唯一の安全な場所は、リモートリポジトリ(つまり、Gitサーバー)で、通常は
\fBpre\-receive\fR
フックまたは継続的インテグレーション(CI)システムです。これらは、ポリシーを効果的に実施できる場所です。
.sp
\fBpre\-commit\fR
フック(または、コミットメッセージの場合は
\fBcommit\-msg\fR
フック)を使用してこれらをチェックするのが一般的です。これは、単独の開発者として作業していて、ツールが役立つことを望んでいる場合に最適です。ただし、開発者のマシンでフックを使用することは、ユーザーが(他のさまざまな方法の中でも)気付かれることなく
\fB\-\-no\-verify\fR
でこれらのフックをバイパスできるため、ポリシーコントロールとしては効果的ではありません。 Gitは、ユーザーがローカルリポジトリを管理していることを前提としており、これを防止したり、ユーザーを攻撃したりすることはありません。
.sp
さらに、一部の上級ユーザーは、「pre\-commit」フックが、一時的なコミットを使用して進行中の作業をステージングしたり、修正コミットを作成したりするワークフローの障害であると感じているため、とにかくこれらの種類のチェックはサーバーに押しやることをお勧めします。
.RE
.SH "CROSS\-PLATFORM ISSUES"
.PP
Windowsを使用していますが、テキストファイルがバイナリとして検出されます。
.RS 4
Gitは、テキストファイルをUTF\-8として保存する場合に最適に機能します。Windows上の多くのプログラムはUTF\-8をサポートしていますが、Gitがバイナリとして検出するリトルエンディアンのUTF\-16形式を使用していないプログラムもあります。プログラムでUTF\-8を使用できない場合は、これらのファイルをUTF\-8としてリポジトリに保存しながら、ファイルをチェックアウトするエンコードを示す作業ツリーエンコーディング(working tree encoding)を指定できます。これにより、
\fBgit-diff\fR(1)
などのツールを期待どおりに機能させながら、ツールを機能させることができます。
.sp
これを行うには、
\fBworking\-tree\-encoding\fR
属性を使用して
\fBgitattributes\fR(5)
パターンを指定できます。たとえば、以下のパターンは、Windowsで一般的なエンコーディングである UTF\-16LE\-BOM を使用するようにすべてのC言語ファイルを設定します:
.sp
.if n \{\
.RS 4
.\}
.nf
*\&.c     working\-tree\-encoding=UTF\-16LE\-BOM
.fi
.if n \{\
.RE
.\}
.sp
これを有効にするには、
\fBgit add \-\-renormalize\fR
を実行する必要があります。プラットフォーム間で使用されるプロジェクトでこれらの変更を行う場合は、ユーザーごとの構成ファイルまたは
\fB$GIT_DIR/info/attributes\fR
の構成ファイルで行う必要があることに注意してください。リポジトリ内の
\fB\&.gitattributes\fR
ファイルは、リポジトリのすべてのユーザーに適用されます。
.sp
行末の正規化については以下のエントリを参照してください。属性ファイルの詳細については、\fBgitattributes\fR(5)
を参照してください。
.RE
.PP
Windowsの git diff はファイルの最後に \fB^M\fR があると表示します。
.RS 4
デフォルトでは、GitはファイルがUnixの行末で保存されることを想定しています。そのため、Windowsの行末の一部であるキャリッジリターン(\fB^M\fR)は、末尾の空白と見なされるため、表示されます。Gitはデフォルトで、既存の行ではなく、新しい行にのみ末尾の空白を表示します。
.sp
ファイルをUnixの行末でリポジトリに保存し、プラットフォームの行末に自動的に変換できます。 これを行うには、構成オプション
\fBcore\&.eol\fR
を
\fBnative\fR
に設定し、以下のエントリで、ファイルをテキストまたはバイナリとして構成する方法について確認してください。
.sp
行末からキャリッジリターン(CR;\ex0d)を削除したくない場合は、
\fBcore\&.whitespace\fR
設定を使用してこの動作を制御することもできます。
.RE
.PP
常に変更されるファイルがあるのはなぜですか？
.RS 4
内部的には、Gitは常にファイル名をバイトのシーケンスとして保存し、エンコードや大文字と小文字の区別は行いません。 ただし、WindowsとmacOSはどちらも、デフォルトでファイル名に対して大文字と小文字を区別します。その結果、大文字と小文字が区別される場合にのみ名前が異なる複数のファイルまたはディレクトリが作成される可能性があります。Gitはこれを問題なく処理できますが、ファイルシステムはこれらのファイルの1つしか保存できないため、Gitが他のファイルを読み取ってその内容を確認すると、変更されているように見えます。
.sp
ファイルが1つだけになるように、ファイルの1つを削除することをお勧めします。これは、以下のようなコマンド(2つのファイル
\fBAFile\&.txt\fR
と`afile\&.txt` を想定)を使用して、他の点ではクリーンな作業ツリーで実行できます:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git rm \-\-cached AFile\&.txt
$ git commit \-m \*(AqRemove files conflicting in case\*(Aq
$ git checkout \&.
.fi
.if n \{\
.RE
.\}
.sp
これにより、ディスクへの変更は回避され、追加のファイルは削除されます。プロジェクトでは、この問題が再発しないように、すべて小文字の名前などの命名規則を採用することをお勧めします。このような規則は、
\fBpre\-receive\fR
フックを使用して、または継続的インテグレーション(CI)システムにてチェックできます。
.sp
システムでスマッジまたはクリーンフィルター(a smudge or clean filter)が使用されているが、スマッジまたはクリーンフィルターを実行せずにファイルが以前にコミットされた場合、任意のプラットフォームで永続的に変更されたファイルが発生する可能性もあります。これを修正するには、他の点ではクリーンな作業ツリーで以下を実行します:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git add \-\-renormalize \&.
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
Gitにファイルを保存するための推奨の方法は何ですか？
.RS 4
Gitはあらゆるタイプのあらゆるファイルを保存および処理できますが、他の設定よりもうまく機能する設定がいくつかあります。一般に、テキストファイルは、LF(Unixスタイル)で終わるバイト順マーク(BOM)なしでUTF\-8に保存することをお勧めします。また、コミットメッセージでUTF\-8(ここでもBOMなし)を使用することをお勧めします。これらは、プラットフォーム間や
\fBgit diff\fR
や
\fBgit merge\fR
などのツールで最適に機能する設定です。
.sp
さらに、テキストベースまたは非テキストベースのストレージ形式を選択できる場合は、ファイルをテキスト形式で保存し、必要に応じて他の形式に変換することをお勧めします。たとえば、1行に1つのレコードを持つテキストベースのSQLダンプは、実際のデータベースファイルよりも差分とマージにはるかに適しています。同様に、MarkdownやAsciiDocなどのテキストベースの形式は、MicrosoftWordやPDFなどのバイナリ形式よりもうまく機能します。
.sp
同様に、バイナリ依存関係(共有ライブラリやJARファイルなど)を格納したり、リポジトリに製品をビルドしたりすることは、通常はお勧めしません。依存関係とビルド製品は、リポジトリに保存されている参照、URL、ハッシュのみを使用して、アーティファクトサーバーまたはパッケージサーバーに保存するのが最適です。
.sp
また、
\fBgitattributes\fR(5)
ファイルを設定して、どのファイルがテキストでどのファイルがバイナリであるかを明示的にマークすることをお勧めします。Gitに推測させたい場合は、属性
\fBtext=auto\fR
を設定できます。 たとえば、一部のプロジェクトでは以下の設定が適切な場合があります:
.sp
.if n \{\
.RS 4
.\}
.nf
# By default, guess\&.
*       text=auto
# Mark all C files as text\&.
*\&.c     text
# Mark all JPEG files as binary\&.
*\&.jpg   binary
.fi
.if n \{\
.RE
.\}
.sp
これらの設定は、ツールがパッチなどの出力に適切な形式を選択するのに役立ち、プラットフォームに適切な行末コードでファイルがチェックアウトされます。
.RE
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
