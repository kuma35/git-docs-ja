'\" t
.\"     Title: git-merge-base
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 12/10/2022
.\"    Manual: Git Manual
.\"    Source: Git 2.38.0.rc1.238.g4f4d434dc6.dirty
.\"  Language: English
.\"
.TH "GIT\-MERGE\-BASE" "1" "12/10/2022" "Git 2\&.38\&.0\&.rc1\&.238\&.g" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-merge-base \- マージのために可能な限り良い共通の祖先を見つけます
.SH "SYNOPSIS"
.sp
.nf
\fIgit merge\-base\fR [\-a|\-\-all] <commit> <commit>\&...
\fIgit merge\-base\fR [\-a|\-\-all] \-\-octopus <commit>\&...
\fIgit merge\-base\fR \-\-is\-ancestor <commit> <commit>
\fIgit merge\-base\fR \-\-independent <commit>\&...
\fIgit merge\-base\fR \-\-fork\-point <ref> [<commit>]
.fi
.sp
.SH "DESCRIPTION"
.sp
\fBgit merge\-base\fR は、3方向マージで使用する2つのコミット間で最良の共通の祖先を探します。「ある共通の祖先」の祖先が、「別の共通の祖先」である場合、「ある共通の祖先」は「別の共通の祖先」よりも「より良い」です。より良い共通の祖先を持たない共通の祖先は、「最良の共通の祖先」、つまり「マージベース」です。注意: コミットのペアに対して複数のマージベースが存在する可能性があることに注意してください。
.SH "OPERATION MODES"
.sp
最も一般的な特別のケースとして、コマンドラインで2つのコミットのみを指定することは、指定された2つのコミット間のマージベースを計算することを意味します。
.sp
より一般的には、マージベースを計算する2つのコミットのうち、1つはコマンドラインの最初のコミット引数で指定されます。もう1つのコミットは、コマンドラインの残りのすべてのコミットをマージする(おそらく仮想の)コミットです。
.sp
結果として、3つ以上のコミットが指定されている場合、「マージベース」は必ずしも各コミット引数に含まれているとは限りません。 これは、 \fB\-\-merge\-base\fR オプションを伴った \fBgit-show-branch\fR(1) とは異なります。
.PP
\fB\-\-octopus\fR
.RS 4
n方向マージの準備として、提供されたすべてのコミットの最良の共通の祖先を計算します。これは、
\fBgit show\-branch \-\-merge\-base\fR
の振る舞いを模倣しています。
.RE
.PP
\fB\-\-independent\fR
.RS 4
マージベースを出力する代わりに、提供されたコミットの最小限のサブセットを同一祖先で出力します。言い換えれば、与えられたコミットの中にで他から到達できないコミットをリストします。これは、
\fBgit show\-branch \-\-independent\fR
の振る舞いを模倣しています。
.RE
.PP
\fB\-\-is\-ancestor\fR
.RS 4
1番目の <commit> が2番目の <commit> の祖先であるかどうかを確認し、trueの場合はステータス0で終了し、そうでない場合はステータス1で終了します。 エラーは、1では無い、かつ、ゼロ以外のステータスによって通知されます。
.RE
.PP
\fB\-\-fork\-point\fR
.RS 4
ブランチ(または <commit> につながる履歴)が、別のブランチ(または参照) <ref> から分岐したポイントを見つけます。これは、2つのコミットの共通の祖先を探すだけでなく、 <ref> のreflogを考慮して、 <commit> につながる履歴がブランチ <ref> の以前の実体(incarnation)から分岐したかどうかを確認します(下記の、このモードに関するdiscussionを参照してください)。
.RE
.SH "OPTIONS"
.PP
\fB\-a\fR, \fB\-\-all\fR
.RS 4
1つだけではなく、コミットのすべてのマージベースを出力します。
.RE
.SH "DISCUSSION"
.sp
2つのコミット「A」と「B」が与えられると、「git merge\-base A B」は、親子関係を辿って「A」と「B」の両方から到達可能なコミットを出力します。
.sp
たとえば、このトポロジでは以下のようになります:
.sp
.if n \{\
.RS 4
.\}
.nf
         o\-\-\-o\-\-\-o\-\-\-B
        /
\-\-\-o\-\-\-1\-\-\-o\-\-\-o\-\-\-o\-\-\-A
.fi
.if n \{\
.RE
.\}
.sp
「A」と「B」の間のマージベースは「1」です。
.sp
3つのコミット「A」、「B」、「C」が与えられると、「git merge\-base A B C」は、「A」と仮想のコミット「M」の間のマージベースを計算します。仮想のコミット「M」は、「B」と「C」のマージです。たとえば、このトポロジでは以下のようになります:
.sp
.if n \{\
.RS 4
.\}
.nf
       o\-\-\-o\-\-\-o\-\-\-o\-\-\-C
      /
     /   o\-\-\-o\-\-\-o\-\-\-B
    /   /
\-\-\-2\-\-\-1\-\-\-o\-\-\-o\-\-\-o\-\-\-A
.fi
.if n \{\
.RE
.\}
.sp
\fBgit merge\-base A B C\fR の結果は「1」です。 これは、「B」と「C」の間にマージコミット「M」がある同等のトポロジが以下のとおりであるためです:
.sp
.if n \{\
.RS 4
.\}
.nf
       o\-\-\-o\-\-\-o\-\-\-o\-\-\-o
      /                 \e
     /   o\-\-\-o\-\-\-o\-\-\-o\-\-\-M
    /   /
\-\-\-2\-\-\-1\-\-\-o\-\-\-o\-\-\-o\-\-\-A
.fi
.if n \{\
.RE
.\}
.sp
そして、 \fBgit merge\-base A M\fR の結果は「1」です。 コミット「2」も「A」と「M」の間の共通の祖先ですが、「2」は「1」の祖先であるため、「1」の方がよりよい共通の祖先です。 したがって、「2」はマージベースではありません。
.sp
\fBgit merge\-base \-\-octopus A B C\fR の結果は「2」です。これは、「2」がすべてのコミットの中で最も共通の祖先であるためです。
.sp
履歴に交差マージ(criss\-cross merges)が含まれる場合、2つのコミットに対して「最良の」共通の祖先が複数存在する可能性があります。 たとえば、このトポロジでは以下のようになります:
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-\-1\-\-\-o\-\-\-A
    \e /
     X
    / \e
\-\-\-2\-\-\-o\-\-\-o\-\-\-B
.fi
.if n \{\
.RE
.\}
.sp
「1」と「2」はどちらもAとBのマージベースです。どちらももう一方よりも優れているわけではありません（どちらも「最良の」マージベースです）。 \fB\-\-all\fR オプションが指定されていない場合、どちらの最良のマージベースが出力されるかは指定されていません。
.sp
2つのコミットAとBの間の「早送り性」(fast\-forward\-ness)をチェックする、という慣用句は、AとBの間のマージベースを計算し(少なくとも以前はそうでした)、それがAと同一かどうかをチェックすることで、その場合AはBの祖先です。この慣用句は古いスクリプトでよく使用されます。
.sp
.if n \{\
.RS 4
.\}
.nf
A=$(git rev\-parse \-\-verify A)
if test "$A" = "$(git merge\-base A B)"
then
        \&.\&.\&. A is an ancestor of B \&.\&.\&.
fi
.fi
.if n \{\
.RE
.\}
.sp
現在gitでは、あなたは以下のように、これをより直接的な方法で言うことができます:
.sp
.if n \{\
.RS 4
.\}
.nf
if git merge\-base \-\-is\-ancestor A B
then
        \&.\&.\&. A is an ancestor of B \&.\&.\&.
fi
.fi
.if n \{\
.RE
.\}
.sp
このように、上記にとって代わります。
.SH "DISCUSSION ON FORK\-POINT MODE"
.sp
\fBgit switch \-c topic origin/master\fR で作成された \fBtopic\fR ブランチで作業した後、リモート追跡ブランチ \fBorigin/master\fR の履歴が巻き戻されて再構築された可能性があり、以下形の履歴につながります:
.sp
.if n \{\
.RS 4
.\}
.nf
                 o\-\-\-B2
                /
\-\-\-o\-\-\-o\-\-\-B1\-\-o\-\-\-o\-\-\-o\-\-\-B (origin/master)
        \e
         B0
          \e
           D0\-\-\-D1\-\-\-D (topic)
.fi
.if n \{\
.RE
.\}
.sp
ここで、 \fBorigin/master\fR はコミットB0、B1、B2を指していましたが、現在はBを指しています。そして、 \fBorigin/master\fR がB0にあったときに、あなたの \fBtopic\fR ブランチがその上で開始されました。あなたは、その上に、D0、D1、Dの3つのコミットを作成しました。あなたは更新された origin/master の上に、トピックで行った作業をリベースしたいとします。
.sp
このような場合、 \fBgit merge\-base origin/master topic\fR は上の図のB0の親を返しますが、 \fBB0^\&.\&.D\fR はBの上でリプレイしたいコミットの範囲ではありません(これには、あなたが書いたものではないB0が含まれます。これは、先端をB0からB1に移動したときに破棄された自分側で無い側(the other side)のコミットです)。
.sp
\fBgit merge\-base \-\-fork\-point origin/master topic\fR は、このような場合に役立つように設計されています。 Bだけでなく、B0、B1、およびB2も(つまり、リポジトリのreflogが知っているリモート追跡ブランチの古い先端も)考慮に入れて、あなたのtopicブランチが構築されたコミットを確認し、B0を見つけます。これにより、topicのコミットのみをリプレイできます。ただし、自分の側で無い側(the other side)で後で破棄されるコミットは除きます。
.sp
したがって、以下は
.sp
.if n \{\
.RS 4
.\}
.nf
$ fork_point=$(git merge\-base \-\-fork\-point origin/master topic)
.fi
.if n \{\
.RE
.\}
.sp
B0 を見つけ、そして
.sp
.if n \{\
.RS 4
.\}
.nf
$ git rebase \-\-onto origin/master $fork_point topic
.fi
.if n \{\
.RE
.\}
.sp
以下の形の新しい履歴を作成するために、B の上で D0 と D1 と D をリプレイします:
.sp
.if n \{\
.RS 4
.\}
.nf
                 o\-\-\-B2
                /
\-\-\-o\-\-\-o\-\-\-B1\-\-o\-\-\-o\-\-\-o\-\-\-B (origin/master)
        \e                   \e
         B0                  D0\*(Aq\-\-D1\*(Aq\-\-D\*(Aq (topic \- updated)
          \e
           D0\-\-\-D1\-\-\-D (topic \- old)
.fi
.if n \{\
.RE
.\}
.sp
注意点としては、リポジトリ内の古いreflogエントリが \fBgit gc\fR によって期限切れになる可能性があることです。 B0がリモート追跡ブランチ \fBorigin/ master\fR のreflogに表示されなくなった場合、\fB\-\-fork\-point\fR モードは明らかにそれを見つけることができず失敗し、ランダムで役に立たない結果(\fB\-\-fork\-point\fR オプション無しの同じコマンドが返すB0の親など)を与えることを避けます。
.sp
また、 \fB\-\-fork\-point\fR モードを使用するリモート追跡ブランチは、あなたのトピックがその先端から分岐したものである必要があります。先端よりも古いコミットからフォークした場合、このモードではフォークポイントが見つかりません。(上記の履歴例でB0が存在せず、 origin/master がB1で始まり、B2、次にBに移動し、 origin/master がB1のときに、 \fBorigin/master^\fR でトピックをフォークしたと想像してください。履歴の形は上記と同じですが、B0はありません。B1の親は、 \fBgit merge\-base origin/master topic\fR が正しく検出するものですが、 \fB\-\-fork\-point\fR モードは検出しません。なぜなら origin/master の先端にあったコミットの1つではないためです。）
.SH "SEE ALSO"
.sp
\fBgit-rev-list\fR(1), \fBgit-show-branch\fR(1), \fBgit-merge\fR(1)
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
