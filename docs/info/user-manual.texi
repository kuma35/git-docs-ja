\input texinfo
@setfilename git.info
@documentencoding UTF-8
@settitle Git User Manual
@dircategory Development
@direntry
* Git: (git).           A fast distributed revision control system
@end direntry

@node Top, Introduction, , (dir)
@documentlanguage en
@top Git User Manual

@menu
* Introduction::
* Repositories and Branches::
* Exploring Git history::
* Developing with Git::
* Sharing development with others::
* Rewriting history and maintaining patch series::
* Advanced branch management::
* Git concepts::
* Submodules::
* Low-level Git operations::
* Hacking Git::
* Git Glossary::
* Git Quick Reference::
* Notes and todo list for this manual::

@detailmenu
— The Detailed Node Listing —

Repositories and Branches

* How to get a Git repository::
* How to check out a different version of a project::
* Understanding History; Commits::
* Manipulating branches::
* Examining an old version without creating a new branch::
* Examining branches from a remote repository::
* Naming branches, tags, and other references: Naming branches; tags; and other references.
* Updating a repository with git fetch::
* Fetching branches from other repositories::

Exploring Git history

* How to use bisect to find a regression::
* Naming commits::
* Creating tags::
* Browsing revisions::
* Generating diffs::
* Viewing old file versions::
* Examples::

Developing with Git

* Telling Git your name::
* Creating a new repository::
* How to make a commit::
* Creating good commit messages::
* Ignoring files::
* How to merge::
* Resolving a merge::
* Undoing a merge::
* Fast-forward merges::
* Fixing mistakes::
* Ensuring good performance::
* Ensuring reliability::

Sharing development with others

* Getting updates with git pull::
* Submitting patches to a project::
* Importing patches to a project::
* Public Git repositories::
* How to get a Git repository with minimal history::
* Examples: Examples <1>.

Rewriting history and maintaining patch series

* Creating the perfect patch series::
* Keeping a patch series up to date using git rebase::
* Rewriting a single commit::
* Reordering or selecting from a patch series::
* Using interactive rebases::
* Other tools::
* Problems with rewriting history::
* Why bisecting merge commits can be harder than bisecting linear history::

Advanced branch management

* Fetching individual branches::
* git fetch and fast-forwards::
* Forcing git fetch to do non-fast-forward updates::
* Configuring remote-tracking branches::

Git concepts

* The Object Database::
* The index::

Submodules

* Pitfalls with submodules::

Low-level Git operations

* Object access and manipulation::
* The Workflow::
* Examining the data::
* Merging multiple trees::
* Merging multiple trees, continued: Merging multiple trees; continued.

Hacking Git

* Object storage format::
* A birds-eye view of Git’s source code::

Git Glossary

* Git explained::

Git Quick Reference

* Creating a new repository: Creating a new repository <1>.
* Managing branches::
* Exploring history::
* Making changes::
* Merging::
* Sharing your changes::
* Repository maintenance::

Notes and todo list for this manual

* Todo list::

@end detailmenu
@end menu

@node Introduction, Repositories and Branches, Top, Top
@unnumbered Introduction

Gitは高速分散型リビジョン管理システムです。

この説明書は、基本的なUNIXコマンドラインスキルを持っているが、Gitの予備知識がない人でも読めるように設計されています。

[Cross reference to non-existant ID “repository-and-branches”] と @ref{Exploring Git history}
は、gitを使用してプロジェクトをフェッチして調査する方法を説明しています—これらの章を読んで、ソフトウェアプロジェクトの特定のバージョンをビルド、テスト、デグレを探す方法を学んで下さい。

実際の開発を行う必要がある人は、 [Cross reference to non-existant ID “Developmenting-With-git”] と @ref{Sharing development with others}
も読みたいと思うでしょう。

それ以降の章では、より専門的なトピックについて説明します。

包括的なリファレンスドキュメントは、マニュアルページまたは @uref{git-help.html,git-help(1)} コマンドから入手できます。 たとえば、コマンド
@samp{git clone <repo>} の場合、次のいずれかを使用できます:

@example
$ man git-clone
@end example

または:

@example
$ git help clone
@end example

後者では、選択したマニュアルビューアを使用できます。 詳細については @uref{git-help.html,git-help(1)} を参照してください。

詳しい説明なしでのGitコマンドの概要については、 @ref{Git Quick Reference} も参照してください。

最後に、このマニュアルをより完全にするためにあなたが貢献する方法については、 @ref{Notes and todo list for this manual} を参照してください。

@node Repositories and Branches, Exploring Git history, Introduction, Top
@chapter Repositories and Branches

@menu
* How to get a Git repository::
* How to check out a different version of a project::
* Understanding History; Commits::
* Manipulating branches::
* Examining an old version without creating a new branch::
* Examining branches from a remote repository::
* Naming branches, tags, and other references: Naming branches; tags; and other references.
* Updating a repository with git fetch::
* Fetching branches from other repositories::
@end menu

@node How to get a Git repository, How to check out a different version of a project, , Repositories and Branches
@section How to get a Git repository

このマニュアルを読むときに、Gitリポジトリを試してみると便利です。

これを取得する最良の方法は、 @uref{git-clone.html,git-clone(1)}
コマンドを使用して既存のリポジトリのコピーをダウンロードすることです。あなたがプロジェクトをまだ考えていない場合は、いくつかの興味深い例を以下に示します:

@example
        # Git itself (approx. 40MB download):
$ git clone git://git.kernel.org/pub/scm/git/git.git
        # the Linux kernel (approx. 640MB download):
$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
@end example

大規模なプロジェクトでは、最初のクローン作成に時間がかかる場合がありますが、クローン作成が必要になるのは1回だけです。

cloneコマンドは、プロジェクトにちなんで名付けられた新しいディレクトリを作成します(上記の例では @samp{git} または
@samp{linux})。このディレクトリにcdすると、 working tree (@pxref{[def_working_tree]})
と呼ばれるプロジェクトファイルのコピーと、プロジェクトの歴史について全ての情報を含む @samp{.git}
という名前の特別なトップレベルディレクトリが含まれていることがわかります。

@node How to check out a different version of a project, Understanding History; Commits, How to get a Git repository, Repositories and Branches
@section How to check out a different version of a project

Gitは、ファイルのコレクションの履歴を保存するためのツールとして最もよく考えられています。プロジェクトのコンテンツの相互に関連するスナップショットの圧縮されたコレクションとして履歴を保存します。
Gitでは、このような各バージョンは commit (@pxref{[def_commit]}) と呼ばれます。

これらのスナップショットは、必ずしもすべてが古いものから新しいものへと一列に配置されているわけではなく、作業は、
branches (@pxref{[def_branch]})
と呼ばれる並行する開発ラインに沿って同時に進行する場合があります。これは、マージおよび分岐する場合があります。

単一のGitリポジトリで、複数のブランチの開発を追跡できます。これは、各ブランチの最新のコミットを参照する heads (@pxref{[def_head]})
のリストを保持することによって行われます。 @uref{git-branch.html,git-branch(1)} コマンドは、ブランチヘッド(branch
heads)を一覧表示します。

@example
$ git branch
* master
@end example

新しくクローンされたリポジトリには、デフォルトで「master」という名前の単一のブランチヘッドが含まれ、作業ディレクトリはそのブランチヘッドによって参照されるプロジェクトの状態に初期化されます。

ほとんどのプロジェクトは tags (@pxref{[def_tag]}) も使用します。タグはヘッドのようであり、プロジェクトの履歴への参照であり、
@uref{git-tag.html,git-tag(1)} コマンドを使用して一覧表示できます。

@example
$ git tag -l
v2.6.11
v2.6.11-tree
v2.6.12
v2.6.12-rc2
v2.6.12-rc3
v2.6.12-rc4
v2.6.12-rc5
v2.6.12-rc6
v2.6.13
...
@end example

タグは常にプロジェクトの同じバージョンを指すことが期待されますが、開発が進むにつれてヘッドは前進することが期待されます。

これらのバージョンのいずれかを指す新しいブランチヘッドを作成し、 @uref{git-switch.html,git-switch(1)} を使用してチェックアウトします:

@example
$ git switch -c new v2.6.13
@end example

作業ディレクトリは、v2.6.13 のタグが付けられたときにプロジェクトが持っていた内容を反映し、 @uref{git-branch.html,git-branch(1)}
は2つのブランチを表示し、アスタリスクは現在チェックアウトされているブランチを示します。

@example
$ git branch
  master
* new
@end example

あなたがバージョン 2.6.17 を使用することにした場合は、以下のようにして、代わりに v2.6.17 を指すように現在のブランチを変更できます。

@example
$ git reset --hard v2.6.17
@end example

注意:
現在のブランチヘッドが履歴内の特定のポイントへの唯一の参照である場合、そのブランチをリセットすると、それが指していた履歴を見つける方法がなくなる可能性があることに注意してください。したがって、このコマンドは慎重に使用してください。

@node Understanding History; Commits, Manipulating branches, How to check out a different version of a project, Repositories and Branches
@section Understanding History: Commits

プロジェクトの履歴のすべての変更は、コミットによって表されます。 @uref{git-show.html,git-show(1)}
コマンドは、現在のブランチでの最新のコミットを表示します:

@example
$ git show
commit 17cf781661e6d38f737f15f53ab552f1e95960d7
Author: Linus Torvalds <torvalds@@ppc970.osdl.org.(none)>
Date:   Tue Apr 19 14:11:06 2005 -0700

    Remove duplicate getenv(DB_ENVIRONMENT) call

    Noted by Tony Luck.

diff --git a/init-db.c b/init-db.c
index 65898fa..b002dc6 100644
--- a/init-db.c
+++ b/init-db.c
@@@@ -7,7 +7,7 @@@@

 int main(int argc, char **argv)
 @{
-       char *sha1_dir = getenv(DB_ENVIRONMENT), *path;
+       char *sha1_dir, *path;
        int len, i;

        if (mkdir(".git", 0755) < 0) @{
@end example

ご覧のとおり、コミットは、誰が最新の変更を行ったか、何をしたか、そしてその理由を示しています。

すべてのコミットには16進40桁のIDがあります。それは「オブジェクト名」または「SHA-1 ID」と呼ばれることもあり、「git
show」出力の最初の行に表示されます。通常、タグやブランチ名などの短い名前でコミットを参照できますが、この長い名前も役立ちます。最も重要なことは、これはこのコミットにとってグローバルに一意の名前です。したがって、他の誰かにオブジェクト名を(たとえば電子メールで)伝えると、その名前が自分のリポジトリで行うのと同じコミットを参照することが保証されます(彼らのリポジトリにそのコミットがあると仮定します)。オブジェクト名はコミットの内容に対するハッシュとして計算されるため、名前が変更されてなければコミットも変更されてない事が保証されます。

実際、 @ref{Git concepts}
では、ファイルデータやディレクトリの内容など、Gitの履歴に保存されているすべてのものが、その内容のハッシュである名前が付いたオブジェクトに保存されていることがわかります。

@menu
* Understanding history; commits, parents, and reachability: Understanding history; commits; parents; and reachability.
* Understanding history; History diagrams::
* Understanding history; What is a branch?::
@end menu

@node Understanding history; commits; parents; and reachability, Understanding history; History diagrams, , Understanding History; Commits
@subsection Understanding history: commits, parents, and reachability

Every commit (except the very first commit in a project) also has a parent
commit which shows what happened before this commit.  Following the chain of
parents will eventually take you back to the beginning of the project.

However, the commits do not form a simple list; Git allows lines of
development to diverge and then reconverge, and the point where two lines of
development reconverge is called a "merge".  The commit representing a merge
can therefore have more than one parent, with each parent representing the
most recent commit on one of the lines of development leading to that point.

The best way to see how this works is using the @uref{gitk.html,gitk(1)} command;
running gitk now on a Git repository and looking for merge commits will help
understand how Git organizes history.

In the following, we say that commit X is "reachable" from commit Y if
commit X is an ancestor of commit Y.  Equivalently, you could say that Y is
a descendant of X, or that there is a chain of parents leading from commit Y
to commit X.

@node Understanding history; History diagrams, Understanding history; What is a branch?, Understanding history; commits; parents; and reachability, Understanding History; Commits
@subsection Understanding history: History diagrams

We will sometimes represent Git history using diagrams like the one below.
Commits are shown as "o", and the links between them with lines drawn with -
/ and \.  Time goes left to right:

@example
         o--o--o <-- Branch A
        /
 o--o--o <-- master
        \
         o--o--o <-- Branch B
@end example

If we need to talk about a particular commit, the character "o" may be
replaced with another letter or number.

@node Understanding history; What is a branch?, , Understanding history; History diagrams, Understanding History; Commits
@subsection Understanding history: What is a branch?

When we need to be precise, we will use the word "branch" to mean a line of
development, and "branch head" (or just "head") to mean a reference to the
most recent commit on a branch.  In the example above, the branch head named
"A" is a pointer to one particular commit, but we refer to the line of three
commits leading up to that point as all being part of "branch A".

However, when no confusion will result, we often just use the term "branch"
both for branches and for branch heads.

@node Manipulating branches, Examining an old version without creating a new branch, Understanding History; Commits, Repositories and Branches
@section Manipulating branches

Creating, deleting, and modifying branches is quick and easy; here’s a
summary of the commands:

@table @asis

@item  @samp{git branch} 
全てのブランチを一覧表示します。

@item  @samp{git branch <branch>} 
create a new branch named @samp{<branch>}, referencing the same point in history
as the current branch.

@item  @samp{git branch <branch> <start-point>} 
create a new branch named @samp{<branch>}, referencing @samp{<start-point>}, which may
be specified any way you like, including using a branch name or a tag name.

@item  @samp{git branch -d <branch>} 
delete the branch @samp{<branch>}; if the branch is not fully merged in its
upstream branch or contained in the current branch, this command will fail
with a warning.

@item  @samp{git branch -D <branch>} 
delete the branch @samp{<branch>} irrespective of its merged status.

@item  @samp{git switch <branch>} 
make the current branch @samp{<branch>}, updating the working directory to
reflect the version referenced by @samp{<branch>}.

@item  @samp{git switch -c <new> <start-point>} 
create a new branch @samp{<new>} referencing @samp{<start-point>}, and check it out.
@end table

The special symbol "HEAD" can always be used to refer to the current
branch.  In fact, Git uses a file named @samp{HEAD} in the @samp{.git} directory to
remember which branch is current:

@example
$ cat .git/HEAD
ref: refs/heads/master
@end example

@node Examining an old version without creating a new branch, Examining branches from a remote repository, Manipulating branches, Repositories and Branches
@section Examining an old version without creating a new branch

The @samp{git switch} command normally expects a branch head, but will also
accept an arbitrary commit when invoked with --detach; for example, you can
check out the commit referenced by a tag:

@example
$ git switch --detach v2.6.17
Note: checking out 'v2.6.17'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another switch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command again. Example:

  git switch -c new_branch_name

HEAD is now at 427abfa Linux v2.6.17
@end example

The HEAD then refers to the SHA-1 of the commit instead of to a branch, and
git branch shows that you are no longer on a branch:

@example
$ cat .git/HEAD
427abfa28afedffadfca9dd8b067eb6d36bac53f
$ git branch
* (detached from v2.6.17)
  master
@end example

In this case we say that the HEAD is "detached".

This is an easy way to check out a particular version without having to
make up a name for the new branch.   You can still create a new branch
(or tag) for this version later if you decide to.

@node Examining branches from a remote repository, Naming branches; tags; and other references, Examining an old version without creating a new branch, Repositories and Branches
@section Examining branches from a remote repository

The "master" branch that was created at the time you cloned is a copy of the
HEAD in the repository that you cloned from.  That repository may also have
had other branches, though, and your local repository keeps branches which
track each of those remote branches, called remote-tracking branches, which
you can view using the @samp{-r} option to @uref{git-branch.html,git-branch(1)}:

@example
$ git branch -r
  origin/HEAD
  origin/html
  origin/maint
  origin/man
  origin/master
  origin/next
  origin/seen
  origin/todo
@end example

In this example, "origin" is called a remote repository, or "remote" for
short. The branches of this repository are called "remote branches" from our
point of view. The remote-tracking branches listed above were created based
on the remote branches at clone time and will be updated by @samp{git fetch}
(hence @samp{git pull}) and @samp{git push}. See
@ref{Updating a repository with git fetch} for details.

You might want to build on one of these remote-tracking branches on a branch
of your own, just as you would for a tag:

@example
$ git switch -c my-todo-copy origin/todo
@end example

You can also check out @samp{origin/todo} directly to examine it or write a
one-off patch.  See detached head (@pxref{Examining an old version without creating a new branch}).

Note that the name "origin" is just the name that Git uses by default to
refer to the repository that you cloned from.

@node Naming branches; tags; and other references, Updating a repository with git fetch, Examining branches from a remote repository, Repositories and Branches
@section Naming branches, tags, and other references

Branches, remote-tracking branches, and tags are all references to commits.
All references are named with a slash-separated path name starting with
@samp{refs}; the names we’ve been using so far are actually shorthand:

@itemize 

@item
ブランチ @samp{test} は @samp{refs/heads/test} の略です。

@item
タグ @samp{v2.6.18} は @samp{refs/tags/v2.6.18} の略です。

@item
@samp{origin/master} は @samp{refs/remotes/origin/master} の略です。
@end itemize

The full name is occasionally useful if, for example, there ever exists a
tag and a branch with the same name.

(Newly created refs are actually stored in the @samp{.git/refs} directory, under
the path given by their name.  However, for efficiency reasons they may also
be packed together in a single file; see @uref{git-pack-refs.html,git-pack-refs(1)}).

As another useful shortcut, the "HEAD" of a repository can be referred to
just using the name of that repository.  So, for example, "origin" is
usually a shortcut for the HEAD branch in the repository "origin".

For the complete list of paths which Git checks for references, and the
order it uses to decide which to choose when there are multiple references
with the same shorthand name, see the "SPECIFYING REVISIONS" section of
@uref{gitrevisions.html,gitrevisions(7)}.

@node Updating a repository with git fetch, Fetching branches from other repositories, Naming branches; tags; and other references, Repositories and Branches
@section Updating a repository with git fetch

After you clone a repository and commit a few changes of your own, you may
wish to check the original repository for updates.

The @samp{git-fetch} command, with no arguments, will update all of the
remote-tracking branches to the latest version found in the original
repository.  It will not touch any of your own branches—not even the
"master" branch that was created for you on clone.

@node Fetching branches from other repositories, , Updating a repository with git fetch, Repositories and Branches
@section Fetching branches from other repositories

You can also track branches from repositories other than the one you cloned
from, using @uref{git-remote.html,git-remote(1)}:

@example
$ git remote add staging git://git.kernel.org/.../gregkh/staging.git
$ git fetch staging
...
From git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging
 * [new branch]      master     -> staging/master
 * [new branch]      staging-linus -> staging/staging-linus
 * [new branch]      staging-next -> staging/staging-next
@end example

New remote-tracking branches will be stored under the shorthand name that
you gave @samp{git remote add}, in this case @samp{staging}:

@example
$ git branch -r
  origin/HEAD -> origin/master
  origin/master
  staging/master
  staging/staging-linus
  staging/staging-next
@end example

If you run @samp{git fetch <remote>} later, the remote-tracking branches for the
named @samp{<remote>} will be updated.

If you examine the file @samp{.git/config}, you will see that Git has added a new
stanza:

@example
$ cat .git/config
...
[remote "staging"]
        url = git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging.git
        fetch = +refs/heads/*:refs/remotes/staging/*
...
@end example

This is what causes Git to track the remote’s branches; you may modify or
delete these configuration options by editing @samp{.git/config} with a text
editor.  (See the "CONFIGURATION FILE" section of @uref{git-config.html,git-config(1)} for
details.)

@node Exploring Git history, Developing with Git, Repositories and Branches, Top
@chapter Exploring Git history

Git is best thought of as a tool for storing the history of a collection of
files.  It does this by storing compressed snapshots of the contents of a
file hierarchy, together with "commits" which show the relationships between
these snapshots.

Git provides extremely flexible and fast tools for exploring the history of
a project.

We start with one specialized tool that is useful for finding the commit
that introduced a bug into a project.

@menu
* How to use bisect to find a regression::
* Naming commits::
* Creating tags::
* Browsing revisions::
* Generating diffs::
* Viewing old file versions::
* Examples::
@end menu

@node How to use bisect to find a regression, Naming commits, , Exploring Git history
@section How to use bisect to find a regression

Suppose version 2.6.18 of your project worked, but the version at "master"
crashes.  Sometimes the best way to find the cause of such a regression is
to perform a brute-force search through the project’s history to find the
particular commit that caused the problem.  The @uref{git-bisect.html,git-bisect(1)}
command can help you do this:

@example
$ git bisect start
$ git bisect good v2.6.18
$ git bisect bad master
Bisecting: 3537 revisions left to test after this
[65934a9a028b88e83e2b0f8b36618fe503349f8e] BLOCK: Make USB storage depend on SCSI rather than selecting it [try #6]
@end example

If you run @samp{git branch} at this point, you’ll see that Git has temporarily
moved you in "(no branch)". HEAD is now detached from any branch and points
directly to a commit (with commit id 65934) that is reachable from "master"
but not from v2.6.18. Compile and test it, and see whether it
crashes. Assume it does crash. Then:

@example
$ git bisect bad
Bisecting: 1769 revisions left to test after this
[7eff82c8b1511017ae605f0c99ac275a7e21b867] i2c-core: Drop useless bitmaskings
@end example

checks out an older version.  Continue like this, telling Git at each stage
whether the version it gives you is good or bad, and notice that the number
of revisions left to test is cut approximately in half each time.

After about 13 tests (in this case), it will output the commit id of the
guilty commit.  You can then examine the commit with @uref{git-show.html,git-show(1)},
find out who wrote it, and mail them your bug report with the commit id.
Finally, run

@example
$ git bisect reset
@end example

to return you to the branch you were on before.

Note that the version which @samp{git bisect} checks out for you at each point is
just a suggestion, and you’re free to try a different version if you think
it would be a good idea.  For example, occasionally you may land on a commit
that broke something unrelated; run

@example
$ git bisect visualize
@end example

which will run gitk and label the commit it chose with a marker that says
"bisect".  Choose a safe-looking commit nearby, note its commit id, and
check it out with:

@example
$ git reset --hard fb47ddb2db
@end example

then test, run @samp{bisect good} or @samp{bisect bad} as appropriate, and continue.

Instead of @samp{git bisect visualize} and then @samp{git reset --hard fb47ddb2db},
you might just want to tell Git that you want to skip the current commit:

@example
$ git bisect skip
@end example

In this case, though, Git may not eventually be able to tell the first bad
one between some first skipped commits and a later bad commit.

There are also ways to automate the bisecting process if you have a test
script that can tell a good from a bad commit. See @uref{git-bisect.html,git-bisect(1)} for
more information about this and other @samp{git bisect} features.

@node Naming commits, Creating tags, How to use bisect to find a regression, Exploring Git history
@section Naming commits

We have seen several ways of naming commits already:

@itemize 

@item
16進40桁のオブジェクト名

@item
branch name: refers to the commit at the head of the given branch

@item
tag name: refers to the commit pointed to by the given tag (we’ve seen
branches and tags are special cases of
references (@pxref{Naming branches; tags; and other references})).

@item
HEAD: refers to the head of the current branch
@end itemize

There are many more; see the "SPECIFYING REVISIONS" section of the
@uref{gitrevisions.html,gitrevisions(7)} man page for the complete list of ways to name
revisions.  Some examples:

@example
$ git show fb47ddb2 # the first few characters of the object name
                    # are usually enough to specify it uniquely
$ git show HEAD^    # the parent of the HEAD commit
$ git show HEAD^^   # the grandparent
$ git show HEAD~4   # the great-great-grandparent
@end example

Recall that merge commits may have more than one parent; by default, @samp{^} and
@samp{~} follow the first parent listed in the commit, but you can also choose:

@example
$ git show HEAD^1   # show the first parent of HEAD
$ git show HEAD^2   # show the second parent of HEAD
@end example

In addition to HEAD, there are several other special names for commits:

Merges (to be discussed later), as well as operations such as @samp{git reset},
which change the currently checked-out commit, generally set ORIG_HEAD to
the value HEAD had before the current operation.

The @samp{git fetch} operation always stores the head of the last fetched branch
in FETCH_HEAD.  For example, if you run @samp{git fetch} without specifying a
local branch as the target of the operation

@example
$ git fetch git://example.com/proj.git theirbranch
@end example

the fetched commits will still be available from FETCH_HEAD.

When we discuss merges we’ll also see the special name MERGE_HEAD, which
refers to the other branch that we’re merging in to the current branch.

The @uref{git-rev-parse.html,git-rev-parse(1)} command is a low-level command that is
occasionally useful for translating some name for a commit to the object
name for that commit:

@example
$ git rev-parse origin
e05db0fd4f31dde7005f075a84f96b360d05984b
@end example

@node Creating tags, Browsing revisions, Naming commits, Exploring Git history
@section Creating tags

We can also create a tag to refer to a particular commit; after running

@example
$ git tag stable-1 1b2e1d63ff
@end example

You can use @samp{stable-1} to refer to the commit 1b2e1d63ff.

This creates a "lightweight" tag.  If you would also like to include a
comment with the tag, and possibly sign it cryptographically, then you
should create a tag object instead; see the @uref{git-tag.html,git-tag(1)} man page for
details.

@node Browsing revisions, Generating diffs, Creating tags, Exploring Git history
@section Browsing revisions

The @uref{git-log.html,git-log(1)} command can show lists of commits.  On its own, it
shows all commits reachable from the parent commit; but you can also make
more specific requests:

@example
$ git log v2.5..        # commits since (not reachable from) v2.5
$ git log test..master  # commits reachable from master but not test
$ git log master..test  # ...reachable from test but not master
$ git log master...test # ...reachable from either test or master,
                        #    but not both
$ git log --since="2 weeks ago" # commits from the last 2 weeks
$ git log Makefile      # commits which modify Makefile
$ git log fs/           # ... which modify any file under fs/
$ git log -S'foo()'     # commits which add or remove any file data
                        # matching the string 'foo()'
@end example

And of course you can combine all of these; the following finds commits
since v2.5 which touch the @samp{Makefile} or any file under @samp{fs}:

@example
$ git log v2.5.. Makefile fs/
@end example

You can also ask git log to show patches:

@example
$ git log -p
@end example

See the @samp{--pretty} option in the @uref{git-log.html,git-log(1)} man page for more
display options.

Note that git log starts with the most recent commit and works backwards
through the parents; however, since Git history can contain multiple
independent lines of development, the particular order that commits are
listed in may be somewhat arbitrary.

@node Generating diffs, Viewing old file versions, Browsing revisions, Exploring Git history
@section Generating diffs

You can generate diffs between any two versions using @uref{git-diff.html,git-diff(1)}:

@example
$ git diff master..test
@end example

That will produce the diff between the tips of the two branches.  If you’d
prefer to find the diff from their common ancestor to test, you can use
three dots instead of two:

@example
$ git diff master...test
@end example

Sometimes what you want instead is a set of patches; for this you can use
@uref{git-format-patch.html,git-format-patch(1)}:

@example
$ git format-patch master..test
@end example

will generate a file with a patch for each commit reachable from test but
not from master.

@node Viewing old file versions, Examples, Generating diffs, Exploring Git history
@section Viewing old file versions

You can always view an old version of a file by just checking out the
correct revision first.  But sometimes it is more convenient to be able to
view an old version of a single file without checking anything out; this
command does that:

@example
$ git show v2.5:fs/locks.c
@end example

Before the colon may be anything that names a commit, and after it may be
any path to a file tracked by Git.

@node Examples, , Viewing old file versions, Exploring Git history
@section Examples

@menu
* Counting the number of commits on a branch::
* Check whether two branches point at the same history::
* Find first tagged version including a given fix::
* Showing commits unique to a given branch::
* Creating a changelog and tarball for a software release::
* Finding commits referencing a file with given content::
@end menu

@node Counting the number of commits on a branch, Check whether two branches point at the same history, , Examples
@subsection Counting the number of commits on a branch

Suppose you want to know how many commits you’ve made on @samp{mybranch} since it
diverged from @samp{origin}:

@example
$ git log --pretty=oneline origin..mybranch | wc -l
@end example

Alternatively, you may often see this sort of thing done with the
lower-level command @uref{git-rev-list.html,git-rev-list(1)}, which just lists the SHA-1’s of
all the given commits:

@example
$ git rev-list origin..mybranch | wc -l
@end example

@node Check whether two branches point at the same history, Find first tagged version including a given fix, Counting the number of commits on a branch, Examples
@subsection Check whether two branches point at the same history

Suppose you want to check whether two branches point at the same point in
history.

@example
$ git diff origin..master
@end example

will tell you whether the contents of the project are the same at the two
branches; in theory, however, it’s possible that the same project contents
could have been arrived at by two different historical routes.  You could
compare the object names:

@example
$ git rev-list origin
e05db0fd4f31dde7005f075a84f96b360d05984b
$ git rev-list master
e05db0fd4f31dde7005f075a84f96b360d05984b
@end example

Or you could recall that the @samp{...} operator selects all commits reachable
from either one reference or the other but not both; so

@example
$ git log origin...master
@end example

will return no commits when the two branches are equal.

@node Find first tagged version including a given fix, Showing commits unique to a given branch, Check whether two branches point at the same history, Examples
@subsection Find first tagged version including a given fix

Suppose you know that the commit e05db0fd fixed a certain problem.  You’d
like to find the earliest tagged release that contains that fix.

Of course, there may be more than one answer—if the history branched after
commit e05db0fd, then there could be multiple "earliest" tagged releases.

You could just visually inspect the commits since e05db0fd:

@example
$ gitk e05db0fd..
@end example

or you can use @uref{git-name-rev.html,git-name-rev(1)}, which will give the commit a name
based on any tag it finds pointing to one of the commit’s descendants:

@example
$ git name-rev --tags e05db0fd
e05db0fd tags/v1.5.0-rc1^0~23
@end example

The @uref{git-describe.html,git-describe(1)} command does the opposite, naming the revision
using a tag on which the given commit is based:

@example
$ git describe e05db0fd
v1.5.0-rc0-260-ge05db0f
@end example

but that may sometimes help you guess which tags might come after the given
commit.

If you just want to verify whether a given tagged version contains a given
commit, you could use @uref{git-merge-base.html,git-merge-base(1)}:

@example
$ git merge-base e05db0fd v1.5.0-rc1
e05db0fd4f31dde7005f075a84f96b360d05984b
@end example

The merge-base command finds a common ancestor of the given commits, and
always returns one or the other in the case where one is a descendant of the
other; so the above output shows that e05db0fd actually is an ancestor of
v1.5.0-rc1.

Alternatively, note that

@example
$ git log v1.5.0-rc1..e05db0fd
@end example

will produce empty output if and only if v1.5.0-rc1 includes e05db0fd,
because it outputs only commits that are not reachable from v1.5.0-rc1.

As yet another alternative, the @uref{git-show-branch.html,git-show-branch(1)} command lists the
commits reachable from its arguments with a display on the left-hand side
that indicates which arguments that commit is reachable from.  So, if you
run something like

@example
$ git show-branch e05db0fd v1.5.0-rc0 v1.5.0-rc1 v1.5.0-rc2
! [e05db0fd] Fix warnings in sha1_file.c - use C99 printf format if
available
 ! [v1.5.0-rc0] GIT v1.5.0 preview
  ! [v1.5.0-rc1] GIT v1.5.0-rc1
   ! [v1.5.0-rc2] GIT v1.5.0-rc2
...
@end example

then a line like

@example
+ ++ [e05db0fd] Fix warnings in sha1_file.c - use C99 printf format if
available
@end example

shows that e05db0fd is reachable from itself, from v1.5.0-rc1, and from
v1.5.0-rc2, and not from v1.5.0-rc0.

@node Showing commits unique to a given branch, Creating a changelog and tarball for a software release, Find first tagged version including a given fix, Examples
@subsection Showing commits unique to a given branch

Suppose you would like to see all the commits reachable from the branch head
named @samp{master} but not from any other head in your repository.

We can list all the heads in this repository with @uref{git-show-ref.html,git-show-ref(1)}:

@example
$ git show-ref --heads
bf62196b5e363d73353a9dcf094c59595f3153b7 refs/heads/core-tutorial
db768d5504c1bb46f63ee9d6e1772bd047e05bf9 refs/heads/maint
a07157ac624b2524a059a3414e99f6f44bebc1e7 refs/heads/master
24dbc180ea14dc1aebe09f14c8ecf32010690627 refs/heads/tutorial-2
1e87486ae06626c2f31eaa63d26fc0fd646c8af2 refs/heads/tutorial-fixes
@end example

We can get just the branch-head names, and remove @samp{master}, with the help of
the standard utilities cut and grep:

@example
$ git show-ref --heads | cut -d' ' -f2 | grep -v '^refs/heads/master'
refs/heads/core-tutorial
refs/heads/maint
refs/heads/tutorial-2
refs/heads/tutorial-fixes
@end example

And then we can ask to see all the commits reachable from master but not
from these other heads:

@example
$ gitk master --not $( git show-ref --heads | cut -d' ' -f2 |
                                grep -v '^refs/heads/master' )
@end example

Obviously, endless variations are possible; for example, to see all commits
reachable from some head but not from any tag in the repository:

@example
$ gitk $( git show-ref --heads ) --not  $( git show-ref --tags )
@end example

(See @uref{gitrevisions.html,gitrevisions(7)} for explanations of commit-selecting syntax
such as @samp{--not}.)

@node Creating a changelog and tarball for a software release, Finding commits referencing a file with given content, Showing commits unique to a given branch, Examples
@subsection Creating a changelog and tarball for a software release

The @uref{git-archive.html,git-archive(1)} command can create a tar or zip archive from any
version of a project; for example:

@example
$ git archive -o latest.tar.gz --prefix=project/ HEAD
@end example

will use HEAD to produce a gzipped tar archive in which each filename is
preceded by @samp{project/}.  The output file format is inferred from the output
file extension if possible, see @uref{git-archive.html,git-archive(1)} for details.

Versions of Git older than 1.7.7 don’t know about the @samp{tar.gz} format,
you’ll need to use gzip explicitly:

@example
$ git archive --format=tar --prefix=project/ HEAD | gzip >latest.tar.gz
@end example

If you’re releasing a new version of a software project, you may want to
simultaneously make a changelog to include in the release announcement.

Linus Torvalds, for example, makes new kernel releases by tagging them, then
running:

@example
$ release-script 2.6.12 2.6.13-rc6 2.6.13-rc7
@end example

where release-script is a shell script that looks like:

@example
#!/bin/sh
stable="$1"
last="$2"
new="$3"
echo "# git tag v$new"
echo "git archive --prefix=linux-$new/ v$new | gzip -9 > ../linux-$new.tar.gz"
echo "git diff v$stable v$new | gzip -9 > ../patch-$new.gz"
echo "git log --no-merges v$new ^v$last > ../ChangeLog-$new"
echo "git shortlog --no-merges v$new ^v$last > ../ShortLog"
echo "git diff --stat --summary -M v$last v$new > ../diffstat-$new"
@end example

and then he just cut-and-pastes the output commands after verifying that
they look OK.

@node Finding commits referencing a file with given content, , Creating a changelog and tarball for a software release, Examples
@subsection Finding commits referencing a file with given content

Somebody hands you a copy of a file, and asks which commits modified a file
such that it contained the given content either before or after the commit.
You can find out with this:

@example
$  git log --raw --abbrev=40 --pretty=oneline |
        grep -B 1 `git hash-object filename`
@end example

Figuring out why this works is left as an exercise to the (advanced)
student.  The @uref{git-log.html,git-log(1)}, @uref{git-diff-tree.html,git-diff-tree(1)}, and
@uref{git-hash-object.html,git-hash-object(1)} man pages may prove helpful.

@node Developing with Git, Sharing development with others, Exploring Git history, Top
@chapter Developing with Git

@menu
* Telling Git your name::
* Creating a new repository::
* How to make a commit::
* Creating good commit messages::
* Ignoring files::
* How to merge::
* Resolving a merge::
* Undoing a merge::
* Fast-forward merges::
* Fixing mistakes::
* Ensuring good performance::
* Ensuring reliability::
@end menu

@node Telling Git your name, Creating a new repository, , Developing with Git
@section Telling Git your name

Before creating any commits, you should introduce yourself to Git.  The
easiest way to do so is to use @uref{git-config.html,git-config(1)}:

@example
$ git config --global user.name 'Your Name Comes Here'
$ git config --global user.email 'you@@yourdomain.example.com'
@end example

Which will add the following to a file named @samp{.gitconfig} in your home
directory:

@example
[user]
        name = Your Name Comes Here
        email = you@@yourdomain.example.com
@end example

See the "CONFIGURATION FILE" section of @uref{git-config.html,git-config(1)} for details on
the configuration file.  The file is plain text, so you can also edit it
with your favorite editor.

@node Creating a new repository, How to make a commit, Telling Git your name, Developing with Git
@section Creating a new repository

Creating a new repository from scratch is very easy:

@example
$ mkdir project
$ cd project
$ git init
@end example

If you have some initial content (say, a tarball):

@example
$ tar xzvf project.tar.gz
$ cd project
$ git init
$ git add . # include everything below ./ in the first commit:
$ git commit
@end example

@node How to make a commit, Creating good commit messages, Creating a new repository, Developing with Git
@section How to make a commit

Creating a new commit takes three steps:

@enumerate 

@item
Making some changes to the working directory using your favorite editor.

@item
Telling Git about your changes.

@item
Creating the commit using the content you told Git about in step 2.
@end enumerate

In practice, you can interleave and repeat steps 1 and 2 as many times as
you want: in order to keep track of what you want committed at step 3, Git
maintains a snapshot of the tree’s contents in a special staging area called
"the index."

At the beginning, the content of the index will be identical to that of the
HEAD.  The command @samp{git diff --cached}, which shows the difference between
the HEAD and the index, should therefore produce no output at that point.

Modifying the index is easy:

To update the index with the contents of a new or modified file, use

@example
$ git add path/to/file
@end example

To remove a file from the index and from the working tree, use

@example
$ git rm path/to/file
@end example

After each step you can verify that

@example
$ git diff --cached
@end example

always shows the difference between the HEAD and the index file—this is
what you’d commit if you created the commit now—and that

@example
$ git diff
@end example

shows the difference between the working tree and the index file.

Note that @samp{git add} always adds just the current contents of a file to the
index; further changes to the same file will be ignored unless you run @samp{git
add} on the file again.

When you’re ready, just run

@example
$ git commit
@end example

and Git will prompt you for a commit message and then create the new
commit.  Check to make sure it looks like what you expected with

@example
$ git show
@end example

As a special shortcut,

@example
$ git commit -a
@end example

will update the index with any files that you’ve modified or removed and
create a commit, all in one step.

A number of commands are useful for keeping track of what you’re about to
commit:

@example
$ git diff --cached # difference between HEAD and the index; what
                    # would be committed if you ran "commit" now.
$ git diff          # difference between the index file and your
                    # working directory; changes that would not
                    # be included if you ran "commit" now.
$ git diff HEAD     # difference between HEAD and working tree; what
                    # would be committed if you ran "commit -a" now.
$ git status        # a brief per-file summary of the above.
@end example

You can also use @uref{git-gui.html,git-gui(1)} to create commits, view changes in the
index and the working tree files, and individually select diff hunks for
inclusion in the index (by right-clicking on the diff hunk and choosing
"Stage Hunk For Commit").

@node Creating good commit messages, Ignoring files, How to make a commit, Developing with Git
@section Creating good commit messages

Though not required, it’s a good idea to begin the commit message with a
single short (less than 50 character) line summarizing the change, followed
by a blank line and then a more thorough description.  The text up to the
first blank line in a commit message is treated as the commit title, and
that title is used throughout Git.  For example, @uref{git-format-patch.html,git-format-patch(1)}
turns a commit into email, and it uses the title on the Subject line and the
rest of the commit in the body.

@node Ignoring files, How to merge, Creating good commit messages, Developing with Git
@section Ignoring files

A project will often generate files that you do @emph{not} want to track with
Git.  This typically includes files generated by a build process or
temporary backup files made by your editor. Of course, @emph{not} tracking files
with Git is just a matter of @emph{not} calling @samp{git add} on them. But it quickly
becomes annoying to have these untracked files lying around; e.g. they make
@samp{git add .} practically useless, and they keep showing up in the output of
@samp{git status}.

You can tell Git to ignore certain files by creating a file called
@samp{.gitignore} in the top level of your working directory, with contents such
as:

@example
# Lines starting with '#' are considered comments.
# Ignore any file named foo.txt.
foo.txt
# Ignore (generated) html files,
*.html
# except foo.html which is maintained by hand.
!foo.html
# Ignore objects and archives.
*.[oa]
@end example

See @uref{gitignore.html,gitignore(5)} for a detailed explanation of the syntax.  You can
also place .gitignore files in other directories in your working tree, and
they will apply to those directories and their subdirectories.  The
@samp{.gitignore} files can be added to your repository like any other files
(just run @samp{git add
.gitignore} and @samp{git commit}, as usual), which is convenient when the exclude
patterns (such as patterns matching build output files) would also make
sense for other users who clone your repository.

If you wish the exclude patterns to affect only certain repositories
(instead of every repository for a given project), you may instead put them
in a file in your repository named @samp{.git/info/exclude}, or in any file
specified by the @samp{core.excludesFile} configuration variable.  Some Git
commands can also take exclude patterns directly on the command line.  See
@uref{gitignore.html,gitignore(5)} for the details.

@node How to merge, Resolving a merge, Ignoring files, Developing with Git
@section How to merge

You can rejoin two diverging branches of development using
@uref{git-merge.html,git-merge(1)}:

@example
$ git merge branchname
@end example

merges the development in the branch @samp{branchname} into the current branch.

A merge is made by combining the changes made in @samp{branchname} and the
changes made up to the latest commit in your current branch since their
histories forked. The work tree is overwritten by the result of the merge
when this combining is done cleanly, or overwritten by a half-merged results
when this combining results in conflicts.  Therefore, if you have
uncommitted changes touching the same files as the ones impacted by the
merge, Git will refuse to proceed. Most of the time, you will want to commit
your changes before you can merge, and if you don’t, then
@uref{git-stash.html,git-stash(1)} can take these changes away while you’re doing the
merge, and reapply them afterwards.

If the changes are independent enough, Git will automatically complete the
merge and commit the result (or reuse an existing commit in case of
fast-forward (@pxref{Fast-forward merges}), see below). On the other hand, if there are
conflicts—for example, if the same file is modified in two different ways
in the remote branch and the local branch—then you are warned; the output
may look something like this:

@example
$ git merge next
 100% (4/4) done
Auto-merged file.txt
CONFLICT (content): Merge conflict in file.txt
Automatic merge failed; fix conflicts and then commit the result.
@end example

Conflict markers are left in the problematic files, and after you resolve
the conflicts manually, you can update the index with the contents and run
Git commit, as you normally would when creating a new file.

If you examine the resulting commit using gitk, you will see that it has two
parents, one pointing to the top of the current branch, and one to the top
of the other branch.

@node Resolving a merge, Undoing a merge, How to merge, Developing with Git
@section Resolving a merge

When a merge isn’t resolved automatically, Git leaves the index and the
working tree in a special state that gives you all the information you need
to help resolve the merge.

Files with conflicts are marked specially in the index, so until you resolve
the problem and update the index, @uref{git-commit.html,git-commit(1)} will fail:

@example
$ git commit
file.txt: needs merge
@end example

Also, @uref{git-status.html,git-status(1)} will list those files as "unmerged", and the
files with conflicts will have conflict markers added, like this:

@example
<<<<<<< HEAD:file.txt
Hello world
=======
Goodbye
>>>>>>> 77976da35a11db4580b80ae27e8d65caf5208086:file.txt
@end example

All you need to do is edit the files to resolve the conflicts, and then

@example
$ git add file.txt
$ git commit
@end example

Note that the commit message will already be filled in for you with some
information about the merge.  Normally you can just use this default message
unchanged, but you may add additional commentary of your own if desired.

The above is all you need to know to resolve a simple merge.  But Git also
provides more information to help resolve conflicts:

@menu
* Getting conflict-resolution help during a merge::
@end menu

@node Getting conflict-resolution help during a merge, , , Resolving a merge
@subsection Getting conflict-resolution help during a merge

All of the changes that Git was able to merge automatically are already
added to the index file, so @uref{git-diff.html,git-diff(1)} shows only the conflicts.
It uses an unusual syntax:

@example
$ git diff
diff --cc file.txt
index 802992c,2b60207..0000000
--- a/file.txt
+++ b/file.txt
@@@@@@ -1,1 -1,1 +1,5 @@@@@@
++<<<<<<< HEAD:file.txt
 +Hello world
++=======
+ Goodbye
++>>>>>>> 77976da35a11db4580b80ae27e8d65caf5208086:file.txt
@end example

Recall that the commit which will be committed after we resolve this
conflict will have two parents instead of the usual one: one parent will be
HEAD, the tip of the current branch; the other will be the tip of the other
branch, which is stored temporarily in MERGE_HEAD.

During the merge, the index holds three versions of each file.  Each of
these three "file stages" represents a different version of the file:

@example
$ git show :1:file.txt  # the file in a common ancestor of both branches
$ git show :2:file.txt  # the version from HEAD.
$ git show :3:file.txt  # the version from MERGE_HEAD.
@end example

When you ask @uref{git-diff.html,git-diff(1)} to show the conflicts, it runs a three-way
diff between the conflicted merge results in the work tree with stages 2 and
3 to show only hunks whose contents come from both sides, mixed (in other
words, when a hunk’s merge results come only from stage 2, that part is not
conflicting and is not shown.  Same for stage 3).

The diff above shows the differences between the working-tree version of
file.txt and the stage 2 and stage 3 versions.  So instead of preceding each
line by a single @samp{+} or @samp{-}, it now uses two columns: the first column is
used for differences between the first parent and the working directory
copy, and the second for differences between the second parent and the
working directory copy.  (See the "COMBINED DIFF FORMAT" section of
@uref{git-diff-files.html,git-diff-files(1)} for a details of the format.)

After resolving the conflict in the obvious way (but before updating the
index), the diff will look like:

@example
$ git diff
diff --cc file.txt
index 802992c,2b60207..0000000
--- a/file.txt
+++ b/file.txt
@@@@@@ -1,1 -1,1 +1,1 @@@@@@
- Hello world
 -Goodbye
++Goodbye world
@end example

This shows that our resolved version deleted "Hello world" from the first
parent, deleted "Goodbye" from the second parent, and added "Goodbye world",
which was previously absent from both.

Some special diff options allow diffing the working directory against any of
these stages:

@example
$ git diff -1 file.txt          # diff against stage 1
$ git diff --base file.txt      # same as the above
$ git diff -2 file.txt          # diff against stage 2
$ git diff --ours file.txt      # same as the above
$ git diff -3 file.txt          # diff against stage 3
$ git diff --theirs file.txt    # same as the above.
@end example

The @uref{git-log.html,git-log(1)} and @uref{gitk.html,gitk(1)} commands also provide special
help for merges:

@example
$ git log --merge
$ gitk --merge
@end example

These will display all commits which exist only on HEAD or on MERGE_HEAD,
and which touch an unmerged file.

You may also use @uref{git-mergetool.html,git-mergetool(1)}, which lets you merge the unmerged
files using external tools such as Emacs or kdiff3.

Each time you resolve the conflicts in a file and update the index:

@example
$ git add file.txt
@end example

the different stages of that file will be "collapsed", after which @samp{git
diff} will (by default) no longer show diffs for that file.

@node Undoing a merge, Fast-forward merges, Resolving a merge, Developing with Git
@section Undoing a merge

If you get stuck and decide to just give up and throw the whole mess away,
you can always return to the pre-merge state with

@example
$ git merge --abort
@end example

Or, if you’ve already committed the merge that you want to throw away,

@example
$ git reset --hard ORIG_HEAD
@end example

However, this last command can be dangerous in some cases—never throw away
a commit you have already committed if that commit may itself have been
merged into another branch, as doing so may confuse further merges.

@node Fast-forward merges, Fixing mistakes, Undoing a merge, Developing with Git
@section Fast-forward merges

There is one special case not mentioned above, which is treated
differently.  Normally, a merge results in a merge commit, with two parents,
one pointing at each of the two lines of development that were merged.

However, if the current branch is an ancestor of the other—so every commit
present in the current branch is already contained in the other branch—then
Git just performs a "fast-forward"; the head of the current branch is moved
forward to point at the head of the merged-in branch, without any new
commits being created.

@node Fixing mistakes, Ensuring good performance, Fast-forward merges, Developing with Git
@section Fixing mistakes

If you’ve messed up the working tree, but haven’t yet committed your
mistake, you can return the entire working tree to the last committed state
with

@example
$ git restore --staged --worktree :/
@end example

If you make a commit that you later wish you hadn’t, there are two
fundamentally different ways to fix the problem:

@enumerate 

@item
You can create a new commit that undoes whatever was done
by the old commit.  This is the correct thing if your mistake has already
been made public.

@item
You can go back and modify the old commit.  You should
never do this if you have already made the history public; Git does not
normally expect the "history" of a project to change, and cannot correctly
perform repeated merges from a branch that has had its history changed.
@end enumerate

@menu
* Fixing a mistake with a new commit::
* Fixing a mistake by rewriting history::
* Checking out an old version of a file::
* Temporarily setting aside work in progress::
@end menu

@node Fixing a mistake with a new commit, Fixing a mistake by rewriting history, , Fixing mistakes
@subsection Fixing a mistake with a new commit

Creating a new commit that reverts an earlier change is very easy; just pass
the @uref{git-revert.html,git-revert(1)} command a reference to the bad commit; for
example, to revert the most recent commit:

@example
$ git revert HEAD
@end example

This will create a new commit which undoes the change in HEAD.  You will be
given a chance to edit the commit message for the new commit.

You can also revert an earlier change, for example, the next-to-last:

@example
$ git revert HEAD^
@end example

In this case Git will attempt to undo the old change while leaving intact
any changes made since then.  If more recent changes overlap with the
changes to be reverted, then you will be asked to fix conflicts manually,
just as in the case of resolving a merge (@pxref{Resolving a merge}).

@node Fixing a mistake by rewriting history, Checking out an old version of a file, Fixing a mistake with a new commit, Fixing mistakes
@subsection Fixing a mistake by rewriting history

If the problematic commit is the most recent commit, and you have not yet
made that commit public, then you may just destroy it using @samp{git reset} (@pxref{Undoing a merge}).

Alternatively, you can edit the working directory and update the index to
fix your mistake, just as if you were going to create a new commit (@pxref{How to make a commit}), then run

@example
$ git commit --amend
@end example

which will replace the old commit by a new commit incorporating your
changes, giving you a chance to edit the old commit message first.

Again, you should never do this to a commit that may already have been
merged into another branch; use @uref{git-revert.html,git-revert(1)} instead in that case.

It is also possible to replace commits further back in the history, but this
is an advanced topic to be left for another chapter (@pxref{Rewriting history and maintaining patch series}).

@node Checking out an old version of a file, Temporarily setting aside work in progress, Fixing a mistake by rewriting history, Fixing mistakes
@subsection Checking out an old version of a file

In the process of undoing a previous bad change, you may find it useful to
check out an older version of a particular file using
@uref{git-restore.html,git-restore(1)}. The command

@example
$ git restore --source=HEAD^ path/to/file
@end example

replaces path/to/file by the contents it had in the commit HEAD^, and also
updates the index to match.  It does not change branches.

If you just want to look at an old version of the file, without modifying
the working directory, you can do that with @uref{git-show.html,git-show(1)}:

@example
$ git show HEAD^:path/to/file
@end example

which will display the given version of the file.

@node Temporarily setting aside work in progress, , Checking out an old version of a file, Fixing mistakes
@subsection Temporarily setting aside work in progress

While you are in the middle of working on something complicated, you find an
unrelated but obvious and trivial bug.  You would like to fix it before
continuing.  You can use @uref{git-stash.html,git-stash(1)} to save the current state of
your work, and after fixing the bug (or, optionally after doing so on a
different branch and then coming back), unstash the work-in-progress
changes.

@example
$ git stash push -m "work in progress for foo feature"
@end example

This command will save your changes away to the @samp{stash}, and reset your
working tree and the index to match the tip of your current branch.  Then
you can make your fix as usual.

@example
... edit and test ...
$ git commit -a -m "blorpl: typofix"
@end example

After that, you can go back to what you were working on with @samp{git stash
pop}:

@example
$ git stash pop
@end example

@node Ensuring good performance, Ensuring reliability, Fixing mistakes, Developing with Git
@section Ensuring good performance

On large repositories, Git depends on compression to keep the history
information from taking up too much space on disk or in memory.  Some Git
commands may automatically run @uref{git-gc.html,git-gc(1)}, so you don’t have to worry
about running it manually.  However, compressing a large repository may take
a while, so you may want to call @samp{gc} explicitly to avoid automatic
compression kicking in when it is not convenient.

@node Ensuring reliability, , Ensuring good performance, Developing with Git
@section Ensuring reliability

@menu
* Checking the repository for corruption::
* Recovering lost changes::
@end menu

@node Checking the repository for corruption, Recovering lost changes, , Ensuring reliability
@subsection Checking the repository for corruption

The @uref{git-fsck.html,git-fsck(1)} command runs a number of self-consistency checks on
the repository, and reports on any problems.  This may take some time.

@example
$ git fsck
dangling commit 7281251ddd2a61e38657c827739c57015671a6b3
dangling commit 2706a059f258c6b245f298dc4ff2ccd30ec21a63
dangling commit 13472b7c4b80851a1bc551779171dcb03655e9b5
dangling blob 218761f9d90712d37a9c5e36f406f92202db07eb
dangling commit bf093535a34a4d35731aa2bd90fe6b176302f14f
dangling commit 8e4bec7f2ddaa268bef999853c25755452100f8e
dangling tree d50bb86186bf27b681d25af89d3b5b68382e4085
dangling tree b24c2473f1fd3d91352a624795be026d64c8841f
...
@end example

You will see informational messages on dangling objects. They are objects
that still exist in the repository but are no longer referenced by any of
your branches, and can (and will) be removed after a while with @samp{gc}.  You
can run @samp{git fsck --no-dangling} to suppress these messages, and still view
real errors.

@node Recovering lost changes, , Checking the repository for corruption, Ensuring reliability
@subsection Recovering lost changes

@menu
* Reflogs::
* Examining dangling objects::
@end menu

@node Reflogs, Examining dangling objects, , Recovering lost changes
@subsubsection Reflogs

Say you modify a branch with @samp{git reset --hard} (@pxref{Fixing mistakes}), and
then realize that the branch was the only reference you had to that point in
history.

Fortunately, Git also keeps a log, called a "reflog", of all the previous
values of each branch.  So in this case you can still find the old history
using, for example,

@example
$ git log master@@@{1@}
@end example

This lists the commits reachable from the previous version of the @samp{master}
branch head.  This syntax can be used with any Git command that accepts a
commit, not just with @samp{git log}.  Some other examples:

@example
$ git show master@@@{2@}           # See where the branch pointed 2,
$ git show master@@@{3@}           # 3, ... changes ago.
$ gitk master@@@{yesterday@}       # See where it pointed yesterday,
$ gitk master@@@{"1 week ago"@}    # ... or last week
$ git log --walk-reflogs master # show reflog entries for master
@end example

A separate reflog is kept for the HEAD, so

@example
$ git show HEAD@@@{"1 week ago"@}
@end example

will show what HEAD pointed to one week ago, not what the current branch
pointed to one week ago.  This allows you to see the history of what you’ve
checked out.

The reflogs are kept by default for 30 days, after which they may be
pruned.  See @uref{git-reflog.html,git-reflog(1)} and @uref{git-gc.html,git-gc(1)} to learn how to
control this pruning, and see the "SPECIFYING REVISIONS" section of
@uref{gitrevisions.html,gitrevisions(7)} for details.

Note that the reflog history is very different from normal Git history.
While normal history is shared by every repository that works on the same
project, the reflog history is not shared: it tells you only about how the
branches in your local repository have changed over time.

@node Examining dangling objects, , Reflogs, Recovering lost changes
@subsubsection Examining dangling objects

In some situations the reflog may not be able to save you.  For example,
suppose you delete a branch, then realize you need the history it
contained.  The reflog is also deleted; however, if you have not yet pruned
the repository, then you may still be able to find the lost commits in the
dangling objects that @samp{git fsck} reports.  See @ref{Dangling objects} for the
details.

@example
$ git fsck
dangling commit 7281251ddd2a61e38657c827739c57015671a6b3
dangling commit 2706a059f258c6b245f298dc4ff2ccd30ec21a63
dangling commit 13472b7c4b80851a1bc551779171dcb03655e9b5
...
@end example

You can examine one of those dangling commits with, for example,

@example
$ gitk 7281251ddd --not --all
@end example

which does what it sounds like: it says that you want to see the commit
history that is described by the dangling commit(s), but not the history
that is described by all your existing branches and tags.  Thus you get
exactly the history reachable from that commit that is lost.  (And notice
that it might not be just one commit: we only report the "tip of the line"
as being dangling, but there might be a whole deep and complex commit
history that was dropped.)

If you decide you want the history back, you can always create a new
reference pointing to it, for example, a new branch:

@example
$ git branch recovered-branch 7281251ddd
@end example

Other types of dangling objects (blobs and trees) are also possible, and
dangling objects can arise in other situations.

@node Sharing development with others, Rewriting history and maintaining patch series, Developing with Git, Top
@chapter Sharing development with others

@menu
* Getting updates with git pull::
* Submitting patches to a project::
* Importing patches to a project::
* Public Git repositories::
* How to get a Git repository with minimal history::
* Examples: Examples <1>.
@end menu

@node Getting updates with git pull, Submitting patches to a project, , Sharing development with others
@section Getting updates with git pull

After you clone a repository and commit a few changes of your own, you may
wish to check the original repository for updates and merge them into your
own work.

We have already seen how to keep remote-tracking branches up to date (@pxref{Updating a repository with git fetch}) with @uref{git-fetch.html,git-fetch(1)}, and how to
merge two branches.  So you can merge in changes from the original
repository’s master branch with:

@example
$ git fetch
$ git merge origin/master
@end example

However, the @uref{git-pull.html,git-pull(1)} command provides a way to do this in one
step:

@example
$ git pull origin master
@end example

In fact, if you have @samp{master} checked out, then this branch has been
configured by @samp{git clone} to get changes from the HEAD branch of the origin
repository.  So often you can accomplish the above with just a simple

@example
$ git pull
@end example

This command will fetch changes from the remote branches to your
remote-tracking branches @samp{origin/*}, and merge the default branch into the
current branch.

More generally, a branch that is created from a remote-tracking branch will
pull by default from that branch.  See the descriptions of the
@samp{branch.<name>.remote} and @samp{branch.<name>.merge} options in
@uref{git-config.html,git-config(1)}, and the discussion of the @samp{--track} option in
@uref{git-checkout.html,git-checkout(1)}, to learn how to control these defaults.

In addition to saving you keystrokes, @samp{git pull} also helps you by producing
a default commit message documenting the branch and repository that you
pulled from.

(But note that no such commit will be created in the case of a
fast-forward (@pxref{Fast-forward merges}); instead, your branch will just be updated to
point to the latest commit from the upstream branch.)

The @samp{git pull} command can also be given @samp{.} as the "remote" repository, in
which case it just merges in a branch from the current repository; so the
commands

@example
$ git pull . branch
$ git merge branch
@end example

are roughly equivalent.

@node Submitting patches to a project, Importing patches to a project, Getting updates with git pull, Sharing development with others
@section Submitting patches to a project

If you just have a few changes, the simplest way to submit them may just be
to send them as patches in email:

First, use @uref{git-format-patch.html,git-format-patch(1)}; for example:

@example
$ git format-patch origin
@end example

will produce a numbered series of files in the current directory, one for
each patch in the current branch but not in @samp{origin/HEAD}.

@samp{git format-patch} can include an initial "cover letter". You can insert
commentary on individual patches after the three dash line which
@samp{format-patch} places after the commit message but before the patch itself.
If you use @samp{git notes} to track your cover letter material, @samp{git
format-patch --notes} will include the commit’s notes in a similar manner.

You can then import these into your mail client and send them by hand.
However, if you have a lot to send at once, you may prefer to use the
@uref{git-send-email.html,git-send-email(1)} script to automate the process.  Consult the
mailing list for your project first to determine their requirements for
submitting patches.

@node Importing patches to a project, Public Git repositories, Submitting patches to a project, Sharing development with others
@section Importing patches to a project

Git also provides a tool called @uref{git-am.html,git-am(1)} (am stands for "apply
mailbox"), for importing such an emailed series of patches.  Just save all
of the patch-containing messages, in order, into a single mailbox file, say
@samp{patches.mbox}, then run

@example
$ git am -3 patches.mbox
@end example

Git will apply each patch in order; if any conflicts are found, it will
stop, and you can fix the conflicts as described in
"Resolving a merge (@pxref{Resolving a merge})".  (The @samp{-3} option tells Git to
perform a merge; if you would prefer it just to abort and leave your tree
and index untouched, you may omit that option.)

Once the index is updated with the results of the conflict resolution,
instead of creating a new commit, just run

@example
$ git am --continue
@end example

and Git will create the commit for you and continue applying the remaining
patches from the mailbox.

The final result will be a series of commits, one for each patch in the
original mailbox, with authorship and commit log message each taken from the
message containing each patch.

@node Public Git repositories, How to get a Git repository with minimal history, Importing patches to a project, Sharing development with others
@section Public Git repositories

Another way to submit changes to a project is to tell the maintainer of that
project to pull the changes from your repository using @uref{git-pull.html,git-pull(1)}.
In the section "Getting updates with @samp{git
pull} (@pxref{Getting updates with git pull})" we described this as a way to get updates from the "main"
repository, but it works just as well in the other direction.

If you and the maintainer both have accounts on the same machine, then you
can just pull changes from each other’s repositories directly; commands that
accept repository URLs as arguments will also accept a local directory name:

@example
$ git clone /path/to/repository
$ git pull /path/to/other/repository
@end example

or an ssh URL:

@example
$ git clone ssh://yourhost/~you/repository
@end example

For projects with few developers, or for synchronizing a few private
repositories, this may be all you need.

However, the more common way to do this is to maintain a separate public
repository (usually on a different host) for others to pull changes from.
This is usually more convenient, and allows you to cleanly separate private
work in progress from publicly visible work.

You will continue to do your day-to-day work in your personal repository,
but periodically "push" changes from your personal repository into your
public repository, allowing other developers to pull from that repository.
So the flow of changes, in a situation where there is one other developer
with a public repository, looks like this:

@example
                      you push
your personal repo ------------------> your public repo
      ^                                     |
      |                                     |
      | you pull                            | they pull
      |                                     |
      |                                     |
      |               they push             V
their public repo <------------------- their repo
@end example

We explain how to do this in the following sections.

@menu
* Setting up a public repository::
* Exporting a Git repository via the Git protocol::
* Exporting a git repository via HTTP::
* Pushing changes to a public repository::
* What to do when a push fails::
* Setting up a shared repository::
* Allowing web browsing of a repository::
@end menu

@node Setting up a public repository, Exporting a Git repository via the Git protocol, , Public Git repositories
@subsection Setting up a public repository

Assume your personal repository is in the directory @samp{~/proj}.  We first
create a new clone of the repository and tell @samp{git daemon} that it is meant
to be public:

@example
$ git clone --bare ~/proj proj.git
$ touch proj.git/git-daemon-export-ok
@end example

The resulting directory proj.git contains a "bare" git repository—it is
just the contents of the @samp{.git} directory, without any files checked out
around it.

Next, copy @samp{proj.git} to the server where you plan to host the public
repository.  You can use scp, rsync, or whatever is most convenient.

@node Exporting a Git repository via the Git protocol, Exporting a git repository via HTTP, Setting up a public repository, Public Git repositories
@subsection Exporting a Git repository via the Git protocol

This is the preferred method.

If someone else administers the server, they should tell you what directory
to put the repository in, and what @samp{git://} URL it will appear at.  You can
then skip to the section "Pushing changes to a public repository (@pxref{Pushing changes to a public repository})", below.

Otherwise, all you need to do is start @uref{git-daemon.html,git-daemon(1)}; it will listen
on port 9418.  By default, it will allow access to any directory that looks
like a Git directory and contains the magic file git-daemon-export-ok.
Passing some directory paths as @samp{git daemon} arguments will further restrict
the exports to those paths.

You can also run @samp{git daemon} as an inetd service; see the
@uref{git-daemon.html,git-daemon(1)} man page for details.  (See especially the examples
section.)

@node Exporting a git repository via HTTP, Pushing changes to a public repository, Exporting a Git repository via the Git protocol, Public Git repositories
@subsection Exporting a git repository via HTTP

The Git protocol gives better performance and reliability, but on a host
with a web server set up, HTTP exports may be simpler to set up.

All you need to do is place the newly created bare Git repository in a
directory that is exported by the web server, and make some adjustments to
give web clients some extra information they need:

@example
$ mv proj.git /home/you/public_html/proj.git
$ cd proj.git
$ git --bare update-server-info
$ mv hooks/post-update.sample hooks/post-update
@end example

(For an explanation of the last two lines, see
@uref{git-update-server-info.html,git-update-server-info(1)} and @uref{githooks.html,githooks(5)}.)

Advertise the URL of @samp{proj.git}.  Anybody else should then be able to clone
or pull from that URL, for example with a command line like:

@example
$ git clone http://yourserver.com/~you/proj.git
@end example

(See also
@uref{howto/setup-git-server-over-http.html,setup-git-server-over-http} for a
slightly more sophisticated setup using WebDAV which also allows pushing
over HTTP.)

@node Pushing changes to a public repository, What to do when a push fails, Exporting a git repository via HTTP, Public Git repositories
@subsection Pushing changes to a public repository

Note that the two techniques outlined above (exporting via
http (@pxref{Exporting a git repository via HTTP}) or git (@pxref{Exporting a Git repository via the Git protocol})) allow other
maintainers to fetch your latest changes, but they do not allow write
access, which you will need to update the public repository with the latest
changes created in your private repository.

The simplest way to do this is using @uref{git-push.html,git-push(1)} and ssh; to update
the remote branch named @samp{master} with the latest state of your branch named
@samp{master}, run

@example
$ git push ssh://yourserver.com/~you/proj.git master:master
@end example

or just

@example
$ git push ssh://yourserver.com/~you/proj.git master
@end example

As with @samp{git fetch}, @samp{git push} will complain if this does not result in a
fast-forward (@pxref{Fast-forward merges}); see the following section for details on
handling this case.

Note that the target of a @samp{push} is normally a bare (@pxref{[def_bare_repository]})
repository.  You can also push to a repository that has a checked-out
working tree, but a push to update the currently checked-out branch is
denied by default to prevent confusion.  See the description of the
receive.denyCurrentBranch option in @uref{git-config.html,git-config(1)} for details.

As with @samp{git fetch}, you may also set up configuration options to save
typing; so, for example:

@example
$ git remote add public-repo ssh://yourserver.com/~you/proj.git
@end example

adds the following to @samp{.git/config}:

@example
[remote "public-repo"]
        url = yourserver.com:proj.git
        fetch = +refs/heads/*:refs/remotes/example/*
@end example

which lets you do the same push with just

@example
$ git push public-repo master
@end example

See the explanations of the @samp{remote.<name>.url}, @samp{branch.<name>.remote}, and
@samp{remote.<name>.push} options in @uref{git-config.html,git-config(1)} for details.

@node What to do when a push fails, Setting up a shared repository, Pushing changes to a public repository, Public Git repositories
@subsection What to do when a push fails

If a push would not result in a fast-forward (@pxref{Fast-forward merges}) of the remote
branch, then it will fail with an error like:

@example
 ! [rejected]        master -> master (non-fast-forward)
error: failed to push some refs to '...'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
@end example

This can happen, for example, if you:

@itemize 

@item
use @samp{git reset --hard} to remove already-published commits, or

@item
use @samp{git commit --amend} to replace already-published commits (as in
@ref{Fixing a mistake by rewriting history}), or

@item
use @samp{git rebase} to rebase any already-published commits (as in
@ref{Keeping a patch series up to date using git rebase}).
@end itemize

You may force @samp{git push} to perform the update anyway by preceding the
branch name with a plus sign:

@example
$ git push ssh://yourserver.com/~you/proj.git +master
@end example

Note the addition of the @samp{+} sign.  Alternatively, you can use the @samp{-f} flag
to force the remote update, as in:

@example
$ git push -f ssh://yourserver.com/~you/proj.git master
@end example

Normally whenever a branch head in a public repository is modified, it is
modified to point to a descendant of the commit that it pointed to before.
By forcing a push in this situation, you break that convention.  (See
@ref{Problems with rewriting history}.)

Nevertheless, this is a common practice for people that need a simple way to
publish a work-in-progress patch series, and it is an acceptable compromise
as long as you warn other developers that this is how you intend to manage
the branch.

It’s also possible for a push to fail in this way when other people have the
right to push to the same repository.  In that case, the correct solution is
to retry the push after first updating your work: either by a pull, or by a
fetch followed by a rebase; see the next section (@pxref{Setting up a shared repository}) and @uref{gitcvs-migration.html,gitcvs-migration(7)} for more.

@node Setting up a shared repository, Allowing web browsing of a repository, What to do when a push fails, Public Git repositories
@subsection Setting up a shared repository

Another way to collaborate is by using a model similar to that commonly used
in CVS, where several developers with special rights all push to and pull
from a single shared repository.  See @uref{gitcvs-migration.html,gitcvs-migration(7)} for
instructions on how to set this up.

However, while there is nothing wrong with Git’s support for shared
repositories, this mode of operation is not generally recommended, simply
because the mode of collaboration that Git supports—by exchanging patches
and pulling from public repositories—has so many advantages over the
central shared repository:

@itemize 

@item
Git’s ability to quickly import and merge patches allows a single maintainer
to process incoming changes even at very high rates.  And when that becomes
too much, @samp{git pull} provides an easy way for that maintainer to delegate
this job to other maintainers while still allowing optional review of
incoming changes.

@item
Since every developer’s repository has the same complete copy of the project
history, no repository is special, and it is trivial for another developer
to take over maintenance of a project, either by mutual agreement, or
because a maintainer becomes unresponsive or difficult to work with.

@item
The lack of a central group of "committers" means there is less need for
formal decisions about who is "in" and who is "out".
@end itemize

@node Allowing web browsing of a repository, , Setting up a shared repository, Public Git repositories
@subsection Allowing web browsing of a repository

The gitweb cgi script provides users an easy way to browse your project’s
revisions, file contents and logs without having to install Git. Features
like RSS/Atom feeds and blame/annotation details may optionally be enabled.

The @uref{git-instaweb.html,git-instaweb(1)} command provides a simple way to start browsing
the repository using gitweb. The default server when using instaweb is
lighttpd.

See the file gitweb/INSTALL in the Git source tree and @uref{gitweb.html,gitweb(1)} for
instructions on details setting up a permanent installation with a CGI or
Perl capable server.

@node How to get a Git repository with minimal history, Examples <1>, Public Git repositories, Sharing development with others
@section How to get a Git repository with minimal history

A shallow clone (@pxref{[def_shallow_clone]}), with its truncated history, is useful
when one is interested only in recent history of a project and getting full
history from the upstream is expensive.

A shallow clone (@pxref{[def_shallow_clone]}) is created by specifying the
@uref{git-clone.html,git-clone(1)} @samp{--depth} switch. The depth can later be changed with
the @uref{git-fetch.html,git-fetch(1)} @samp{--depth} switch, or full history restored with
@samp{--unshallow}.

Merging inside a shallow clone (@pxref{[def_shallow_clone]}) will work as long as a
merge base is in the recent history.  Otherwise, it will be like merging
unrelated histories and may have to result in huge conflicts.  This
limitation may make such a repository unsuitable to be used in merge based
workflows.

@node Examples <1>, , How to get a Git repository with minimal history, Sharing development with others
@section Examples

@menu
* Maintaining topic branches for a Linux subsystem maintainer::
@end menu

@node Maintaining topic branches for a Linux subsystem maintainer, , , Examples <1>
@subsection Maintaining topic branches for a Linux subsystem maintainer

This describes how Tony Luck uses Git in his role as maintainer of the IA64
architecture for the Linux kernel.

He uses two public branches:

@itemize 

@item
A "test" tree into which patches are initially placed so that they can get
some exposure when integrated with other ongoing development.  This tree is
available to Andrew for pulling into -mm whenever he wants.

@item
A "release" tree into which tested patches are moved for final sanity
checking, and as a vehicle to send them upstream to Linus (by sending him a
"please pull" request.)
@end itemize

He also uses a set of temporary branches ("topic branches"), each containing
a logical grouping of patches.

To set this up, first create your work tree by cloning Linus’s public tree:

@example
$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git work
$ cd work
@end example

Linus’s tree will be stored in the remote-tracking branch named
origin/master, and can be updated using @uref{git-fetch.html,git-fetch(1)}; you can track
other public trees using @uref{git-remote.html,git-remote(1)} to set up a "remote" and
@uref{git-fetch.html,git-fetch(1)} to keep them up to date; see
@ref{Repositories and Branches}.

Now create the branches in which you are going to work; these start out at
the current tip of origin/master branch, and should be set up (using the
@samp{--track} option to @uref{git-branch.html,git-branch(1)}) to merge changes in from Linus by
default.

@example
$ git branch --track test origin/master
$ git branch --track release origin/master
@end example

These can be easily kept up to date using @uref{git-pull.html,git-pull(1)}.

@example
$ git switch test && git pull
$ git switch release && git pull
@end example

Important note! If you have any local changes in these branches, then this
merge will create a commit object in the history (with no local changes Git
will simply do a "fast-forward" merge).  Many people dislike the "noise"
that this creates in the Linux history, so you should avoid doing this
capriciously in the @samp{release} branch, as these noisy commits will become
part of the permanent history when you ask Linus to pull from the release
branch.

A few configuration variables (see @uref{git-config.html,git-config(1)}) can make it easy
to push both branches to your public tree.  (See
@ref{Setting up a public repository}.)

@example
$ cat >> .git/config <<EOF
[remote "mytree"]
        url =  master.kernel.org:/pub/scm/linux/kernel/git/aegl/linux.git
        push = release
        push = test
EOF
@end example

Then you can push both the test and release trees using @uref{git-push.html,git-push(1)}:

@example
$ git push mytree
@end example

or push just one of the test and release branches using:

@example
$ git push mytree test
@end example

または

@example
$ git push mytree release
@end example

Now to apply some patches from the community.  Think of a short snappy name
for a branch to hold this patch (or related group of patches), and create a
new branch from a recent stable tag of Linus’s branch. Picking a stable base
for your branch will:
1) help you: by avoiding inclusion of unrelated and perhaps lightly tested
changes
2) help future bug hunters that use @samp{git bisect} to find problems

@example
$ git switch -c speed-up-spinlocks v2.6.35
@end example

Now you apply the patch(es), run some tests, and commit the change(s).  If
the patch is a multi-part series, then you should apply each as a separate
commit to this branch.

@example
$ ... patch ... test  ... commit [ ... patch ... test ... commit ]*
@end example

When you are happy with the state of this change, you can merge it into the
"test" branch in preparation to make it public:

@example
$ git switch test && git merge speed-up-spinlocks
@end example

It is unlikely that you would have any conflicts here … but you might if
you spent a while on this step and had also pulled new versions from
upstream.

Sometime later when enough time has passed and testing done, you can pull
the same branch into the @samp{release} tree ready to go upstream.  This is where
you see the value of keeping each patch (or patch series) in its own
branch.  It means that the patches can be moved into the @samp{release} tree in
any order.

@example
$ git switch release && git merge speed-up-spinlocks
@end example

After a while, you will have a number of branches, and despite the well
chosen names you picked for each of them, you may forget what they are for,
or what status they are in.  To get a reminder of what changes are in a
specific branch, use:

@example
$ git log linux..branchname | git shortlog
@end example

To see whether it has already been merged into the test or release branches,
use:

@example
$ git log test..branchname
@end example

または

@example
$ git log release..branchname
@end example

(If this branch has not yet been merged, you will see some log entries.  If
it has been merged, then there will be no output.)

Once a patch completes the great cycle (moving from test to release, then
pulled by Linus, and finally coming back into your local @samp{origin/master}
branch), the branch for this change is no longer needed.  You detect this
when the output from:

@example
$ git log origin..branchname
@end example

is empty.  At this point the branch can be deleted:

@example
$ git branch -d branchname
@end example

Some changes are so trivial that it is not necessary to create a separate
branch and then merge into each of the test and release branches.  For these
changes, just apply directly to the @samp{release} branch, and then merge that
into the @samp{test} branch.

After pushing your work to @samp{mytree}, you can use @uref{git-request-pull.html,git-request-pull(1)}
to prepare a "please pull" request message to send to Linus:

@example
$ git push mytree
$ git request-pull origin mytree release
@end example

Here are some of the scripts that simplify all this even further.

@example
==== update script ====
# Update a branch in my Git tree.  If the branch to be updated # is origin,
then pull from kernel.org.  Otherwise merge # origin/master branch into
test|release branch

case "$1" in
test|release)
        git checkout $1 && git pull . origin
        ;;
origin)
        before=$(git rev-parse refs/remotes/origin/master)
        git fetch origin
        after=$(git rev-parse refs/remotes/origin/master)
        if [ $before != $after ]
        then
                git log $before..$after | git shortlog
        fi
        ;;
*)
        echo "usage: $0 origin|test|release" 1>&2
        exit 1
        ;;
esac
@end example

@example
==== merge script ====
# Merge a branch into either the test or release branch

pname=$0

usage()
@{
        echo "usage: $pname branch test|release" 1>&2
        exit 1
@}

git show-ref -q --verify -- refs/heads/"$1" || @{
        echo "Can't see branch <$1>" 1>&2
        usage
@}

case "$2" in
test|release)
        if [ $(git log $2..$1 | wc -c) -eq 0 ]
        then
                echo $1 already merged into $2 1>&2
                exit 1
        fi
        git checkout $2 && git pull . $1
        ;;
*)
        usage
        ;;
esac
@end example

@example
==== status script ====
# report on status of my ia64 Git tree

gb=$(tput setab 2)  rb=$(tput setab 1)  restore=$(tput setab 9)

if [ `git rev-list test..release | wc -c` -gt 0 ]
then
        echo $rb Warning: commits in release that are not in test $restore
        git log test..release
fi

for branch in `git show-ref --heads | sed 's|^.*/||'`
do
        if [ $branch = test -o $branch = release ]
        then
                continue
        fi

        echo -n $gb ======= $branch ====== $restore " "
        status=
        for ref in test release origin/master
        do
                if [ `git rev-list $ref..$branch | wc -c` -gt 0 ]
                then
                        status=$status$@{ref:0:1@}
                fi
        done
        case $status in
        trl)
                echo $rb Need to pull into test $restore
                ;;
        rl)
                echo "In test"
                ;;
        l)
                echo "Waiting for linus"
                ;;
        "")
                echo $rb All done $restore
                ;;
        *)
                echo $rb "<$status>" $restore
                ;;
        esac
        git log origin/master..$branch | git shortlog
done
@end example

@node Rewriting history and maintaining patch series, Advanced branch management, Sharing development with others, Top
@chapter Rewriting history and maintaining patch series

Normally commits are only added to a project, never taken away or replaced.
Git is designed with this assumption, and violating it will cause Git’s
merge machinery (for example) to do the wrong thing.

However, there is a situation in which it can be useful to violate this
assumption.

@menu
* Creating the perfect patch series::
* Keeping a patch series up to date using git rebase::
* Rewriting a single commit::
* Reordering or selecting from a patch series::
* Using interactive rebases::
* Other tools::
* Problems with rewriting history::
* Why bisecting merge commits can be harder than bisecting linear history::
@end menu

@node Creating the perfect patch series, Keeping a patch series up to date using git rebase, , Rewriting history and maintaining patch series
@section Creating the perfect patch series

Suppose you are a contributor to a large project, and you want to add a
complicated feature, and to present it to the other developers in a way that
makes it easy for them to read your changes, verify that they are correct,
and understand why you made each change.

If you present all of your changes as a single patch (or commit), they may
find that it is too much to digest all at once.

If you present them with the entire history of your work, complete with
mistakes, corrections, and dead ends, they may be overwhelmed.

So the ideal is usually to produce a series of patches such that:

@enumerate 

@item
Each patch can be applied in order.

@item
Each patch includes a single logical change, together with a message
explaining the change.

@item
No patch introduces a regression: after applying any initial part of the
series, the resulting project still compiles and works, and has no bugs that
it didn’t have before.

@item
The complete series produces the same end result as your own (probably much
messier!) development process did.
@end enumerate

We will introduce some tools that can help you do this, explain how to use
them, and then explain some of the problems that can arise because you are
rewriting history.

@node Keeping a patch series up to date using git rebase, Rewriting a single commit, Creating the perfect patch series, Rewriting history and maintaining patch series
@section Keeping a patch series up to date using git rebase

Suppose that you create a branch @samp{mywork} on a remote-tracking branch
@samp{origin}, and create some commits on top of it:

@example
$ git switch -c mywork origin
$ vi file.txt
$ git commit
$ vi otherfile.txt
$ git commit
...
@end example

You have performed no merges into mywork, so it is just a simple linear
sequence of patches on top of @samp{origin}:

@example
 o--o--O <-- origin
        \
         a--b--c <-- mywork
@end example

Some more interesting work has been done in the upstream project, and
@samp{origin} has advanced:

@example
 o--o--O--o--o--o <-- origin
        \
         a--b--c <-- mywork
@end example

At this point, you could use @samp{pull} to merge your changes back in; the
result would create a new merge commit, like this:

@example
 o--o--O--o--o--o <-- origin
        \        \
         a--b--c--m <-- mywork
@end example

However, if you prefer to keep the history in mywork a simple series of
commits without any merges, you may instead choose to use
@uref{git-rebase.html,git-rebase(1)}:

@example
$ git switch mywork
$ git rebase origin
@end example

This will remove each of your commits from mywork, temporarily saving them
as patches (in a directory named @samp{.git/rebase-apply}), update mywork to
point at the latest version of origin, then apply each of the saved patches
to the new mywork.  The result will look like:

@example
 o--o--O--o--o--o <-- origin
                 \
                  a'--b'--c' <-- mywork
@end example

In the process, it may discover conflicts.  In that case it will stop and
allow you to fix the conflicts; after fixing conflicts, use @samp{git add} to
update the index with those contents, and then, instead of running @samp{git
commit}, just run

@example
$ git rebase --continue
@end example

and Git will continue applying the rest of the patches.

At any point you may use the @samp{--abort} option to abort this process and
return mywork to the state it had before you started the rebase:

@example
$ git rebase --abort
@end example

If you need to reorder or edit a number of commits in a branch, it may be
easier to use @samp{git rebase -i}, which allows you to reorder and squash
commits, as well as marking them for individual editing during the rebase.
See @ref{Using interactive rebases} for details, and @ref{Reordering or selecting from a patch series} for
alternatives.

@node Rewriting a single commit, Reordering or selecting from a patch series, Keeping a patch series up to date using git rebase, Rewriting history and maintaining patch series
@section Rewriting a single commit

We saw in @ref{Fixing a mistake by rewriting history} that you can replace the
most recent commit using

@example
$ git commit --amend
@end example

which will replace the old commit by a new commit incorporating your
changes, giving you a chance to edit the old commit message first.  This is
useful for fixing typos in your last commit, or for adjusting the patch
contents of a poorly staged commit.

If you need to amend commits from deeper in your history, you can use
interactive rebase’s @samp{edit} instruction (@pxref{Using interactive rebases}).

@node Reordering or selecting from a patch series, Using interactive rebases, Rewriting a single commit, Rewriting history and maintaining patch series
@section Reordering or selecting from a patch series

Sometimes you want to edit a commit deeper in your history.  One approach is
to use @samp{git format-patch} to create a series of patches and then reset the
state to before the patches:

@example
$ git format-patch origin
$ git reset --hard origin
@end example

Then modify, reorder, or eliminate patches as needed before applying them
again with @uref{git-am.html,git-am(1)}:

@example
$ git am *.patch
@end example

@node Using interactive rebases, Other tools, Reordering or selecting from a patch series, Rewriting history and maintaining patch series
@section Using interactive rebases

You can also edit a patch series with an interactive rebase.  This is the
same as reordering a patch series using @samp{format-patch} (@pxref{Reordering or selecting from a patch series}), so use whichever interface you like best.

Rebase your current HEAD on the last commit you want to retain as-is.  For
example, if you want to reorder the last 5 commits, use:

@example
$ git rebase -i HEAD~5
@end example

This will open your editor with a list of steps to be taken to perform your
rebase.

@example
pick deadbee The oneline of this commit
pick fa1afe1 The oneline of the next commit
...

# Rebase c0ffeee..deadbee onto c0ffeee
#
# Commands:
#  p, pick = use commit
#  r, reword = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending
#  s, squash = use commit, but meld into previous commit
#  f, fixup = like "squash", but discard this commit's log message
#  x, exec = run command (the rest of the line) using shell
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
@end example

As explained in the comments, you can reorder commits, squash them together,
edit commit messages, etc. by editing the list.  Once you are satisfied,
save the list and close your editor, and the rebase will begin.

The rebase will stop where @samp{pick} has been replaced with @samp{edit} or when a
step in the list fails to mechanically resolve conflicts and needs your
help.  When you are done editing and/or resolving conflicts you can continue
with @samp{git rebase --continue}.  If you decide that things are getting too
hairy, you can always bail out with @samp{git rebase --abort}.  Even after the
rebase is complete, you can still recover the original branch by using the
reflog (@pxref{Reflogs}).

For a more detailed discussion of the procedure and additional tips, see the
"INTERACTIVE MODE" section of @uref{git-rebase.html,git-rebase(1)}.

@node Other tools, Problems with rewriting history, Using interactive rebases, Rewriting history and maintaining patch series
@section Other tools

There are numerous other tools, such as StGit, which exist for the purpose
of maintaining a patch series.  These are outside of the scope of this
manual.

@node Problems with rewriting history, Why bisecting merge commits can be harder than bisecting linear history, Other tools, Rewriting history and maintaining patch series
@section Problems with rewriting history

The primary problem with rewriting the history of a branch has to do with
merging.  Suppose somebody fetches your branch and merges it into their
branch, with a result something like this:

@example
 o--o--O--o--o--o <-- origin
        \        \
         t--t--t--m <-- their branch:
@end example

Then suppose you modify the last three commits:

@example
         o--o--o <-- new head of origin
        /
 o--o--O--o--o--o <-- old head of origin
@end example

If we examined all this history together in one repository, it will look
like:

@example
         o--o--o <-- new head of origin
        /
 o--o--O--o--o--o <-- old head of origin
        \        \
         t--t--t--m <-- their branch:
@end example

Git has no way of knowing that the new head is an updated version of the old
head; it treats this situation exactly the same as it would if two
developers had independently done the work on the old and new heads in
parallel.  At this point, if someone attempts to merge the new head in to
their branch, Git will attempt to merge together the two (old and new) lines
of development, instead of trying to replace the old by the new.  The
results are likely to be unexpected.

You may still choose to publish branches whose history is rewritten, and it
may be useful for others to be able to fetch those branches in order to
examine or test them, but they should not attempt to pull such branches into
their own work.

For true distributed development that supports proper merging, published
branches should never be rewritten.

@node Why bisecting merge commits can be harder than bisecting linear history, , Problems with rewriting history, Rewriting history and maintaining patch series
@section Why bisecting merge commits can be harder than bisecting linear history

The @uref{git-bisect.html,git-bisect(1)} command correctly handles history that includes
merge commits.  However, when the commit that it finds is a merge commit,
the user may need to work harder than usual to figure out why that commit
introduced a problem.

Imagine this history:

@example
      ---Z---o---X---...---o---A---C---D
          \                       /
           o---o---Y---...---o---B
@end example

Suppose that on the upper line of development, the meaning of one of the
functions that exists at Z is changed at commit X.  The commits from Z
leading to A change both the function’s implementation and all calling sites
that exist at Z, as well as new calling sites they add, to be consistent.
There is no bug at A.

Suppose that in the meantime on the lower line of development somebody adds
a new calling site for that function at commit Y.  The commits from Z
leading to B all assume the old semantics of that function and the callers
and the callee are consistent with each other.  There is no bug at B,
either.

Suppose further that the two development lines merge cleanly at C, so no
conflict resolution is required.

Nevertheless, the code at C is broken, because the callers added on the
lower line of development have not been converted to the new semantics
introduced on the upper line of development.  So if all you know is that D
is bad, that Z is good, and that @uref{git-bisect.html,git-bisect(1)} identifies C as the
culprit, how will you figure out that the problem is due to this change in
semantics?

When the result of a @samp{git bisect} is a non-merge commit, you should normally
be able to discover the problem by examining just that commit.  Developers
can make this easy by breaking their changes into small self-contained
commits.  That won’t help in the case above, however, because the problem
isn’t obvious from examination of any single commit; instead, a global view
of the development is required.  To make matters worse, the change in
semantics in the problematic function may be just one small part of the
changes in the upper line of development.

On the other hand, if instead of merging at C you had rebased the history
between Z to B on top of A, you would have gotten this linear history:

@example
    ---Z---o---X--...---o---A---o---o---Y*--...---o---B*--D*
@end example

Bisecting between Z and D* would hit a single culprit commit Y*, and
understanding why Y* was broken would probably be easier.

Partly for this reason, many experienced Git users, even when working on an
otherwise merge-heavy project, keep the history linear by rebasing against
the latest upstream version before publishing.

@node Advanced branch management, Git concepts, Rewriting history and maintaining patch series, Top
@chapter Advanced branch management

@menu
* Fetching individual branches::
* git fetch and fast-forwards::
* Forcing git fetch to do non-fast-forward updates::
* Configuring remote-tracking branches::
@end menu

@node Fetching individual branches, git fetch and fast-forwards, , Advanced branch management
@section Fetching individual branches

Instead of using @uref{git-remote.html,git-remote(1)}, you can also choose just to update
one branch at a time, and to store it locally under an arbitrary name:

@example
$ git fetch origin todo:my-todo-work
@end example

The first argument, @samp{origin}, just tells Git to fetch from the repository
you originally cloned from.  The second argument tells Git to fetch the
branch named @samp{todo} from the remote repository, and to store it locally
under the name @samp{refs/heads/my-todo-work}.

You can also fetch branches from other repositories; so

@example
$ git fetch git://example.com/proj.git master:example-master
@end example

will create a new branch named @samp{example-master} and store in it the branch
named @samp{master} from the repository at the given URL.  If you already have a
branch named example-master, it will attempt to
fast-forward (@pxref{Fast-forward merges}) to the commit given by example.com’s master
branch.  In more detail:

@node git fetch and fast-forwards, Forcing git fetch to do non-fast-forward updates, Fetching individual branches, Advanced branch management
@section git fetch and fast-forwards

In the previous example, when updating an existing branch, @samp{git fetch}
checks to make sure that the most recent commit on the remote branch is a
descendant of the most recent commit on your copy of the branch before
updating your copy of the branch to point at the new commit.  Git calls this
process a fast-forward (@pxref{Fast-forward merges}).

A fast-forward looks something like this:

@example
 o--o--o--o <-- old head of the branch
           \
            o--o--o <-- new head of the branch
@end example

In some cases it is possible that the new head will @strong{not} actually be a
descendant of the old head.  For example, the developer may have realized a
serious mistake was made and decided to backtrack, resulting in a situation
like:

@example
 o--o--o--o--a--b <-- old head of the branch
           \
            o--o--o <-- new head of the branch
@end example

In this case, @samp{git fetch} will fail, and print out a warning.

In that case, you can still force Git to update to the new head, as
described in the following section.  However, note that in the situation
above this may mean losing the commits labeled @samp{a} and @samp{b}, unless you’ve
already created a reference of your own pointing to them.

@node Forcing git fetch to do non-fast-forward updates, Configuring remote-tracking branches, git fetch and fast-forwards, Advanced branch management
@section Forcing git fetch to do non-fast-forward updates

If git fetch fails because the new head of a branch is not a descendant of
the old head, you may force the update with:

@example
$ git fetch git://example.com/proj.git +master:refs/remotes/example/master
@end example

Note the addition of the @samp{+} sign.  Alternatively, you can use the @samp{-f} flag
to force updates of all the fetched branches, as in:

@example
$ git fetch -f origin
@end example

Be aware that commits that the old version of example/master pointed at may
be lost, as we saw in the previous section.

@node Configuring remote-tracking branches, , Forcing git fetch to do non-fast-forward updates, Advanced branch management
@section Configuring remote-tracking branches

We saw above that @samp{origin} is just a shortcut to refer to the repository
that you originally cloned from.  This information is stored in Git
configuration variables, which you can see using @uref{git-config.html,git-config(1)}:

@example
$ git config -l
core.repositoryformatversion=0
core.filemode=true
core.logallrefupdates=true
remote.origin.url=git://git.kernel.org/pub/scm/git/git.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
@end example

If there are other repositories that you also use frequently, you can create
similar configuration options to save typing; for example,

@example
$ git remote add example git://example.com/proj.git
@end example

adds the following to @samp{.git/config}:

@example
[remote "example"]
        url = git://example.com/proj.git
        fetch = +refs/heads/*:refs/remotes/example/*
@end example

Also note that the above configuration can be performed by directly editing
the file @samp{.git/config} instead of using @uref{git-remote.html,git-remote(1)}.

After configuring the remote, the following three commands will do the same
thing:

@example
$ git fetch git://example.com/proj.git +refs/heads/*:refs/remotes/example/*
$ git fetch example +refs/heads/*:refs/remotes/example/*
$ git fetch example
@end example

See @uref{git-config.html,git-config(1)} for more details on the configuration options
mentioned above and @uref{git-fetch.html,git-fetch(1)} for more details on the refspec
syntax.

@node Git concepts, Submodules, Advanced branch management, Top
@chapter Git concepts

Gitは、少数のシンプルで強力なアイデアに基づいて構築されています。これらのアイデアを理解しなくても物事を成し遂げることは可能ですが、理解した上での方がGitをはるかに直感的に理解できるようになります。

私達は、最も重要なオブジェクト データベース (@pxref{[def_object_database]})とインデックス (@pxref{[def_index]})から始めることにします。

@menu
* The Object Database::
* The index::
@end menu

@node The Object Database, The index, , Git concepts
@section The Object Database

私達はすでに@ref{Understanding History; Commits,,Understanding History: Commits}で、すべてのコミットが40桁の「オブジェクト名」で保存されているのを見ました。実際、プロジェクトの履歴を表すために必要なすべての情報は、そのような名前のオブジェクトに格納されています。いずれの場合も、名前はオブジェクトのコンテンツのSHA-1ハッシュを使用して計算されます。SHA-1ハッシュは暗号化ハッシュ関数です。それが私たちにとって意味することは、同じ名前の2つの異なるオブジェクトを見つけることは不可能であるということです。これには多くの利点があります:

@itemize 

@item
Gitは、名前を比較するだけで、2つのオブジェクトが同一であるかどうかをすばやく判断できます。

@item
オブジェクト名はすべてのリポジトリで同じ方法で計算されるため、2つのリポジトリに保存されている同じコンテンツ(same
content)は常に同じ名前(same name)で保存されます。

@item
Gitは、オブジェクトの名前がまだその内容のSHA-1ハッシュであるかどうかを確認することによって、オブジェクトを読み取るときにエラーを検出できます。
@end itemize

(オブジェクトのフォーマットとSHA-1計算の詳細については、@ref{Object storage format}を参照してください。)

オブジェクトには "blob"、"tree"、"commit"、"tag" の4種類があります。

@itemize 

@item
ブロブ オブジェクト("blob" object) (@pxref{[def_blob_object]})は、ファイルデータを格納するために使用されます。

@item
ツリーオブジェクト("tree"   object) (@pxref{[def_tree_object]})は、1つ以上のブロブオブジェクトをディレクトリ構造に結び付けます。さらに、ツリーオブジェクトは他のツリーオブジェクトを参照できるため、ディレクトリ階層が作成されます。

@item
コミットオブジェクト("commit"   object) (@pxref{[def_commit_object]})は、そのようなディレクトリ階層をリビジョンの有向非巡回グラフ(directed acyclic   graph) (@pxref{[def_DAG]})に結び付けます。各コミットには、その時点でディレクトリ階層を指定する正確に1つのツリーのオブジェクト名が含まれます。さらにコミットは、そのディレクトリ階層に到達した方法の履歴を説明する「親」コミットオブジェクトを参照します。

@item
タグオブジェクト("tag"   object) (@pxref{[def_tag_object]})はシンボリックに識別を行い、他のオブジェクトに署名するために使用できます。
これには、オブジェクト名と別のオブジェクトのタイプ、（もちろん）シンボリック名、およびオプションで署名(signature)が含まれます。
@end itemize

オブジェクトタイプの詳細:

@menu
* Commit Object::
* Tree Object::
* Blob Object::
* Trust::
* Tag Object::
* How Git stores objects efficiently; pack files::
* Dangling objects::
* Recovering from repository corruption::
@end menu

@node Commit Object, Tree Object, , The Object Database
@subsection Commit Object

「commit」オブジェクトは、ツリーの物理的な状態を、そこに到達した方法とその理由の説明にリンクします。 @samp{--pretty=raw}
オプションを伴った @uref{git-show.html,git-show(1)} または @uref{git-log.html,git-log(1)}
を使用し、あなたのお気に入りのコミットを調べてみます:

@example
$ git show -s --pretty=raw 2be7fcb476
commit 2be7fcb4764f2dbcee52635b91fedb1b3dcf7ab4
tree fb3a8bdd0ceddd019615af4d57a53f43d8cee2bf
parent 257a84d9d02e90447b149af58b271c19405edb6a
author Dave Watson <dwatson@@mimvista.com> 1187576872 -0400
committer Junio C Hamano <gitster@@pobox.com> 1187591163 -0700

    Fix misspelling of 'suppress' in docs

    Signed-off-by: Junio C Hamano <gitster@@pobox.com>
@end example

コミットは以下のように定義されています:

@itemize 

@item
ツリー(a tree): ツリーオブジェクトのSHA-1名(以下で定義)。特定の時点でのディレクトリの内容を表します。

@item
親(親達)(parent(s)):
プロジェクトの履歴の直前のステップを表す、いくつかのコミットのSHA-1名。上記の例には1つの親があります。マージコミットには複数のコミットが含まれる場合があります。親のないコミットは「ルート」コミット(root
commit)と呼ばれ、プロジェクトの初期リビジョンを表します。各プロジェクトには、少なくとも1つのルート(root)が必要です。プロジェクトは複数のルーツ(roots)を持つこともできますが、それは一般的ではありません(または必ずしも良い考えではありません)。

@item
作者(an author): この変更の責任者の名前とその日付。

@item
コミッター(a committer)：実際にコミットを作成した人の名前と、コミットが行われた日付。
これは、作者(auther)とは異なる場合があります。たとえば、作者がパッチを作成し、それを使用してコミットを作成した人に電子メールで送信した場合です。

@item
このコミットを説明するコメント。
@end itemize

注意:
コミット自体には、実際に何が変更されたかに関する情報は含まれていないことに注意してください。すべての変更は、このコミットによって参照されるツリーの内容を、その親に関連付けられているツリーと比較することによって計算されます。特に、Gitはファイルの名前変更を明示的に記録しようとはしませんが、パスの変更時に同じファイルデータが存在することで名前変更が示唆される場合を特定できます。
(たとえば、 @uref{git-diff.html,git-diff(1)} の @samp{-M} オプションを参照してください。)

コミットは通常、 @uref{git-commit.html,git-commit(1)}
によって作成されます。これにより、親が通常は現在のHEADであり、ツリーが現在インデックスに格納されているコンテンツから取得されるコミットが作成されます。

@node Tree Object, Blob Object, Commit Object, The Object Database
@subsection Tree Object

汎用性の高い @uref{git-show.html,git-show(1)} コマンドを使用してツリーオブジェクトを調べることもできますが、あなたは
@uref{git-ls-tree.html,git-ls-tree(1)} で詳細を確認できます。

@example
$ git ls-tree fb3a8bdd0ce
100644 blob 63c918c667fa005ff12ad89437f2fdc80926e21c    .gitignore
100644 blob 5529b198e8d14decbe4ad99db3f7fb632de0439d    .mailmap
100644 blob 6ff87c4664981e4397625791c8ea3bbb5f2279a3    COPYING
040000 tree 2fb783e477100ce076f6bf57e4a6f026013dc745    Documentation
100755 blob 3c0032cec592a765692234f1cba47dfdcc3a9200    GIT-VERSION-GEN
100644 blob 289b046a443c0647624607d471289b2c7dcd470b    INSTALL
100644 blob 4eb463797adc693dc168b926b6932ff53f17d0b1    Makefile
100644 blob 548142c327a6790ff8821d67c2ee1eff7a656b52    README
...
@end example

ご覧のとおり、ツリーオブジェクトにはエントリのリストが含まれており、各エントリにはモード(mode)とオブジェクトタイプ(object
type)とSHA-1名(SHA-1 name)と名前(name)があり、名前でソートされています。これは、単一のディレクトリツリーの内容を表します。

オブジェクトタイプは、ファイルの内容を表すブロブ(blob)でも、サブディレクトリの内容を表す別のツリーでもかまいません。
ツリー(tree)とブロブ(blob)は、他のすべてのオブジェクトと同様に、その内容のSHA-1ハッシュによって名前が付けられるため、内容(再帰的にすべてのサブディレクトリの内容を含む)が同一である場合に限り、2つのツリーは同じSHA-1名を持ちます。これにより、Gitは、同じオブジェクト名を持つエントリを無視できるため、2つの関連するツリーオブジェクト間の違いをすばやく判断できます。

(注意: サブモジュールが存在する場合、ツリーにはエントリとしてコミットが含まれる場合もあります。その文書については、@ref{Submodules}
を参照してください。)

注意: すべてのファイルのモードが644または755であることに注意してください。Gitは実際には実行可能ビット(executable
bit)にのみ注意を払います。

@node Blob Object, Trust, Tree Object, The Object Database
@subsection Blob Object

あなたは @uref{git-show.html,git-show(1)} を使用して、ブロブ(blob)の内容を調べることができます。たとえば、上のツリーから
@samp{COPYING} のエントリのブロブを取得します:

@example
$ git show 6ff87c4664

 Note that the only valid version of the GPL as far as this project
 is concerned is _this_ particular version of the license (ie v2, not
 v2.2 or v3.x or whatever), unless explicitly otherwise stated.
...
@end example

「ブロブ」(blob)オブジェクトは、データのバイナリブロブ(バイナリの小さい塊)に他なりません。それは他のものを参照したり、いかなる種類の属性も持っていません。

ブロブはそのデータによって完全に定義されるため、ディレクトリツリー(またはリポジトリの複数の異なるバージョン)内の2つのファイルの内容が同じである場合、それらは同じブロブオブジェクトを共有します。オブジェクトはディレクトリツリー内の場所から完全に独立しており、ファイルの名前を変更しても、ファイルが関連付けられているオブジェクトは変更されません。

注意: <revision>:<path> 構文で @uref{git-show.html,git-show(1)}
を使用すると、任意のツリーまたはブロブオブジェクトを調べることができることに注意してください。これは、現在チェックアウトされていないツリーの内容を参照する場合に役立つことがあります。

@node Trust, Tag Object, Blob Object, The Object Database
@subsection Trust

あなたが、とあるソースからブロブのSHA-1名を受け取り、そのコンテンツを別の(おそらく信頼できない)ソースから受け取った場合でも、SHA-1名が一致する限り、それらの内容が正しいと信頼できます。これは、SHA-1が、同じハッシュを生成する異なるコンテンツを見つけることが不可能になるように設計されているためです。

同様に、あなたがディレクトリ全体のコンテンツを信頼するためには、最上位ツリーオブジェクトのSHA-1名を信頼する事だけでよいのです。信頼できるソースからコミットのSHA-1名を受け取った場合、あなたは、そのコミットの親を介して到達可能なコミットの履歴全体、およびそれらのコミットによって参照されるツリーのすべてのコンテンツを簡単に確認できます。

したがって、システムに実際の信頼を導入するには、トップレベルのコミットの名前を含む「1つの」特別なメモにデジタル署名するだけです。あなたのデジタル署名は、あなたがそのコミットを信頼していることを他の人に示し、コミットの履歴の不変性は、彼らが履歴全体を信頼できることを他の人に伝えます。

いいかえると、あなたは、トップコミットの名前(SHA-1ハッシュ)を通知する一通の電子メールを送信するだけでアーカイブ全体を簡単に検証し、GPG/PGPなどを使用してその電子メールにデジタル署名することができます。

これを支援するために、Gitはタグオブジェクトも提供しています…

@node Tag Object, How Git stores objects efficiently; pack files, Trust, The Object Database
@subsection Tag Object

タグオブジェクトには、オブジェクトとオブジェクトタイプとタグ名とタグを作成した人の名前("tagger")と、
@uref{git-cat-file.html,git-cat-file(1)} を使用して確認できるように、署名を含む可能性のあるメッセージが含まれます:

@example
$ git cat-file tag v1.5.0
object 437b1b20df4b356c9342dac8d38849f24ef44f27
type commit
tag v1.5.0
tagger Junio C Hamano <junkio@@cox.net> 1171411200 +0000

GIT 1.5.0
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)

iD8DBQBF0lGqwMbZpPMRm5oRAuRiAJ9ohBLd7s2kqjkKlq1qqC57SbnmzQCdG4ui
nLE/L9aUXdWeTFPron96DLA=
=2E+0
-----END PGP SIGNATURE-----
@end example

タグオブジェクトを作成および検証する方法については、 @uref{git-tag.html,git-tag(1)} コマンドを参照してください。 (注意:
@uref{git-tag.html,git-tag(1)}を使用して、「軽量タグ」(lightweight
tags)を作成することもできます。これは、タグオブジェクトではなく、名前が @samp{refs/tags/} で始まる単純な参照です)。

@node How Git stores objects efficiently; pack files, Dangling objects, Tag Object, The Object Database
@subsection How Git stores objects efficiently: pack files

新しく作成されたオブジェクトは、最初にオブジェクトのSHA-1ハッシュにちなんで名付けられたファイル名のファイルとして作成されます(
@samp{.git/objects} に保存されます)。

残念ながら、プロジェクトに多くのオブジェクトがあると、このシステムは非効率になります。 古いプロジェクトで以下を試してください:

@example
$ git count-objects
6930 objects, 47620 kilobytes
@end example

最初の数は、個々のファイルに保持されているオブジェクトの数です。 2つ目は、これらの「緩い」オブジェクト("loose"
objects)が占めるスペースの量です。

あなたは、これらの緩いオブジェクトを「パックファイル」(pack
file)に移動することで、スペースを節約し、Gitを高速化できます。このファイルには、オブジェクトのグループが効率的な圧縮形式で保存されます。
パックファイルのフォーマットの詳細については、 @uref{technical/pack-format.html,pack format}
をご覧ください。

緩いオブジェクトをパックに入れるには、 git repack を実行するだけです:

@example
$ git repack
Counting objects: 6020, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (6020/6020), done.
Writing objects: 100% (6020/6020), done.
Total 6020 (delta 4070), reused 0 (delta 0)
@end example

これにより、現在アンパックされているすべてのオブジェクトを含む単一の「パックファイル」が .git/objects/pack/ に作成されます。
あなたは、その後、以下を実行できます:

@example
$ git prune
@end example

これは、今やパックに格納済の緩いオブジェクト("loose"
objects)をすべて削除します。これにより、参照されていないオブジェクトも削除されます(たとえば、 @samp{git reset}
を使用してコミットを削除すると作成される可能性があります)。 @samp{.git/objects}
ディレクトリを確認するか、以下を実行することで、緩んだオブジェクトがなくなったことを確認できます。

@example
$ git count-objects
0 objects, 0 kilobytes
@end example

オブジェクトファイルはなくなりましたが、それらのオブジェクトを参照するコマンドは、以前とまったく同じように機能します。

@uref{git-gc.html,git-gc(1)}
コマンドは、パッキング(packing)やプルーニング(pruning)を実行します。このため、通常、あなたに必要な高レベルのコマンドはこのコマンドだけです。

@node Dangling objects, Recovering from repository corruption, How Git stores objects efficiently; pack files, The Object Database
@subsection Dangling objects

@uref{git-fsck.html,git-fsck(1)} コマンドは、宙ぶらりんオブジェクト(dangling
objects)について文句を言うことがあります。それらは問題ではありません。

宙ぶらりんオブジェクトの最も一般的な原因は、ブランチをリベースしたか、ブランチをリベースした他の誰かからプルしたことです。
@ref{Rewriting history and maintaining patch series} を参照してください。
その場合、元のブランチの古いヘッドは、それが指しているすべてのものと同様に、まだ存在しています。ブランチポインタ自体は、別のポインタに置き換えたため、存在していません。

宙ぶらりんオブジェクトを引き起こす他の状況もあります。たとえば、ファイルに「git
add」を実行したために「宙ぶらりんブロブ」が発生する可能性があります。実際にコミットして全体像の一部にする前に、そのファイル内の別の何かを変更し、その更新されたものをコミットした場合—この時最初に追加した古い状態は、コミットまたはツリーによってポイントされないため、宙ぶらりんブロブオブジェクトになります。

同様に、 "ort"マージ戦略が実行され、十字マージ(criss-cross
merge)があり、したがって複数のマージベースがあることがわかった場合(これはかなり珍しいですが、実際に発生します)、一時的な内部マージベースとして1つの一時的な中間ツリーを生成します。そして、それらは実際のオブジェクトですが、最終結果はそれらを指すことにはならないため、リポジトリ内で「宙ぶらりん」になります(または、十字マージが多数あり、マージベースが3つ以上ある場合は、さらに多くの可能性があります)。

一般的に、宙ぶらりんオブジェクトは心配する必要はありません。それらは非常に役立つことさえあります。あなたが何かを台無しにした場合、宙ぶらりんオブジェクトはあなたがあなたの古いツリーを回復する方法になることができます(たとえば、リベースを行った後で、本当はリベースをやりたくなかった気づきました。持っている宙ぶらりんオブジェクトを確認して、ヘッドを古い宙ぶらりん状態にリセットすることができます)。

コミットの場合は、あなたは以下を使用できます:

@example
$ gitk <dangling-commit-sha-goes-here> --not --all
@end example

これは、指定されたコミットから到達可能なすべての履歴を要求しますが、ブランチ、タグ、またはその他の参照からは要求しません。
必要なものであると判断した場合は、いつでも新しい参照を作成できます。たとえば、

@example
$ git branch recovered-branch <dangling-commit-sha-goes-here>
@end example

ブロブとツリーの場合、同じことはできませんが、それでも調べることができます。 あなたはただ以下のようにするだけです。

@example
$ git show <dangling-blob/tree-sha-goes-here>
@end example

ブロブの内容が何であるか(または、ツリーの場合、基本的にそのディレクトリの @samp{ls}
したのが何であるか)を示すために、それはあなたに宙ぶらりんオブジェクトを残した操作が何であったかについてのいくらかの考えを与えるかもしれません。

通常、宙ぶらりんのブロブやツリーはあまり興味深くはありません。ほとんどの場合、それらは中途のマージベースであるか(手動で修正した競合するマージがあった場合、ブローブにはマージからの競合マーカーが含まれることがよくあります)、または、@samp{git
fetch} で、あなたが ^C
か何かで中断すると、オブジェクトデータベースに新しいオブジェクトの一部を残す事が発生しますが、それらは役に立たない単なる宙ぶらりんです。

とにかく、あなたは宙ぶらりん状態に興味がないと確信したら、あなたは到達できないすべてのオブジェクトを削除できます:

@example
$ git prune
@end example

そしてそれらは消え去ります。(あなたは、静止した、活動していないリポジトリでのみ @samp{git prune}
を実行すべきです。これは、ファイルシステムのfsckリカバリを実行するようなものです。あなたはfsckを、ファイルシステムがマウントされている間は実行したくないでしょう。同様に
@samp{git prune}
は、リポジトリへの同時アクセスの場合でも害を及ぼさないように設計されていますが、紛らわしいメッセージや恐ろしいメッセージを受け取る可能性があります。）

@node Recovering from repository corruption, , Dangling objects, The Object Database
@subsection Recovering from repository corruption

設計上、Gitは信頼できるデータを慎重に扱います。ただし、Git自体にバグがない場合でも、ハードウェアまたはオペレーティングシステムのエラーによってデータが破損する可能性があります。

このような問題に対する最初の防御策はバックアップです。cloneを使用するか、cp、tar、またはその他のバックアップメカニズムを使用して、Gitディレクトリをバックアップできます。

最後の手段として、破損したオブジェクトを検索し、手動で置き換えることができます。その処理でさらに破損してしまう場合に備えて、これを試行する前にリポジトリをバックアップしてください。

私達は、問題は単一の欠落または破損したブロブであると想定しますが、これは解決可能な問題である場合があります。
(欠落しているツリー、特にコミットを回復することは*非常に*困難です)。

開始する前に、破損があることを確認し、 @uref{git-fsck.html,git-fsck(1)}
を使用して破損がどこにあるかを把握します。これにはけっこう時間がかかる場合があります。

出力が次のようになっているとします:

@example
$ git fsck --full --no-dangling
broken link from    tree 2d9263c6d23595e7cb2a21e5ebbb53655278dff8
              to    blob 4b9458b3786228369c63936db65827de3cc06200
missing blob 4b9458b3786228369c63936db65827de3cc06200
@end example

これで、ブロブ 4b9458b3 が欠落しており、ツリー 2d9263c6
がそれを指していることがわかります。欠落しているブロブブジェクトのコピーが1つだけ見つかった場合は、おそらく他のリポジトリで、それを
@samp{.git/objects/4b/9458b3...} に移動して実行できます。
しかし、あなたはそれができなかったということにしましょう。そうするってぇと、あなたは @uref{git-ls-tree.html,git-ls-tree(1)}
を使用して、それを指しているツリーを調べることができます。これにより、以下のような出力が得られるかもしれません:

@example
$ git ls-tree 2d9263c6d23595e7cb2a21e5ebbb53655278dff8
100644 blob 8d14531846b95bfa3564b58ccfb7913a034323b8    .gitignore
100644 blob ebf9bf84da0aab5ed944264a5db2a65fe3a3e883    .mailmap
100644 blob ca442d313d86dc67e0a2e5d584b465bd382cbf5c    COPYING
...
100644 blob 4b9458b3786228369c63936db65827de3cc06200    myfile
...
@end example

これで、欠落しているブロブが @samp{myfile} という名前のファイルのデータであることがわかりました。
また、ディレクトリを特定できる可能性もあります。たとえば、「somedirectory」にあるとします。
運が良ければ、不足しているコピーは、作業ツリーの @samp{somedirectory/myfile} でチェックアウトしたコピーと同じである可能性があります。
@uref{git-hash-object.html,git-hash-object(1)} を使用して、それが正しいかどうかをテストできます:

@example
$ git hash-object -w somedirectory/myfile
@end example

これにより、 somedirectory/myfile の内容を含むブロブオブジェクトが作成および保存され、そのオブジェクトのSHA-1が出力されます。
運が良ければ、4b9458b3786228369c63936db65827de3cc06200
になる可能性があります。その場合は、あなたの推測が正しかったということで、破損が修正されます。

それ以外の場合は、より多くの情報が必要です。あなたはファイルのどのバージョンが失われたかをどのように知ればよいのでしょうか？

これを行う最も簡単な方法は以下のとおりです:

@example
$ git log --raw --all --full-history -- somedirectory/myfile
@end example

あなたは生の出力を問い合わせたので、あなたは以下のようなものを得ます。

@example
commit abc
Author:
Date:
...
:100644 100644 4b9458b newsha M somedirectory/myfile


commit xyz
Author:
Date:

...
:100644 100644 oldsha 4b9458b M somedirectory/myfile
@end example

これは、ファイルの直前のバージョンが「newsha」であり、直前のバージョンが「oldsha」であったことを示しています。
また、oldshaから4b9458bへの変更、および4b9458bからnewshaへの変更に伴うコミットメッセージも分かります。

十分に小さな変更をコミットしている場合は、中間状態4b9458bの内容が再構築するのに適している可能性があります。

もしそれが可能でであれば、あなたは不足しているオブジェクトを以下のように再作成できます。

@example
$ git hash-object -w <recreated-file>
@end example

そしてあなたのリポジトリは再び正常になります。

(ところで、あなたは @samp{fsck} を無視する事がでます。以下の通り始めます。

@example
$ git log --raw --all
@end example

そして、その全体の中で行方不明のオブジェクト(4b9458b)のshaを探しました。そうするかどうかはあなた次第です—Gitは多くの情報を*持っていて*、それはただ1つの特定のブロブバージョンを失っているだけです。

@node The index, , The Object Database, Git concepts
@section The index

インデックスは、ソートされたパス名のリストを含むバイナリファイル(通常は @samp{.git/index}
に保持されます)であり、それぞれパーミッションとブロブオブジェクトのSHA-1を含んでいます。 @uref{git-ls-files.html,git-ls-files(1)}
は、インデックスの内容を表示できます。

@example
$ git ls-files --stage
100644 63c918c667fa005ff12ad89437f2fdc80926e21c 0       .gitignore
100644 5529b198e8d14decbe4ad99db3f7fb632de0439d 0       .mailmap
100644 6ff87c4664981e4397625791c8ea3bbb5f2279a3 0       COPYING
100644 a37b2152bd26be2c2289e1f57a292534a51a93c7 0       Documentation/.gitignore
100644 fbefe9a45b00a54b58d94d06eca48b03d40a50e0 0       Documentation/Makefile
...
100644 2511aef8d89ab52be5ec6a5e46236b4b6bcd07ea 0       xdiff/xtypes.h
100644 2ade97b2574a9f77e7ae4002a4e07a6a38e46d07 0       xdiff/xutils.c
100644 d5de8292e05e7c36c4b68857c1cf9855e3d2f70a 0       xdiff/xutils.h
@end example

注意:
古いドキュメントでは、「現在のディレクトリキャッシュ」または単に「キャッシュ」と呼ばれるインデックスが表示される場合があることに注意してください。
これには3つの重要な特性があります:

@enumerate 

@item
インデックスには、単一の(一意に決定された)ツリーオブジェクトを生成するために必要なすべての情報が含まれています。

たとえば、 @uref{git-commit.html,git-commit(1)}
を実行すると、インデックスからこのツリーオブジェクトが生成され、オブジェクトデータベースに保存され、新しいコミットに関連付けられたツリーオブジェクトとして使用されます。

@item
インデックスを使用すると、インデックスが定義するツリーオブジェクトと作業ツリーをすばやく比較できます。

これは、エントリごとにいくつかの追加データ(最終変更時刻など)を保存することによって行われます。このデータは上に表示されず、作成されたツリーオブジェクトに保存されませんが、作業ディレクトリ内のどのファイルがインデックスに保存されているものと異なるかをすばやく判断するために使用できるため、Gitはそのようなファイルからすべてのデータを読み取って変更を探す必要がありません。

@item
異なるツリーオブジェクト間のマージの競合に関する情報を効率的に表すことができるため、各パス名を、関連するツリーに関する十分な情報に関連付けて、それらの間で3方向のマージを作成できます。

私達はマージ中に、インデックスが1つのファイルの複数のバージョン（「ステージ」と呼ばれる）を格納できることを
@ref{Getting conflict-resolution help during a merge} で確認しました。上記の @uref{git-ls-files.html,git-ls-files(1)}
出力の3番目の列はステージ番号であり、マージの競合があるファイルの場合は0以外の値を取ります。
@end enumerate

したがって、インデックスは一種の一時的なステージング領域であり、作業中のツリーで埋められます。

あなたがインデックスを完全に吹き飛ばしても、それが記述されたツリーの名前を持っている限り、通常、情報は失われていません。

@node Submodules, Low-level Git operations, Git concepts, Top
@chapter Submodules

Large projects are often composed of smaller, self-contained modules.  For
example, an embedded Linux distribution’s source tree would include every
piece of software in the distribution with some local modifications; a movie
player might need to build against a specific, known-working version of a
decompression library; several independent programs might all share the same
build scripts.

With centralized revision control systems this is often accomplished by
including every module in one single repository.  Developers can check out
all modules or only the modules they need to work with.  They can even
modify files across several modules in a single commit while moving things
around or updating APIs and translations.

Git does not allow partial checkouts, so duplicating this approach in Git
would force developers to keep a local copy of modules they are not
interested in touching.  Commits in an enormous checkout would be slower
than you’d expect as Git would have to scan every directory for changes.  If
modules have a lot of local history, clones would take forever.

On the plus side, distributed revision control systems can much better
integrate with external sources.  In a centralized model, a single arbitrary
snapshot of the external project is exported from its own revision control
and then imported into the local revision control on a vendor branch.  All
the history is hidden.  With distributed revision control you can clone the
entire external history and much more easily follow development and re-merge
local changes.

Git’s submodule support allows a repository to contain, as a subdirectory, a
checkout of an external project.  Submodules maintain their own identity;
the submodule support just stores the submodule repository location and
commit ID, so other developers who clone the containing project
("superproject") can easily clone all the submodules at the same revision.
Partial checkouts of the superproject are possible: you can tell Git to
clone none, some or all of the submodules.

The @uref{git-submodule.html,git-submodule(1)} command is available since Git 1.5.3.  Users
with Git 1.5.2 can look up the submodule commits in the repository and
manually check them out; earlier versions won’t recognize the submodules at
all.

To see how submodule support works, create four example repositories that
can be used later as a submodule:

@example
$ mkdir ~/git
$ cd ~/git
$ for i in a b c d
do
        mkdir $i
        cd $i
        git init
        echo "module $i" > $i.txt
        git add $i.txt
        git commit -m "Initial commit, submodule $i"
        cd ..
done
@end example

Now create the superproject and add all the submodules:

@example
$ mkdir super
$ cd super
$ git init
$ for i in a b c d
do
        git submodule add ~/git/$i $i
done
@end example

@quotation

@strong{Note}

Do not use local URLs here if you plan to publish your superproject!
@end quotation

See what files @samp{git submodule} created:

@example
$ ls -a
.  ..  .git  .gitmodules  a  b  c  d
@end example

The @samp{git submodule add <repo> <path>} command does a couple of things:

@itemize 

@item
It clones the submodule from @samp{<repo>} to the given @samp{<path>} under the
current directory and by default checks out the master branch.

@item
It adds the submodule’s clone path to the @uref{gitmodules.html,gitmodules(5)} file and
adds this file to the index, ready to be committed.

@item
It adds the submodule’s current commit ID to the index, ready to be
committed.
@end itemize

Commit the superproject:

@example
$ git commit -m "Add submodules a, b, c and d."
@end example

Now clone the superproject:

@example
$ cd ..
$ git clone super cloned
$ cd cloned
@end example

The submodule directories are there, but they’re empty:

@example
$ ls -a a
.  ..
$ git submodule status
-d266b9873ad50488163457f025db7cdd9683d88b a
-e81d457da15309b4fef4249aba9b50187999670d b
-c1536a972b9affea0f16e0680ba87332dc059146 c
-d96249ff5d57de5de093e6baff9e0aafa5276a74 d
@end example

@quotation

@strong{Note}

The commit object names shown above would be different for you, but they
should match the HEAD commit object names of your repositories.  You can
check it by running @samp{git ls-remote ../a}.
@end quotation

Pulling down the submodules is a two-step process. First run @samp{git submodule
init} to add the submodule repository URLs to @samp{.git/config}:

@example
$ git submodule init
@end example

Now use @samp{git submodule update} to clone the repositories and check out the
commits specified in the superproject:

@example
$ git submodule update
$ cd a
$ ls -a
.  ..  .git  a.txt
@end example

One major difference between @samp{git submodule update} and @samp{git submodule add}
is that @samp{git submodule update} checks out a specific commit, rather than the
tip of a branch. It’s like checking out a tag: the head is detached, so
you’re not working on a branch.

@example
$ git branch
* (detached from d266b98)
  master
@end example

If you want to make a change within a submodule and you have a detached
head, then you should create or checkout a branch, make your changes,
publish the change within the submodule, and then update the superproject to
reference the new commit:

@example
$ git switch master
@end example

または

@example
$ git switch -c fix-up
@end example

then

@example
$ echo "adding a line again" >> a.txt
$ git commit -a -m "Updated the submodule from within the superproject."
$ git push
$ cd ..
$ git diff
diff --git a/a b/a
index d266b98..261dfac 160000
--- a/a
+++ b/a
@@@@ -1 +1 @@@@
-Subproject commit d266b9873ad50488163457f025db7cdd9683d88b
+Subproject commit 261dfac35cb99d380eb966e102c1197139f7fa24
$ git add a
$ git commit -m "Updated submodule a."
$ git push
@end example

You have to run @samp{git submodule update} after @samp{git pull} if you want to
update submodules, too.

@menu
* Pitfalls with submodules::
@end menu

@node Pitfalls with submodules, , , Submodules
@section Pitfalls with submodules

Always publish the submodule change before publishing the change to the
superproject that references it. If you forget to publish the submodule
change, others won’t be able to clone the repository:

@example
$ cd ~/git/super/a
$ echo i added another line to this file >> a.txt
$ git commit -a -m "doing it wrong this time"
$ cd ..
$ git add a
$ git commit -m "Updated submodule a again."
$ git push
$ cd ~/git/cloned
$ git pull
$ git submodule update
error: pathspec '261dfac35cb99d380eb966e102c1197139f7fa24' did not match any file(s) known to git.
Did you forget to 'git add'?
Unable to checkout '261dfac35cb99d380eb966e102c1197139f7fa24' in submodule path 'a'
@end example

In older Git versions it could be easily forgotten to commit new or modified
files in a submodule, which silently leads to similar problems as not
pushing the submodule changes. Starting with Git 1.7.0 both @samp{git status} and
@samp{git diff} in the superproject show submodules as modified when they contain
new or modified files to protect against accidentally committing such a
state. @samp{git diff} will also add a @samp{-dirty} to the work tree side when
generating patch output or used with the @samp{--submodule} option:

@example
$ git diff
diff --git a/sub b/sub
--- a/sub
+++ b/sub
@@@@ -1 +1 @@@@
-Subproject commit 3f356705649b5d566d97ff843cf193359229a453
+Subproject commit 3f356705649b5d566d97ff843cf193359229a453-dirty
$ git diff --submodule
Submodule sub 3f35670..3f35670-dirty:
@end example

You also should not rewind branches in a submodule beyond commits that were
ever recorded in any superproject.

It’s not safe to run @samp{git submodule update} if you’ve made and committed
changes within a submodule without checking out a branch first. They will be
silently overwritten:

@example
$ cat a.txt
module a
$ echo line added from private2 >> a.txt
$ git commit -a -m "line added inside private2"
$ cd ..
$ git submodule update
Submodule path 'a': checked out 'd266b9873ad50488163457f025db7cdd9683d88b'
$ cd a
$ cat a.txt
module a
@end example

@quotation

@strong{Note}

The changes are still visible in the submodule’s reflog.
@end quotation

If you have uncommitted changes in your submodule working tree, @samp{git
submodule update} will not overwrite them.  Instead, you get the usual
warning about not being able switch from a dirty branch.

@node Low-level Git operations, Hacking Git, Submodules, Top
@chapter Low-level Git operations

Many of the higher-level commands were originally implemented as shell
scripts using a smaller core of low-level Git commands.  These can still be
useful when doing unusual things with Git, or just as a way to understand
its inner workings.

@menu
* Object access and manipulation::
* The Workflow::
* Examining the data::
* Merging multiple trees::
* Merging multiple trees, continued: Merging multiple trees; continued.
@end menu

@node Object access and manipulation, The Workflow, , Low-level Git operations
@section Object access and manipulation

The @uref{git-cat-file.html,git-cat-file(1)} command can show the contents of any object,
though the higher-level @uref{git-show.html,git-show(1)} is usually more useful.

The @uref{git-commit-tree.html,git-commit-tree(1)} command allows constructing commits with
arbitrary parents and trees.

A tree can be created with @uref{git-write-tree.html,git-write-tree(1)} and its data can be
accessed by @uref{git-ls-tree.html,git-ls-tree(1)}.  Two trees can be compared with
@uref{git-diff-tree.html,git-diff-tree(1)}.

A tag is created with @uref{git-mktag.html,git-mktag(1)}, and the signature can be
verified by @uref{git-verify-tag.html,git-verify-tag(1)}, though it is normally simpler to use
@uref{git-tag.html,git-tag(1)} for both.

@node The Workflow, Examining the data, Object access and manipulation, Low-level Git operations
@section The Workflow

High-level operations such as @uref{git-commit.html,git-commit(1)} and
@uref{git-restore.html,git-restore(1)} work by moving data between the working tree, the
index, and the object database.  Git provides low-level operations which
perform each of these steps individually.

Generally, all Git operations work on the index file. Some operations work
@strong{purely} on the index file (showing the current state of the index), but
most operations move data between the index file and either the database or
the working directory. Thus there are four main combinations:

@menu
* working directory → index::
* index → object database::
* object database → index::
* index → working directory::
* Tying it all together::
@end menu

@node working directory → index, index → object database, , The Workflow
@subsection working directory → index

The @uref{git-update-index.html,git-update-index(1)} command updates the index with information
from the working directory.  You generally update the index information by
just specifying the filename you want to update, like so:

@example
$ git update-index filename
@end example

but to avoid common mistakes with filename globbing etc., the command will
not normally add totally new entries or remove old entries, i.e. it will
normally just update existing cache entries.

To tell Git that yes, you really do realize that certain files no longer
exist, or that new files should be added, you should use the @samp{--remove} and
@samp{--add} flags respectively.

NOTE! A @samp{--remove} flag does @emph{not} mean that subsequent filenames will
necessarily be removed: if the files still exist in your directory
structure, the index will be updated with their new status, not removed. The
only thing @samp{--remove} means is that update-index will be considering a
removed file to be a valid thing, and if the file really does not exist any
more, it will update the index accordingly.

As a special case, you can also do @samp{git update-index --refresh}, which will
refresh the "stat" information of each index to match the current stat
information. It will @emph{not} update the object status itself, and it will only
update the fields that are used to quickly test whether an object still
matches its old backing store object.

The previously introduced @uref{git-add.html,git-add(1)} is just a wrapper for
@uref{git-update-index.html,git-update-index(1)}.

@node index → object database, object database → index, working directory → index, The Workflow
@subsection index → object database

You write your current index file to a "tree" object with the program

@example
$ git write-tree
@end example

that doesn’t come with any options—it will just write out the current index
into the set of tree objects that describe that state, and it will return
the name of the resulting top-level tree. You can use that tree to
re-generate the index at any time by going in the other direction:

@node object database → index, index → working directory, index → object database, The Workflow
@subsection object database → index

You read a "tree" file from the object database, and use that to populate
(and overwrite—don’t do this if your index contains any unsaved state that
you might want to restore later!) your current index.  Normal operation is
just

@example
$ git read-tree <SHA-1 of tree>
@end example

and your index file will now be equivalent to the tree that you saved
earlier. However, that is only your @emph{index} file: your working directory
contents have not been modified.

@node index → working directory, Tying it all together, object database → index, The Workflow
@subsection index → working directory

You update your working directory from the index by "checking out"
files. This is not a very common operation, since normally you’d just keep
your files updated, and rather than write to your working directory, you’d
tell the index files about the changes in your working directory (i.e. @samp{git
update-index}).

However, if you decide to jump to a new version, or check out somebody
else’s version, or just restore a previous tree, you’d populate your index
file with read-tree, and then you need to check out the result with

@example
$ git checkout-index filename
@end example

or, if you want to check out all of the index, use @samp{-a}.

NOTE! @samp{git checkout-index} normally refuses to overwrite old files, so if
you have an old version of the tree already checked out, you will need to
use the @samp{-f} flag (@emph{before} the @samp{-a} flag or the filename) to @emph{force} the
checkout.

Finally, there are a few odds and ends which are not purely moving from one
representation to the other:

@node Tying it all together, , index → working directory, The Workflow
@subsection Tying it all together

To commit a tree you have instantiated with @samp{git write-tree}, you’d create a
"commit" object that refers to that tree and the history behind it—most
notably the "parent" commits that preceded it in history.

Normally a "commit" has one parent: the previous state of the tree before a
certain change was made. However, sometimes it can have two or more parent
commits, in which case we call it a "merge", due to the fact that such a
commit brings together ("merges") two or more previous states represented by
other commits.

In other words, while a "tree" represents a particular directory state of a
working directory, a "commit" represents that state in time, and explains
how we got there.

You create a commit object by giving it the tree that describes the state at
the time of the commit, and a list of parents:

@example
$ git commit-tree <tree> -p <parent> [(-p <parent2>)...]
@end example

and then giving the reason for the commit on stdin (either through
redirection from a pipe or file, or by just typing it at the tty).

@samp{git commit-tree} will return the name of the object that represents that
commit, and you should save it away for later use. Normally, you’d commit a
new @samp{HEAD} state, and while Git doesn’t care where you save the note about
that state, in practice we tend to just write the result to the file pointed
at by @samp{.git/HEAD}, so that we can always see what the last committed state
was.

Here is a picture that illustrates how various pieces fit together:

@example
                     commit-tree
                      commit obj
                       +----+
                       |    |
                       |    |
                       V    V
                    +-----------+
                    | Object DB |
                    |  Backing  |
                    |   Store   |
                    +-----------+
                       ^
           write-tree  |     |
             tree obj  |     |
                       |     |  read-tree
                       |     |  tree obj
                             V
                    +-----------+
                    |   Index   |
                    |  "cache"  |
                    +-----------+
         update-index  ^
             blob obj  |     |
                       |     |
    checkout-index -u  |     |  checkout-index
             stat      |     |  blob obj
                             V
                    +-----------+
                    |  Working  |
                    | Directory |
                    +-----------+
@end example

@node Examining the data, Merging multiple trees, The Workflow, Low-level Git operations
@section Examining the data

You can examine the data represented in the object database and the index
with various helper tools. For every object, you can use
@uref{git-cat-file.html,git-cat-file(1)} to examine details about the object:

@example
$ git cat-file -t <objectname>
@end example

shows the type of the object, and once you have the type (which is usually
implicit in where you find the object), you can use

@example
$ git cat-file blob|tree|commit|tag <objectname>
@end example

to show its contents. NOTE! Trees have binary content, and as a result there
is a special helper for showing that content, called @samp{git ls-tree}, which
turns the binary content into a more easily readable form.

It’s especially instructive to look at "commit" objects, since those tend to
be small and fairly self-explanatory. In particular, if you follow the
convention of having the top commit name in @samp{.git/HEAD}, you can do

@example
$ git cat-file commit HEAD
@end example

to see what the top commit was.

@node Merging multiple trees, Merging multiple trees; continued, Examining the data, Low-level Git operations
@section Merging multiple trees

Git can help you perform a three-way merge, which can in turn be used for a
many-way merge by repeating the merge procedure several times.  The usual
situation is that you only do one three-way merge (reconciling two lines of
history) and commit the result, but if you like to, you can merge several
branches in one go.

To perform a three-way merge, you start with the two commits you want to
merge, find their closest common parent (a third commit), and compare the
trees corresponding to these three commits.

To get the "base" for the merge, look up the common parent of two commits:

@example
$ git merge-base <commit1> <commit2>
@end example

This prints the name of a commit they are both based on. You should now look
up the tree objects of those commits, which you can easily do with

@example
$ git cat-file commit <commitname> | head -1
@end example

since the tree object information is always the first line in a commit
object.

Once you know the three trees you are going to merge (the one "original"
tree, aka the common tree, and the two "result" trees, aka the branches you
want to merge), you do a "merge" read into the index. This will complain if
it has to throw away your old index contents, so you should make sure that
you’ve committed those—in fact you would normally always do a merge against
your last commit (which should thus match what you have in your current
index anyway).

To do the merge, do

@example
$ git read-tree -m -u <origtree> <yourtree> <targettree>
@end example

which will do all trivial merge operations for you directly in the index
file, and you can just write the result out with @samp{git write-tree}.

@node Merging multiple trees; continued, , Merging multiple trees, Low-level Git operations
@section Merging multiple trees, continued

Sadly, many merges aren’t trivial. If there are files that have been added,
moved or removed, or if both branches have modified the same file, you will
be left with an index tree that contains "merge entries" in it. Such an
index tree can @emph{NOT} be written out to a tree object, and you will have to
resolve any such merge clashes using other tools before you can write out
the result.

You can examine such index state with @samp{git ls-files --unmerged} command.  An
example:

@example
$ git read-tree -m $orig HEAD $target
$ git ls-files --unmerged
100644 263414f423d0e4d70dae8fe53fa34614ff3e2860 1       hello.c
100644 06fa6a24256dc7e560efa5687fa84b51f0263c3a 2       hello.c
100644 cc44c73eb783565da5831b4d820c962954019b69 3       hello.c
@end example

Each line of the @samp{git ls-files --unmerged} output begins with the blob mode
bits, blob SHA-1, @emph{stage number}, and the filename.  The @emph{stage number} is
Git’s way to say which tree it came from: stage 1 corresponds to the @samp{$orig}
tree, stage 2 to the @samp{HEAD} tree, and stage 3 to the @samp{$target} tree.

Earlier we said that trivial merges are done inside @samp{git read-tree -m}.  For
example, if the file did not change from @samp{$orig} to @samp{HEAD} or @samp{$target}, or
if the file changed from @samp{$orig} to @samp{HEAD} and @samp{$orig} to @samp{$target} the same
way, obviously the final outcome is what is in @samp{HEAD}.  What the above
example shows is that file @samp{hello.c} was changed from @samp{$orig} to @samp{HEAD} and
@samp{$orig} to @samp{$target} in a different way.  You could resolve this by running
your favorite 3-way merge program, e.g.  @samp{diff3}, @samp{merge}, or Git’s own
merge-file, on the blob objects from these three stages yourself, like this:

@example
$ git cat-file blob 263414f >hello.c~1
$ git cat-file blob 06fa6a2 >hello.c~2
$ git cat-file blob cc44c73 >hello.c~3
$ git merge-file hello.c~2 hello.c~1 hello.c~3
@end example

This would leave the merge result in @samp{hello.c~2} file, along with conflict
markers if there are conflicts.  After verifying the merge result makes
sense, you can tell Git what the final merge result for this file is by:

@example
$ mv -f hello.c~2 hello.c
$ git update-index hello.c
@end example

When a path is in the "unmerged" state, running @samp{git update-index} for that
path tells Git to mark the path resolved.

The above is the description of a Git merge at the lowest level, to help you
understand what conceptually happens under the hood.  In practice, nobody,
not even Git itself, runs @samp{git cat-file} three times for this.  There is a
@samp{git merge-index} program that extracts the stages to temporary files and
calls a "merge" script on it:

@example
$ git merge-index git-merge-one-file hello.c
@end example

and that is what higher level @samp{git merge -s resolve} is implemented with.

@node Hacking Git, Git Glossary, Low-level Git operations, Top
@chapter Hacking Git

この章では、おそらくGit開発者だけが理解する必要があるGit実装の内部の詳細について説明します。

@menu
* Object storage format::
* A birds-eye view of Git’s source code::
@end menu

@node Object storage format, A birds-eye view of Git’s source code, , Hacking Git
@section Object storage format

すべてのオブジェクトには、オブジェクトの形式(つまり、オブジェクトの使用方法や他のオブジェクトの参照方法)を識別する、静的に決定された「タイプ」(
"type" )があります。 現在、「blob」、「tree」、「commit」、「tag」の4つの異なるオブジェクトタイプがあります。

オブジェクトタイプに関係なく、すべてのオブジェクトは次の特性を共有します:
すべてzlibで圧縮され、タイプを指定するだけでなく、オブジェクト内のデータに関するサイズ情報も提供するヘッダーがあります。オブジェクトの名前付けに使用されるSHA-1ハッシュは、
元のデータ＋ヘッダー のハッシュであるため、 @samp{sha1sum} @emph{file} は @emph{file} のオブジェクト名と一致しないことに注意してください。

その結果、オブジェクトの一般的な整合性は、オブジェクトの内容やタイプに関係なく常にテストできます。すべてのオブジェクトは、
(a)ハッシュがファイルの内容と一致、かつ、 (b)オブジェクトが、 @samp{<ascii type without space> + <space> +
<ascii decimal size> + <byte\0> + <binary object data>}
というシーケンスのバイトストリームへちゃんと解凍できることで検証できます。

構造化オブジェクトは、その構造と他のオブジェクトへの接続をさらに検証できます。
これは通常、すべてのオブジェクトの完全な依存関係グラフを生成し、（ハッシュを介して表面的な一貫性を検証するだけでなく）内部の一貫性を検証する
@samp{gitfsck} プログラムを使用して行われます。

@node A birds-eye view of Git’s source code, , Object storage format, Hacking Git
@section A birds-eye view of Git’s source code

新しい開発者がGitのソースコードを見つけるのは必ずしも簡単ではありません。この節では、あなたがどこから始めればよいかを示すちょっとしたガイダンスを提供します。

開始するのに適した場所は、最初のコミットの内容から始めることです:

@example
$ git switch --detach e83c5163
@end example

最初のリビジョンは、Gitが今日持っているほとんどすべての基礎を築きますが、一度に読むには十分小さくまとまっています。

そのリビジョン以降、用語が変更されていることに注意してください。 たとえば、そのリビジョンのREADMEは、 "changeset"
という単語を使用して、今、 commit (@pxref{[def_commit_object]}) と呼んでいるものを説明しています。

また、それを「キャッシュ」と呼ぶのではなく、「インデックス」と呼びます。 ただし、このファイルは引き続き @samp{cache.h} と呼ばれます。備考:
これを変更する理由はたいしたものではありません。GitのすべてのCソースでincludeされている基本的なヘッダーファイルであるため、他に適切な単一の名前がないためです。

あなたが最初のコミットでGitの考え方を把握したなら、あなたはより新しいバージョンをチェックして、 @samp{cache.h} と` object.h` と
@samp{commit.h} を読み下すべきです。

初期のGitは、(UNIXの伝統でである)非常に単純なプログラムの集まりであり、スクリプトで使用して、出力を別のプログラムにパイプしていました。
新しいものをテストするのが簡単だったので、これは初期開発に適していました。ただし、最近、これらのパーツの多くが組み込みになり、コアの一部が「解放」(
"libified" )されました。つまり、パフォーマンス、移植性、およびコードの重複を避けるために libgit.a に配置されました。

今や、あなたはインデックスが何であるか(および、対応するデータ構造を @samp{cache.h} で探す)、そして最初のメンバーである @samp{struct
object} から共通の構造を継承するオブジェクトタイプ(blobs と trees と commits と
tags)がいくつかあることがわかりました(したがって、たとえば @samp{(struct object *)commit} をキャストして
、 @samp{&commit->object} と同じようにすることができます。つまり、オブジェクト名とフラグを取得します)。

ここで、この情報を吸収するために一服するとしましょう。

次のステップ: オブジェクトの命名に慣れてください。 @ref{Naming commits} を読んでください。
オブジェクトに名前を付ける方法はたくさんあります(リビジョンだけではありません！)。 これらはすべて @samp{sha1_name.c} で処理されます。 関数
@samp{get_sha1()} をざっと見てください。特別な処理の多くは、 @samp{get_sha1_basic()} などの関数によって実行されます。

リビジョンウォーカー。これはGitの最も解放(libified)された部分にあなたがうまく適応できるようにします。

基本から行きましょう。 @samp{git log} の初期バージョンは、シェルスクリプトでした:

@example
$ git-rev-list --pretty $(git-rev-parse --default HEAD "$@@") | \
        LESS=-S $@{PAGER:-less@}
@end example

これはどういう意味か？

@samp{git rev-list}
は、リビジョンウォーカーのオリジナルバージョンであり、「常に」stdoutにリビジョンのリストを出力します。ほとんどの新しいGitコマンドは @samp{git
rev-list} を使用するスクリプトとして開始されるため、これは引き続き機能し続ける必要があります。

@samp{gitrev-parse}
はもはやそれほど重要ではありません。これは、スクリプトによって呼び出されたさまざまな配管コマンドに関連するオプションを除外するためにのみ使用されました。

@samp{git rev-list} が行ったことのほとんどは、 @samp{revision.c} と @samp{revision.h} に含まれています。 オプションを
@samp{rev_info} という名前の構造体でラップします。この構造体は、どのリビジョンをどのように歩くか(walk)などを制御します。

@samp{git rev-parse`の元々の仕事は、今や関数 `setup_revisions()}
によって実行されるようになりました。この関数は、リビジョンとリビジョンウォーカーの一般的なコマンドラインオプションを解析します。この情報は、後で使用できるように構造体
@samp{rev_info} に保存されます。 あなたは @samp{setup_revisions()}
を呼び出した後、独自のコマンドラインオプション解析を行うことができます。 その後、初期化のために @samp{prepare_revision_walk()}
を呼び出す必要があります。その後は、関数 @samp{get_revision()} を使用してコミットを1つずつ取得できます。

リビジョンウォーキング処理の詳細に興味があるなら @samp{cmd_log()} の最初の実装をご覧ください。 @samp{git show
v1.3.0~155^2~4} を呼び出し、その関数までスクロールダウンします( @samp{setup_pager()}
を直接呼び出す必要がなくなったことに注意してください)。

今日では @samp{git log} は組み込みです。つまり、コマンド @samp{git} に含まれていることを意味します。ビルトインのソースは、

@itemize 

@item
@samp{cmd_<bla>} と呼ばれる関数で、通常は @samp{builtin.h} で宣言され、@samp{builtin/<bla.c>}
で定義されます(Gitの古いバージョンでは、代わりに @samp{builtin-<bla>.c} に含まれていたことに注意してください)。

@item
@samp{git.c} の @samp{commands[]} 配列のエントリ、および

@item
@samp{Makefile} の @samp{BUILTIN_OBJECTS} エントリ。
@end itemize

しばしば1つのソースファイルに複数のビルトインが含まれている場合があります。たとえば、 @samp{cmd_whatchanged()} と
@samp{cmd_log()} はどちらも、かなりのコードを共有しているため、 @samp{builtin/log.c} にあります。その場合、それらが存在する @samp{.c}
ファイルのように名前が付けられていないコマンドは、 @samp{Makefile} の @samp{BUILT_INS} にリストされている必要があります。

`git log`は、元のスクリプトよりもC言語版の方が複雑に見えますが、これにより、柔軟性とパフォーマンスが大幅に向上します。

ここでも、一息入れることをお勧めします。

レッスン3:
ソースコードを読んで学習します。マヂで、それはGitの機構について学ぶための最良の方法です(あなたが基本的な概念を知った後であれば、ですが)。

そして、あなたが興味を持っている事について考えてください、例えば、「どうすればそれのオブジェクト名を知っているだけでブロブ(blob)にアクセスできますか？」。
最初のステップは、それを実行できるGitコマンドを見つけることです。 この例では、 @samp{git show} または @samp{git cat-file}
のいずれかです。

ここでは分かりやすくするために、 @samp{git cat-file} を使用します。

@itemize 

@item
これは配管コマンドで、そして

@item
それは最初のコミットに見つかりました(文字通り @samp{cat-file.c} として約20のリビジョンを経ただけで、ビルトインになったときに
@samp{builtin/cat-file.c} に名前が変更され、その後10に満たないバージョンが表示されました)。
@end itemize

したがって、 @samp{builtin/cat-file.c} を調べ、 @samp{cmd_cat_file()} を検索して、それが何をするかを調べます。

@example
        git_config(git_default_config);
        if (argc != 3)
                usage("git cat-file [-t|-s|-e|-p|<type>] <sha1>");
        if (get_sha1(argv[2], sha1))
                die("Not a valid object name %s", argv[2]);
@end example

自明な詳細は飛ばしましょう。 ここで本当に興味深いのは、 @samp{get_sha1()} の呼び出しだけです。 @samp{argv[2]}
をオブジェクト名として解釈しようとし、現在のリポジトリに存在するオブジェクトを参照している場合は、結果のSHA-1を変数 @samp{sha1} に書き込みます。

ここで興味深いのは以下の2つです:

@itemize 

@item
`get_sha1()`は成功で0を返します。これは一部の新しいGitハッカーを驚かせるかもしれませんが、UNIXには、さまざまなエラーの場合にさまざまな負の数を返し、成功した場合は0を返すという長い伝統があります。

@item
the variable @samp{sha1} in the function signature of @samp{get_sha1()} is @samp{unsigned
char *}, but is actually expected to be a pointer to @samp{unsigned char[20]}.
This variable will contain the 160-bit SHA-1 of the given commit.  Note that
whenever a SHA-1 is passed as @samp{unsigned char *}, it is the binary
representation, as opposed to the ASCII representation in hex characters,
which is passed as @samp{char *}.
@end itemize

You will see both of these things throughout the code.

Now, for the meat:

@example
        case 0:
                buf = read_object_with_reference(sha1, argv[1], &size, NULL);
@end example

This is how you read a blob (actually, not only a blob, but any type of
object).  To know how the function @samp{read_object_with_reference()} actually
works, find the source code for it (something like @samp{git grep
read_object_with | grep ":[a-z]"} in the Git repository), and read the
source.

To find out how the result can be used, just read on in @samp{cmd_cat_file()}:

@example
        write_or_die(1, buf, size);
@end example

Sometimes, you do not know where to look for a feature.  In many such cases,
it helps to search through the output of @samp{git log}, and then @samp{git show} the
corresponding commit.

Example: If you know that there was some test case for @samp{git bundle}, but do
not remember where it was (yes, you @emph{could} @samp{git grep bundle t/}, but that
does not illustrate the point!):

@example
$ git log --no-merges t/
@end example

In the pager (@samp{less}), just search for "bundle", go a few lines back, and
see that it is in commit 18449ab0.  Now just copy this object name, and
paste it into the command line

@example
$ git show 18449ab0
@end example

Voila.

Another example: Find out what to do in order to make some script a builtin:

@example
$ git log --no-merges --diff-filter=A builtin/*.c
@end example

You see, Git is actually the best tool to find out about the source of Git
itself!

@node Git Glossary, Git Quick Reference, Hacking Git, Top
@chapter Git Glossary

@menu
* Git explained::
@end menu

@node Git explained, , , Git Glossary
@section Git explained

@table @asis

@item  @anchor{[def_alternate_object_database]}alternate object database 
代役(alternate)メカニズムを介して、 リポジトリ (@pxref{[def_repository]}) は
オブジェクトデータベース (@pxref{[def_object_database]}) の一部を "alternate" (代役)
呼ばれる別のオブジェクトデータベースから継承できます。

@item  @anchor{[def_bare_repository]}bare repository 
A bare repository is normally an appropriately named
directory (@pxref{[def_directory]}) with a @samp{.git} suffix that does not have a
locally checked-out copy of any of the files under revision control. That
is, all of the Git administrative and control files that would normally be
present in the hidden @samp{.git} sub-directory are directly present in the
@samp{repository.git} directory instead, and no other files are present and
checked out. Usually publishers of public repositories make bare
repositories available.

@item  @anchor{[def_blob_object]}blob object(ブロブオブジェクト) 
型の無いオブジェクト (@pxref{[def_object]})。例:ファイルの中身。

@item  @anchor{[def_branch]}branch 
A "branch" is a line of development.  The most recent commit (@pxref{[def_commit]})
on a branch is referred to as the tip of that branch.  The tip of the branch
is referenced by a branch head (@pxref{[def_head]}), which moves forward as
additional development is done on the branch.  A single Git
repository (@pxref{[def_repository]}) can track an arbitrary number of branches, but
your working tree (@pxref{[def_working_tree]}) is associated with just one of them
(the "current" or "checked out" branch), and HEAD (@pxref{[def_HEAD]}) points to
that branch.

@item  @anchor{[def_cache]}cache 
Obsolete for: index (@pxref{[def_index]}).

@item  @anchor{[def_chain]}chain(チェーン,チェイン) 
A list of objects, where each object (@pxref{[def_object]}) in the list contains a
reference to its successor (for example, the successor of a
commit (@pxref{[def_commit]}) could be one of its parents (@pxref{[def_parent]})).

@item  @anchor{[def_changeset]}changeset 
BitKeeper/cvsps speak for "commit (@pxref{[def_commit]})". Since Git does not store
changes, but states, it really does not make sense to use the term
"changesets" with Git.

@item  @anchor{[def_checkout]}checkout 
The action of updating all or part of the working tree (@pxref{[def_working_tree]})
with a tree object (@pxref{[def_tree_object]}) or blob (@pxref{[def_blob_object]}) from the
object database (@pxref{[def_object_database]}), and updating the
index (@pxref{[def_index]}) and HEAD (@pxref{[def_HEAD]}) if the whole working tree has been
pointed at a new branch (@pxref{[def_branch]}).

@item  @anchor{[def_cherry-picking]}cherry-picking(チェリーピック,チェリーピッキング) 
SCM (@pxref{[def_SCM]}) の専門用語では、 "cherry pick"
(つまみ食い)とは、一連の変更(通常はコミット)から変更のサブセットを選択し、それらを別のコードベースの上に新しい一連の変更として記録することを意味します。Gitでは、これは
"git cherry-pick"
コマンドによって実行され、既存のコミット (@pxref{[def_commit]})によって導入された変更を抽出し、現在のブランチ (@pxref{[def_branch]})の先端に基づいてそれを新しいコミットとして記録します。

@item  @anchor{[def_clean]}clean 
A working tree (@pxref{[def_working_tree]}) is clean, if it corresponds to the
revision (@pxref{[def_revision]}) referenced by the current head (@pxref{[def_head]}). Also
see "dirty (@pxref{[def_dirty]})".

@item  @anchor{[def_commit]}commit 
As a noun: A single point in the Git history; the entire history of a
project is represented as a set of interrelated commits.  The word "commit"
is often used by Git in the same places other revision control systems use
the words "revision" or "version".  Also used as a short hand for
commit object (@pxref{[def_commit_object]}).

As a verb: The action of storing a new snapshot of the project’s state in
the Git history, by creating a new commit representing the current state of
the index (@pxref{[def_index]}) and advancing HEAD (@pxref{[def_HEAD]}) to point at the new
commit.

@item  @anchor{[def_commit_object]}commit object 
An object (@pxref{[def_object]}) which contains the information about a particular
revision (@pxref{[def_revision]}), such as parents (@pxref{[def_parent]}), committer,
author, date and the tree object (@pxref{[def_tree_object]}) which corresponds to
the top directory (@pxref{[def_directory]}) of the stored revision.

@item  @anchor{[def_commit-ish]}commit-ish (also committish) 
A commit object (@pxref{[def_commit_object]}) or an object (@pxref{[def_object]}) that can
be recursively dereferenced to a commit object.  The following are all
commit-ishes: a commit object, a tag object (@pxref{[def_tag_object]}) that points
to a commit object, a tag object that points to a tag object that points to
a commit object, etc.

@item  @anchor{[def_core_git]}core Git 
Fundamental data structures and utilities of Git. Exposes only limited
source code management tools.

@item  @anchor{[def_DAG]}DAG 
Directed acyclic graph. The commit objects (@pxref{[def_commit_object]}) form a
directed acyclic graph, because they have parents (directed), and the graph
of commit objects is acyclic (there is no chain (@pxref{[def_chain]}) which begins
and ends with the same object (@pxref{[def_object]})).

@item  @anchor{[def_dangling_object]}dangling object 
An unreachable object (@pxref{[def_unreachable_object]}) which is not
reachable (@pxref{[def_reachable]}) even from other unreachable objects; a dangling
object has no references to it from any reference or object (@pxref{[def_object]})
in the repository (@pxref{[def_repository]}).

@item  @anchor{[def_detached_HEAD]}detached HEAD 
Normally the HEAD (@pxref{[def_HEAD]}) stores the name of a branch (@pxref{[def_branch]}),
and commands that operate on the history HEAD represents operate on the
history leading to the tip of the branch the HEAD points at.  However, Git
also allows you to check out (@pxref{[def_checkout]}) an arbitrary
commit (@pxref{[def_commit]}) that isn’t necessarily the tip of any particular
branch.  The HEAD in such a state is called "detached".

Note that commands that operate on the history of the current branch
(e.g. @samp{git commit} to build a new history on top of it) still work while the
HEAD is detached. They update the HEAD to point at the tip of the updated
history without affecting any branch.  Commands that update or inquire
information @emph{about} the current branch (e.g. @samp{git branch --set-upstream-to}
that sets what remote-tracking branch the current branch integrates with)
obviously do not work, as there is no (real) current branch to ask about in
this state.

@item  @anchor{[def_directory]}directory 
The list you get with "ls" :-)

@item  @anchor{[def_dirty]}dirty 
A working tree (@pxref{[def_working_tree]}) is said to be "dirty" if it contains
modifications which have not been committed (@pxref{[def_commit]}) to the current
branch (@pxref{[def_branch]}).

@item  @anchor{[def_evil_merge]}evil merge 
An evil merge is a merge (@pxref{[def_merge]}) that introduces changes that do not
appear in any parent (@pxref{[def_parent]}).

@item  @anchor{[def_fast_forward]}fast-forward 
A fast-forward is a special type of merge (@pxref{[def_merge]}) where you have a
revision (@pxref{[def_revision]}) and you are "merging" another
branch (@pxref{[def_branch]})'s changes that happen to be a descendant of what you
have. In such a case, you do not make a new merge (@pxref{[def_merge]})
commit (@pxref{[def_commit]}) but instead just update your branch to point at the
same revision as the branch you are merging. This will happen frequently on
a remote-tracking branch (@pxref{[def_remote_tracking_branch]}) of a remote
repository (@pxref{[def_repository]}).

@item  @anchor{[def_fetch]}fetch 
Fetching a branch (@pxref{[def_branch]}) means to get the branch’s
head ref (@pxref{[def_head_ref]}) from a remote repository (@pxref{[def_repository]}), to
find out which objects are missing from the local
object database (@pxref{[def_object_database]}), and to get them, too.  See also
@uref{git-fetch.html,git-fetch(1)}.

@item  @anchor{[def_file_system]}file system 
Linus Torvalds originally designed Git to be a user space file system,
i.e. the infrastructure to hold files and directories. That ensured the
efficiency and speed of Git.

@item  @anchor{[def_git_archive]}Git archive 
Synonym for repository (@pxref{[def_repository]}) (for arch people).

@item  @anchor{[def_gitfile]}gitfile 
A plain file @samp{.git} at the root of a working tree that points at the
directory that is the real repository.

@item  @anchor{[def_grafts]}grafts 
Grafts enables two otherwise different lines of development to be joined
together by recording fake ancestry information for commits. This way you
can make Git pretend the set of parents (@pxref{[def_parent]}) a
commit (@pxref{[def_commit]}) has is different from what was recorded when the
commit was created. Configured via the @samp{.git/info/grafts} file.

Note that the grafts mechanism is outdated and can lead to problems
transferring objects between repositories; see @uref{git-replace.html,git-replace(1)} for a
more flexible and robust system to do the same thing.

@item  @anchor{[def_hash]}hash 
In Git’s context, synonym for object name (@pxref{[def_object_name]}).

@item  @anchor{[def_head]}head 
A named reference (@pxref{[def_ref]}) to the commit (@pxref{[def_commit]}) at the tip of a
branch (@pxref{[def_branch]}).  Heads are stored in a file in @samp{$GIT_DIR/refs/heads/}
directory, except when using packed refs. (See @uref{git-pack-refs.html,git-pack-refs(1)}.)

@item  @anchor{[def_HEAD]}HEAD 
The current branch (@pxref{[def_branch]}).  In more detail: Your working tree (@pxref{[def_working_tree]}) is normally derived from the state of the tree referred to by
HEAD.  HEAD is a reference to one of the heads (@pxref{[def_head]}) in your
repository, except when using a detached HEAD (@pxref{[def_detached_HEAD]}), in
which case it directly references an arbitrary commit.

@item  @anchor{[def_head_ref]}head ref 
A synonym for head (@pxref{[def_head]}).

@item  @anchor{[def_hook]}hook 
During the normal execution of several Git commands, call-outs are made to
optional scripts that allow a developer to add functionality or
checking. Typically, the hooks allow for a command to be pre-verified and
potentially aborted, and allow for a post-notification after the operation
is done. The hook scripts are found in the @samp{$GIT_DIR/hooks/} directory, and
are enabled by simply removing the @samp{.sample} suffix from the filename. In
earlier versions of Git you had to make them executable.

@item  @anchor{[def_index]}index 
A collection of files with stat information, whose contents are stored as
objects. The index is a stored version of your working         tree (@pxref{[def_working_tree]}). Truth be told, it can also contain a second, and even a third
version of a working tree, which are used when merging (@pxref{[def_merge]}).

@item  @anchor{[def_index_entry]}index entry 
The information regarding a particular file, stored in the
index (@pxref{[def_index]}). An index entry can be unmerged, if a
merge (@pxref{[def_merge]}) was started, but not yet finished (i.e. if the index
contains multiple versions of that file).

@item  @anchor{[def_master]}master 
The default development branch (@pxref{[def_branch]}). Whenever you create a Git
repository (@pxref{[def_repository]}), a branch named "master" is created, and
becomes the active branch. In most cases, this contains the local
development, though that is purely by convention and is not required.

@item  @anchor{[def_merge]}merge 
As a verb: To bring the contents of another branch (@pxref{[def_branch]}) (possibly
from an external repository (@pxref{[def_repository]})) into the current branch.  In
the case where the merged-in branch is from a different repository, this is
done by first fetching (@pxref{[def_fetch]}) the remote branch and then merging the
result into the current branch.  This combination of fetch and merge
operations is called a pull (@pxref{[def_pull]}).  Merging is performed by an
automatic process that identifies changes made since the branches diverged,
and then applies all those changes together.  In cases where changes
conflict, manual intervention may be required to complete the merge.

As a noun: unless it is a fast-forward (@pxref{[def_fast_forward]}), a successful
merge results in the creation of a new commit (@pxref{[def_commit]}) representing
the result of the merge, and having as parents (@pxref{[def_parent]}) the tips of
the merged branches (@pxref{[def_branch]}).  This commit is referred to as a "merge
commit", or sometimes just a "merge".

@item  @anchor{[def_object]}object 
The unit of storage in Git. It is uniquely identified by the
SHA-1 (@pxref{[def_SHA1]}) of its contents. Consequently, an object cannot be
changed.

@item  @anchor{[def_object_database]}object database 
Stores a set of "objects", and an individual object (@pxref{[def_object]}) is
identified by its object name (@pxref{[def_object_name]}). The objects usually live
in @samp{$GIT_DIR/objects/}.

@item  @anchor{[def_object_identifier]}object identifier 
Synonym for object name (@pxref{[def_object_name]}).

@item  @anchor{[def_object_name]}object name 
The unique identifier of an object (@pxref{[def_object]}).  The object name is
usually represented by a 40 character hexadecimal string.  Also colloquially
called SHA-1 (@pxref{[def_SHA1]}).

@item  @anchor{[def_object_type]}object type 
One of the identifiers "commit (@pxref{[def_commit_object]})",
"tree (@pxref{[def_tree_object]})", "tag (@pxref{[def_tag_object]})" or
"blob (@pxref{[def_blob_object]})" describing the type of an object (@pxref{[def_object]}).

@item  @anchor{[def_octopus]}octopus 
To merge (@pxref{[def_merge]}) more than two branches (@pxref{[def_branch]}).

@item  @anchor{[def_origin]}origin 
The default upstream repository (@pxref{[def_repository]}). Most projects have at
least one upstream project which they track. By default @emph{origin} is used for
that purpose. New upstream updates will be fetched into
remote-tracking branches (@pxref{[def_remote_tracking_branch]}) named
origin/name-of-upstream-branch, which you can see using @samp{git branch -r}.

@item  @anchor{[def_overlay]}overlay 
Only update and add files to the working directory, but don’t delete them,
similar to how @emph{cp -R} would update the contents in the destination
directory.  This is the default mode in a checkout (@pxref{[def_checkout]}) when
checking out files from the index (@pxref{[def_index]}) or a
tree-ish (@pxref{[def_tree-ish]}).  In contrast, no-overlay mode also deletes
tracked files not present in the source, similar to @emph{rsync --delete}.

@item  @anchor{[def_pack]}pack 
A set of objects which have been compressed into one file (to save space or
to transmit them efficiently).

@item  @anchor{[def_pack_index]}pack index 
The list of identifiers, and other information, of the objects in a
pack (@pxref{[def_pack]}), to assist in efficiently accessing the contents of a
pack.

@item  @anchor{[def_pathspec]}pathspec 
Gitコマンドでパスを制限するために使用されるパターン。

pathspecsは、「git ls-files」、「git ls-tree」、「git add」、「git grep」、「git diff」、「git
checkout」、および、ツリーまたはワークツリーのサブセットへの操作の為にスコープを制限する他の多くのコマンドのコマンドラインで使用されます。パスが現在のディレクトリまたはトップレベルのどちらを基準にしているかについては、各コマンドのドキュメントを参照してください。
pathspecの構文は以下のとおりです:

@itemize 

@item
どのパスもそれ自体と一致します

@item
最後がスラッシュであるpathspecは、ディレクトリプレフィックスを表します。そのpathspecのスコープは、そのサブツリーに制限されています。

@item
pathspecの残りの部分は、pathnameの残りの部分のパターンです。 ディレクトリプレフィックスに関連するパスは、 fnmatch(3)
を使用してそのパターンと照合されます。特に、 @emph{*} と @emph{?} はディレクトリ区切り文字と一致させる事ができます。
@end itemize

たとえば、 @samp{Documentation/*.jpg} は、 @samp{Documentation/chapter_1/figure_1.jpg}
を含む、Documentationサブツリー内のすべての @samp{.jpg} ファイルと一致します。

コロン(@samp{:})で始まるpathspecには特別な意味があります。短い形式では、先頭のコロン(@samp{:})の後に0個以上の「魔法記号」(magic
signature)(オプションで別のコロン(@samp{:})で終了)が続き、残りはパスと照合するパターンです。「魔法記号」は、英数字、グロブ、正規表現の特殊文字でもコロンでもないASCII記号で構成されます。パターンが「魔法記号」シンボルセットに属さず、コロンではない文字で始まる場合、「魔法記号」を終了するオプションのコロンは省略できます。

長い形式では、先頭のコロン(@samp{:})の後に開き括弧(@samp{(}) 、0個以上の「魔法単語」(magic
words)のコンマ区切りリスト、および閉じ括弧(@samp{)}) が続き、残りは次のパターンです。パスと一致します。

コロンのみのpathspecは、「pathspecがない」ことを意味します。 この形式は、他のpathspecと組み合わせないでください。

@table @asis

@item  top 
魔法単語 @samp{top} (魔法記号: @samp{/})は、サブディレクトリ内からコマンドを実行している場合でも、作業ツリーのルートからパターンを一致させます。

@item  literal 
@samp{*} または @samp{?} などのパターンのワイルドカードはリテラル文字として扱われます。

@item  icase 
(英文字の)大文字小文字区別せずにマッチ

@item  glob 
Gitはパターンを、 FNM_PATHNAMEフラグを指定した fnmatch(3)
に消費されるのに適したシェルグロブとして扱います。パターン内のワイルドカードは、パス名内の / と一致しません。
たとえば、「Documentation/*.html」は「Documentation/git.html」と一致しますが、「Documentation/ppc/ppc.html」または「tools/perf/Documentation/perf.html」とは一致しません。

フルパス名と一致するパターンの2つの連続するアスタリスク @samp{**} は、特別な意味を持つ場合があります:

@itemize 

@item
先頭の @samp{**} の後にスラッシュが続く場合は、すべてのディレクトリで一致することを意味します。たとえば、 @samp{**/foo} は、パターン @samp{foo}
と同じように、ファイルまたはディレクトリ @samp{foo} のどこにでも一致します。 @samp{**/foo/bar} は、ディレクトリ @samp{foo}
の直下にあるファイルまたはディレクトリ @samp{bar} と一致します。

@item
末尾の @samp{/**} は、内部のすべてに一致します(matches everything inside)。たとえば、 @samp{abc/**} は、
@samp{.gitignore} ファイルの場所を基準にして、ディレクトリ "abc" 内のすべてのファイルと無限の深さで一致します。

@item
スラッシュの後に2つの連続するアスタリスクが続く場合、スラッシュは0個以上のディレクトリに一致します。 たとえば、 @samp{a/**/b} は @samp{a/b} 、
@samp{a/x/b} 、@samp{a/x/y/b} などと一致します。

@item
他の連続するアスタリスクは無効と見なされます。

グロブ魔法はリテラル魔法と互換性がありません。
@end itemize

@item  attr 
@samp{attr:} の後には、スペースで区切られた「属性要件」(attribute
requirements)のリストがあります。パスが一致すると見なされるには、これらすべてを満たす必要があります。これは、通常の非魔法pathspecパターンマッチングに追加されます。
@uref{gitattributes.html,gitattributes(5)} 参照。

パスの各属性要件は、以下のいずれかの形式を取ります:

@itemize 

@item
@samp{ATTR} では、属性 @samp{ATTR} を設定する必要があります。

@item
@samp{-ATTR} では、属性 @samp{ATTR} が設定されていない必要があります。

@item
@samp{ATTR = VALUE} では、属性 @samp{ATTR} を文字列 @samp{VALUE} に設定する必要があります。

@item
@samp{!ATTR} では、属性 @samp{ATTR} が指定されていない必要があります。

注意: ツリーオブジェクトと照合する場合、属性は、指定されたツリーオブジェクトからではなく、作業ツリーから取得されることに注意してください。
@end itemize

@item  exclude 
パスが非除外パススペックと一致すると、すべての除外パススペック(魔法記号: @samp{!} またはその同義語
@samp{^})が実行されます。一致する場合、パスは無視されます。非除外パススペックがない場合、パススペックなしで呼び出されたかのように、除外が結果セットに適用されます。
@end table

@item  @anchor{[def_parent]}parent 
A commit object (@pxref{[def_commit_object]}) contains a (possibly empty) list of
the logical predecessor(s) in the line of development, i.e. its parents.

@item  @anchor{[def_pickaxe]}pickaxe 
The term pickaxe (@pxref{[def_pickaxe]}) refers to an option to the diffcore
routines that help select changes that add or delete a given text
string. With the @samp{--pickaxe-all} option, it can be used to view the full
changeset (@pxref{[def_changeset]}) that introduced or removed, say, a particular
line of text. See @uref{git-diff.html,git-diff(1)}.

@item  @anchor{[def_plumbing]}plumbing 
Cute name for core Git (@pxref{[def_core_git]}).

@item  @anchor{[def_porcelain]}porcelain 
Cute name for programs and program suites depending on core         Git (@pxref{[def_core_git]}), presenting a high level access to core Git. Porcelains expose more of
a SCM (@pxref{[def_SCM]}) interface than the plumbing (@pxref{[def_plumbing]}).

@item  @anchor{[def_per_worktree_ref]}per-worktree ref 
Refs that are per-worktree (@pxref{[def_working_tree]}), rather than global.  This
is presently only HEAD (@pxref{[def_HEAD]}) and any refs that start with
@samp{refs/bisect/}, but might later include other unusual refs.

@item  @anchor{[def_pseudoref]}pseudoref 
Pseudorefs are a class of files under @samp{$GIT_DIR} which behave like refs for
the purposes of rev-parse, but which are treated specially by git.
Pseudorefs both have names that are all-caps, and always start with a line
consisting of a SHA-1 (@pxref{[def_SHA1]}) followed by whitespace.  So, HEAD is not
a pseudoref, because it is sometimes a symbolic ref.  They might optionally
contain some additional data.  @samp{MERGE_HEAD} and @samp{CHERRY_PICK_HEAD} are
examples.  Unlike per-worktree refs (@pxref{[def_per_worktree_ref]}), these files
cannot be symbolic refs, and never have reflogs.  They also cannot be
updated through the normal ref update machinery.  Instead, they are updated
by directly writing to the files.  However, they can be read as if they were
refs, so @samp{git rev-parse MERGE_HEAD} will work.

@item  @anchor{[def_pull]}pull 
Pulling a branch (@pxref{[def_branch]}) means to fetch (@pxref{[def_fetch]}) it and
merge (@pxref{[def_merge]}) it.  See also @uref{git-pull.html,git-pull(1)}.

@item  @anchor{[def_push]}push 
Pushing a branch (@pxref{[def_branch]}) means to get the branch’s
head ref (@pxref{[def_head_ref]}) from a remote repository (@pxref{[def_repository]}), find
out if it is an ancestor to the branch’s local head ref, and in that case,
putting all objects, which are reachable (@pxref{[def_reachable]}) from the local
head ref, and which are missing from the remote repository, into the remote
object database (@pxref{[def_object_database]}), and updating the remote head
ref. If the remote head (@pxref{[def_head]}) is not an ancestor to the local head,
the push fails.

@item  @anchor{[def_reachable]}reachable 
All of the ancestors of a given commit (@pxref{[def_commit]}) are said to be
"reachable" from that commit. More generally, one object (@pxref{[def_object]}) is
reachable from another if we can reach the one from the other by a
chain (@pxref{[def_chain]}) that follows tags (@pxref{[def_tag]}) to whatever they tag,
commits (@pxref{[def_commit_object]}) to their parents or trees, and
trees (@pxref{[def_tree_object]}) to the trees or blobs (@pxref{[def_blob_object]}) that
they contain.

@item  @anchor{[def_rebase]}rebase 
To reapply a series of changes from a branch (@pxref{[def_branch]}) to a different
base, and reset the head (@pxref{[def_head]}) of that branch to the result.

@item  @anchor{[def_ref]}ref 
A name that begins with @samp{refs/} (e.g. @samp{refs/heads/master})  that points to
an object name (@pxref{[def_object_name]}) or another ref (the latter is called a
symbolic ref (@pxref{[def_symref]})).  For convenience, a ref can sometimes be
abbreviated when used as an argument to a Git command; see
@uref{gitrevisions.html,gitrevisions(7)} for details.  Refs are stored in the
repository (@pxref{[def_repository]}).

The ref namespace is hierarchical.  Different subhierarchies are used for
different purposes (e.g. the @samp{refs/heads/} hierarchy is used to represent
local branches).

There are a few special-purpose refs that do not begin with @samp{refs/}.  The
most notable example is @samp{HEAD}.

@item  @anchor{[def_reflog]}reflog 
A reflog shows the local "history" of a ref.  In other words, it can tell
you what the 3rd last revision in @emph{this} repository was, and what was the
current state in @emph{this} repository, yesterday 9:14pm.  See
@uref{git-reflog.html,git-reflog(1)} for details.

@item  @anchor{[def_refspec]}refspec 
A "refspec" is used by fetch (@pxref{[def_fetch]}) and push (@pxref{[def_push]}) to describe
the mapping between remote ref (@pxref{[def_ref]}) and local ref.

@item  @anchor{[def_remote]}remote repository 
A repository (@pxref{[def_repository]}) which is used to track the same project but
resides somewhere else. To communicate with remotes, see fetch (@pxref{[def_fetch]})
or push (@pxref{[def_push]}).

@item  @anchor{[def_remote_tracking_branch]}remote-tracking branch 
A ref (@pxref{[def_ref]}) that is used to follow changes from another
repository (@pxref{[def_repository]}). It typically looks like
@emph{refs/remotes/foo/bar} (indicating that it tracks a branch named @emph{bar} in a
remote named @emph{foo}), and matches the right-hand-side of a configured fetch
refspec (@pxref{[def_refspec]}). A remote-tracking branch should not contain direct
modifications or have local commits made to it.

@item  @anchor{[def_repository]}repository 
A collection of refs (@pxref{[def_ref]}) together with an
object database (@pxref{[def_object_database]}) containing all objects which are
reachable (@pxref{[def_reachable]}) from the refs, possibly accompanied by meta data
from one or more porcelains (@pxref{[def_porcelain]}). A repository can share an
object database with other repositories via
alternates mechanism (@pxref{[def_alternate_object_database]}).

@item  @anchor{[def_resolve]}resolve 
The action of fixing up manually what a failed automatic merge (@pxref{[def_merge]})
left behind.

@item  @anchor{[def_revision]}revision 
Synonym for commit (@pxref{[def_commit]}) (the noun).

@item  @anchor{[def_rewind]}rewind 
To throw away part of the development, i.e. to assign the head (@pxref{[def_head]})
to an earlier revision (@pxref{[def_revision]}).

@item  @anchor{[def_SCM]}SCM 
Source code management (tool).

@item  @anchor{[def_SHA1]}SHA-1 
"Secure Hash Algorithm 1"; a cryptographic hash function.  In the context of
Git used as a synonym for object name (@pxref{[def_object_name]}).

@item  @anchor{[def_shallow_clone]}shallow clone 
Mostly a synonym to shallow repository (@pxref{[def_shallow_repository]}) but the
phrase makes it more explicit that it was created by running @samp{git clone
--depth=...} command.

@item  @anchor{[def_shallow_repository]}shallow repository 
A shallow repository (@pxref{[def_repository]}) has an incomplete history some of
whose commits (@pxref{[def_commit]}) have parents (@pxref{[def_parent]}) cauterized away (in
other words, Git is told to pretend that these commits do not have the
parents, even though they are recorded in the commit         object (@pxref{[def_commit_object]})). This is sometimes useful when you are interested only in the
recent history of a project even though the real history recorded in the
upstream is much larger. A shallow repository is created by giving the
@samp{--depth} option to @uref{git-clone.html,git-clone(1)}, and its history can be later
deepened with @uref{git-fetch.html,git-fetch(1)}.

@item  @anchor{[def_stash]}stash entry 
An object (@pxref{[def_object]}) used to temporarily store the contents of a
dirty (@pxref{[def_dirty]}) working directory and the index for future reuse.

@item  @anchor{[def_submodule]}submodule 
A repository (@pxref{[def_repository]}) that holds the history of a separate project
inside another repository (the latter of which is called superproject (@pxref{[def_superproject]})).

@item  @anchor{[def_superproject]}superproject 
A repository (@pxref{[def_repository]}) that references repositories of other
projects in its working tree as submodules (@pxref{[def_submodule]}).  The
superproject knows about the names of (but does not hold copies of) commit
objects of the contained submodules.

@item  @anchor{[def_symref]}symref 
Symbolic reference: instead of containing the SHA-1 (@pxref{[def_SHA1]}) id itself,
it is of the format @emph{ref: refs/some/thing} and when referenced, it
recursively dereferences to this reference.  @emph{HEAD (@pxref{[def_HEAD]})} is a prime
example of a symref. Symbolic references are manipulated with the
@uref{git-symbolic-ref.html,git-symbolic-ref(1)} command.

@item  @anchor{[def_tag]}tag 
A ref (@pxref{[def_ref]}) under @samp{refs/tags/} namespace that points to an object of
an arbitrary type (typically a tag points to either a tag (@pxref{[def_tag_object]})
or a commit object (@pxref{[def_commit_object]})).  In contrast to a
head (@pxref{[def_head]}), a tag is not updated by the @samp{commit} command. A Git tag
has nothing to do with a Lisp tag (which would be called an
object type (@pxref{[def_object_type]}) in Git’s context). A tag is most typically
used to mark a particular point in the commit ancestry chain (@pxref{[def_chain]}).

@item  @anchor{[def_tag_object]}tag object 
An object (@pxref{[def_object]}) containing a ref (@pxref{[def_ref]}) pointing to another
object, which can contain a message just like a commit         object (@pxref{[def_commit_object]}). It can also contain a (PGP)  signature, in which case it is called
a "signed tag object".

@item  @anchor{[def_topic_branch]}topic branch 
A regular Git branch (@pxref{[def_branch]}) that is used by a developer to identify
a conceptual line of development. Since branches are very easy and
inexpensive, it is often desirable to have several small branches that each
contain very well defined concepts or small incremental yet related changes.

@item  @anchor{[def_tree]}tree 
Either a working tree (@pxref{[def_working_tree]}), or a tree         object (@pxref{[def_tree_object]}) together with the dependent blob (@pxref{[def_blob_object]}) and tree
objects (i.e. a stored representation of a working tree).

@item  @anchor{[def_tree_object]}tree object 
An object (@pxref{[def_object]}) containing a list of file names and modes along
with refs to the associated blob and/or tree objects. A tree (@pxref{[def_tree]}) is
equivalent to a directory (@pxref{[def_directory]}).

@item  @anchor{[def_tree-ish]}tree-ish (also treeish) 
A tree object (@pxref{[def_tree_object]}) or an object (@pxref{[def_object]}) that can be
recursively dereferenced to a tree object.  Dereferencing a
commit object (@pxref{[def_commit_object]}) yields the tree object corresponding to
the revision (@pxref{[def_revision]})'s top directory (@pxref{[def_directory]}).  The
following are all tree-ishes: a commit-ish (@pxref{[def_commit-ish]}), a tree
object, a tag object (@pxref{[def_tag_object]}) that points to a tree object, a tag
object that points to a tag object that points to a tree object, etc.

@item  @anchor{[def_unmerged_index]}unmerged index 
An index (@pxref{[def_index]}) which contains unmerged index         entries (@pxref{[def_index_entry]}).

@item  @anchor{[def_unreachable_object]}unreachable object 
An object (@pxref{[def_object]}) which is not reachable (@pxref{[def_reachable]}) from a
branch (@pxref{[def_branch]}), tag (@pxref{[def_tag]}), or any other reference.

@item  @anchor{[def_upstream_branch]}upstream branch 
The default branch (@pxref{[def_branch]}) that is merged into the branch in question
(or the branch in question is rebased onto). It is configured via
branch.<name>.remote and branch.<name>.merge. If the upstream branch of @emph{A}
is @emph{origin/B} sometimes we say "@emph{A} is tracking @emph{origin/B}".

@item  @anchor{[def_working_tree]}working tree 
The tree of actual checked out files.  The working tree normally contains
the contents of the HEAD (@pxref{[def_HEAD]}) commit’s tree, plus any local changes
that you have made but not yet committed.
@end table

@node Git Quick Reference, Notes and todo list for this manual, Git Glossary, Top
@appendix Git Quick Reference

This is a quick summary of the major commands; the previous chapters explain
how these work in more detail.

@menu
* Creating a new repository: Creating a new repository <1>.
* Managing branches::
* Exploring history::
* Making changes::
* Merging::
* Sharing your changes::
* Repository maintenance::
@end menu

@node Creating a new repository <1>, Managing branches, , Git Quick Reference
@section Creating a new repository

From a tarball:

@example
$ tar xzf project.tar.gz
$ cd project
$ git init
Initialized empty Git repository in .git/
$ git add .
$ git commit
@end example

From a remote repository:

@example
$ git clone git://example.com/pub/project.git
$ cd project
@end example

@node Managing branches, Exploring history, Creating a new repository <1>, Git Quick Reference
@section Managing branches

@example
$ git branch                    # list all local branches in this repo
$ git switch test               # switch working directory to branch "test"
$ git branch new                # create branch "new" starting at current HEAD
$ git branch -d new             # delete branch "new"
@end example

Instead of basing a new branch on current HEAD (the default), use:

@example
$ git branch new test    # branch named "test"
$ git branch new v2.6.15 # tag named v2.6.15
$ git branch new HEAD^   # commit before the most recent
$ git branch new HEAD^^  # commit before that
$ git branch new test~10 # ten commits before tip of branch "test"
@end example

Create and switch to a new branch at the same time:

@example
$ git switch -c new v2.6.15
@end example

Update and examine branches from the repository you cloned from:

@example
$ git fetch             # update
$ git branch -r         # list
  origin/master
  origin/next
  ...
$ git switch -c masterwork origin/master
@end example

Fetch a branch from a different repository, and give it a new name in your
repository:

@example
$ git fetch git://example.com/project.git theirbranch:mybranch
$ git fetch git://example.com/project.git v2.6.15:mybranch
@end example

Keep a list of repositories you work with regularly:

@example
$ git remote add example git://example.com/project.git
$ git remote                    # list remote repositories
example
origin
$ git remote show example       # get details
* remote example
  URL: git://example.com/project.git
  Tracked remote branches
    master
    next
    ...
$ git fetch example             # update branches from example
$ git branch -r                 # list all remote branches
@end example

@node Exploring history, Making changes, Managing branches, Git Quick Reference
@section Exploring history

@example
$ gitk                      # visualize and browse history
$ git log                   # list all commits
$ git log src/              # ...modifying src/
$ git log v2.6.15..v2.6.16  # ...in v2.6.16, not in v2.6.15
$ git log master..test      # ...in branch test, not in branch master
$ git log test..master      # ...in branch master, but not in test
$ git log test...master     # ...in one branch, not in both
$ git log -S'foo()'         # ...where difference contain "foo()"
$ git log --since="2 weeks ago"
$ git log -p                # show patches as well
$ git show                  # most recent commit
$ git diff v2.6.15..v2.6.16 # diff between two tagged versions
$ git diff v2.6.15..HEAD    # diff with current head
$ git grep "foo()"          # search working directory for "foo()"
$ git grep v2.6.15 "foo()"  # search old tree for "foo()"
$ git show v2.6.15:a.txt    # look at old version of a.txt
@end example

Search for regressions:

@example
$ git bisect start
$ git bisect bad                # current version is bad
$ git bisect good v2.6.13-rc2   # last known good revision
Bisecting: 675 revisions left to test after this
                                # test here, then:
$ git bisect good               # if this revision is good, or
$ git bisect bad                # if this revision is bad.
                                # repeat until done.
@end example

@node Making changes, Merging, Exploring history, Git Quick Reference
@section Making changes

Make sure Git knows who to blame:

@example
$ cat >>~/.gitconfig <<\EOF
[user]
        name = Your Name Comes Here
        email = you@@yourdomain.example.com
EOF
@end example

Select file contents to include in the next commit, then make the commit:

@example
$ git add a.txt    # updated file
$ git add b.txt    # new file
$ git rm c.txt     # old file
$ git commit
@end example

Or, prepare and create the commit in one step:

@example
$ git commit d.txt # use latest content only of d.txt
$ git commit -a    # use latest content of all tracked files
@end example

@node Merging, Sharing your changes, Making changes, Git Quick Reference
@section Merging

@example
$ git merge test   # merge branch "test" into the current branch
$ git pull git://example.com/project.git master
                   # fetch and merge in remote branch
$ git pull . test  # equivalent to git merge test
@end example

@node Sharing your changes, Repository maintenance, Merging, Git Quick Reference
@section Sharing your changes

Importing or exporting patches:

@example
$ git format-patch origin..HEAD # format a patch for each commit
                                # in HEAD but not in origin
$ git am mbox # import patches from the mailbox "mbox"
@end example

Fetch a branch in a different Git repository, then merge into the current
branch:

@example
$ git pull git://example.com/project.git theirbranch
@end example

Store the fetched branch into a local branch before merging into the current
branch:

@example
$ git pull git://example.com/project.git theirbranch:mybranch
@end example

After creating commits on a local branch, update the remote branch with your
commits:

@example
$ git push ssh://example.com/project.git mybranch:theirbranch
@end example

When remote and local branch are both named "test":

@example
$ git push ssh://example.com/project.git test
@end example

Shortcut version for a frequently used remote repository:

@example
$ git remote add example ssh://example.com/project.git
$ git push example test
@end example

@node Repository maintenance, , Sharing your changes, Git Quick Reference
@section Repository maintenance

Check for corruption:

@example
$ git fsck
@end example

Recompress, remove unused cruft:

@example
$ git gc
@end example

@node Notes and todo list for this manual, , Git Quick Reference, Top
@appendix Notes and todo list for this manual

@menu
* Todo list::
@end menu

@node Todo list, , , Notes and todo list for this manual
@section Todo list

This is a work in progress.

The basic requirements:

@itemize 

@item
It must be readable in order, from beginning to end, by someone intelligent
with a basic grasp of the UNIX command line, but without any special
knowledge of Git.  If necessary, any other prerequisites should be
specifically mentioned as they arise.

@item
Whenever possible, section headings should clearly describe the task they
explain how to do, in language that requires no more knowledge than
necessary: for example, "importing patches into a project" rather than "the
@samp{git am} command"
@end itemize

Think about how to create a clear chapter dependency graph that will allow
people to get to important topics without necessarily reading everything in
between.

Scan @samp{Documentation/} for other stuff left out; in particular:

@itemize 

@item
howto’s

@item
some of @samp{technical/}?

@item
hooks

@item
list of commands in @uref{git.html,git(1)}
@end itemize

Scan email archives for other stuff left out

Scan man pages to see if any assume more background than this manual
provides.

Add more good examples.  Entire sections of just cookbook examples might be
a good idea; maybe make an "advanced examples" section a standard
end-of-chapter section?

Include cross-references to the glossary, where appropriate.

Add a section on working with other version control systems, including CVS,
Subversion, and just imports of series of release tarballs.

Write a chapter on using plumbing and writing scripts.

Alternates, clone -reference, etc.

More on recovery from repository corruption.  See:
@uref{https://lore.kernel.org/git/Pine.LNX.4.64.0702272039540.12485@@woody.linux-foundation.org/,https://lore.kernel.org/git/Pine.LNX.4.64.0702272039540.12485@@woody.linux-foundation.org/}
@uref{https://lore.kernel.org/git/Pine.LNX.4.64.0702141033400.3604@@woody.linux-foundation.org/,https://lore.kernel.org/git/Pine.LNX.4.64.0702141033400.3604@@woody.linux-foundation.org/}

@bye
